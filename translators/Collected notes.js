{
	"translatorID": "e7859c61-54d4-466a-b236-aadcf1f7e83b",
	"label": "Collected notes",
	"description": "exports your notes",
	"creator": "Emiliano heyns",
	"target": "html",
	"displayOptions": {
		"markdown": false
	},
	"minVersion": "4.0.27",
	"maxVersion": "",
	"translatorType": 2,
	"browserSupport": "gcsv",
	"inRepository": false,
	"configOptions": {
		"getCollections": true,
		"hash": "e5d5c949c1224e4e2354c97a3026b8aa2b788521b00c887463625e7809ade074"
	},
	"priority": 100,
	"lastUpdated": "2022-03-30"
}

ZOTERO_CONFIG = {"GUID":"zotero@chnm.gmu.edu","ID":"zotero","CLIENT_NAME":"Zotero","DOMAIN_NAME":"zotero.org","PRODUCER":"Digital Scholar","PRODUCER_URL":"https://digitalscholar.org","REPOSITORY_URL":"https://repo.zotero.org/repo/","BASE_URI":"http://zotero.org/","WWW_BASE_URL":"https://www.zotero.org/","PROXY_AUTH_URL":"https://zoteroproxycheck.s3.amazonaws.com/test","API_URL":"https://api.zotero.org/","STREAMING_URL":"wss://stream.zotero.org/","SERVICES_URL":"https://services.zotero.org/","API_VERSION":3,"CONNECTOR_MIN_VERSION":"5.0.39","PREF_BRANCH":"extensions.zotero.","BOOKMARKLET_ORIGIN":"https://www.zotero.org","BOOKMARKLET_URL":"https://www.zotero.org/bookmarklet/","START_URL":"https://www.zotero.org/start","QUICK_START_URL":"https://www.zotero.org/support/quick_start_guide","PDF_TOOLS_URL":"https://www.zotero.org/download/xpdf/","SUPPORT_URL":"https://www.zotero.org/support/","SYNC_INFO_URL":"https://www.zotero.org/support/sync","TROUBLESHOOTING_URL":"https://www.zotero.org/support/getting_help","FEEDBACK_URL":"https://forums.zotero.org/","CONNECTORS_URL":"https://www.zotero.org/download/connectors","CHANGELOG_URL":"https://www.zotero.org/support/changelog","CREDITS_URL":"https://www.zotero.org/support/credits_and_acknowledgments","LICENSING_URL":"https://www.zotero.org/support/licensing","GET_INVOLVED_URL":"https://www.zotero.org/getinvolved","DICTIONARIES_URL":"https://download.zotero.org/dictionaries/"}
if (typeof ZOTERO_TRANSLATOR_INFO === 'undefined') var ZOTERO_TRANSLATOR_INFO = {"translatorID":"e7859c61-54d4-466a-b236-aadcf1f7e83b","label":"Collected notes","description":"exports your notes","creator":"Emiliano heyns","target":"html","displayOptions":{"markdown":false},"minVersion":"4.0.27","maxVersion":"","translatorType":2,"browserSupport":"gcsv","inRepository":false,"configOptions":{"getCollections":true},"priority":100};
var Collectednotes__Translator__doExport = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/process/browser.js"(exports, module) {
      init_globals();
      var process2 = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process2.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process2.title = "browser";
      process2.browser = true;
      process2.env = {};
      process2.argv = [];
      process2.version = "";
      process2.versions = {};
      function noop() {
      }
      process2.on = noop;
      process2.addListener = noop;
      process2.once = noop;
      process2.off = noop;
      process2.removeListener = noop;
      process2.removeAllListeners = noop;
      process2.emit = noop;
      process2.prependListener = noop;
      process2.prependOnceListener = noop;
      process2.listeners = function(name) {
        return [];
      };
      process2.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process2.cwd = function() {
        return "/";
      };
      process2.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process2.umask = function() {
        return 0;
      };
    }
  });

  // setup/loaders/globals.js
  var process, global;
  var init_globals = __esm({
    "setup/loaders/globals.js"() {
      process = require_browser();
      global = Function("return this")();
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
  var require_pattern_in_scope = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js"(exports, module) {
      init_globals();
      module.exports = patternInScope;
      function patternInScope(stack, pattern) {
        return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct);
      }
      function listInScope(stack, list, none) {
        var index;
        if (!list) {
          return none;
        }
        if (typeof list === "string") {
          list = [list];
        }
        index = -1;
        while (++index < list.length) {
          if (stack.indexOf(list[index]) !== -1) {
            return true;
          }
        }
        return false;
      }
    }
  });

  // node_modules/@inkdropapp/html2markdown/lib/hard-break.js
  var require_hard_break = __commonJS({
    "node_modules/@inkdropapp/html2markdown/lib/hard-break.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = hardBreak;
      exports.default = _default;
      var patternInScope = require_pattern_in_scope();
      function hardBreak(node, _, context, safe) {
        var index = -1;
        while (++index < context.unsafe.length) {
          if (context.unsafe[index].character === "\n" && patternInScope(context.stack, context.unsafe[index])) {
            return /[ \t]/.test(safe.before) ? "" : " ";
          }
        }
        return "  \n";
      }
    }
  });

  // node_modules/hast-util-has-property/index.js
  var require_hast_util_has_property = __commonJS({
    "node_modules/hast-util-has-property/index.js"(exports, module) {
      init_globals();
      var own = {}.hasOwnProperty;
      module.exports = hasProperty;
      function hasProperty(node, name) {
        var props;
        var value;
        if (!node || !name || typeof node !== "object" || node.type !== "element") {
          return false;
        }
        props = node.properties;
        value = props && own.call(props, name) && props[name];
        return value !== null && value !== void 0 && value !== false;
      }
    }
  });

  // node_modules/hast-util-is-element/convert.js
  var require_convert = __commonJS({
    "node_modules/hast-util-is-element/convert.js"(exports, module) {
      init_globals();
      module.exports = convert;
      function convert(test) {
        if (typeof test === "string") {
          return tagNameFactory(test);
        }
        if (test === null || test === void 0) {
          return element;
        }
        if (typeof test === "object") {
          return any(test);
        }
        if (typeof test === "function") {
          return callFactory(test);
        }
        throw new Error("Expected function, string, or array as test");
      }
      function convertAll(tests) {
        var length = tests.length;
        var index = -1;
        var results = [];
        while (++index < length) {
          results[index] = convert(tests[index]);
        }
        return results;
      }
      function any(tests) {
        var checks = convertAll(tests);
        var length = checks.length;
        return matches;
        function matches() {
          var index = -1;
          while (++index < length) {
            if (checks[index].apply(this, arguments)) {
              return true;
            }
          }
          return false;
        }
      }
      function tagNameFactory(test) {
        return tagName;
        function tagName(node) {
          return element(node) && node.tagName === test;
        }
      }
      function callFactory(test) {
        return call;
        function call(node) {
          return element(node) && Boolean(test.apply(this, arguments));
        }
      }
      function element(node) {
        return node && typeof node === "object" && node.type === "element" && typeof node.tagName === "string";
      }
    }
  });

  // node_modules/repeat-string/index.js
  var require_repeat_string = __commonJS({
    "node_modules/repeat-string/index.js"(exports, module) {
      init_globals();
      var res = "";
      var cache;
      module.exports = repeat;
      function repeat(str, num) {
        if (typeof str !== "string") {
          throw new TypeError("expected a string");
        }
        if (num === 1)
          return str;
        if (num === 2)
          return str + str;
        var max = str.length * num;
        if (cache !== str || typeof cache === "undefined") {
          cache = str;
          res = "";
        } else if (res.length >= max) {
          return res.substr(0, max);
        }
        while (max > res.length && num > 1) {
          if (num & 1) {
            res += str;
          }
          num >>= 1;
          str += str;
        }
        res += str;
        res = res.substr(0, max);
        return res;
      }
    }
  });

  // node_modules/unist-util-is/convert.js
  var require_convert2 = __commonJS({
    "node_modules/unist-util-is/convert.js"(exports, module) {
      init_globals();
      module.exports = convert;
      function convert(test) {
        if (test == null) {
          return ok;
        }
        if (typeof test === "string") {
          return typeFactory(test);
        }
        if (typeof test === "object") {
          return "length" in test ? anyFactory(test) : allFactory(test);
        }
        if (typeof test === "function") {
          return test;
        }
        throw new Error("Expected function, string, or object as test");
      }
      function allFactory(test) {
        return all;
        function all(node) {
          var key;
          for (key in test) {
            if (node[key] !== test[key])
              return false;
          }
          return true;
        }
      }
      function anyFactory(tests) {
        var checks = [];
        var index = -1;
        while (++index < tests.length) {
          checks[index] = convert(tests[index]);
        }
        return any;
        function any() {
          var index2 = -1;
          while (++index2 < checks.length) {
            if (checks[index2].apply(this, arguments)) {
              return true;
            }
          }
          return false;
        }
      }
      function typeFactory(test) {
        return type2;
        function type2(node) {
          return Boolean(node && node.type === test);
        }
      }
      function ok() {
        return true;
      }
    }
  });

  // node_modules/unist-util-find-after/index.js
  var require_unist_util_find_after = __commonJS({
    "node_modules/unist-util-find-after/index.js"(exports, module) {
      init_globals();
      var convert = require_convert2();
      module.exports = findAfter;
      function findAfter(parent, index, test) {
        var is = convert(test);
        var children;
        var child;
        var length;
        if (!parent || !parent.type || !parent.children) {
          throw new Error("Expected parent node");
        }
        children = parent.children;
        length = children.length;
        if (index && index.type) {
          index = children.indexOf(index);
        }
        if (isNaN(index) || index < 0 || index === Infinity) {
          throw new Error("Expected positive finite index or child node");
        }
        while (++index < length) {
          child = children[index];
          if (is(child, index, parent)) {
            return child;
          }
        }
        return null;
      }
    }
  });

  // node_modules/hast-util-to-text/index.js
  var require_hast_util_to_text = __commonJS({
    "node_modules/hast-util-to-text/index.js"(exports, module) {
      init_globals();
      var repeat = require_repeat_string();
      var convert = require_convert();
      var findAfter = require_unist_util_find_after();
      module.exports = toText;
      var searchLineFeeds = /\n/g;
      var searchTabOrSpaces = /[\t ]+/g;
      var br = convert("br");
      var p = convert("p");
      var cell = convert(["th", "td"]);
      var row = convert("tr");
      var notRendered = convert([
        "datalist",
        "head",
        "noembed",
        "noframes",
        "rp",
        "script",
        "style",
        "template",
        "title",
        "noscript",
        hidden,
        closedDialog
      ]);
      var blockOrCaption = convert([
        "caption",
        "html",
        "body",
        "address",
        "blockquote",
        "center",
        "dialog",
        "div",
        "figure",
        "figcaption",
        "footer",
        "form,",
        "header",
        "hr",
        "legend",
        "listing",
        "main",
        "p",
        "plaintext",
        "pre",
        "xmp",
        "article",
        "aside",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "hgroup",
        "nav",
        "section",
        "dir",
        "dd",
        "dl",
        "dt",
        "menu",
        "ol",
        "ul"
      ]);
      function toText(node) {
        var children = node.children || [];
        var block = blockOrCaption(node);
        var whiteSpace = inferWhiteSpace(node, {});
        var index = -1;
        var results;
        var result;
        var value;
        var count;
        if (node.type === "text" || node.type === "comment") {
          return collectText(node, {
            whiteSpace,
            breakBefore: true,
            breakAfter: true
          });
        }
        results = [];
        while (++index < children.length) {
          results = results.concat(innerTextCollection(children[index], index, node, {
            whiteSpace,
            breakBefore: index ? null : block,
            breakAfter: index < children.length - 1 ? br(children[index + 1]) : block
          }));
        }
        index = -1;
        result = [];
        while (++index < results.length) {
          value = results[index];
          if (typeof value === "number") {
            if (count !== void 0 && value > count)
              count = value;
          } else if (value) {
            if (count)
              result.push(repeat("\n", count));
            count = 0;
            result.push(value);
          }
        }
        return result.join("");
      }
      function innerTextCollection(node, index, parent, options) {
        if (node.type === "element") {
          return collectElement(node, index, parent, options);
        }
        if (node.type === "text") {
          return [
            options.whiteSpace === "normal" ? collectText(node, options) : collectPreText(node, options)
          ];
        }
        return [];
      }
      function collectElement(node, _, parent, options) {
        var whiteSpace = inferWhiteSpace(node, options);
        var children = node.children || [];
        var index = -1;
        var items = [];
        var prefix;
        var suffix;
        if (notRendered(node)) {
          return items;
        }
        if (br(node)) {
          suffix = "\n";
        } else if (row(node) && findAfter(parent, node, row)) {
          suffix = "\n";
        } else if (p(node)) {
          prefix = 2;
          suffix = 2;
        } else if (blockOrCaption(node)) {
          prefix = 1;
          suffix = 1;
        }
        while (++index < children.length) {
          items = items.concat(innerTextCollection(children[index], index, node, {
            whiteSpace,
            breakBefore: index ? null : prefix,
            breakAfter: index < children.length - 1 ? br(children[index + 1]) : suffix
          }));
        }
        if (cell(node) && findAfter(parent, node, cell)) {
          items.push("	");
        }
        if (prefix)
          items.unshift(prefix);
        if (suffix)
          items.push(suffix);
        return items;
      }
      function collectText(node, options) {
        var value = String(node.value);
        var lines = [];
        var result = [];
        var start = 0;
        var index = -1;
        var match;
        var end;
        var join;
        while (start < value.length) {
          searchLineFeeds.lastIndex = start;
          match = searchLineFeeds.exec(value);
          end = match ? match.index : value.length;
          lines.push(trimAndcollapseSpacesAndTabs(value.slice(start, end).replace(/[\u061c\u200e\u200f\u202a-\u202e\u2066-\u2069]/g, ""), options.breakBefore, options.breakAfter));
          start = end + 1;
        }
        while (++index < lines.length) {
          if (lines[index].charCodeAt(lines[index].length - 1) === 8203 || index < lines.length - 1 && lines[index + 1].charCodeAt(0) === 8203) {
            result.push(lines[index]);
            join = "";
          } else if (lines[index]) {
            if (join)
              result.push(join);
            result.push(lines[index]);
            join = " ";
          }
        }
        return result.join("");
      }
      function collectPreText(node) {
        return String(node.value);
      }
      function trimAndcollapseSpacesAndTabs(value, breakBefore, breakAfter) {
        var result = [];
        var start = 0;
        var match;
        var end;
        while (start < value.length) {
          searchTabOrSpaces.lastIndex = start;
          match = searchTabOrSpaces.exec(value);
          end = match ? match.index : value.length;
          if (!start && !end && match && !breakBefore) {
            result.push("");
          }
          if (start !== end) {
            result.push(value.slice(start, end));
          }
          start = match ? end + match[0].length : end;
        }
        if (start !== end && !breakAfter) {
          result.push("");
        }
        return result.join(" ");
      }
      function inferWhiteSpace(node, options) {
        var props = node.properties || {};
        var inherit = options.whiteSpace || "normal";
        switch (node.tagName) {
          case "listing":
          case "plaintext":
          case "xmp":
            return "pre";
          case "nobr":
            return "nowrap";
          case "pre":
            return props.wrap ? "pre-wrap" : "pre";
          case "td":
          case "th":
            return props.noWrap ? "nowrap" : inherit;
          case "textarea":
            return "pre-wrap";
          default:
            return inherit;
        }
      }
      function hidden(node) {
        return (node.properties || {}).hidden;
      }
      function closedDialog(node) {
        return node.tagName === "dialog" && !(node.properties || {}).open;
      }
    }
  });

  // node_modules/trim-trailing-lines/index.js
  var require_trim_trailing_lines = __commonJS({
    "node_modules/trim-trailing-lines/index.js"(exports, module) {
      init_globals();
      module.exports = trimTrailingLines;
      function trimTrailingLines(value) {
        return String(value).replace(/\n+$/, "");
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/wrap-text.js
  var require_wrap_text = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/wrap-text.js"(exports, module) {
      init_globals();
      module.exports = wrapText;
      function wrapText(h, value) {
        return h.wrapText ? value : value.replace(/\r?\n|\r/g, " ");
      }
    }
  });

  // node_modules/@inkdropapp/html2markdown/lib/to-mdast-code-block.js
  var require_to_mdast_code_block = __commonJS({
    "node_modules/@inkdropapp/html2markdown/lib/to-mdast-code-block.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = code2;
      exports.default = _default;
      var has = require_hast_util_has_property();
      var convert = require_convert();
      var toText = require_hast_util_to_text();
      var trim = require_trim_trailing_lines();
      var wrapText = require_wrap_text();
      var prefixes = ["language-", "lang-", "highlight-source-"];
      var isPre = convert("pre");
      var isCode = convert("code");
      function code2(h, node, parent) {
        var children = node.children;
        var index = -1;
        var classList = [];
        var lang;
        if (isPre(node)) {
          lang = node.properties.lang || null;
          classList = [...parent.properties.className || [], ...node.properties.className || []];
          while (++index < children.length) {
            if (isCode(children[index]) && has(children[index], "className")) {
              classList = classList.concat(children[index].properties.className);
              break;
            }
          }
        }
        if (classList) {
          index = -1;
          while (++index < classList.length) {
            if (lang)
              break;
            for (const prefix of prefixes) {
              if (classList[index].slice(0, prefix.length) === prefix) {
                lang = classList[index].slice(prefix.length);
                break;
              }
            }
          }
        }
        return h(node, "code", {
          lang: lang || null,
          meta: null
        }, trim(wrapText(h, toText(node))));
      }
    }
  });

  // node_modules/@inkdropapp/html2markdown/lib/to-mdast-comment.js
  var require_to_mdast_comment = __commonJS({
    "node_modules/@inkdropapp/html2markdown/lib/to-mdast-comment.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = comment;
      module.exports = comment;
      function comment(_h, _node) {
        return void 0;
      }
    }
  });

  // node_modules/bail/index.js
  var require_bail = __commonJS({
    "node_modules/bail/index.js"(exports, module) {
      init_globals();
      module.exports = bail;
      function bail(err) {
        if (err) {
          throw err;
        }
      }
    }
  });

  // node_modules/unified/node_modules/is-buffer/index.js
  var require_is_buffer = __commonJS({
    "node_modules/unified/node_modules/is-buffer/index.js"(exports, module) {
      init_globals();
      module.exports = function isBuffer(obj) {
        return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      };
    }
  });

  // node_modules/extend/index.js
  var require_extend = __commonJS({
    "node_modules/extend/index.js"(exports, module) {
      init_globals();
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var defineProperty = Object.defineProperty;
      var gOPD = Object.getOwnPropertyDescriptor;
      var isArray = function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      };
      var isPlainObject = function isPlainObject2(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      };
      var setProperty = function setProperty2(target, options) {
        if (defineProperty && options.name === "__proto__") {
          defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
          });
        } else {
          target[options.name] = options.newValue;
        }
      };
      var getProperty = function getProperty2(obj, name) {
        if (name === "__proto__") {
          if (!hasOwn.call(obj, name)) {
            return void 0;
          } else if (gOPD) {
            return gOPD(obj, name).value;
          }
        }
        return obj[name];
      };
      module.exports = function extend() {
        var options, name, src, copy, copyIsArray, clone;
        var target = arguments[0];
        var i = 1;
        var length = arguments.length;
        var deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i = 2;
        }
        if (target == null || typeof target !== "object" && typeof target !== "function") {
          target = {};
        }
        for (; i < length; ++i) {
          options = arguments[i];
          if (options != null) {
            for (name in options) {
              src = getProperty(target, name);
              copy = getProperty(options, name);
              if (target !== copy) {
                if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && isArray(src) ? src : [];
                  } else {
                    clone = src && isPlainObject(src) ? src : {};
                  }
                  setProperty(target, { name, newValue: extend(deep, clone, copy) });
                } else if (typeof copy !== "undefined") {
                  setProperty(target, { name, newValue: copy });
                }
              }
            }
          }
        }
        return target;
      };
    }
  });

  // node_modules/unified/node_modules/is-plain-obj/index.js
  var require_is_plain_obj = __commonJS({
    "node_modules/unified/node_modules/is-plain-obj/index.js"(exports, module) {
      init_globals();
      module.exports = (value) => {
        if (Object.prototype.toString.call(value) !== "[object Object]") {
          return false;
        }
        const prototype = Object.getPrototypeOf(value);
        return prototype === null || prototype === Object.prototype;
      };
    }
  });

  // node_modules/trough/wrap.js
  var require_wrap = __commonJS({
    "node_modules/trough/wrap.js"(exports, module) {
      init_globals();
      var slice = [].slice;
      module.exports = wrap;
      function wrap(fn, callback) {
        var invoked;
        return wrapped;
        function wrapped() {
          var params = slice.call(arguments, 0);
          var callback2 = fn.length > params.length;
          var result;
          if (callback2) {
            params.push(done);
          }
          try {
            result = fn.apply(null, params);
          } catch (error) {
            if (callback2 && invoked) {
              throw error;
            }
            return done(error);
          }
          if (!callback2) {
            if (result && typeof result.then === "function") {
              result.then(then, done);
            } else if (result instanceof Error) {
              done(result);
            } else {
              then(result);
            }
          }
        }
        function done() {
          if (!invoked) {
            invoked = true;
            callback.apply(null, arguments);
          }
        }
        function then(value) {
          done(null, value);
        }
      }
    }
  });

  // node_modules/trough/index.js
  var require_trough = __commonJS({
    "node_modules/trough/index.js"(exports, module) {
      init_globals();
      var wrap = require_wrap();
      module.exports = trough;
      trough.wrap = wrap;
      var slice = [].slice;
      function trough() {
        var fns = [];
        var middleware = {};
        middleware.run = run;
        middleware.use = use;
        return middleware;
        function run() {
          var index = -1;
          var input = slice.call(arguments, 0, -1);
          var done = arguments[arguments.length - 1];
          if (typeof done !== "function") {
            throw new Error("Expected function as last argument, not " + done);
          }
          next.apply(null, [null].concat(input));
          function next(err) {
            var fn = fns[++index];
            var params = slice.call(arguments, 0);
            var values = params.slice(1);
            var length = input.length;
            var pos = -1;
            if (err) {
              done(err);
              return;
            }
            while (++pos < length) {
              if (values[pos] === null || values[pos] === void 0) {
                values[pos] = input[pos];
              }
            }
            input = values;
            if (fn) {
              wrap(fn, next).apply(null, input);
            } else {
              done.apply(null, [null].concat(input));
            }
          }
        }
        function use(fn) {
          if (typeof fn !== "function") {
            throw new Error("Expected `fn` to be a function, not " + fn);
          }
          fns.push(fn);
          return middleware;
        }
      }
    }
  });

  // node_modules/vfile/node_modules/unist-util-stringify-position/index.js
  var require_unist_util_stringify_position = __commonJS({
    "node_modules/vfile/node_modules/unist-util-stringify-position/index.js"(exports, module) {
      init_globals();
      var own = {}.hasOwnProperty;
      module.exports = stringify2;
      function stringify2(value) {
        if (!value || typeof value !== "object") {
          return "";
        }
        if (own.call(value, "position") || own.call(value, "type")) {
          return position(value.position);
        }
        if (own.call(value, "start") || own.call(value, "end")) {
          return position(value);
        }
        if (own.call(value, "line") || own.call(value, "column")) {
          return point(value);
        }
        return "";
      }
      function point(point2) {
        if (!point2 || typeof point2 !== "object") {
          point2 = {};
        }
        return index(point2.line) + ":" + index(point2.column);
      }
      function position(pos) {
        if (!pos || typeof pos !== "object") {
          pos = {};
        }
        return point(pos.start) + "-" + point(pos.end);
      }
      function index(value) {
        return value && typeof value === "number" ? value : 1;
      }
    }
  });

  // node_modules/vfile/node_modules/vfile-message/index.js
  var require_vfile_message = __commonJS({
    "node_modules/vfile/node_modules/vfile-message/index.js"(exports, module) {
      init_globals();
      var stringify2 = require_unist_util_stringify_position();
      module.exports = VMessage;
      function VMessagePrototype() {
      }
      VMessagePrototype.prototype = Error.prototype;
      VMessage.prototype = new VMessagePrototype();
      var proto = VMessage.prototype;
      proto.file = "";
      proto.name = "";
      proto.reason = "";
      proto.message = "";
      proto.stack = "";
      proto.fatal = null;
      proto.column = null;
      proto.line = null;
      function VMessage(reason, position, origin) {
        var parts;
        var range;
        var location;
        if (typeof position === "string") {
          origin = position;
          position = null;
        }
        parts = parseOrigin(origin);
        range = stringify2(position) || "1:1";
        location = {
          start: { line: null, column: null },
          end: { line: null, column: null }
        };
        if (position && position.position) {
          position = position.position;
        }
        if (position) {
          if (position.start) {
            location = position;
            position = position.start;
          } else {
            location.start = position;
          }
        }
        if (reason.stack) {
          this.stack = reason.stack;
          reason = reason.message;
        }
        this.message = reason;
        this.name = range;
        this.reason = reason;
        this.line = position ? position.line : null;
        this.column = position ? position.column : null;
        this.location = location;
        this.source = parts[0];
        this.ruleId = parts[1];
      }
      function parseOrigin(origin) {
        var result = [null, null];
        var index;
        if (typeof origin === "string") {
          index = origin.indexOf(":");
          if (index === -1) {
            result[1] = origin;
          } else {
            result[0] = origin.slice(0, index);
            result[1] = origin.slice(index + 1);
          }
        }
        return result;
      }
    }
  });

  // node_modules/vfile/lib/minpath.browser.js
  var require_minpath_browser = __commonJS({
    "node_modules/vfile/lib/minpath.browser.js"(exports) {
      init_globals();
      exports.basename = basename;
      exports.dirname = dirname;
      exports.extname = extname;
      exports.join = join;
      exports.sep = "/";
      function basename(path, ext) {
        var start = 0;
        var end = -1;
        var index;
        var firstNonSlashEnd;
        var seenNonSlash;
        var extIndex;
        if (ext !== void 0 && typeof ext !== "string") {
          throw new TypeError('"ext" argument must be a string');
        }
        assertPath(path);
        index = path.length;
        if (ext === void 0 || !ext.length || ext.length > path.length) {
          while (index--) {
            if (path.charCodeAt(index) === 47) {
              if (seenNonSlash) {
                start = index + 1;
                break;
              }
            } else if (end < 0) {
              seenNonSlash = true;
              end = index + 1;
            }
          }
          return end < 0 ? "" : path.slice(start, end);
        }
        if (ext === path) {
          return "";
        }
        firstNonSlashEnd = -1;
        extIndex = ext.length - 1;
        while (index--) {
          if (path.charCodeAt(index) === 47) {
            if (seenNonSlash) {
              start = index + 1;
              break;
            }
          } else {
            if (firstNonSlashEnd < 0) {
              seenNonSlash = true;
              firstNonSlashEnd = index + 1;
            }
            if (extIndex > -1) {
              if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {
                if (extIndex < 0) {
                  end = index;
                }
              } else {
                extIndex = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }
        if (start === end) {
          end = firstNonSlashEnd;
        } else if (end < 0) {
          end = path.length;
        }
        return path.slice(start, end);
      }
      function dirname(path) {
        var end;
        var unmatchedSlash;
        var index;
        assertPath(path);
        if (!path.length) {
          return ".";
        }
        end = -1;
        index = path.length;
        while (--index) {
          if (path.charCodeAt(index) === 47) {
            if (unmatchedSlash) {
              end = index;
              break;
            }
          } else if (!unmatchedSlash) {
            unmatchedSlash = true;
          }
        }
        return end < 0 ? path.charCodeAt(0) === 47 ? "/" : "." : end === 1 && path.charCodeAt(0) === 47 ? "//" : path.slice(0, end);
      }
      function extname(path) {
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var preDotState = 0;
        var unmatchedSlash;
        var code2;
        var index;
        assertPath(path);
        index = path.length;
        while (index--) {
          code2 = path.charCodeAt(index);
          if (code2 === 47) {
            if (unmatchedSlash) {
              startPart = index + 1;
              break;
            }
            continue;
          }
          if (end < 0) {
            unmatchedSlash = true;
            end = index + 1;
          }
          if (code2 === 46) {
            if (startDot < 0) {
              startDot = index;
            } else if (preDotState !== 1) {
              preDotState = 1;
            }
          } else if (startDot > -1) {
            preDotState = -1;
          }
        }
        if (startDot < 0 || end < 0 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          return "";
        }
        return path.slice(startDot, end);
      }
      function join() {
        var index = -1;
        var joined;
        while (++index < arguments.length) {
          assertPath(arguments[index]);
          if (arguments[index]) {
            joined = joined === void 0 ? arguments[index] : joined + "/" + arguments[index];
          }
        }
        return joined === void 0 ? "." : normalize(joined);
      }
      function normalize(path) {
        var absolute;
        var value;
        assertPath(path);
        absolute = path.charCodeAt(0) === 47;
        value = normalizeString(path, !absolute);
        if (!value.length && !absolute) {
          value = ".";
        }
        if (value.length && path.charCodeAt(path.length - 1) === 47) {
          value += "/";
        }
        return absolute ? "/" + value : value;
      }
      function normalizeString(path, allowAboveRoot) {
        var result = "";
        var lastSegmentLength = 0;
        var lastSlash = -1;
        var dots = 0;
        var index = -1;
        var code2;
        var lastSlashIndex;
        while (++index <= path.length) {
          if (index < path.length) {
            code2 = path.charCodeAt(index);
          } else if (code2 === 47) {
            break;
          } else {
            code2 = 47;
          }
          if (code2 === 47) {
            if (lastSlash === index - 1 || dots === 1) {
            } else if (lastSlash !== index - 1 && dots === 2) {
              if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
                if (result.length > 2) {
                  lastSlashIndex = result.lastIndexOf("/");
                  if (lastSlashIndex !== result.length - 1) {
                    if (lastSlashIndex < 0) {
                      result = "";
                      lastSegmentLength = 0;
                    } else {
                      result = result.slice(0, lastSlashIndex);
                      lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                    }
                    lastSlash = index;
                    dots = 0;
                    continue;
                  }
                } else if (result.length) {
                  result = "";
                  lastSegmentLength = 0;
                  lastSlash = index;
                  dots = 0;
                  continue;
                }
              }
              if (allowAboveRoot) {
                result = result.length ? result + "/.." : "..";
                lastSegmentLength = 2;
              }
            } else {
              if (result.length) {
                result += "/" + path.slice(lastSlash + 1, index);
              } else {
                result = path.slice(lastSlash + 1, index);
              }
              lastSegmentLength = index - lastSlash - 1;
            }
            lastSlash = index;
            dots = 0;
          } else if (code2 === 46 && dots > -1) {
            dots++;
          } else {
            dots = -1;
          }
        }
        return result;
      }
      function assertPath(path) {
        if (typeof path !== "string") {
          throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
        }
      }
    }
  });

  // node_modules/vfile/lib/minproc.browser.js
  var require_minproc_browser = __commonJS({
    "node_modules/vfile/lib/minproc.browser.js"(exports) {
      init_globals();
      exports.cwd = cwd;
      function cwd() {
        return "/";
      }
    }
  });

  // node_modules/vfile/node_modules/is-buffer/index.js
  var require_is_buffer2 = __commonJS({
    "node_modules/vfile/node_modules/is-buffer/index.js"(exports, module) {
      init_globals();
      module.exports = function isBuffer(obj) {
        return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      };
    }
  });

  // node_modules/vfile/lib/core.js
  var require_core = __commonJS({
    "node_modules/vfile/lib/core.js"(exports, module) {
      init_globals();
      var p = require_minpath_browser();
      var proc = require_minproc_browser();
      var buffer = require_is_buffer2();
      module.exports = VFile;
      var own = {}.hasOwnProperty;
      var order = ["history", "path", "basename", "stem", "extname", "dirname"];
      VFile.prototype.toString = toString;
      Object.defineProperty(VFile.prototype, "path", { get: getPath, set: setPath });
      Object.defineProperty(VFile.prototype, "dirname", {
        get: getDirname,
        set: setDirname
      });
      Object.defineProperty(VFile.prototype, "basename", {
        get: getBasename,
        set: setBasename
      });
      Object.defineProperty(VFile.prototype, "extname", {
        get: getExtname,
        set: setExtname
      });
      Object.defineProperty(VFile.prototype, "stem", { get: getStem, set: setStem });
      function VFile(options) {
        var prop;
        var index;
        if (!options) {
          options = {};
        } else if (typeof options === "string" || buffer(options)) {
          options = { contents: options };
        } else if ("message" in options && "messages" in options) {
          return options;
        }
        if (!(this instanceof VFile)) {
          return new VFile(options);
        }
        this.data = {};
        this.messages = [];
        this.history = [];
        this.cwd = proc.cwd();
        index = -1;
        while (++index < order.length) {
          prop = order[index];
          if (own.call(options, prop)) {
            this[prop] = options[prop];
          }
        }
        for (prop in options) {
          if (order.indexOf(prop) < 0) {
            this[prop] = options[prop];
          }
        }
      }
      function getPath() {
        return this.history[this.history.length - 1];
      }
      function setPath(path) {
        assertNonEmpty(path, "path");
        if (this.path !== path) {
          this.history.push(path);
        }
      }
      function getDirname() {
        return typeof this.path === "string" ? p.dirname(this.path) : void 0;
      }
      function setDirname(dirname) {
        assertPath(this.path, "dirname");
        this.path = p.join(dirname || "", this.basename);
      }
      function getBasename() {
        return typeof this.path === "string" ? p.basename(this.path) : void 0;
      }
      function setBasename(basename) {
        assertNonEmpty(basename, "basename");
        assertPart(basename, "basename");
        this.path = p.join(this.dirname || "", basename);
      }
      function getExtname() {
        return typeof this.path === "string" ? p.extname(this.path) : void 0;
      }
      function setExtname(extname) {
        assertPart(extname, "extname");
        assertPath(this.path, "extname");
        if (extname) {
          if (extname.charCodeAt(0) !== 46) {
            throw new Error("`extname` must start with `.`");
          }
          if (extname.indexOf(".", 1) > -1) {
            throw new Error("`extname` cannot contain multiple dots");
          }
        }
        this.path = p.join(this.dirname, this.stem + (extname || ""));
      }
      function getStem() {
        return typeof this.path === "string" ? p.basename(this.path, this.extname) : void 0;
      }
      function setStem(stem) {
        assertNonEmpty(stem, "stem");
        assertPart(stem, "stem");
        this.path = p.join(this.dirname || "", stem + (this.extname || ""));
      }
      function toString(encoding) {
        return (this.contents || "").toString(encoding);
      }
      function assertPart(part, name) {
        if (part && part.indexOf(p.sep) > -1) {
          throw new Error("`" + name + "` cannot be a path: did not expect `" + p.sep + "`");
        }
      }
      function assertNonEmpty(part, name) {
        if (!part) {
          throw new Error("`" + name + "` cannot be empty");
        }
      }
      function assertPath(path, name) {
        if (!path) {
          throw new Error("Setting `" + name + "` requires `path` to be set too");
        }
      }
    }
  });

  // node_modules/vfile/lib/index.js
  var require_lib = __commonJS({
    "node_modules/vfile/lib/index.js"(exports, module) {
      init_globals();
      var VMessage = require_vfile_message();
      var VFile = require_core();
      module.exports = VFile;
      VFile.prototype.message = message;
      VFile.prototype.info = info;
      VFile.prototype.fail = fail;
      function message(reason, position, origin) {
        var message2 = new VMessage(reason, position, origin);
        if (this.path) {
          message2.name = this.path + ":" + message2.name;
          message2.file = this.path;
        }
        message2.fatal = false;
        this.messages.push(message2);
        return message2;
      }
      function fail() {
        var message2 = this.message.apply(this, arguments);
        message2.fatal = true;
        throw message2;
      }
      function info() {
        var message2 = this.message.apply(this, arguments);
        message2.fatal = null;
        return message2;
      }
    }
  });

  // node_modules/vfile/index.js
  var require_vfile = __commonJS({
    "node_modules/vfile/index.js"(exports, module) {
      init_globals();
      module.exports = require_lib();
    }
  });

  // node_modules/unified/index.js
  var require_unified = __commonJS({
    "node_modules/unified/index.js"(exports, module) {
      init_globals();
      var bail = require_bail();
      var buffer = require_is_buffer();
      var extend = require_extend();
      var plain = require_is_plain_obj();
      var trough = require_trough();
      var vfile = require_vfile();
      module.exports = unified().freeze();
      var slice = [].slice;
      var own = {}.hasOwnProperty;
      var pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);
      function pipelineParse(p, ctx) {
        ctx.tree = p.parse(ctx.file);
      }
      function pipelineRun(p, ctx, next) {
        p.run(ctx.tree, ctx.file, done);
        function done(error, tree, file) {
          if (error) {
            next(error);
          } else {
            ctx.tree = tree;
            ctx.file = file;
            next();
          }
        }
      }
      function pipelineStringify(p, ctx) {
        var result = p.stringify(ctx.tree, ctx.file);
        if (result === void 0 || result === null) {
        } else if (typeof result === "string" || buffer(result)) {
          if ("value" in ctx.file) {
            ctx.file.value = result;
          }
          ctx.file.contents = result;
        } else {
          ctx.file.result = result;
        }
      }
      function unified() {
        var attachers = [];
        var transformers = trough();
        var namespace = {};
        var freezeIndex = -1;
        var frozen;
        processor.data = data;
        processor.freeze = freeze;
        processor.attachers = attachers;
        processor.use = use;
        processor.parse = parse;
        processor.stringify = stringify2;
        processor.run = run;
        processor.runSync = runSync;
        processor.process = process2;
        processor.processSync = processSync;
        return processor;
        function processor() {
          var destination = unified();
          var index = -1;
          while (++index < attachers.length) {
            destination.use.apply(null, attachers[index]);
          }
          destination.data(extend(true, {}, namespace));
          return destination;
        }
        function freeze() {
          var values;
          var transformer;
          if (frozen) {
            return processor;
          }
          while (++freezeIndex < attachers.length) {
            values = attachers[freezeIndex];
            if (values[1] === false) {
              continue;
            }
            if (values[1] === true) {
              values[1] = void 0;
            }
            transformer = values[0].apply(processor, values.slice(1));
            if (typeof transformer === "function") {
              transformers.use(transformer);
            }
          }
          frozen = true;
          freezeIndex = Infinity;
          return processor;
        }
        function data(key, value) {
          if (typeof key === "string") {
            if (arguments.length === 2) {
              assertUnfrozen("data", frozen);
              namespace[key] = value;
              return processor;
            }
            return own.call(namespace, key) && namespace[key] || null;
          }
          if (key) {
            assertUnfrozen("data", frozen);
            namespace = key;
            return processor;
          }
          return namespace;
        }
        function use(value) {
          var settings;
          assertUnfrozen("use", frozen);
          if (value === null || value === void 0) {
          } else if (typeof value === "function") {
            addPlugin.apply(null, arguments);
          } else if (typeof value === "object") {
            if ("length" in value) {
              addList(value);
            } else {
              addPreset(value);
            }
          } else {
            throw new Error("Expected usable value, not `" + value + "`");
          }
          if (settings) {
            namespace.settings = extend(namespace.settings || {}, settings);
          }
          return processor;
          function addPreset(result) {
            addList(result.plugins);
            if (result.settings) {
              settings = extend(settings || {}, result.settings);
            }
          }
          function add(value2) {
            if (typeof value2 === "function") {
              addPlugin(value2);
            } else if (typeof value2 === "object") {
              if ("length" in value2) {
                addPlugin.apply(null, value2);
              } else {
                addPreset(value2);
              }
            } else {
              throw new Error("Expected usable value, not `" + value2 + "`");
            }
          }
          function addList(plugins) {
            var index = -1;
            if (plugins === null || plugins === void 0) {
            } else if (typeof plugins === "object" && "length" in plugins) {
              while (++index < plugins.length) {
                add(plugins[index]);
              }
            } else {
              throw new Error("Expected a list of plugins, not `" + plugins + "`");
            }
          }
          function addPlugin(plugin, value2) {
            var entry = find(plugin);
            if (entry) {
              if (plain(entry[1]) && plain(value2)) {
                value2 = extend(true, entry[1], value2);
              }
              entry[1] = value2;
            } else {
              attachers.push(slice.call(arguments));
            }
          }
        }
        function find(plugin) {
          var index = -1;
          while (++index < attachers.length) {
            if (attachers[index][0] === plugin) {
              return attachers[index];
            }
          }
        }
        function parse(doc) {
          var file = vfile(doc);
          var Parser;
          freeze();
          Parser = processor.Parser;
          assertParser("parse", Parser);
          if (newable(Parser, "parse")) {
            return new Parser(String(file), file).parse();
          }
          return Parser(String(file), file);
        }
        function run(node, file, cb) {
          assertNode(node);
          freeze();
          if (!cb && typeof file === "function") {
            cb = file;
            file = null;
          }
          if (!cb) {
            return new Promise(executor);
          }
          executor(null, cb);
          function executor(resolve, reject) {
            transformers.run(node, vfile(file), done);
            function done(error, tree, file2) {
              tree = tree || node;
              if (error) {
                reject(error);
              } else if (resolve) {
                resolve(tree);
              } else {
                cb(null, tree, file2);
              }
            }
          }
        }
        function runSync(node, file) {
          var result;
          var complete;
          run(node, file, done);
          assertDone("runSync", "run", complete);
          return result;
          function done(error, tree) {
            complete = true;
            result = tree;
            bail(error);
          }
        }
        function stringify2(node, doc) {
          var file = vfile(doc);
          var Compiler;
          freeze();
          Compiler = processor.Compiler;
          assertCompiler("stringify", Compiler);
          assertNode(node);
          if (newable(Compiler, "compile")) {
            return new Compiler(node, file).compile();
          }
          return Compiler(node, file);
        }
        function process2(doc, cb) {
          freeze();
          assertParser("process", processor.Parser);
          assertCompiler("process", processor.Compiler);
          if (!cb) {
            return new Promise(executor);
          }
          executor(null, cb);
          function executor(resolve, reject) {
            var file = vfile(doc);
            pipeline.run(processor, { file }, done);
            function done(error) {
              if (error) {
                reject(error);
              } else if (resolve) {
                resolve(file);
              } else {
                cb(null, file);
              }
            }
          }
        }
        function processSync(doc) {
          var file;
          var complete;
          freeze();
          assertParser("processSync", processor.Parser);
          assertCompiler("processSync", processor.Compiler);
          file = vfile(doc);
          process2(file, done);
          assertDone("processSync", "process", complete);
          return file;
          function done(error) {
            complete = true;
            bail(error);
          }
        }
      }
      function newable(value, name) {
        return typeof value === "function" && value.prototype && (keys(value.prototype) || name in value.prototype);
      }
      function keys(value) {
        var key;
        for (key in value) {
          return true;
        }
        return false;
      }
      function assertParser(name, Parser) {
        if (typeof Parser !== "function") {
          throw new Error("Cannot `" + name + "` without `Parser`");
        }
      }
      function assertCompiler(name, Compiler) {
        if (typeof Compiler !== "function") {
          throw new Error("Cannot `" + name + "` without `Compiler`");
        }
      }
      function assertUnfrozen(name, frozen) {
        if (frozen) {
          throw new Error("Cannot invoke `" + name + "` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.");
        }
      }
      function assertNode(node) {
        if (!node || typeof node.type !== "string") {
          throw new Error("Expected node, got `" + node + "`");
        }
      }
      function assertDone(name, asyncName, complete) {
        if (!complete) {
          throw new Error("`" + name + "` finished async. Use `" + asyncName + "` instead");
        }
      }
    }
  });

  // node_modules/xtend/immutable.js
  var require_immutable = __commonJS({
    "node_modules/xtend/immutable.js"(exports, module) {
      init_globals();
      module.exports = extend;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function extend() {
        var target = {};
        for (var i = 0; i < arguments.length; i++) {
          var source2 = arguments[i];
          for (var key in source2) {
            if (hasOwnProperty.call(source2, key)) {
              target[key] = source2[key];
            }
          }
        }
        return target;
      }
    }
  });

  // node_modules/property-information/lib/util/schema.js
  var require_schema = __commonJS({
    "node_modules/property-information/lib/util/schema.js"(exports, module) {
      init_globals();
      module.exports = Schema;
      var proto = Schema.prototype;
      proto.space = null;
      proto.normal = {};
      proto.property = {};
      function Schema(property, normal, space) {
        this.property = property;
        this.normal = normal;
        if (space) {
          this.space = space;
        }
      }
    }
  });

  // node_modules/property-information/lib/util/merge.js
  var require_merge = __commonJS({
    "node_modules/property-information/lib/util/merge.js"(exports, module) {
      init_globals();
      var xtend = require_immutable();
      var Schema = require_schema();
      module.exports = merge;
      function merge(definitions) {
        var length = definitions.length;
        var property = [];
        var normal = [];
        var index = -1;
        var info;
        var space;
        while (++index < length) {
          info = definitions[index];
          property.push(info.property);
          normal.push(info.normal);
          space = info.space;
        }
        return new Schema(xtend.apply(null, property), xtend.apply(null, normal), space);
      }
    }
  });

  // node_modules/property-information/normalize.js
  var require_normalize = __commonJS({
    "node_modules/property-information/normalize.js"(exports, module) {
      init_globals();
      module.exports = normalize;
      function normalize(value) {
        return value.toLowerCase();
      }
    }
  });

  // node_modules/property-information/lib/util/info.js
  var require_info = __commonJS({
    "node_modules/property-information/lib/util/info.js"(exports, module) {
      init_globals();
      module.exports = Info;
      var proto = Info.prototype;
      proto.space = null;
      proto.attribute = null;
      proto.property = null;
      proto.boolean = false;
      proto.booleanish = false;
      proto.overloadedBoolean = false;
      proto.number = false;
      proto.commaSeparated = false;
      proto.spaceSeparated = false;
      proto.commaOrSpaceSeparated = false;
      proto.mustUseProperty = false;
      proto.defined = false;
      function Info(property, attribute) {
        this.property = property;
        this.attribute = attribute;
      }
    }
  });

  // node_modules/property-information/lib/util/types.js
  var require_types = __commonJS({
    "node_modules/property-information/lib/util/types.js"(exports) {
      init_globals();
      var powers = 0;
      exports.boolean = increment();
      exports.booleanish = increment();
      exports.overloadedBoolean = increment();
      exports.number = increment();
      exports.spaceSeparated = increment();
      exports.commaSeparated = increment();
      exports.commaOrSpaceSeparated = increment();
      function increment() {
        return Math.pow(2, ++powers);
      }
    }
  });

  // node_modules/property-information/lib/util/defined-info.js
  var require_defined_info = __commonJS({
    "node_modules/property-information/lib/util/defined-info.js"(exports, module) {
      init_globals();
      var Info = require_info();
      var types = require_types();
      module.exports = DefinedInfo;
      DefinedInfo.prototype = new Info();
      DefinedInfo.prototype.defined = true;
      var checks = [
        "boolean",
        "booleanish",
        "overloadedBoolean",
        "number",
        "commaSeparated",
        "spaceSeparated",
        "commaOrSpaceSeparated"
      ];
      var checksLength = checks.length;
      function DefinedInfo(property, attribute, mask, space) {
        var index = -1;
        var check;
        mark(this, "space", space);
        Info.call(this, property, attribute);
        while (++index < checksLength) {
          check = checks[index];
          mark(this, check, (mask & types[check]) === types[check]);
        }
      }
      function mark(values, key, value) {
        if (value) {
          values[key] = value;
        }
      }
    }
  });

  // node_modules/property-information/lib/util/create.js
  var require_create = __commonJS({
    "node_modules/property-information/lib/util/create.js"(exports, module) {
      init_globals();
      var normalize = require_normalize();
      var Schema = require_schema();
      var DefinedInfo = require_defined_info();
      module.exports = create;
      function create(definition) {
        var space = definition.space;
        var mustUseProperty = definition.mustUseProperty || [];
        var attributes = definition.attributes || {};
        var props = definition.properties;
        var transform = definition.transform;
        var property = {};
        var normal = {};
        var prop;
        var info;
        for (prop in props) {
          info = new DefinedInfo(prop, transform(attributes, prop), props[prop], space);
          if (mustUseProperty.indexOf(prop) !== -1) {
            info.mustUseProperty = true;
          }
          property[prop] = info;
          normal[normalize(prop)] = prop;
          normal[normalize(info.attribute)] = prop;
        }
        return new Schema(property, normal, space);
      }
    }
  });

  // node_modules/property-information/lib/xlink.js
  var require_xlink = __commonJS({
    "node_modules/property-information/lib/xlink.js"(exports, module) {
      init_globals();
      var create = require_create();
      module.exports = create({
        space: "xlink",
        transform: xlinkTransform,
        properties: {
          xLinkActuate: null,
          xLinkArcRole: null,
          xLinkHref: null,
          xLinkRole: null,
          xLinkShow: null,
          xLinkTitle: null,
          xLinkType: null
        }
      });
      function xlinkTransform(_, prop) {
        return "xlink:" + prop.slice(5).toLowerCase();
      }
    }
  });

  // node_modules/property-information/lib/xml.js
  var require_xml = __commonJS({
    "node_modules/property-information/lib/xml.js"(exports, module) {
      init_globals();
      var create = require_create();
      module.exports = create({
        space: "xml",
        transform: xmlTransform,
        properties: {
          xmlLang: null,
          xmlBase: null,
          xmlSpace: null
        }
      });
      function xmlTransform(_, prop) {
        return "xml:" + prop.slice(3).toLowerCase();
      }
    }
  });

  // node_modules/property-information/lib/util/case-sensitive-transform.js
  var require_case_sensitive_transform = __commonJS({
    "node_modules/property-information/lib/util/case-sensitive-transform.js"(exports, module) {
      init_globals();
      module.exports = caseSensitiveTransform;
      function caseSensitiveTransform(attributes, attribute) {
        return attribute in attributes ? attributes[attribute] : attribute;
      }
    }
  });

  // node_modules/property-information/lib/util/case-insensitive-transform.js
  var require_case_insensitive_transform = __commonJS({
    "node_modules/property-information/lib/util/case-insensitive-transform.js"(exports, module) {
      init_globals();
      var caseSensitiveTransform = require_case_sensitive_transform();
      module.exports = caseInsensitiveTransform;
      function caseInsensitiveTransform(attributes, property) {
        return caseSensitiveTransform(attributes, property.toLowerCase());
      }
    }
  });

  // node_modules/property-information/lib/xmlns.js
  var require_xmlns = __commonJS({
    "node_modules/property-information/lib/xmlns.js"(exports, module) {
      init_globals();
      var create = require_create();
      var caseInsensitiveTransform = require_case_insensitive_transform();
      module.exports = create({
        space: "xmlns",
        attributes: {
          xmlnsxlink: "xmlns:xlink"
        },
        transform: caseInsensitiveTransform,
        properties: {
          xmlns: null,
          xmlnsXLink: null
        }
      });
    }
  });

  // node_modules/property-information/lib/aria.js
  var require_aria = __commonJS({
    "node_modules/property-information/lib/aria.js"(exports, module) {
      init_globals();
      var types = require_types();
      var create = require_create();
      var booleanish = types.booleanish;
      var number2 = types.number;
      var spaceSeparated = types.spaceSeparated;
      module.exports = create({
        transform: ariaTransform,
        properties: {
          ariaActiveDescendant: null,
          ariaAtomic: booleanish,
          ariaAutoComplete: null,
          ariaBusy: booleanish,
          ariaChecked: booleanish,
          ariaColCount: number2,
          ariaColIndex: number2,
          ariaColSpan: number2,
          ariaControls: spaceSeparated,
          ariaCurrent: null,
          ariaDescribedBy: spaceSeparated,
          ariaDetails: null,
          ariaDisabled: booleanish,
          ariaDropEffect: spaceSeparated,
          ariaErrorMessage: null,
          ariaExpanded: booleanish,
          ariaFlowTo: spaceSeparated,
          ariaGrabbed: booleanish,
          ariaHasPopup: null,
          ariaHidden: booleanish,
          ariaInvalid: null,
          ariaKeyShortcuts: null,
          ariaLabel: null,
          ariaLabelledBy: spaceSeparated,
          ariaLevel: number2,
          ariaLive: null,
          ariaModal: booleanish,
          ariaMultiLine: booleanish,
          ariaMultiSelectable: booleanish,
          ariaOrientation: null,
          ariaOwns: spaceSeparated,
          ariaPlaceholder: null,
          ariaPosInSet: number2,
          ariaPressed: booleanish,
          ariaReadOnly: booleanish,
          ariaRelevant: null,
          ariaRequired: booleanish,
          ariaRoleDescription: spaceSeparated,
          ariaRowCount: number2,
          ariaRowIndex: number2,
          ariaRowSpan: number2,
          ariaSelected: booleanish,
          ariaSetSize: number2,
          ariaSort: null,
          ariaValueMax: number2,
          ariaValueMin: number2,
          ariaValueNow: number2,
          ariaValueText: null,
          role: null
        }
      });
      function ariaTransform(_, prop) {
        return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
      }
    }
  });

  // node_modules/property-information/lib/svg.js
  var require_svg = __commonJS({
    "node_modules/property-information/lib/svg.js"(exports, module) {
      init_globals();
      var types = require_types();
      var create = require_create();
      var caseSensitiveTransform = require_case_sensitive_transform();
      var boolean = types.boolean;
      var number2 = types.number;
      var spaceSeparated = types.spaceSeparated;
      var commaSeparated = types.commaSeparated;
      var commaOrSpaceSeparated = types.commaOrSpaceSeparated;
      module.exports = create({
        space: "svg",
        attributes: {
          accentHeight: "accent-height",
          alignmentBaseline: "alignment-baseline",
          arabicForm: "arabic-form",
          baselineShift: "baseline-shift",
          capHeight: "cap-height",
          className: "class",
          clipPath: "clip-path",
          clipRule: "clip-rule",
          colorInterpolation: "color-interpolation",
          colorInterpolationFilters: "color-interpolation-filters",
          colorProfile: "color-profile",
          colorRendering: "color-rendering",
          crossOrigin: "crossorigin",
          dataType: "datatype",
          dominantBaseline: "dominant-baseline",
          enableBackground: "enable-background",
          fillOpacity: "fill-opacity",
          fillRule: "fill-rule",
          floodColor: "flood-color",
          floodOpacity: "flood-opacity",
          fontFamily: "font-family",
          fontSize: "font-size",
          fontSizeAdjust: "font-size-adjust",
          fontStretch: "font-stretch",
          fontStyle: "font-style",
          fontVariant: "font-variant",
          fontWeight: "font-weight",
          glyphName: "glyph-name",
          glyphOrientationHorizontal: "glyph-orientation-horizontal",
          glyphOrientationVertical: "glyph-orientation-vertical",
          hrefLang: "hreflang",
          horizAdvX: "horiz-adv-x",
          horizOriginX: "horiz-origin-x",
          horizOriginY: "horiz-origin-y",
          imageRendering: "image-rendering",
          letterSpacing: "letter-spacing",
          lightingColor: "lighting-color",
          markerEnd: "marker-end",
          markerMid: "marker-mid",
          markerStart: "marker-start",
          navDown: "nav-down",
          navDownLeft: "nav-down-left",
          navDownRight: "nav-down-right",
          navLeft: "nav-left",
          navNext: "nav-next",
          navPrev: "nav-prev",
          navRight: "nav-right",
          navUp: "nav-up",
          navUpLeft: "nav-up-left",
          navUpRight: "nav-up-right",
          onAbort: "onabort",
          onActivate: "onactivate",
          onAfterPrint: "onafterprint",
          onBeforePrint: "onbeforeprint",
          onBegin: "onbegin",
          onCancel: "oncancel",
          onCanPlay: "oncanplay",
          onCanPlayThrough: "oncanplaythrough",
          onChange: "onchange",
          onClick: "onclick",
          onClose: "onclose",
          onCopy: "oncopy",
          onCueChange: "oncuechange",
          onCut: "oncut",
          onDblClick: "ondblclick",
          onDrag: "ondrag",
          onDragEnd: "ondragend",
          onDragEnter: "ondragenter",
          onDragExit: "ondragexit",
          onDragLeave: "ondragleave",
          onDragOver: "ondragover",
          onDragStart: "ondragstart",
          onDrop: "ondrop",
          onDurationChange: "ondurationchange",
          onEmptied: "onemptied",
          onEnd: "onend",
          onEnded: "onended",
          onError: "onerror",
          onFocus: "onfocus",
          onFocusIn: "onfocusin",
          onFocusOut: "onfocusout",
          onHashChange: "onhashchange",
          onInput: "oninput",
          onInvalid: "oninvalid",
          onKeyDown: "onkeydown",
          onKeyPress: "onkeypress",
          onKeyUp: "onkeyup",
          onLoad: "onload",
          onLoadedData: "onloadeddata",
          onLoadedMetadata: "onloadedmetadata",
          onLoadStart: "onloadstart",
          onMessage: "onmessage",
          onMouseDown: "onmousedown",
          onMouseEnter: "onmouseenter",
          onMouseLeave: "onmouseleave",
          onMouseMove: "onmousemove",
          onMouseOut: "onmouseout",
          onMouseOver: "onmouseover",
          onMouseUp: "onmouseup",
          onMouseWheel: "onmousewheel",
          onOffline: "onoffline",
          onOnline: "ononline",
          onPageHide: "onpagehide",
          onPageShow: "onpageshow",
          onPaste: "onpaste",
          onPause: "onpause",
          onPlay: "onplay",
          onPlaying: "onplaying",
          onPopState: "onpopstate",
          onProgress: "onprogress",
          onRateChange: "onratechange",
          onRepeat: "onrepeat",
          onReset: "onreset",
          onResize: "onresize",
          onScroll: "onscroll",
          onSeeked: "onseeked",
          onSeeking: "onseeking",
          onSelect: "onselect",
          onShow: "onshow",
          onStalled: "onstalled",
          onStorage: "onstorage",
          onSubmit: "onsubmit",
          onSuspend: "onsuspend",
          onTimeUpdate: "ontimeupdate",
          onToggle: "ontoggle",
          onUnload: "onunload",
          onVolumeChange: "onvolumechange",
          onWaiting: "onwaiting",
          onZoom: "onzoom",
          overlinePosition: "overline-position",
          overlineThickness: "overline-thickness",
          paintOrder: "paint-order",
          panose1: "panose-1",
          pointerEvents: "pointer-events",
          referrerPolicy: "referrerpolicy",
          renderingIntent: "rendering-intent",
          shapeRendering: "shape-rendering",
          stopColor: "stop-color",
          stopOpacity: "stop-opacity",
          strikethroughPosition: "strikethrough-position",
          strikethroughThickness: "strikethrough-thickness",
          strokeDashArray: "stroke-dasharray",
          strokeDashOffset: "stroke-dashoffset",
          strokeLineCap: "stroke-linecap",
          strokeLineJoin: "stroke-linejoin",
          strokeMiterLimit: "stroke-miterlimit",
          strokeOpacity: "stroke-opacity",
          strokeWidth: "stroke-width",
          tabIndex: "tabindex",
          textAnchor: "text-anchor",
          textDecoration: "text-decoration",
          textRendering: "text-rendering",
          typeOf: "typeof",
          underlinePosition: "underline-position",
          underlineThickness: "underline-thickness",
          unicodeBidi: "unicode-bidi",
          unicodeRange: "unicode-range",
          unitsPerEm: "units-per-em",
          vAlphabetic: "v-alphabetic",
          vHanging: "v-hanging",
          vIdeographic: "v-ideographic",
          vMathematical: "v-mathematical",
          vectorEffect: "vector-effect",
          vertAdvY: "vert-adv-y",
          vertOriginX: "vert-origin-x",
          vertOriginY: "vert-origin-y",
          wordSpacing: "word-spacing",
          writingMode: "writing-mode",
          xHeight: "x-height",
          playbackOrder: "playbackorder",
          timelineBegin: "timelinebegin"
        },
        transform: caseSensitiveTransform,
        properties: {
          about: commaOrSpaceSeparated,
          accentHeight: number2,
          accumulate: null,
          additive: null,
          alignmentBaseline: null,
          alphabetic: number2,
          amplitude: number2,
          arabicForm: null,
          ascent: number2,
          attributeName: null,
          attributeType: null,
          azimuth: number2,
          bandwidth: null,
          baselineShift: null,
          baseFrequency: null,
          baseProfile: null,
          bbox: null,
          begin: null,
          bias: number2,
          by: null,
          calcMode: null,
          capHeight: number2,
          className: spaceSeparated,
          clip: null,
          clipPath: null,
          clipPathUnits: null,
          clipRule: null,
          color: null,
          colorInterpolation: null,
          colorInterpolationFilters: null,
          colorProfile: null,
          colorRendering: null,
          content: null,
          contentScriptType: null,
          contentStyleType: null,
          crossOrigin: null,
          cursor: null,
          cx: null,
          cy: null,
          d: null,
          dataType: null,
          defaultAction: null,
          descent: number2,
          diffuseConstant: number2,
          direction: null,
          display: null,
          dur: null,
          divisor: number2,
          dominantBaseline: null,
          download: boolean,
          dx: null,
          dy: null,
          edgeMode: null,
          editable: null,
          elevation: number2,
          enableBackground: null,
          end: null,
          event: null,
          exponent: number2,
          externalResourcesRequired: null,
          fill: null,
          fillOpacity: number2,
          fillRule: null,
          filter: null,
          filterRes: null,
          filterUnits: null,
          floodColor: null,
          floodOpacity: null,
          focusable: null,
          focusHighlight: null,
          fontFamily: null,
          fontSize: null,
          fontSizeAdjust: null,
          fontStretch: null,
          fontStyle: null,
          fontVariant: null,
          fontWeight: null,
          format: null,
          fr: null,
          from: null,
          fx: null,
          fy: null,
          g1: commaSeparated,
          g2: commaSeparated,
          glyphName: commaSeparated,
          glyphOrientationHorizontal: null,
          glyphOrientationVertical: null,
          glyphRef: null,
          gradientTransform: null,
          gradientUnits: null,
          handler: null,
          hanging: number2,
          hatchContentUnits: null,
          hatchUnits: null,
          height: null,
          href: null,
          hrefLang: null,
          horizAdvX: number2,
          horizOriginX: number2,
          horizOriginY: number2,
          id: null,
          ideographic: number2,
          imageRendering: null,
          initialVisibility: null,
          in: null,
          in2: null,
          intercept: number2,
          k: number2,
          k1: number2,
          k2: number2,
          k3: number2,
          k4: number2,
          kernelMatrix: commaOrSpaceSeparated,
          kernelUnitLength: null,
          keyPoints: null,
          keySplines: null,
          keyTimes: null,
          kerning: null,
          lang: null,
          lengthAdjust: null,
          letterSpacing: null,
          lightingColor: null,
          limitingConeAngle: number2,
          local: null,
          markerEnd: null,
          markerMid: null,
          markerStart: null,
          markerHeight: null,
          markerUnits: null,
          markerWidth: null,
          mask: null,
          maskContentUnits: null,
          maskUnits: null,
          mathematical: null,
          max: null,
          media: null,
          mediaCharacterEncoding: null,
          mediaContentEncodings: null,
          mediaSize: number2,
          mediaTime: null,
          method: null,
          min: null,
          mode: null,
          name: null,
          navDown: null,
          navDownLeft: null,
          navDownRight: null,
          navLeft: null,
          navNext: null,
          navPrev: null,
          navRight: null,
          navUp: null,
          navUpLeft: null,
          navUpRight: null,
          numOctaves: null,
          observer: null,
          offset: null,
          onAbort: null,
          onActivate: null,
          onAfterPrint: null,
          onBeforePrint: null,
          onBegin: null,
          onCancel: null,
          onCanPlay: null,
          onCanPlayThrough: null,
          onChange: null,
          onClick: null,
          onClose: null,
          onCopy: null,
          onCueChange: null,
          onCut: null,
          onDblClick: null,
          onDrag: null,
          onDragEnd: null,
          onDragEnter: null,
          onDragExit: null,
          onDragLeave: null,
          onDragOver: null,
          onDragStart: null,
          onDrop: null,
          onDurationChange: null,
          onEmptied: null,
          onEnd: null,
          onEnded: null,
          onError: null,
          onFocus: null,
          onFocusIn: null,
          onFocusOut: null,
          onHashChange: null,
          onInput: null,
          onInvalid: null,
          onKeyDown: null,
          onKeyPress: null,
          onKeyUp: null,
          onLoad: null,
          onLoadedData: null,
          onLoadedMetadata: null,
          onLoadStart: null,
          onMessage: null,
          onMouseDown: null,
          onMouseEnter: null,
          onMouseLeave: null,
          onMouseMove: null,
          onMouseOut: null,
          onMouseOver: null,
          onMouseUp: null,
          onMouseWheel: null,
          onOffline: null,
          onOnline: null,
          onPageHide: null,
          onPageShow: null,
          onPaste: null,
          onPause: null,
          onPlay: null,
          onPlaying: null,
          onPopState: null,
          onProgress: null,
          onRateChange: null,
          onRepeat: null,
          onReset: null,
          onResize: null,
          onScroll: null,
          onSeeked: null,
          onSeeking: null,
          onSelect: null,
          onShow: null,
          onStalled: null,
          onStorage: null,
          onSubmit: null,
          onSuspend: null,
          onTimeUpdate: null,
          onToggle: null,
          onUnload: null,
          onVolumeChange: null,
          onWaiting: null,
          onZoom: null,
          opacity: null,
          operator: null,
          order: null,
          orient: null,
          orientation: null,
          origin: null,
          overflow: null,
          overlay: null,
          overlinePosition: number2,
          overlineThickness: number2,
          paintOrder: null,
          panose1: null,
          path: null,
          pathLength: number2,
          patternContentUnits: null,
          patternTransform: null,
          patternUnits: null,
          phase: null,
          ping: spaceSeparated,
          pitch: null,
          playbackOrder: null,
          pointerEvents: null,
          points: null,
          pointsAtX: number2,
          pointsAtY: number2,
          pointsAtZ: number2,
          preserveAlpha: null,
          preserveAspectRatio: null,
          primitiveUnits: null,
          propagate: null,
          property: commaOrSpaceSeparated,
          r: null,
          radius: null,
          referrerPolicy: null,
          refX: null,
          refY: null,
          rel: commaOrSpaceSeparated,
          rev: commaOrSpaceSeparated,
          renderingIntent: null,
          repeatCount: null,
          repeatDur: null,
          requiredExtensions: commaOrSpaceSeparated,
          requiredFeatures: commaOrSpaceSeparated,
          requiredFonts: commaOrSpaceSeparated,
          requiredFormats: commaOrSpaceSeparated,
          resource: null,
          restart: null,
          result: null,
          rotate: null,
          rx: null,
          ry: null,
          scale: null,
          seed: null,
          shapeRendering: null,
          side: null,
          slope: null,
          snapshotTime: null,
          specularConstant: number2,
          specularExponent: number2,
          spreadMethod: null,
          spacing: null,
          startOffset: null,
          stdDeviation: null,
          stemh: null,
          stemv: null,
          stitchTiles: null,
          stopColor: null,
          stopOpacity: null,
          strikethroughPosition: number2,
          strikethroughThickness: number2,
          string: null,
          stroke: null,
          strokeDashArray: commaOrSpaceSeparated,
          strokeDashOffset: null,
          strokeLineCap: null,
          strokeLineJoin: null,
          strokeMiterLimit: number2,
          strokeOpacity: number2,
          strokeWidth: null,
          style: null,
          surfaceScale: number2,
          syncBehavior: null,
          syncBehaviorDefault: null,
          syncMaster: null,
          syncTolerance: null,
          syncToleranceDefault: null,
          systemLanguage: commaOrSpaceSeparated,
          tabIndex: number2,
          tableValues: null,
          target: null,
          targetX: number2,
          targetY: number2,
          textAnchor: null,
          textDecoration: null,
          textRendering: null,
          textLength: null,
          timelineBegin: null,
          title: null,
          transformBehavior: null,
          type: null,
          typeOf: commaOrSpaceSeparated,
          to: null,
          transform: null,
          u1: null,
          u2: null,
          underlinePosition: number2,
          underlineThickness: number2,
          unicode: null,
          unicodeBidi: null,
          unicodeRange: null,
          unitsPerEm: number2,
          values: null,
          vAlphabetic: number2,
          vMathematical: number2,
          vectorEffect: null,
          vHanging: number2,
          vIdeographic: number2,
          version: null,
          vertAdvY: number2,
          vertOriginX: number2,
          vertOriginY: number2,
          viewBox: null,
          viewTarget: null,
          visibility: null,
          width: null,
          widths: null,
          wordSpacing: null,
          writingMode: null,
          x: null,
          x1: null,
          x2: null,
          xChannelSelector: null,
          xHeight: number2,
          y: null,
          y1: null,
          y2: null,
          yChannelSelector: null,
          z: null,
          zoomAndPan: null
        }
      });
    }
  });

  // node_modules/property-information/svg.js
  var require_svg2 = __commonJS({
    "node_modules/property-information/svg.js"(exports, module) {
      init_globals();
      var merge = require_merge();
      var xlink = require_xlink();
      var xml = require_xml();
      var xmlns = require_xmlns();
      var aria = require_aria();
      var svg = require_svg();
      module.exports = merge([xml, xlink, xmlns, aria, svg]);
    }
  });

  // node_modules/hastscript/svg-case-sensitive-tag-names.json
  var require_svg_case_sensitive_tag_names = __commonJS({
    "node_modules/hastscript/svg-case-sensitive-tag-names.json"(exports, module) {
      module.exports = [
        "altGlyph",
        "altGlyphDef",
        "altGlyphItem",
        "animateColor",
        "animateMotion",
        "animateTransform",
        "clipPath",
        "feBlend",
        "feColorMatrix",
        "feComponentTransfer",
        "feComposite",
        "feConvolveMatrix",
        "feDiffuseLighting",
        "feDisplacementMap",
        "feDistantLight",
        "feDropShadow",
        "feFlood",
        "feFuncA",
        "feFuncB",
        "feFuncG",
        "feFuncR",
        "feGaussianBlur",
        "feImage",
        "feMerge",
        "feMergeNode",
        "feMorphology",
        "feOffset",
        "fePointLight",
        "feSpecularLighting",
        "feSpotLight",
        "feTile",
        "feTurbulence",
        "foreignObject",
        "glyphRef",
        "linearGradient",
        "radialGradient",
        "solidColor",
        "textArea",
        "textPath"
      ];
    }
  });

  // node_modules/property-information/find.js
  var require_find = __commonJS({
    "node_modules/property-information/find.js"(exports, module) {
      init_globals();
      var normalize = require_normalize();
      var DefinedInfo = require_defined_info();
      var Info = require_info();
      var data = "data";
      module.exports = find;
      var valid = /^data[-\w.:]+$/i;
      var dash = /-[a-z]/g;
      var cap = /[A-Z]/g;
      function find(schema2, value) {
        var normal = normalize(value);
        var prop = value;
        var Type = Info;
        if (normal in schema2.normal) {
          return schema2.property[schema2.normal[normal]];
        }
        if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {
          if (value.charAt(4) === "-") {
            prop = datasetToProperty(value);
          } else {
            value = datasetToAttribute(value);
          }
          Type = DefinedInfo;
        }
        return new Type(prop, value);
      }
      function datasetToProperty(attribute) {
        var value = attribute.slice(5).replace(dash, camelcase);
        return data + value.charAt(0).toUpperCase() + value.slice(1);
      }
      function datasetToAttribute(property) {
        var value = property.slice(4);
        if (dash.test(value)) {
          return property;
        }
        value = value.replace(cap, kebab);
        if (value.charAt(0) !== "-") {
          value = "-" + value;
        }
        return data + value;
      }
      function kebab($0) {
        return "-" + $0.toLowerCase();
      }
      function camelcase($0) {
        return $0.charAt(1).toUpperCase();
      }
    }
  });

  // node_modules/hast-util-parse-selector/index.js
  var require_hast_util_parse_selector = __commonJS({
    "node_modules/hast-util-parse-selector/index.js"(exports, module) {
      init_globals();
      module.exports = parse;
      var search = /[#.]/g;
      function parse(selector, defaultTagName) {
        var value = selector || "";
        var name = defaultTagName || "div";
        var props = {};
        var start = 0;
        var subvalue;
        var previous;
        var match;
        while (start < value.length) {
          search.lastIndex = start;
          match = search.exec(value);
          subvalue = value.slice(start, match ? match.index : value.length);
          if (subvalue) {
            if (!previous) {
              name = subvalue;
            } else if (previous === "#") {
              props.id = subvalue;
            } else if (props.className) {
              props.className.push(subvalue);
            } else {
              props.className = [subvalue];
            }
            start += subvalue.length;
          }
          if (match) {
            previous = match[0];
            start++;
          }
        }
        return { type: "element", tagName: name, properties: props, children: [] };
      }
    }
  });

  // node_modules/space-separated-tokens/index.js
  var require_space_separated_tokens = __commonJS({
    "node_modules/space-separated-tokens/index.js"(exports) {
      init_globals();
      exports.parse = parse;
      exports.stringify = stringify2;
      var empty = "";
      var space = " ";
      var whiteSpace = /[ \t\n\r\f]+/g;
      function parse(value) {
        var input = String(value || empty).trim();
        return input === empty ? [] : input.split(whiteSpace);
      }
      function stringify2(values) {
        return values.join(space).trim();
      }
    }
  });

  // node_modules/comma-separated-tokens/index.js
  var require_comma_separated_tokens = __commonJS({
    "node_modules/comma-separated-tokens/index.js"(exports) {
      init_globals();
      exports.parse = parse;
      exports.stringify = stringify2;
      var comma = ",";
      var space = " ";
      var empty = "";
      function parse(value) {
        var values = [];
        var input = String(value || empty);
        var index = input.indexOf(comma);
        var lastIndex = 0;
        var end = false;
        var val;
        while (!end) {
          if (index === -1) {
            index = input.length;
            end = true;
          }
          val = input.slice(lastIndex, index).trim();
          if (val || !end) {
            values.push(val);
          }
          lastIndex = index + 1;
          index = input.indexOf(comma, lastIndex);
        }
        return values;
      }
      function stringify2(values, options) {
        var settings = options || {};
        var left = settings.padLeft === false ? empty : space;
        var right = settings.padRight ? space : empty;
        if (values[values.length - 1] === empty) {
          values = values.concat(empty);
        }
        return values.join(right + comma + left).trim();
      }
    }
  });

  // node_modules/hastscript/factory.js
  var require_factory = __commonJS({
    "node_modules/hastscript/factory.js"(exports, module) {
      init_globals();
      var find = require_find();
      var normalize = require_normalize();
      var parseSelector = require_hast_util_parse_selector();
      var spaces = require_space_separated_tokens().parse;
      var commas = require_comma_separated_tokens().parse;
      module.exports = factory;
      var own = {}.hasOwnProperty;
      function factory(schema2, defaultTagName, caseSensitive) {
        var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;
        return h;
        function h(selector, properties) {
          var node = parseSelector(selector, defaultTagName);
          var children = Array.prototype.slice.call(arguments, 2);
          var name = node.tagName.toLowerCase();
          var property;
          node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name;
          if (properties && isChildren(properties, node)) {
            children.unshift(properties);
            properties = null;
          }
          if (properties) {
            for (property in properties) {
              addProperty(node.properties, property, properties[property]);
            }
          }
          addChild(node.children, children);
          if (node.tagName === "template") {
            node.content = { type: "root", children: node.children };
            node.children = [];
          }
          return node;
        }
        function addProperty(properties, key, value) {
          var info;
          var property;
          var result;
          if (value === null || value === void 0 || value !== value) {
            return;
          }
          info = find(schema2, key);
          property = info.property;
          result = value;
          if (typeof result === "string") {
            if (info.spaceSeparated) {
              result = spaces(result);
            } else if (info.commaSeparated) {
              result = commas(result);
            } else if (info.commaOrSpaceSeparated) {
              result = spaces(commas(result).join(" "));
            }
          }
          if (property === "style" && typeof value !== "string") {
            result = style(result);
          }
          if (property === "className" && properties.className) {
            result = properties.className.concat(result);
          }
          properties[property] = parsePrimitives(info, property, result);
        }
      }
      function isChildren(value, node) {
        return typeof value === "string" || "length" in value || isNode(node.tagName, value);
      }
      function isNode(tagName, value) {
        var type2 = value.type;
        if (tagName === "input" || !type2 || typeof type2 !== "string") {
          return false;
        }
        if (typeof value.children === "object" && "length" in value.children) {
          return true;
        }
        type2 = type2.toLowerCase();
        if (tagName === "button") {
          return type2 !== "menu" && type2 !== "submit" && type2 !== "reset" && type2 !== "button";
        }
        return "value" in value;
      }
      function addChild(nodes, value) {
        var index;
        var length;
        if (typeof value === "string" || typeof value === "number") {
          nodes.push({ type: "text", value: String(value) });
          return;
        }
        if (typeof value === "object" && "length" in value) {
          index = -1;
          length = value.length;
          while (++index < length) {
            addChild(nodes, value[index]);
          }
          return;
        }
        if (typeof value !== "object" || !("type" in value)) {
          throw new Error("Expected node, nodes, or string, got `" + value + "`");
        }
        nodes.push(value);
      }
      function parsePrimitives(info, name, value) {
        var index;
        var length;
        var result;
        if (typeof value !== "object" || !("length" in value)) {
          return parsePrimitive(info, name, value);
        }
        length = value.length;
        index = -1;
        result = [];
        while (++index < length) {
          result[index] = parsePrimitive(info, name, value[index]);
        }
        return result;
      }
      function parsePrimitive(info, name, value) {
        var result = value;
        if (info.number || info.positiveNumber) {
          if (!isNaN(result) && result !== "") {
            result = Number(result);
          }
        } else if (info.boolean || info.overloadedBoolean) {
          if (typeof result === "string" && (result === "" || normalize(value) === normalize(name))) {
            result = true;
          }
        }
        return result;
      }
      function style(value) {
        var result = [];
        var key;
        for (key in value) {
          result.push([key, value[key]].join(": "));
        }
        return result.join("; ");
      }
      function createAdjustMap(values) {
        var length = values.length;
        var index = -1;
        var result = {};
        var value;
        while (++index < length) {
          value = values[index];
          result[value.toLowerCase()] = value;
        }
        return result;
      }
    }
  });

  // node_modules/hastscript/svg.js
  var require_svg3 = __commonJS({
    "node_modules/hastscript/svg.js"(exports, module) {
      init_globals();
      var schema2 = require_svg2();
      var caseSensitive = require_svg_case_sensitive_tag_names();
      var factory = require_factory();
      var svg = factory(schema2, "g", caseSensitive);
      svg.displayName = "svg";
      module.exports = svg;
    }
  });

  // node_modules/property-information/lib/html.js
  var require_html = __commonJS({
    "node_modules/property-information/lib/html.js"(exports, module) {
      init_globals();
      var types = require_types();
      var create = require_create();
      var caseInsensitiveTransform = require_case_insensitive_transform();
      var boolean = types.boolean;
      var overloadedBoolean = types.overloadedBoolean;
      var booleanish = types.booleanish;
      var number2 = types.number;
      var spaceSeparated = types.spaceSeparated;
      var commaSeparated = types.commaSeparated;
      module.exports = create({
        space: "html",
        attributes: {
          acceptcharset: "accept-charset",
          classname: "class",
          htmlfor: "for",
          httpequiv: "http-equiv"
        },
        transform: caseInsensitiveTransform,
        mustUseProperty: ["checked", "multiple", "muted", "selected"],
        properties: {
          abbr: null,
          accept: commaSeparated,
          acceptCharset: spaceSeparated,
          accessKey: spaceSeparated,
          action: null,
          allow: null,
          allowFullScreen: boolean,
          allowPaymentRequest: boolean,
          allowUserMedia: boolean,
          alt: null,
          as: null,
          async: boolean,
          autoCapitalize: null,
          autoComplete: spaceSeparated,
          autoFocus: boolean,
          autoPlay: boolean,
          capture: boolean,
          charSet: null,
          checked: boolean,
          cite: null,
          className: spaceSeparated,
          cols: number2,
          colSpan: null,
          content: null,
          contentEditable: booleanish,
          controls: boolean,
          controlsList: spaceSeparated,
          coords: number2 | commaSeparated,
          crossOrigin: null,
          data: null,
          dateTime: null,
          decoding: null,
          default: boolean,
          defer: boolean,
          dir: null,
          dirName: null,
          disabled: boolean,
          download: overloadedBoolean,
          draggable: booleanish,
          encType: null,
          enterKeyHint: null,
          form: null,
          formAction: null,
          formEncType: null,
          formMethod: null,
          formNoValidate: boolean,
          formTarget: null,
          headers: spaceSeparated,
          height: number2,
          hidden: boolean,
          high: number2,
          href: null,
          hrefLang: null,
          htmlFor: spaceSeparated,
          httpEquiv: spaceSeparated,
          id: null,
          imageSizes: null,
          imageSrcSet: commaSeparated,
          inputMode: null,
          integrity: null,
          is: null,
          isMap: boolean,
          itemId: null,
          itemProp: spaceSeparated,
          itemRef: spaceSeparated,
          itemScope: boolean,
          itemType: spaceSeparated,
          kind: null,
          label: null,
          lang: null,
          language: null,
          list: null,
          loading: null,
          loop: boolean,
          low: number2,
          manifest: null,
          max: null,
          maxLength: number2,
          media: null,
          method: null,
          min: null,
          minLength: number2,
          multiple: boolean,
          muted: boolean,
          name: null,
          nonce: null,
          noModule: boolean,
          noValidate: boolean,
          onAbort: null,
          onAfterPrint: null,
          onAuxClick: null,
          onBeforePrint: null,
          onBeforeUnload: null,
          onBlur: null,
          onCancel: null,
          onCanPlay: null,
          onCanPlayThrough: null,
          onChange: null,
          onClick: null,
          onClose: null,
          onContextMenu: null,
          onCopy: null,
          onCueChange: null,
          onCut: null,
          onDblClick: null,
          onDrag: null,
          onDragEnd: null,
          onDragEnter: null,
          onDragExit: null,
          onDragLeave: null,
          onDragOver: null,
          onDragStart: null,
          onDrop: null,
          onDurationChange: null,
          onEmptied: null,
          onEnded: null,
          onError: null,
          onFocus: null,
          onFormData: null,
          onHashChange: null,
          onInput: null,
          onInvalid: null,
          onKeyDown: null,
          onKeyPress: null,
          onKeyUp: null,
          onLanguageChange: null,
          onLoad: null,
          onLoadedData: null,
          onLoadedMetadata: null,
          onLoadEnd: null,
          onLoadStart: null,
          onMessage: null,
          onMessageError: null,
          onMouseDown: null,
          onMouseEnter: null,
          onMouseLeave: null,
          onMouseMove: null,
          onMouseOut: null,
          onMouseOver: null,
          onMouseUp: null,
          onOffline: null,
          onOnline: null,
          onPageHide: null,
          onPageShow: null,
          onPaste: null,
          onPause: null,
          onPlay: null,
          onPlaying: null,
          onPopState: null,
          onProgress: null,
          onRateChange: null,
          onRejectionHandled: null,
          onReset: null,
          onResize: null,
          onScroll: null,
          onSecurityPolicyViolation: null,
          onSeeked: null,
          onSeeking: null,
          onSelect: null,
          onSlotChange: null,
          onStalled: null,
          onStorage: null,
          onSubmit: null,
          onSuspend: null,
          onTimeUpdate: null,
          onToggle: null,
          onUnhandledRejection: null,
          onUnload: null,
          onVolumeChange: null,
          onWaiting: null,
          onWheel: null,
          open: boolean,
          optimum: number2,
          pattern: null,
          ping: spaceSeparated,
          placeholder: null,
          playsInline: boolean,
          poster: null,
          preload: null,
          readOnly: boolean,
          referrerPolicy: null,
          rel: spaceSeparated,
          required: boolean,
          reversed: boolean,
          rows: number2,
          rowSpan: number2,
          sandbox: spaceSeparated,
          scope: null,
          scoped: boolean,
          seamless: boolean,
          selected: boolean,
          shape: null,
          size: number2,
          sizes: null,
          slot: null,
          span: number2,
          spellCheck: booleanish,
          src: null,
          srcDoc: null,
          srcLang: null,
          srcSet: commaSeparated,
          start: number2,
          step: null,
          style: null,
          tabIndex: number2,
          target: null,
          title: null,
          translate: null,
          type: null,
          typeMustMatch: boolean,
          useMap: null,
          value: booleanish,
          width: number2,
          wrap: null,
          align: null,
          aLink: null,
          archive: spaceSeparated,
          axis: null,
          background: null,
          bgColor: null,
          border: number2,
          borderColor: null,
          bottomMargin: number2,
          cellPadding: null,
          cellSpacing: null,
          char: null,
          charOff: null,
          classId: null,
          clear: null,
          code: null,
          codeBase: null,
          codeType: null,
          color: null,
          compact: boolean,
          declare: boolean,
          event: null,
          face: null,
          frame: null,
          frameBorder: null,
          hSpace: number2,
          leftMargin: number2,
          link: null,
          longDesc: null,
          lowSrc: null,
          marginHeight: number2,
          marginWidth: number2,
          noResize: boolean,
          noHref: boolean,
          noShade: boolean,
          noWrap: boolean,
          object: null,
          profile: null,
          prompt: null,
          rev: null,
          rightMargin: number2,
          rules: null,
          scheme: null,
          scrolling: booleanish,
          standby: null,
          summary: null,
          text: null,
          topMargin: number2,
          valueType: null,
          version: null,
          vAlign: null,
          vLink: null,
          vSpace: number2,
          allowTransparency: null,
          autoCorrect: null,
          autoSave: null,
          disablePictureInPicture: boolean,
          disableRemotePlayback: boolean,
          prefix: null,
          property: null,
          results: number2,
          security: null,
          unselectable: null
        }
      });
    }
  });

  // node_modules/property-information/html.js
  var require_html2 = __commonJS({
    "node_modules/property-information/html.js"(exports, module) {
      init_globals();
      var merge = require_merge();
      var xlink = require_xlink();
      var xml = require_xml();
      var xmlns = require_xmlns();
      var aria = require_aria();
      var html2 = require_html();
      module.exports = merge([xml, xlink, xmlns, aria, html2]);
    }
  });

  // node_modules/hastscript/html.js
  var require_html3 = __commonJS({
    "node_modules/hastscript/html.js"(exports, module) {
      init_globals();
      var schema2 = require_html2();
      var factory = require_factory();
      var html2 = factory(schema2, "div");
      html2.displayName = "html";
      module.exports = html2;
    }
  });

  // node_modules/hastscript/index.js
  var require_hastscript = __commonJS({
    "node_modules/hastscript/index.js"(exports, module) {
      init_globals();
      module.exports = require_html3();
    }
  });

  // node_modules/vfile-location/index.js
  var require_vfile_location = __commonJS({
    "node_modules/vfile-location/index.js"(exports, module) {
      init_globals();
      module.exports = factory;
      function factory(file) {
        var value = String(file);
        var indices = [];
        var search = /\r?\n|\r/g;
        while (search.exec(value)) {
          indices.push(search.lastIndex);
        }
        indices.push(value.length + 1);
        return {
          toPoint: offsetToPoint,
          toPosition: offsetToPoint,
          toOffset: pointToOffset
        };
        function offsetToPoint(offset) {
          var index = -1;
          if (offset > -1 && offset < indices[indices.length - 1]) {
            while (++index < indices.length) {
              if (indices[index] > offset) {
                return {
                  line: index + 1,
                  column: offset - (indices[index - 1] || 0) + 1,
                  offset
                };
              }
            }
          }
          return {};
        }
        function pointToOffset(point) {
          var line = point && point.line;
          var column = point && point.column;
          var offset;
          if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {
            offset = (indices[line - 2] || 0) + column - 1 || 0;
          }
          return offset > -1 && offset < indices[indices.length - 1] ? offset : -1;
        }
      }
    }
  });

  // node_modules/web-namespaces/index.json
  var require_web_namespaces = __commonJS({
    "node_modules/web-namespaces/index.json"(exports, module) {
      module.exports = {
        html: "http://www.w3.org/1999/xhtml",
        mathml: "http://www.w3.org/1998/Math/MathML",
        svg: "http://www.w3.org/2000/svg",
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
      };
    }
  });

  // node_modules/hast-util-from-parse5/index.js
  var require_hast_util_from_parse5 = __commonJS({
    "node_modules/hast-util-from-parse5/index.js"(exports, module) {
      init_globals();
      var s = require_svg3();
      var h = require_hastscript();
      var find = require_find();
      var html2 = require_html2();
      var svg = require_svg2();
      var vfileLocation = require_vfile_location();
      var ns = require_web_namespaces();
      module.exports = wrapper;
      var own = {}.hasOwnProperty;
      var map = {
        "#document": root,
        "#document-fragment": root,
        "#text": text,
        "#comment": comment,
        "#documentType": doctype
      };
      function wrapper(ast, options) {
        var settings = options || {};
        var file;
        if (settings.messages) {
          file = settings;
          settings = {};
        } else {
          file = settings.file;
        }
        return transform(ast, {
          schema: settings.space === "svg" ? svg : html2,
          file,
          verbose: settings.verbose
        });
      }
      function transform(ast, config) {
        var schema2 = config.schema;
        var fn = own.call(map, ast.nodeName) ? map[ast.nodeName] : element;
        var children;
        var result;
        var position2;
        if (fn === element) {
          config.schema = ast.namespaceURI === ns.svg ? svg : html2;
        }
        if (ast.childNodes) {
          children = nodes(ast.childNodes, config);
        }
        result = fn(ast, children, config);
        if (ast.sourceCodeLocation && config.file) {
          position2 = location(result, ast.sourceCodeLocation, config);
          if (position2) {
            config.location = true;
            result.position = position2;
          }
        }
        config.schema = schema2;
        return result;
      }
      function nodes(children, config) {
        var index = -1;
        var result = [];
        while (++index < children.length) {
          result[index] = transform(children[index], config);
        }
        return result;
      }
      function root(ast, children, config) {
        var result = {
          type: "root",
          children,
          data: { quirksMode: ast.mode === "quirks" || ast.mode === "limited-quirks" }
        };
        var doc;
        var location2;
        if (config.file && config.location) {
          doc = String(config.file);
          location2 = vfileLocation(doc);
          result.position = {
            start: location2.toPoint(0),
            end: location2.toPoint(doc.length)
          };
        }
        return result;
      }
      function doctype(ast) {
        return {
          type: "doctype",
          name: ast.name || "",
          public: ast.publicId || null,
          system: ast.systemId || null
        };
      }
      function text(ast) {
        return { type: "text", value: ast.value };
      }
      function comment(ast) {
        return { type: "comment", value: ast.data };
      }
      function element(ast, children, config) {
        var fn = config.schema.space === "svg" ? s : h;
        var props = {};
        var index = -1;
        var result;
        var attribute;
        var pos;
        var start;
        var end;
        while (++index < ast.attrs.length) {
          attribute = ast.attrs[index];
          props[(attribute.prefix ? attribute.prefix + ":" : "") + attribute.name] = attribute.value;
        }
        result = fn(ast.tagName, props, children);
        if (result.tagName === "template" && "content" in ast) {
          pos = ast.sourceCodeLocation;
          start = pos && pos.startTag && position(pos.startTag).end;
          end = pos && pos.endTag && position(pos.endTag).start;
          result.content = transform(ast.content, config);
          if ((start || end) && config.file) {
            result.content.position = { start, end };
          }
        }
        return result;
      }
      function location(node, location2, config) {
        var result = position(location2);
        var tail;
        var key;
        var props;
        if (node.type === "element") {
          tail = node.children[node.children.length - 1];
          if (!location2.endTag && tail && tail.position && tail.position.end) {
            result.end = Object.assign({}, tail.position.end);
          }
          if (config.verbose) {
            props = {};
            for (key in location2.attrs) {
              props[find(config.schema, key).property] = position(location2.attrs[key]);
            }
            node.data = {
              position: {
                opening: position(location2.startTag),
                closing: location2.endTag ? position(location2.endTag) : null,
                properties: props
              }
            };
          }
        }
        return result;
      }
      function position(loc) {
        var start = point({
          line: loc.startLine,
          column: loc.startCol,
          offset: loc.startOffset
        });
        var end = point({
          line: loc.endLine,
          column: loc.endCol,
          offset: loc.endOffset
        });
        return start || end ? { start, end } : null;
      }
      function point(point2) {
        return point2.line && point2.column ? point2 : null;
      }
    }
  });

  // node_modules/parse5/lib/common/unicode.js
  var require_unicode = __commonJS({
    "node_modules/parse5/lib/common/unicode.js"(exports) {
      init_globals();
      var UNDEFINED_CODE_POINTS = [
        65534,
        65535,
        131070,
        131071,
        196606,
        196607,
        262142,
        262143,
        327678,
        327679,
        393214,
        393215,
        458750,
        458751,
        524286,
        524287,
        589822,
        589823,
        655358,
        655359,
        720894,
        720895,
        786430,
        786431,
        851966,
        851967,
        917502,
        917503,
        983038,
        983039,
        1048574,
        1048575,
        1114110,
        1114111
      ];
      exports.REPLACEMENT_CHARACTER = "\uFFFD";
      exports.CODE_POINTS = {
        EOF: -1,
        NULL: 0,
        TABULATION: 9,
        CARRIAGE_RETURN: 13,
        LINE_FEED: 10,
        FORM_FEED: 12,
        SPACE: 32,
        EXCLAMATION_MARK: 33,
        QUOTATION_MARK: 34,
        NUMBER_SIGN: 35,
        AMPERSAND: 38,
        APOSTROPHE: 39,
        HYPHEN_MINUS: 45,
        SOLIDUS: 47,
        DIGIT_0: 48,
        DIGIT_9: 57,
        SEMICOLON: 59,
        LESS_THAN_SIGN: 60,
        EQUALS_SIGN: 61,
        GREATER_THAN_SIGN: 62,
        QUESTION_MARK: 63,
        LATIN_CAPITAL_A: 65,
        LATIN_CAPITAL_F: 70,
        LATIN_CAPITAL_X: 88,
        LATIN_CAPITAL_Z: 90,
        RIGHT_SQUARE_BRACKET: 93,
        GRAVE_ACCENT: 96,
        LATIN_SMALL_A: 97,
        LATIN_SMALL_F: 102,
        LATIN_SMALL_X: 120,
        LATIN_SMALL_Z: 122,
        REPLACEMENT_CHARACTER: 65533
      };
      exports.CODE_POINT_SEQUENCES = {
        DASH_DASH_STRING: [45, 45],
        DOCTYPE_STRING: [68, 79, 67, 84, 89, 80, 69],
        CDATA_START_STRING: [91, 67, 68, 65, 84, 65, 91],
        SCRIPT_STRING: [115, 99, 114, 105, 112, 116],
        PUBLIC_STRING: [80, 85, 66, 76, 73, 67],
        SYSTEM_STRING: [83, 89, 83, 84, 69, 77]
      };
      exports.isSurrogate = function(cp) {
        return cp >= 55296 && cp <= 57343;
      };
      exports.isSurrogatePair = function(cp) {
        return cp >= 56320 && cp <= 57343;
      };
      exports.getSurrogatePairCodePoint = function(cp1, cp2) {
        return (cp1 - 55296) * 1024 + 9216 + cp2;
      };
      exports.isControlCodePoint = function(cp) {
        return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
      };
      exports.isUndefinedCodePoint = function(cp) {
        return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
      };
    }
  });

  // node_modules/parse5/lib/common/error-codes.js
  var require_error_codes = __commonJS({
    "node_modules/parse5/lib/common/error-codes.js"(exports, module) {
      init_globals();
      module.exports = {
        controlCharacterInInputStream: "control-character-in-input-stream",
        noncharacterInInputStream: "noncharacter-in-input-stream",
        surrogateInInputStream: "surrogate-in-input-stream",
        nonVoidHtmlElementStartTagWithTrailingSolidus: "non-void-html-element-start-tag-with-trailing-solidus",
        endTagWithAttributes: "end-tag-with-attributes",
        endTagWithTrailingSolidus: "end-tag-with-trailing-solidus",
        unexpectedSolidusInTag: "unexpected-solidus-in-tag",
        unexpectedNullCharacter: "unexpected-null-character",
        unexpectedQuestionMarkInsteadOfTagName: "unexpected-question-mark-instead-of-tag-name",
        invalidFirstCharacterOfTagName: "invalid-first-character-of-tag-name",
        unexpectedEqualsSignBeforeAttributeName: "unexpected-equals-sign-before-attribute-name",
        missingEndTagName: "missing-end-tag-name",
        unexpectedCharacterInAttributeName: "unexpected-character-in-attribute-name",
        unknownNamedCharacterReference: "unknown-named-character-reference",
        missingSemicolonAfterCharacterReference: "missing-semicolon-after-character-reference",
        unexpectedCharacterAfterDoctypeSystemIdentifier: "unexpected-character-after-doctype-system-identifier",
        unexpectedCharacterInUnquotedAttributeValue: "unexpected-character-in-unquoted-attribute-value",
        eofBeforeTagName: "eof-before-tag-name",
        eofInTag: "eof-in-tag",
        missingAttributeValue: "missing-attribute-value",
        missingWhitespaceBetweenAttributes: "missing-whitespace-between-attributes",
        missingWhitespaceAfterDoctypePublicKeyword: "missing-whitespace-after-doctype-public-keyword",
        missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: "missing-whitespace-between-doctype-public-and-system-identifiers",
        missingWhitespaceAfterDoctypeSystemKeyword: "missing-whitespace-after-doctype-system-keyword",
        missingQuoteBeforeDoctypePublicIdentifier: "missing-quote-before-doctype-public-identifier",
        missingQuoteBeforeDoctypeSystemIdentifier: "missing-quote-before-doctype-system-identifier",
        missingDoctypePublicIdentifier: "missing-doctype-public-identifier",
        missingDoctypeSystemIdentifier: "missing-doctype-system-identifier",
        abruptDoctypePublicIdentifier: "abrupt-doctype-public-identifier",
        abruptDoctypeSystemIdentifier: "abrupt-doctype-system-identifier",
        cdataInHtmlContent: "cdata-in-html-content",
        incorrectlyOpenedComment: "incorrectly-opened-comment",
        eofInScriptHtmlCommentLikeText: "eof-in-script-html-comment-like-text",
        eofInDoctype: "eof-in-doctype",
        nestedComment: "nested-comment",
        abruptClosingOfEmptyComment: "abrupt-closing-of-empty-comment",
        eofInComment: "eof-in-comment",
        incorrectlyClosedComment: "incorrectly-closed-comment",
        eofInCdata: "eof-in-cdata",
        absenceOfDigitsInNumericCharacterReference: "absence-of-digits-in-numeric-character-reference",
        nullCharacterReference: "null-character-reference",
        surrogateCharacterReference: "surrogate-character-reference",
        characterReferenceOutsideUnicodeRange: "character-reference-outside-unicode-range",
        controlCharacterReference: "control-character-reference",
        noncharacterCharacterReference: "noncharacter-character-reference",
        missingWhitespaceBeforeDoctypeName: "missing-whitespace-before-doctype-name",
        missingDoctypeName: "missing-doctype-name",
        invalidCharacterSequenceAfterDoctypeName: "invalid-character-sequence-after-doctype-name",
        duplicateAttribute: "duplicate-attribute",
        nonConformingDoctype: "non-conforming-doctype",
        missingDoctype: "missing-doctype",
        misplacedDoctype: "misplaced-doctype",
        endTagWithoutMatchingOpenElement: "end-tag-without-matching-open-element",
        closingOfElementWithOpenChildElements: "closing-of-element-with-open-child-elements",
        disallowedContentInNoscriptInHead: "disallowed-content-in-noscript-in-head",
        openElementsLeftAfterEof: "open-elements-left-after-eof",
        abandonedHeadElementChild: "abandoned-head-element-child",
        misplacedStartTagForHeadElement: "misplaced-start-tag-for-head-element",
        nestedNoscriptInHead: "nested-noscript-in-head",
        eofInElementThatCanContainOnlyText: "eof-in-element-that-can-contain-only-text"
      };
    }
  });

  // node_modules/parse5/lib/tokenizer/preprocessor.js
  var require_preprocessor = __commonJS({
    "node_modules/parse5/lib/tokenizer/preprocessor.js"(exports, module) {
      init_globals();
      var unicode = require_unicode();
      var ERR = require_error_codes();
      var $ = unicode.CODE_POINTS;
      var DEFAULT_BUFFER_WATERLINE = 1 << 16;
      var Preprocessor = class {
        constructor() {
          this.html = null;
          this.pos = -1;
          this.lastGapPos = -1;
          this.lastCharPos = -1;
          this.gapStack = [];
          this.skipNextNewLine = false;
          this.lastChunkWritten = false;
          this.endOfChunkHit = false;
          this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
        }
        _err() {
        }
        _addGap() {
          this.gapStack.push(this.lastGapPos);
          this.lastGapPos = this.pos;
        }
        _processSurrogate(cp) {
          if (this.pos !== this.lastCharPos) {
            const nextCp = this.html.charCodeAt(this.pos + 1);
            if (unicode.isSurrogatePair(nextCp)) {
              this.pos++;
              this._addGap();
              return unicode.getSurrogatePairCodePoint(cp, nextCp);
            }
          } else if (!this.lastChunkWritten) {
            this.endOfChunkHit = true;
            return $.EOF;
          }
          this._err(ERR.surrogateInInputStream);
          return cp;
        }
        dropParsedChunk() {
          if (this.pos > this.bufferWaterline) {
            this.lastCharPos -= this.pos;
            this.html = this.html.substring(this.pos);
            this.pos = 0;
            this.lastGapPos = -1;
            this.gapStack = [];
          }
        }
        write(chunk, isLastChunk) {
          if (this.html) {
            this.html += chunk;
          } else {
            this.html = chunk;
          }
          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
          this.lastChunkWritten = isLastChunk;
        }
        insertHtmlAtCurrentPos(chunk) {
          this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
        }
        advance() {
          this.pos++;
          if (this.pos > this.lastCharPos) {
            this.endOfChunkHit = !this.lastChunkWritten;
            return $.EOF;
          }
          let cp = this.html.charCodeAt(this.pos);
          if (this.skipNextNewLine && cp === $.LINE_FEED) {
            this.skipNextNewLine = false;
            this._addGap();
            return this.advance();
          }
          if (cp === $.CARRIAGE_RETURN) {
            this.skipNextNewLine = true;
            return $.LINE_FEED;
          }
          this.skipNextNewLine = false;
          if (unicode.isSurrogate(cp)) {
            cp = this._processSurrogate(cp);
          }
          const isCommonValidRange = cp > 31 && cp < 127 || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 159 && cp < 64976;
          if (!isCommonValidRange) {
            this._checkForProblematicCharacters(cp);
          }
          return cp;
        }
        _checkForProblematicCharacters(cp) {
          if (unicode.isControlCodePoint(cp)) {
            this._err(ERR.controlCharacterInInputStream);
          } else if (unicode.isUndefinedCodePoint(cp)) {
            this._err(ERR.noncharacterInInputStream);
          }
        }
        retreat() {
          if (this.pos === this.lastGapPos) {
            this.lastGapPos = this.gapStack.pop();
            this.pos--;
          }
          this.pos--;
        }
      };
      module.exports = Preprocessor;
    }
  });

  // node_modules/parse5/lib/tokenizer/named-entity-data.js
  var require_named_entity_data = __commonJS({
    "node_modules/parse5/lib/tokenizer/named-entity-data.js"(exports, module) {
      init_globals();
      module.exports = new Uint16Array([4, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 106, 303, 412, 810, 1432, 1701, 1796, 1987, 2114, 2360, 2420, 2484, 3170, 3251, 4140, 4393, 4575, 4610, 5106, 5512, 5728, 6117, 6274, 6315, 6345, 6427, 6516, 7002, 7910, 8733, 9323, 9870, 10170, 10631, 10893, 11318, 11386, 11467, 12773, 13092, 14474, 14922, 15448, 15542, 16419, 17666, 18166, 18611, 19004, 19095, 19298, 19397, 4, 16, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 140, 150, 158, 169, 176, 194, 199, 210, 216, 222, 226, 242, 256, 266, 283, 294, 108, 105, 103, 5, 198, 1, 59, 148, 1, 198, 80, 5, 38, 1, 59, 156, 1, 38, 99, 117, 116, 101, 5, 193, 1, 59, 167, 1, 193, 114, 101, 118, 101, 59, 1, 258, 4, 2, 105, 121, 182, 191, 114, 99, 5, 194, 1, 59, 189, 1, 194, 59, 1, 1040, 114, 59, 3, 55349, 56580, 114, 97, 118, 101, 5, 192, 1, 59, 208, 1, 192, 112, 104, 97, 59, 1, 913, 97, 99, 114, 59, 1, 256, 100, 59, 1, 10835, 4, 2, 103, 112, 232, 237, 111, 110, 59, 1, 260, 102, 59, 3, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 1, 8289, 105, 110, 103, 5, 197, 1, 59, 264, 1, 197, 4, 2, 99, 115, 272, 277, 114, 59, 3, 55349, 56476, 105, 103, 110, 59, 1, 8788, 105, 108, 100, 101, 5, 195, 1, 59, 292, 1, 195, 109, 108, 5, 196, 1, 59, 301, 1, 196, 4, 8, 97, 99, 101, 102, 111, 114, 115, 117, 321, 350, 354, 383, 388, 394, 400, 405, 4, 2, 99, 114, 327, 336, 107, 115, 108, 97, 115, 104, 59, 1, 8726, 4, 2, 118, 119, 342, 345, 59, 1, 10983, 101, 100, 59, 1, 8966, 121, 59, 1, 1041, 4, 3, 99, 114, 116, 362, 369, 379, 97, 117, 115, 101, 59, 1, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 1, 8492, 97, 59, 1, 914, 114, 59, 3, 55349, 56581, 112, 102, 59, 3, 55349, 56633, 101, 118, 101, 59, 1, 728, 99, 114, 59, 1, 8492, 109, 112, 101, 113, 59, 1, 8782, 4, 14, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 442, 447, 456, 504, 542, 547, 569, 573, 577, 616, 678, 784, 790, 796, 99, 121, 59, 1, 1063, 80, 89, 5, 169, 1, 59, 454, 1, 169, 4, 3, 99, 112, 121, 464, 470, 497, 117, 116, 101, 59, 1, 262, 4, 2, 59, 105, 476, 478, 1, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8517, 108, 101, 121, 115, 59, 1, 8493, 4, 4, 97, 101, 105, 111, 514, 520, 530, 535, 114, 111, 110, 59, 1, 268, 100, 105, 108, 5, 199, 1, 59, 528, 1, 199, 114, 99, 59, 1, 264, 110, 105, 110, 116, 59, 1, 8752, 111, 116, 59, 1, 266, 4, 2, 100, 110, 553, 560, 105, 108, 108, 97, 59, 1, 184, 116, 101, 114, 68, 111, 116, 59, 1, 183, 114, 59, 1, 8493, 105, 59, 1, 935, 114, 99, 108, 101, 4, 4, 68, 77, 80, 84, 591, 596, 603, 609, 111, 116, 59, 1, 8857, 105, 110, 117, 115, 59, 1, 8854, 108, 117, 115, 59, 1, 8853, 105, 109, 101, 115, 59, 1, 8855, 111, 4, 2, 99, 115, 623, 646, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8754, 101, 67, 117, 114, 108, 121, 4, 2, 68, 81, 658, 671, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8221, 117, 111, 116, 101, 59, 1, 8217, 4, 4, 108, 110, 112, 117, 688, 701, 736, 753, 111, 110, 4, 2, 59, 101, 696, 698, 1, 8759, 59, 1, 10868, 4, 3, 103, 105, 116, 709, 717, 722, 114, 117, 101, 110, 116, 59, 1, 8801, 110, 116, 59, 1, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8750, 4, 2, 102, 114, 742, 745, 59, 1, 8450, 111, 100, 117, 99, 116, 59, 1, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8755, 111, 115, 115, 59, 1, 10799, 99, 114, 59, 3, 55349, 56478, 112, 4, 2, 59, 67, 803, 805, 1, 8915, 97, 112, 59, 1, 8781, 4, 11, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 834, 850, 855, 860, 865, 888, 903, 916, 921, 1011, 1415, 4, 2, 59, 111, 840, 842, 1, 8517, 116, 114, 97, 104, 100, 59, 1, 10513, 99, 121, 59, 1, 1026, 99, 121, 59, 1, 1029, 99, 121, 59, 1, 1039, 4, 3, 103, 114, 115, 873, 879, 883, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8609, 104, 118, 59, 1, 10980, 4, 2, 97, 121, 894, 900, 114, 111, 110, 59, 1, 270, 59, 1, 1044, 108, 4, 2, 59, 116, 910, 912, 1, 8711, 97, 59, 1, 916, 114, 59, 3, 55349, 56583, 4, 2, 97, 102, 927, 998, 4, 2, 99, 109, 933, 992, 114, 105, 116, 105, 99, 97, 108, 4, 4, 65, 68, 71, 84, 950, 957, 978, 985, 99, 117, 116, 101, 59, 1, 180, 111, 4, 2, 116, 117, 964, 967, 59, 1, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 1, 733, 114, 97, 118, 101, 59, 1, 96, 105, 108, 100, 101, 59, 1, 732, 111, 110, 100, 59, 1, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8518, 4, 4, 112, 116, 117, 119, 1021, 1026, 1048, 1249, 102, 59, 3, 55349, 56635, 4, 3, 59, 68, 69, 1034, 1036, 1041, 1, 168, 111, 116, 59, 1, 8412, 113, 117, 97, 108, 59, 1, 8784, 98, 108, 101, 4, 6, 67, 68, 76, 82, 85, 86, 1065, 1082, 1101, 1189, 1211, 1236, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8751, 111, 4, 2, 116, 119, 1089, 1092, 59, 1, 168, 110, 65, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 101, 111, 1107, 1141, 102, 116, 4, 3, 65, 82, 84, 1117, 1124, 1136, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8660, 101, 101, 59, 1, 10980, 110, 103, 4, 2, 76, 82, 1149, 1177, 101, 102, 116, 4, 2, 65, 82, 1158, 1165, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10233, 105, 103, 104, 116, 4, 2, 65, 84, 1199, 1206, 114, 114, 111, 119, 59, 1, 8658, 101, 101, 59, 1, 8872, 112, 4, 2, 65, 68, 1218, 1225, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8741, 110, 4, 6, 65, 66, 76, 82, 84, 97, 1264, 1292, 1299, 1352, 1391, 1408, 114, 114, 111, 119, 4, 3, 59, 66, 85, 1276, 1278, 1283, 1, 8595, 97, 114, 59, 1, 10515, 112, 65, 114, 114, 111, 119, 59, 1, 8693, 114, 101, 118, 101, 59, 1, 785, 101, 102, 116, 4, 3, 82, 84, 86, 1310, 1323, 1334, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 1, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10590, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1345, 1347, 1, 8637, 97, 114, 59, 1, 10582, 105, 103, 104, 116, 4, 2, 84, 86, 1362, 1373, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10591, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1384, 1386, 1, 8641, 97, 114, 59, 1, 10583, 101, 101, 4, 2, 59, 65, 1399, 1401, 1, 8868, 114, 114, 111, 119, 59, 1, 8615, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 99, 116, 1421, 1426, 114, 59, 3, 55349, 56479, 114, 111, 107, 59, 1, 272, 4, 16, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1466, 1470, 1478, 1489, 1515, 1520, 1525, 1536, 1544, 1593, 1609, 1617, 1650, 1664, 1668, 1677, 71, 59, 1, 330, 72, 5, 208, 1, 59, 1476, 1, 208, 99, 117, 116, 101, 5, 201, 1, 59, 1487, 1, 201, 4, 3, 97, 105, 121, 1497, 1503, 1512, 114, 111, 110, 59, 1, 282, 114, 99, 5, 202, 1, 59, 1510, 1, 202, 59, 1, 1069, 111, 116, 59, 1, 278, 114, 59, 3, 55349, 56584, 114, 97, 118, 101, 5, 200, 1, 59, 1534, 1, 200, 101, 109, 101, 110, 116, 59, 1, 8712, 4, 2, 97, 112, 1550, 1555, 99, 114, 59, 1, 274, 116, 121, 4, 2, 83, 86, 1563, 1576, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9643, 4, 2, 103, 112, 1599, 1604, 111, 110, 59, 1, 280, 102, 59, 3, 55349, 56636, 115, 105, 108, 111, 110, 59, 1, 917, 117, 4, 2, 97, 105, 1624, 1640, 108, 4, 2, 59, 84, 1631, 1633, 1, 10869, 105, 108, 100, 101, 59, 1, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8652, 4, 2, 99, 105, 1656, 1660, 114, 59, 1, 8496, 109, 59, 1, 10867, 97, 59, 1, 919, 109, 108, 5, 203, 1, 59, 1675, 1, 203, 4, 2, 105, 112, 1683, 1689, 115, 116, 115, 59, 1, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 1, 8519, 4, 5, 99, 102, 105, 111, 115, 1713, 1717, 1722, 1762, 1791, 121, 59, 1, 1060, 114, 59, 3, 55349, 56585, 108, 108, 101, 100, 4, 2, 83, 86, 1732, 1745, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9642, 4, 3, 112, 114, 117, 1770, 1775, 1781, 102, 59, 3, 55349, 56637, 65, 108, 108, 59, 1, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 1, 8497, 99, 114, 59, 1, 8497, 4, 12, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1822, 1827, 1834, 1848, 1855, 1877, 1882, 1887, 1890, 1896, 1978, 1984, 99, 121, 59, 1, 1027, 5, 62, 1, 59, 1832, 1, 62, 109, 109, 97, 4, 2, 59, 100, 1843, 1845, 1, 915, 59, 1, 988, 114, 101, 118, 101, 59, 1, 286, 4, 3, 101, 105, 121, 1863, 1869, 1874, 100, 105, 108, 59, 1, 290, 114, 99, 59, 1, 284, 59, 1, 1043, 111, 116, 59, 1, 288, 114, 59, 3, 55349, 56586, 59, 1, 8921, 112, 102, 59, 3, 55349, 56638, 101, 97, 116, 101, 114, 4, 6, 69, 70, 71, 76, 83, 84, 1915, 1933, 1944, 1953, 1959, 1971, 113, 117, 97, 108, 4, 2, 59, 76, 1925, 1927, 1, 8805, 101, 115, 115, 59, 1, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8807, 114, 101, 97, 116, 101, 114, 59, 1, 10914, 101, 115, 115, 59, 1, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10878, 105, 108, 100, 101, 59, 1, 8819, 99, 114, 59, 3, 55349, 56482, 59, 1, 8811, 4, 8, 65, 97, 99, 102, 105, 111, 115, 117, 2005, 2012, 2026, 2032, 2036, 2049, 2073, 2089, 82, 68, 99, 121, 59, 1, 1066, 4, 2, 99, 116, 2018, 2023, 101, 107, 59, 1, 711, 59, 1, 94, 105, 114, 99, 59, 1, 292, 114, 59, 1, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 1, 8459, 4, 2, 112, 114, 2055, 2059, 102, 59, 1, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 1, 9472, 4, 2, 99, 116, 2079, 2083, 114, 59, 1, 8459, 114, 111, 107, 59, 1, 294, 109, 112, 4, 2, 68, 69, 2097, 2107, 111, 119, 110, 72, 117, 109, 112, 59, 1, 8782, 113, 117, 97, 108, 59, 1, 8783, 4, 14, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 2144, 2149, 2155, 2160, 2171, 2189, 2194, 2198, 2209, 2245, 2307, 2329, 2334, 2341, 99, 121, 59, 1, 1045, 108, 105, 103, 59, 1, 306, 99, 121, 59, 1, 1025, 99, 117, 116, 101, 5, 205, 1, 59, 2169, 1, 205, 4, 2, 105, 121, 2177, 2186, 114, 99, 5, 206, 1, 59, 2184, 1, 206, 59, 1, 1048, 111, 116, 59, 1, 304, 114, 59, 1, 8465, 114, 97, 118, 101, 5, 204, 1, 59, 2207, 1, 204, 4, 3, 59, 97, 112, 2217, 2219, 2238, 1, 8465, 4, 2, 99, 103, 2225, 2229, 114, 59, 1, 298, 105, 110, 97, 114, 121, 73, 59, 1, 8520, 108, 105, 101, 115, 59, 1, 8658, 4, 2, 116, 118, 2251, 2281, 4, 2, 59, 101, 2257, 2259, 1, 8748, 4, 2, 103, 114, 2265, 2271, 114, 97, 108, 59, 1, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8898, 105, 115, 105, 98, 108, 101, 4, 2, 67, 84, 2293, 2300, 111, 109, 109, 97, 59, 1, 8291, 105, 109, 101, 115, 59, 1, 8290, 4, 3, 103, 112, 116, 2315, 2320, 2325, 111, 110, 59, 1, 302, 102, 59, 3, 55349, 56640, 97, 59, 1, 921, 99, 114, 59, 1, 8464, 105, 108, 100, 101, 59, 1, 296, 4, 2, 107, 109, 2347, 2352, 99, 121, 59, 1, 1030, 108, 5, 207, 1, 59, 2358, 1, 207, 4, 5, 99, 102, 111, 115, 117, 2372, 2386, 2391, 2397, 2414, 4, 2, 105, 121, 2378, 2383, 114, 99, 59, 1, 308, 59, 1, 1049, 114, 59, 3, 55349, 56589, 112, 102, 59, 3, 55349, 56641, 4, 2, 99, 101, 2403, 2408, 114, 59, 3, 55349, 56485, 114, 99, 121, 59, 1, 1032, 107, 99, 121, 59, 1, 1028, 4, 7, 72, 74, 97, 99, 102, 111, 115, 2436, 2441, 2446, 2452, 2467, 2472, 2478, 99, 121, 59, 1, 1061, 99, 121, 59, 1, 1036, 112, 112, 97, 59, 1, 922, 4, 2, 101, 121, 2458, 2464, 100, 105, 108, 59, 1, 310, 59, 1, 1050, 114, 59, 3, 55349, 56590, 112, 102, 59, 3, 55349, 56642, 99, 114, 59, 3, 55349, 56486, 4, 11, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2508, 2513, 2520, 2562, 2585, 2981, 2986, 3004, 3011, 3146, 3167, 99, 121, 59, 1, 1033, 5, 60, 1, 59, 2518, 1, 60, 4, 5, 99, 109, 110, 112, 114, 2532, 2538, 2544, 2548, 2558, 117, 116, 101, 59, 1, 313, 98, 100, 97, 59, 1, 923, 103, 59, 1, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 1, 8466, 114, 59, 1, 8606, 4, 3, 97, 101, 121, 2570, 2576, 2582, 114, 111, 110, 59, 1, 317, 100, 105, 108, 59, 1, 315, 59, 1, 1051, 4, 2, 102, 115, 2591, 2907, 116, 4, 10, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2614, 2663, 2672, 2728, 2735, 2760, 2820, 2870, 2888, 2895, 4, 2, 110, 114, 2620, 2633, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10216, 114, 111, 119, 4, 3, 59, 66, 82, 2644, 2646, 2651, 1, 8592, 97, 114, 59, 1, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8646, 101, 105, 108, 105, 110, 103, 59, 1, 8968, 111, 4, 2, 117, 119, 2679, 2692, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10214, 110, 4, 2, 84, 86, 2699, 2710, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10593, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2721, 2723, 1, 8643, 97, 114, 59, 1, 10585, 108, 111, 111, 114, 59, 1, 8970, 105, 103, 104, 116, 4, 2, 65, 86, 2745, 2752, 114, 114, 111, 119, 59, 1, 8596, 101, 99, 116, 111, 114, 59, 1, 10574, 4, 2, 101, 114, 2766, 2792, 101, 4, 3, 59, 65, 86, 2775, 2777, 2784, 1, 8867, 114, 114, 111, 119, 59, 1, 8612, 101, 99, 116, 111, 114, 59, 1, 10586, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 2806, 2808, 2813, 1, 8882, 97, 114, 59, 1, 10703, 113, 117, 97, 108, 59, 1, 8884, 112, 4, 3, 68, 84, 86, 2829, 2841, 2852, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10592, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2863, 2865, 1, 8639, 97, 114, 59, 1, 10584, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2881, 2883, 1, 8636, 97, 114, 59, 1, 10578, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8660, 115, 4, 6, 69, 70, 71, 76, 83, 84, 2922, 2936, 2947, 2956, 2962, 2974, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8806, 114, 101, 97, 116, 101, 114, 59, 1, 8822, 101, 115, 115, 59, 1, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10877, 105, 108, 100, 101, 59, 1, 8818, 114, 59, 3, 55349, 56591, 4, 2, 59, 101, 2992, 2994, 1, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8666, 105, 100, 111, 116, 59, 1, 319, 4, 3, 110, 112, 119, 3019, 3110, 3115, 103, 4, 4, 76, 82, 108, 114, 3030, 3058, 3070, 3098, 101, 102, 116, 4, 2, 65, 82, 3039, 3046, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10230, 101, 102, 116, 4, 2, 97, 114, 3079, 3086, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10233, 102, 59, 3, 55349, 56643, 101, 114, 4, 2, 76, 82, 3123, 3134, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8600, 4, 3, 99, 104, 116, 3154, 3158, 3161, 114, 59, 1, 8466, 59, 1, 8624, 114, 111, 107, 59, 1, 321, 59, 1, 8810, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 3188, 3192, 3196, 3222, 3227, 3237, 3243, 3248, 112, 59, 1, 10501, 121, 59, 1, 1052, 4, 2, 100, 108, 3202, 3213, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8287, 108, 105, 110, 116, 114, 102, 59, 1, 8499, 114, 59, 3, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 1, 8723, 112, 102, 59, 3, 55349, 56644, 99, 114, 59, 1, 8499, 59, 1, 924, 4, 9, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3271, 3276, 3283, 3306, 3422, 3427, 4120, 4126, 4137, 99, 121, 59, 1, 1034, 99, 117, 116, 101, 59, 1, 323, 4, 3, 97, 101, 121, 3291, 3297, 3303, 114, 111, 110, 59, 1, 327, 100, 105, 108, 59, 1, 325, 59, 1, 1053, 4, 3, 103, 115, 119, 3314, 3380, 3415, 97, 116, 105, 118, 101, 4, 3, 77, 84, 86, 3327, 3340, 3365, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8203, 104, 105, 4, 2, 99, 110, 3348, 3357, 107, 83, 112, 97, 99, 101, 59, 1, 8203, 83, 112, 97, 99, 101, 59, 1, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8203, 116, 101, 100, 4, 2, 71, 76, 3389, 3405, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 1, 8810, 76, 105, 110, 101, 59, 1, 10, 114, 59, 3, 55349, 56593, 4, 4, 66, 110, 112, 116, 3437, 3444, 3460, 3464, 114, 101, 97, 107, 59, 1, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 1, 160, 102, 59, 1, 8469, 4, 13, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3492, 3494, 3517, 3536, 3578, 3657, 3685, 3784, 3823, 3860, 3915, 4066, 4107, 1, 10988, 4, 2, 111, 117, 3500, 3510, 110, 103, 114, 117, 101, 110, 116, 59, 1, 8802, 112, 67, 97, 112, 59, 1, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8742, 4, 3, 108, 113, 120, 3544, 3552, 3571, 101, 109, 101, 110, 116, 59, 1, 8713, 117, 97, 108, 4, 2, 59, 84, 3561, 3563, 1, 8800, 105, 108, 100, 101, 59, 3, 8770, 824, 105, 115, 116, 115, 59, 1, 8708, 114, 101, 97, 116, 101, 114, 4, 7, 59, 69, 70, 71, 76, 83, 84, 3600, 3602, 3609, 3621, 3631, 3637, 3650, 1, 8815, 113, 117, 97, 108, 59, 1, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 3, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 3, 8811, 824, 101, 115, 115, 59, 1, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10878, 824, 105, 108, 100, 101, 59, 1, 8821, 117, 109, 112, 4, 2, 68, 69, 3666, 3677, 111, 119, 110, 72, 117, 109, 112, 59, 3, 8782, 824, 113, 117, 97, 108, 59, 3, 8783, 824, 101, 4, 2, 102, 115, 3692, 3724, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3709, 3711, 3717, 1, 8938, 97, 114, 59, 3, 10703, 824, 113, 117, 97, 108, 59, 1, 8940, 115, 4, 6, 59, 69, 71, 76, 83, 84, 3739, 3741, 3748, 3757, 3764, 3777, 1, 8814, 113, 117, 97, 108, 59, 1, 8816, 114, 101, 97, 116, 101, 114, 59, 1, 8824, 101, 115, 115, 59, 3, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10877, 824, 105, 108, 100, 101, 59, 1, 8820, 101, 115, 116, 101, 100, 4, 2, 71, 76, 3795, 3812, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 3, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 3, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 4, 3, 59, 69, 83, 3838, 3840, 3848, 1, 8832, 113, 117, 97, 108, 59, 3, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8928, 4, 2, 101, 105, 3866, 3881, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 1, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3900, 3902, 3908, 1, 8939, 97, 114, 59, 3, 10704, 824, 113, 117, 97, 108, 59, 1, 8941, 4, 2, 113, 117, 3921, 3973, 117, 97, 114, 101, 83, 117, 4, 2, 98, 112, 3933, 3952, 115, 101, 116, 4, 2, 59, 69, 3942, 3945, 3, 8847, 824, 113, 117, 97, 108, 59, 1, 8930, 101, 114, 115, 101, 116, 4, 2, 59, 69, 3963, 3966, 3, 8848, 824, 113, 117, 97, 108, 59, 1, 8931, 4, 3, 98, 99, 112, 3981, 4e3, 4045, 115, 101, 116, 4, 2, 59, 69, 3990, 3993, 3, 8834, 8402, 113, 117, 97, 108, 59, 1, 8840, 99, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 4015, 4017, 4025, 4037, 1, 8833, 113, 117, 97, 108, 59, 3, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8929, 105, 108, 100, 101, 59, 3, 8831, 824, 101, 114, 115, 101, 116, 4, 2, 59, 69, 4056, 4059, 3, 8835, 8402, 113, 117, 97, 108, 59, 1, 8841, 105, 108, 100, 101, 4, 4, 59, 69, 70, 84, 4080, 4082, 4089, 4100, 1, 8769, 113, 117, 97, 108, 59, 1, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8775, 105, 108, 100, 101, 59, 1, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8740, 99, 114, 59, 3, 55349, 56489, 105, 108, 100, 101, 5, 209, 1, 59, 4135, 1, 209, 59, 1, 925, 4, 14, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 4170, 4176, 4187, 4205, 4212, 4217, 4228, 4253, 4259, 4292, 4295, 4316, 4337, 4346, 108, 105, 103, 59, 1, 338, 99, 117, 116, 101, 5, 211, 1, 59, 4185, 1, 211, 4, 2, 105, 121, 4193, 4202, 114, 99, 5, 212, 1, 59, 4200, 1, 212, 59, 1, 1054, 98, 108, 97, 99, 59, 1, 336, 114, 59, 3, 55349, 56594, 114, 97, 118, 101, 5, 210, 1, 59, 4226, 1, 210, 4, 3, 97, 101, 105, 4236, 4241, 4246, 99, 114, 59, 1, 332, 103, 97, 59, 1, 937, 99, 114, 111, 110, 59, 1, 927, 112, 102, 59, 3, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 4, 2, 68, 81, 4272, 4285, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8220, 117, 111, 116, 101, 59, 1, 8216, 59, 1, 10836, 4, 2, 99, 108, 4301, 4306, 114, 59, 3, 55349, 56490, 97, 115, 104, 5, 216, 1, 59, 4314, 1, 216, 105, 4, 2, 108, 109, 4323, 4332, 100, 101, 5, 213, 1, 59, 4330, 1, 213, 101, 115, 59, 1, 10807, 109, 108, 5, 214, 1, 59, 4344, 1, 214, 101, 114, 4, 2, 66, 80, 4354, 4380, 4, 2, 97, 114, 4360, 4364, 114, 59, 1, 8254, 97, 99, 4, 2, 101, 107, 4372, 4375, 59, 1, 9182, 101, 116, 59, 1, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9180, 4, 9, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4413, 4422, 4426, 4431, 4435, 4438, 4448, 4471, 4561, 114, 116, 105, 97, 108, 68, 59, 1, 8706, 121, 59, 1, 1055, 114, 59, 3, 55349, 56595, 105, 59, 1, 934, 59, 1, 928, 117, 115, 77, 105, 110, 117, 115, 59, 1, 177, 4, 2, 105, 112, 4454, 4467, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 1, 8460, 102, 59, 1, 8473, 4, 4, 59, 101, 105, 111, 4481, 4483, 4526, 4531, 1, 10939, 99, 101, 100, 101, 115, 4, 4, 59, 69, 83, 84, 4498, 4500, 4507, 4519, 1, 8826, 113, 117, 97, 108, 59, 1, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8828, 105, 108, 100, 101, 59, 1, 8830, 109, 101, 59, 1, 8243, 4, 2, 100, 112, 4537, 4543, 117, 99, 116, 59, 1, 8719, 111, 114, 116, 105, 111, 110, 4, 2, 59, 97, 4555, 4557, 1, 8759, 108, 59, 1, 8733, 4, 2, 99, 105, 4567, 4572, 114, 59, 3, 55349, 56491, 59, 1, 936, 4, 4, 85, 102, 111, 115, 4585, 4594, 4599, 4604, 79, 84, 5, 34, 1, 59, 4592, 1, 34, 114, 59, 3, 55349, 56596, 112, 102, 59, 1, 8474, 99, 114, 59, 3, 55349, 56492, 4, 12, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4636, 4642, 4650, 4681, 4704, 4763, 4767, 4771, 5047, 5069, 5081, 5094, 97, 114, 114, 59, 1, 10512, 71, 5, 174, 1, 59, 4648, 1, 174, 4, 3, 99, 110, 114, 4658, 4664, 4668, 117, 116, 101, 59, 1, 340, 103, 59, 1, 10219, 114, 4, 2, 59, 116, 4675, 4677, 1, 8608, 108, 59, 1, 10518, 4, 3, 97, 101, 121, 4689, 4695, 4701, 114, 111, 110, 59, 1, 344, 100, 105, 108, 59, 1, 342, 59, 1, 1056, 4, 2, 59, 118, 4710, 4712, 1, 8476, 101, 114, 115, 101, 4, 2, 69, 85, 4722, 4748, 4, 2, 108, 113, 4728, 4736, 101, 109, 101, 110, 116, 59, 1, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10607, 114, 59, 1, 8476, 111, 59, 1, 929, 103, 104, 116, 4, 8, 65, 67, 68, 70, 84, 85, 86, 97, 4792, 4840, 4849, 4905, 4912, 4972, 5022, 5040, 4, 2, 110, 114, 4798, 4811, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10217, 114, 111, 119, 4, 3, 59, 66, 76, 4822, 4824, 4829, 1, 8594, 97, 114, 59, 1, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8644, 101, 105, 108, 105, 110, 103, 59, 1, 8969, 111, 4, 2, 117, 119, 4856, 4869, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10215, 110, 4, 2, 84, 86, 4876, 4887, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10589, 101, 99, 116, 111, 114, 4, 2, 59, 66, 4898, 4900, 1, 8642, 97, 114, 59, 1, 10581, 108, 111, 111, 114, 59, 1, 8971, 4, 2, 101, 114, 4918, 4944, 101, 4, 3, 59, 65, 86, 4927, 4929, 4936, 1, 8866, 114, 114, 111, 119, 59, 1, 8614, 101, 99, 116, 111, 114, 59, 1, 10587, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 4958, 4960, 4965, 1, 8883, 97, 114, 59, 1, 10704, 113, 117, 97, 108, 59, 1, 8885, 112, 4, 3, 68, 84, 86, 4981, 4993, 5004, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10588, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5015, 5017, 1, 8638, 97, 114, 59, 1, 10580, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5033, 5035, 1, 8640, 97, 114, 59, 1, 10579, 114, 114, 111, 119, 59, 1, 8658, 4, 2, 112, 117, 5053, 5057, 102, 59, 1, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 1, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8667, 4, 2, 99, 104, 5087, 5091, 114, 59, 1, 8475, 59, 1, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 1, 10740, 4, 13, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 5134, 5150, 5157, 5164, 5198, 5203, 5259, 5265, 5277, 5283, 5374, 5380, 5385, 4, 2, 67, 99, 5140, 5146, 72, 99, 121, 59, 1, 1065, 121, 59, 1, 1064, 70, 84, 99, 121, 59, 1, 1068, 99, 117, 116, 101, 59, 1, 346, 4, 5, 59, 97, 101, 105, 121, 5176, 5178, 5184, 5190, 5195, 1, 10940, 114, 111, 110, 59, 1, 352, 100, 105, 108, 59, 1, 350, 114, 99, 59, 1, 348, 59, 1, 1057, 114, 59, 3, 55349, 56598, 111, 114, 116, 4, 4, 68, 76, 82, 85, 5216, 5227, 5238, 5250, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8594, 112, 65, 114, 114, 111, 119, 59, 1, 8593, 103, 109, 97, 59, 1, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 1, 8728, 112, 102, 59, 3, 55349, 56650, 4, 2, 114, 117, 5289, 5293, 116, 59, 1, 8730, 97, 114, 101, 4, 4, 59, 73, 83, 85, 5306, 5308, 5322, 5367, 1, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8851, 117, 4, 2, 98, 112, 5329, 5347, 115, 101, 116, 4, 2, 59, 69, 5338, 5340, 1, 8847, 113, 117, 97, 108, 59, 1, 8849, 101, 114, 115, 101, 116, 4, 2, 59, 69, 5358, 5360, 1, 8848, 113, 117, 97, 108, 59, 1, 8850, 110, 105, 111, 110, 59, 1, 8852, 99, 114, 59, 3, 55349, 56494, 97, 114, 59, 1, 8902, 4, 4, 98, 99, 109, 112, 5395, 5420, 5475, 5478, 4, 2, 59, 115, 5401, 5403, 1, 8912, 101, 116, 4, 2, 59, 69, 5411, 5413, 1, 8912, 113, 117, 97, 108, 59, 1, 8838, 4, 2, 99, 104, 5426, 5468, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 5440, 5442, 5449, 5461, 1, 8827, 113, 117, 97, 108, 59, 1, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8829, 105, 108, 100, 101, 59, 1, 8831, 84, 104, 97, 116, 59, 1, 8715, 59, 1, 8721, 4, 3, 59, 101, 115, 5486, 5488, 5507, 1, 8913, 114, 115, 101, 116, 4, 2, 59, 69, 5498, 5500, 1, 8835, 113, 117, 97, 108, 59, 1, 8839, 101, 116, 59, 1, 8913, 4, 11, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5536, 5546, 5552, 5567, 5579, 5602, 5607, 5655, 5695, 5701, 5711, 79, 82, 78, 5, 222, 1, 59, 5544, 1, 222, 65, 68, 69, 59, 1, 8482, 4, 2, 72, 99, 5558, 5563, 99, 121, 59, 1, 1035, 121, 59, 1, 1062, 4, 2, 98, 117, 5573, 5576, 59, 1, 9, 59, 1, 932, 4, 3, 97, 101, 121, 5587, 5593, 5599, 114, 111, 110, 59, 1, 356, 100, 105, 108, 59, 1, 354, 59, 1, 1058, 114, 59, 3, 55349, 56599, 4, 2, 101, 105, 5613, 5631, 4, 2, 114, 116, 5619, 5627, 101, 102, 111, 114, 101, 59, 1, 8756, 97, 59, 1, 920, 4, 2, 99, 110, 5637, 5647, 107, 83, 112, 97, 99, 101, 59, 3, 8287, 8202, 83, 112, 97, 99, 101, 59, 1, 8201, 108, 100, 101, 4, 4, 59, 69, 70, 84, 5668, 5670, 5677, 5688, 1, 8764, 113, 117, 97, 108, 59, 1, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8773, 105, 108, 100, 101, 59, 1, 8776, 112, 102, 59, 3, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 1, 8411, 4, 2, 99, 116, 5717, 5722, 114, 59, 3, 55349, 56495, 114, 111, 107, 59, 1, 358, 4, 14, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 114, 115, 116, 117, 5758, 5789, 5805, 5823, 5830, 5835, 5846, 5852, 5921, 5937, 6089, 6095, 6101, 6108, 4, 2, 99, 114, 5764, 5774, 117, 116, 101, 5, 218, 1, 59, 5772, 1, 218, 114, 4, 2, 59, 111, 5781, 5783, 1, 8607, 99, 105, 114, 59, 1, 10569, 114, 4, 2, 99, 101, 5796, 5800, 121, 59, 1, 1038, 118, 101, 59, 1, 364, 4, 2, 105, 121, 5811, 5820, 114, 99, 5, 219, 1, 59, 5818, 1, 219, 59, 1, 1059, 98, 108, 97, 99, 59, 1, 368, 114, 59, 3, 55349, 56600, 114, 97, 118, 101, 5, 217, 1, 59, 5844, 1, 217, 97, 99, 114, 59, 1, 362, 4, 2, 100, 105, 5858, 5905, 101, 114, 4, 2, 66, 80, 5866, 5892, 4, 2, 97, 114, 5872, 5876, 114, 59, 1, 95, 97, 99, 4, 2, 101, 107, 5884, 5887, 59, 1, 9183, 101, 116, 59, 1, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9181, 111, 110, 4, 2, 59, 80, 5913, 5915, 1, 8899, 108, 117, 115, 59, 1, 8846, 4, 2, 103, 112, 5927, 5932, 111, 110, 59, 1, 370, 102, 59, 3, 55349, 56652, 4, 8, 65, 68, 69, 84, 97, 100, 112, 115, 5955, 5985, 5996, 6009, 6026, 6033, 6044, 6075, 114, 114, 111, 119, 4, 3, 59, 66, 68, 5967, 5969, 5974, 1, 8593, 97, 114, 59, 1, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10606, 101, 101, 4, 2, 59, 65, 6017, 6019, 1, 8869, 114, 114, 111, 119, 59, 1, 8613, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 4, 2, 76, 82, 6052, 6063, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8599, 105, 4, 2, 59, 108, 6082, 6084, 1, 978, 111, 110, 59, 1, 933, 105, 110, 103, 59, 1, 366, 99, 114, 59, 3, 55349, 56496, 105, 108, 100, 101, 59, 1, 360, 109, 108, 5, 220, 1, 59, 6115, 1, 220, 4, 9, 68, 98, 99, 100, 101, 102, 111, 115, 118, 6137, 6143, 6148, 6152, 6166, 6250, 6255, 6261, 6267, 97, 115, 104, 59, 1, 8875, 97, 114, 59, 1, 10987, 121, 59, 1, 1042, 97, 115, 104, 4, 2, 59, 108, 6161, 6163, 1, 8873, 59, 1, 10982, 4, 2, 101, 114, 6172, 6175, 59, 1, 8897, 4, 3, 98, 116, 121, 6183, 6188, 6238, 97, 114, 59, 1, 8214, 4, 2, 59, 105, 6194, 6196, 1, 8214, 99, 97, 108, 4, 4, 66, 76, 83, 84, 6209, 6214, 6220, 6231, 97, 114, 59, 1, 8739, 105, 110, 101, 59, 1, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 1, 10072, 105, 108, 100, 101, 59, 1, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8202, 114, 59, 3, 55349, 56601, 112, 102, 59, 3, 55349, 56653, 99, 114, 59, 3, 55349, 56497, 100, 97, 115, 104, 59, 1, 8874, 4, 5, 99, 101, 102, 111, 115, 6286, 6292, 6298, 6303, 6309, 105, 114, 99, 59, 1, 372, 100, 103, 101, 59, 1, 8896, 114, 59, 3, 55349, 56602, 112, 102, 59, 3, 55349, 56654, 99, 114, 59, 3, 55349, 56498, 4, 4, 102, 105, 111, 115, 6325, 6330, 6333, 6339, 114, 59, 3, 55349, 56603, 59, 1, 926, 112, 102, 59, 3, 55349, 56655, 99, 114, 59, 3, 55349, 56499, 4, 9, 65, 73, 85, 97, 99, 102, 111, 115, 117, 6365, 6370, 6375, 6380, 6391, 6405, 6410, 6416, 6422, 99, 121, 59, 1, 1071, 99, 121, 59, 1, 1031, 99, 121, 59, 1, 1070, 99, 117, 116, 101, 5, 221, 1, 59, 6389, 1, 221, 4, 2, 105, 121, 6397, 6402, 114, 99, 59, 1, 374, 59, 1, 1067, 114, 59, 3, 55349, 56604, 112, 102, 59, 3, 55349, 56656, 99, 114, 59, 3, 55349, 56500, 109, 108, 59, 1, 376, 4, 8, 72, 97, 99, 100, 101, 102, 111, 115, 6445, 6450, 6457, 6472, 6477, 6501, 6505, 6510, 99, 121, 59, 1, 1046, 99, 117, 116, 101, 59, 1, 377, 4, 2, 97, 121, 6463, 6469, 114, 111, 110, 59, 1, 381, 59, 1, 1047, 111, 116, 59, 1, 379, 4, 2, 114, 116, 6483, 6497, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59, 1, 8203, 97, 59, 1, 918, 114, 59, 1, 8488, 112, 102, 59, 1, 8484, 99, 114, 59, 3, 55349, 56501, 4, 16, 97, 98, 99, 101, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 6550, 6561, 6568, 6612, 6622, 6634, 6645, 6672, 6699, 6854, 6870, 6923, 6933, 6963, 6974, 6983, 99, 117, 116, 101, 5, 225, 1, 59, 6559, 1, 225, 114, 101, 118, 101, 59, 1, 259, 4, 6, 59, 69, 100, 105, 117, 121, 6582, 6584, 6588, 6591, 6600, 6609, 1, 8766, 59, 3, 8766, 819, 59, 1, 8767, 114, 99, 5, 226, 1, 59, 6598, 1, 226, 116, 101, 5, 180, 1, 59, 6607, 1, 180, 59, 1, 1072, 108, 105, 103, 5, 230, 1, 59, 6620, 1, 230, 4, 2, 59, 114, 6628, 6630, 1, 8289, 59, 3, 55349, 56606, 114, 97, 118, 101, 5, 224, 1, 59, 6643, 1, 224, 4, 2, 101, 112, 6651, 6667, 4, 2, 102, 112, 6657, 6663, 115, 121, 109, 59, 1, 8501, 104, 59, 1, 8501, 104, 97, 59, 1, 945, 4, 2, 97, 112, 6678, 6692, 4, 2, 99, 108, 6684, 6688, 114, 59, 1, 257, 103, 59, 1, 10815, 5, 38, 1, 59, 6697, 1, 38, 4, 2, 100, 103, 6705, 6737, 4, 5, 59, 97, 100, 115, 118, 6717, 6719, 6724, 6727, 6734, 1, 8743, 110, 100, 59, 1, 10837, 59, 1, 10844, 108, 111, 112, 101, 59, 1, 10840, 59, 1, 10842, 4, 7, 59, 101, 108, 109, 114, 115, 122, 6753, 6755, 6758, 6762, 6814, 6835, 6848, 1, 8736, 59, 1, 10660, 101, 59, 1, 8736, 115, 100, 4, 2, 59, 97, 6770, 6772, 1, 8737, 4, 8, 97, 98, 99, 100, 101, 102, 103, 104, 6790, 6793, 6796, 6799, 6802, 6805, 6808, 6811, 59, 1, 10664, 59, 1, 10665, 59, 1, 10666, 59, 1, 10667, 59, 1, 10668, 59, 1, 10669, 59, 1, 10670, 59, 1, 10671, 116, 4, 2, 59, 118, 6821, 6823, 1, 8735, 98, 4, 2, 59, 100, 6830, 6832, 1, 8894, 59, 1, 10653, 4, 2, 112, 116, 6841, 6845, 104, 59, 1, 8738, 59, 1, 197, 97, 114, 114, 59, 1, 9084, 4, 2, 103, 112, 6860, 6865, 111, 110, 59, 1, 261, 102, 59, 3, 55349, 56658, 4, 7, 59, 69, 97, 101, 105, 111, 112, 6886, 6888, 6891, 6897, 6900, 6904, 6908, 1, 8776, 59, 1, 10864, 99, 105, 114, 59, 1, 10863, 59, 1, 8778, 100, 59, 1, 8779, 115, 59, 1, 39, 114, 111, 120, 4, 2, 59, 101, 6917, 6919, 1, 8776, 113, 59, 1, 8778, 105, 110, 103, 5, 229, 1, 59, 6931, 1, 229, 4, 3, 99, 116, 121, 6941, 6946, 6949, 114, 59, 3, 55349, 56502, 59, 1, 42, 109, 112, 4, 2, 59, 101, 6957, 6959, 1, 8776, 113, 59, 1, 8781, 105, 108, 100, 101, 5, 227, 1, 59, 6972, 1, 227, 109, 108, 5, 228, 1, 59, 6981, 1, 228, 4, 2, 99, 105, 6989, 6997, 111, 110, 105, 110, 116, 59, 1, 8755, 110, 116, 59, 1, 10769, 4, 16, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 7036, 7041, 7119, 7135, 7149, 7155, 7219, 7224, 7347, 7354, 7463, 7489, 7786, 7793, 7814, 7866, 111, 116, 59, 1, 10989, 4, 2, 99, 114, 7047, 7094, 107, 4, 4, 99, 101, 112, 115, 7058, 7064, 7073, 7080, 111, 110, 103, 59, 1, 8780, 112, 115, 105, 108, 111, 110, 59, 1, 1014, 114, 105, 109, 101, 59, 1, 8245, 105, 109, 4, 2, 59, 101, 7088, 7090, 1, 8765, 113, 59, 1, 8909, 4, 2, 118, 119, 7100, 7105, 101, 101, 59, 1, 8893, 101, 100, 4, 2, 59, 103, 7113, 7115, 1, 8965, 101, 59, 1, 8965, 114, 107, 4, 2, 59, 116, 7127, 7129, 1, 9141, 98, 114, 107, 59, 1, 9142, 4, 2, 111, 121, 7141, 7146, 110, 103, 59, 1, 8780, 59, 1, 1073, 113, 117, 111, 59, 1, 8222, 4, 5, 99, 109, 112, 114, 116, 7167, 7181, 7188, 7193, 7199, 97, 117, 115, 4, 2, 59, 101, 7176, 7178, 1, 8757, 59, 1, 8757, 112, 116, 121, 118, 59, 1, 10672, 115, 105, 59, 1, 1014, 110, 111, 117, 59, 1, 8492, 4, 3, 97, 104, 119, 7207, 7210, 7213, 59, 1, 946, 59, 1, 8502, 101, 101, 110, 59, 1, 8812, 114, 59, 3, 55349, 56607, 103, 4, 7, 99, 111, 115, 116, 117, 118, 119, 7241, 7262, 7288, 7305, 7328, 7335, 7340, 4, 3, 97, 105, 117, 7249, 7253, 7258, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 4, 3, 100, 112, 116, 7270, 7275, 7281, 111, 116, 59, 1, 10752, 108, 117, 115, 59, 1, 10753, 105, 109, 101, 115, 59, 1, 10754, 4, 2, 113, 116, 7294, 7300, 99, 117, 112, 59, 1, 10758, 97, 114, 59, 1, 9733, 114, 105, 97, 110, 103, 108, 101, 4, 2, 100, 117, 7318, 7324, 111, 119, 110, 59, 1, 9661, 112, 59, 1, 9651, 112, 108, 117, 115, 59, 1, 10756, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 97, 114, 111, 119, 59, 1, 10509, 4, 3, 97, 107, 111, 7362, 7436, 7458, 4, 2, 99, 110, 7368, 7432, 107, 4, 3, 108, 115, 116, 7377, 7386, 7394, 111, 122, 101, 110, 103, 101, 59, 1, 10731, 113, 117, 97, 114, 101, 59, 1, 9642, 114, 105, 97, 110, 103, 108, 101, 4, 4, 59, 100, 108, 114, 7411, 7413, 7419, 7425, 1, 9652, 111, 119, 110, 59, 1, 9662, 101, 102, 116, 59, 1, 9666, 105, 103, 104, 116, 59, 1, 9656, 107, 59, 1, 9251, 4, 2, 49, 51, 7442, 7454, 4, 2, 50, 52, 7448, 7451, 59, 1, 9618, 59, 1, 9617, 52, 59, 1, 9619, 99, 107, 59, 1, 9608, 4, 2, 101, 111, 7469, 7485, 4, 2, 59, 113, 7475, 7478, 3, 61, 8421, 117, 105, 118, 59, 3, 8801, 8421, 116, 59, 1, 8976, 4, 4, 112, 116, 119, 120, 7499, 7504, 7517, 7523, 102, 59, 3, 55349, 56659, 4, 2, 59, 116, 7510, 7512, 1, 8869, 111, 109, 59, 1, 8869, 116, 105, 101, 59, 1, 8904, 4, 12, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 7549, 7571, 7597, 7619, 7655, 7660, 7682, 7708, 7715, 7721, 7728, 7750, 4, 4, 76, 82, 108, 114, 7559, 7562, 7565, 7568, 59, 1, 9559, 59, 1, 9556, 59, 1, 9558, 59, 1, 9555, 4, 5, 59, 68, 85, 100, 117, 7583, 7585, 7588, 7591, 7594, 1, 9552, 59, 1, 9574, 59, 1, 9577, 59, 1, 9572, 59, 1, 9575, 4, 4, 76, 82, 108, 114, 7607, 7610, 7613, 7616, 59, 1, 9565, 59, 1, 9562, 59, 1, 9564, 59, 1, 9561, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7635, 7637, 7640, 7643, 7646, 7649, 7652, 1, 9553, 59, 1, 9580, 59, 1, 9571, 59, 1, 9568, 59, 1, 9579, 59, 1, 9570, 59, 1, 9567, 111, 120, 59, 1, 10697, 4, 4, 76, 82, 108, 114, 7670, 7673, 7676, 7679, 59, 1, 9557, 59, 1, 9554, 59, 1, 9488, 59, 1, 9484, 4, 5, 59, 68, 85, 100, 117, 7694, 7696, 7699, 7702, 7705, 1, 9472, 59, 1, 9573, 59, 1, 9576, 59, 1, 9516, 59, 1, 9524, 105, 110, 117, 115, 59, 1, 8863, 108, 117, 115, 59, 1, 8862, 105, 109, 101, 115, 59, 1, 8864, 4, 4, 76, 82, 108, 114, 7738, 7741, 7744, 7747, 59, 1, 9563, 59, 1, 9560, 59, 1, 9496, 59, 1, 9492, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7766, 7768, 7771, 7774, 7777, 7780, 7783, 1, 9474, 59, 1, 9578, 59, 1, 9569, 59, 1, 9566, 59, 1, 9532, 59, 1, 9508, 59, 1, 9500, 114, 105, 109, 101, 59, 1, 8245, 4, 2, 101, 118, 7799, 7804, 118, 101, 59, 1, 728, 98, 97, 114, 5, 166, 1, 59, 7812, 1, 166, 4, 4, 99, 101, 105, 111, 7824, 7829, 7834, 7846, 114, 59, 3, 55349, 56503, 109, 105, 59, 1, 8271, 109, 4, 2, 59, 101, 7841, 7843, 1, 8765, 59, 1, 8909, 108, 4, 3, 59, 98, 104, 7855, 7857, 7860, 1, 92, 59, 1, 10693, 115, 117, 98, 59, 1, 10184, 4, 2, 108, 109, 7872, 7885, 108, 4, 2, 59, 101, 7879, 7881, 1, 8226, 116, 59, 1, 8226, 112, 4, 3, 59, 69, 101, 7894, 7896, 7899, 1, 8782, 59, 1, 10926, 4, 2, 59, 113, 7905, 7907, 1, 8783, 59, 1, 8783, 4, 15, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 116, 117, 119, 121, 7942, 8021, 8075, 8080, 8121, 8126, 8157, 8279, 8295, 8430, 8446, 8485, 8491, 8707, 8726, 4, 3, 99, 112, 114, 7950, 7956, 8007, 117, 116, 101, 59, 1, 263, 4, 6, 59, 97, 98, 99, 100, 115, 7970, 7972, 7977, 7984, 7998, 8003, 1, 8745, 110, 100, 59, 1, 10820, 114, 99, 117, 112, 59, 1, 10825, 4, 2, 97, 117, 7990, 7994, 112, 59, 1, 10827, 112, 59, 1, 10823, 111, 116, 59, 1, 10816, 59, 3, 8745, 65024, 4, 2, 101, 111, 8013, 8017, 116, 59, 1, 8257, 110, 59, 1, 711, 4, 4, 97, 101, 105, 117, 8031, 8046, 8056, 8061, 4, 2, 112, 114, 8037, 8041, 115, 59, 1, 10829, 111, 110, 59, 1, 269, 100, 105, 108, 5, 231, 1, 59, 8054, 1, 231, 114, 99, 59, 1, 265, 112, 115, 4, 2, 59, 115, 8069, 8071, 1, 10828, 109, 59, 1, 10832, 111, 116, 59, 1, 267, 4, 3, 100, 109, 110, 8088, 8097, 8104, 105, 108, 5, 184, 1, 59, 8095, 1, 184, 112, 116, 121, 118, 59, 1, 10674, 116, 5, 162, 2, 59, 101, 8112, 8114, 1, 162, 114, 100, 111, 116, 59, 1, 183, 114, 59, 3, 55349, 56608, 4, 3, 99, 101, 105, 8134, 8138, 8154, 121, 59, 1, 1095, 99, 107, 4, 2, 59, 109, 8146, 8148, 1, 10003, 97, 114, 107, 59, 1, 10003, 59, 1, 967, 114, 4, 7, 59, 69, 99, 101, 102, 109, 115, 8174, 8176, 8179, 8258, 8261, 8268, 8273, 1, 9675, 59, 1, 10691, 4, 3, 59, 101, 108, 8187, 8189, 8193, 1, 710, 113, 59, 1, 8791, 101, 4, 2, 97, 100, 8200, 8223, 114, 114, 111, 119, 4, 2, 108, 114, 8210, 8216, 101, 102, 116, 59, 1, 8634, 105, 103, 104, 116, 59, 1, 8635, 4, 5, 82, 83, 97, 99, 100, 8235, 8238, 8241, 8246, 8252, 59, 1, 174, 59, 1, 9416, 115, 116, 59, 1, 8859, 105, 114, 99, 59, 1, 8858, 97, 115, 104, 59, 1, 8861, 59, 1, 8791, 110, 105, 110, 116, 59, 1, 10768, 105, 100, 59, 1, 10991, 99, 105, 114, 59, 1, 10690, 117, 98, 115, 4, 2, 59, 117, 8288, 8290, 1, 9827, 105, 116, 59, 1, 9827, 4, 4, 108, 109, 110, 112, 8305, 8326, 8376, 8400, 111, 110, 4, 2, 59, 101, 8313, 8315, 1, 58, 4, 2, 59, 113, 8321, 8323, 1, 8788, 59, 1, 8788, 4, 2, 109, 112, 8332, 8344, 97, 4, 2, 59, 116, 8339, 8341, 1, 44, 59, 1, 64, 4, 3, 59, 102, 108, 8352, 8354, 8358, 1, 8705, 110, 59, 1, 8728, 101, 4, 2, 109, 120, 8365, 8371, 101, 110, 116, 59, 1, 8705, 101, 115, 59, 1, 8450, 4, 2, 103, 105, 8382, 8395, 4, 2, 59, 100, 8388, 8390, 1, 8773, 111, 116, 59, 1, 10861, 110, 116, 59, 1, 8750, 4, 3, 102, 114, 121, 8408, 8412, 8417, 59, 3, 55349, 56660, 111, 100, 59, 1, 8720, 5, 169, 2, 59, 115, 8424, 8426, 1, 169, 114, 59, 1, 8471, 4, 2, 97, 111, 8436, 8441, 114, 114, 59, 1, 8629, 115, 115, 59, 1, 10007, 4, 2, 99, 117, 8452, 8457, 114, 59, 3, 55349, 56504, 4, 2, 98, 112, 8463, 8474, 4, 2, 59, 101, 8469, 8471, 1, 10959, 59, 1, 10961, 4, 2, 59, 101, 8480, 8482, 1, 10960, 59, 1, 10962, 100, 111, 116, 59, 1, 8943, 4, 7, 100, 101, 108, 112, 114, 118, 119, 8507, 8522, 8536, 8550, 8600, 8697, 8702, 97, 114, 114, 4, 2, 108, 114, 8516, 8519, 59, 1, 10552, 59, 1, 10549, 4, 2, 112, 115, 8528, 8532, 114, 59, 1, 8926, 99, 59, 1, 8927, 97, 114, 114, 4, 2, 59, 112, 8545, 8547, 1, 8630, 59, 1, 10557, 4, 6, 59, 98, 99, 100, 111, 115, 8564, 8566, 8573, 8587, 8592, 8596, 1, 8746, 114, 99, 97, 112, 59, 1, 10824, 4, 2, 97, 117, 8579, 8583, 112, 59, 1, 10822, 112, 59, 1, 10826, 111, 116, 59, 1, 8845, 114, 59, 1, 10821, 59, 3, 8746, 65024, 4, 4, 97, 108, 114, 118, 8610, 8623, 8663, 8672, 114, 114, 4, 2, 59, 109, 8618, 8620, 1, 8631, 59, 1, 10556, 121, 4, 3, 101, 118, 119, 8632, 8651, 8656, 113, 4, 2, 112, 115, 8639, 8645, 114, 101, 99, 59, 1, 8926, 117, 99, 99, 59, 1, 8927, 101, 101, 59, 1, 8910, 101, 100, 103, 101, 59, 1, 8911, 101, 110, 5, 164, 1, 59, 8670, 1, 164, 101, 97, 114, 114, 111, 119, 4, 2, 108, 114, 8684, 8690, 101, 102, 116, 59, 1, 8630, 105, 103, 104, 116, 59, 1, 8631, 101, 101, 59, 1, 8910, 101, 100, 59, 1, 8911, 4, 2, 99, 105, 8713, 8721, 111, 110, 105, 110, 116, 59, 1, 8754, 110, 116, 59, 1, 8753, 108, 99, 116, 121, 59, 1, 9005, 4, 19, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 8773, 8778, 8783, 8821, 8839, 8854, 8887, 8914, 8930, 8944, 9036, 9041, 9058, 9197, 9227, 9258, 9281, 9297, 9305, 114, 114, 59, 1, 8659, 97, 114, 59, 1, 10597, 4, 4, 103, 108, 114, 115, 8793, 8799, 8805, 8809, 103, 101, 114, 59, 1, 8224, 101, 116, 104, 59, 1, 8504, 114, 59, 1, 8595, 104, 4, 2, 59, 118, 8816, 8818, 1, 8208, 59, 1, 8867, 4, 2, 107, 108, 8827, 8834, 97, 114, 111, 119, 59, 1, 10511, 97, 99, 59, 1, 733, 4, 2, 97, 121, 8845, 8851, 114, 111, 110, 59, 1, 271, 59, 1, 1076, 4, 3, 59, 97, 111, 8862, 8864, 8880, 1, 8518, 4, 2, 103, 114, 8870, 8876, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8650, 116, 115, 101, 113, 59, 1, 10871, 4, 3, 103, 108, 109, 8895, 8902, 8907, 5, 176, 1, 59, 8900, 1, 176, 116, 97, 59, 1, 948, 112, 116, 121, 118, 59, 1, 10673, 4, 2, 105, 114, 8920, 8926, 115, 104, 116, 59, 1, 10623, 59, 3, 55349, 56609, 97, 114, 4, 2, 108, 114, 8938, 8941, 59, 1, 8643, 59, 1, 8642, 4, 5, 97, 101, 103, 115, 118, 8956, 8986, 8989, 8996, 9001, 109, 4, 3, 59, 111, 115, 8965, 8967, 8983, 1, 8900, 110, 100, 4, 2, 59, 115, 8975, 8977, 1, 8900, 117, 105, 116, 59, 1, 9830, 59, 1, 9830, 59, 1, 168, 97, 109, 109, 97, 59, 1, 989, 105, 110, 59, 1, 8946, 4, 3, 59, 105, 111, 9009, 9011, 9031, 1, 247, 100, 101, 5, 247, 2, 59, 111, 9020, 9022, 1, 247, 110, 116, 105, 109, 101, 115, 59, 1, 8903, 110, 120, 59, 1, 8903, 99, 121, 59, 1, 1106, 99, 4, 2, 111, 114, 9048, 9053, 114, 110, 59, 1, 8990, 111, 112, 59, 1, 8973, 4, 5, 108, 112, 116, 117, 119, 9070, 9076, 9081, 9130, 9144, 108, 97, 114, 59, 1, 36, 102, 59, 3, 55349, 56661, 4, 5, 59, 101, 109, 112, 115, 9093, 9095, 9109, 9116, 9122, 1, 729, 113, 4, 2, 59, 100, 9102, 9104, 1, 8784, 111, 116, 59, 1, 8785, 105, 110, 117, 115, 59, 1, 8760, 108, 117, 115, 59, 1, 8724, 113, 117, 97, 114, 101, 59, 1, 8865, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59, 1, 8966, 110, 4, 3, 97, 100, 104, 9153, 9160, 9172, 114, 114, 111, 119, 59, 1, 8595, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59, 1, 8650, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 9184, 9190, 101, 102, 116, 59, 1, 8643, 105, 103, 104, 116, 59, 1, 8642, 4, 2, 98, 99, 9203, 9211, 107, 97, 114, 111, 119, 59, 1, 10512, 4, 2, 111, 114, 9217, 9222, 114, 110, 59, 1, 8991, 111, 112, 59, 1, 8972, 4, 3, 99, 111, 116, 9235, 9248, 9252, 4, 2, 114, 121, 9241, 9245, 59, 3, 55349, 56505, 59, 1, 1109, 108, 59, 1, 10742, 114, 111, 107, 59, 1, 273, 4, 2, 100, 114, 9264, 9269, 111, 116, 59, 1, 8945, 105, 4, 2, 59, 102, 9276, 9278, 1, 9663, 59, 1, 9662, 4, 2, 97, 104, 9287, 9292, 114, 114, 59, 1, 8693, 97, 114, 59, 1, 10607, 97, 110, 103, 108, 101, 59, 1, 10662, 4, 2, 99, 105, 9311, 9315, 121, 59, 1, 1119, 103, 114, 97, 114, 114, 59, 1, 10239, 4, 18, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 9361, 9376, 9398, 9439, 9444, 9447, 9462, 9495, 9531, 9585, 9598, 9614, 9659, 9755, 9771, 9792, 9808, 9826, 4, 2, 68, 111, 9367, 9372, 111, 116, 59, 1, 10871, 116, 59, 1, 8785, 4, 2, 99, 115, 9382, 9392, 117, 116, 101, 5, 233, 1, 59, 9390, 1, 233, 116, 101, 114, 59, 1, 10862, 4, 4, 97, 105, 111, 121, 9408, 9414, 9430, 9436, 114, 111, 110, 59, 1, 283, 114, 4, 2, 59, 99, 9421, 9423, 1, 8790, 5, 234, 1, 59, 9428, 1, 234, 108, 111, 110, 59, 1, 8789, 59, 1, 1101, 111, 116, 59, 1, 279, 59, 1, 8519, 4, 2, 68, 114, 9453, 9458, 111, 116, 59, 1, 8786, 59, 3, 55349, 56610, 4, 3, 59, 114, 115, 9470, 9472, 9482, 1, 10906, 97, 118, 101, 5, 232, 1, 59, 9480, 1, 232, 4, 2, 59, 100, 9488, 9490, 1, 10902, 111, 116, 59, 1, 10904, 4, 4, 59, 105, 108, 115, 9505, 9507, 9515, 9518, 1, 10905, 110, 116, 101, 114, 115, 59, 1, 9191, 59, 1, 8467, 4, 2, 59, 100, 9524, 9526, 1, 10901, 111, 116, 59, 1, 10903, 4, 3, 97, 112, 115, 9539, 9544, 9564, 99, 114, 59, 1, 275, 116, 121, 4, 3, 59, 115, 118, 9554, 9556, 9561, 1, 8709, 101, 116, 59, 1, 8709, 59, 1, 8709, 112, 4, 2, 49, 59, 9571, 9583, 4, 2, 51, 52, 9577, 9580, 59, 1, 8196, 59, 1, 8197, 1, 8195, 4, 2, 103, 115, 9591, 9594, 59, 1, 331, 112, 59, 1, 8194, 4, 2, 103, 112, 9604, 9609, 111, 110, 59, 1, 281, 102, 59, 3, 55349, 56662, 4, 3, 97, 108, 115, 9622, 9635, 9640, 114, 4, 2, 59, 115, 9629, 9631, 1, 8917, 108, 59, 1, 10723, 117, 115, 59, 1, 10865, 105, 4, 3, 59, 108, 118, 9649, 9651, 9656, 1, 949, 111, 110, 59, 1, 949, 59, 1, 1013, 4, 4, 99, 115, 117, 118, 9669, 9686, 9716, 9747, 4, 2, 105, 111, 9675, 9680, 114, 99, 59, 1, 8790, 108, 111, 110, 59, 1, 8789, 4, 2, 105, 108, 9692, 9696, 109, 59, 1, 8770, 97, 110, 116, 4, 2, 103, 108, 9705, 9710, 116, 114, 59, 1, 10902, 101, 115, 115, 59, 1, 10901, 4, 3, 97, 101, 105, 9724, 9729, 9734, 108, 115, 59, 1, 61, 115, 116, 59, 1, 8799, 118, 4, 2, 59, 68, 9741, 9743, 1, 8801, 68, 59, 1, 10872, 112, 97, 114, 115, 108, 59, 1, 10725, 4, 2, 68, 97, 9761, 9766, 111, 116, 59, 1, 8787, 114, 114, 59, 1, 10609, 4, 3, 99, 100, 105, 9779, 9783, 9788, 114, 59, 1, 8495, 111, 116, 59, 1, 8784, 109, 59, 1, 8770, 4, 2, 97, 104, 9798, 9801, 59, 1, 951, 5, 240, 1, 59, 9806, 1, 240, 4, 2, 109, 114, 9814, 9822, 108, 5, 235, 1, 59, 9820, 1, 235, 111, 59, 1, 8364, 4, 3, 99, 105, 112, 9834, 9838, 9843, 108, 59, 1, 33, 115, 116, 59, 1, 8707, 4, 2, 101, 111, 9849, 9859, 99, 116, 97, 116, 105, 111, 110, 59, 1, 8496, 110, 101, 110, 116, 105, 97, 108, 101, 59, 1, 8519, 4, 12, 97, 99, 101, 102, 105, 106, 108, 110, 111, 112, 114, 115, 9896, 9910, 9914, 9921, 9954, 9960, 9967, 9989, 9994, 10027, 10036, 10164, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8786, 121, 59, 1, 1092, 109, 97, 108, 101, 59, 1, 9792, 4, 3, 105, 108, 114, 9929, 9935, 9950, 108, 105, 103, 59, 1, 64259, 4, 2, 105, 108, 9941, 9945, 103, 59, 1, 64256, 105, 103, 59, 1, 64260, 59, 3, 55349, 56611, 108, 105, 103, 59, 1, 64257, 108, 105, 103, 59, 3, 102, 106, 4, 3, 97, 108, 116, 9975, 9979, 9984, 116, 59, 1, 9837, 105, 103, 59, 1, 64258, 110, 115, 59, 1, 9649, 111, 102, 59, 1, 402, 4, 2, 112, 114, 1e4, 10005, 102, 59, 3, 55349, 56663, 4, 2, 97, 107, 10011, 10016, 108, 108, 59, 1, 8704, 4, 2, 59, 118, 10022, 10024, 1, 8916, 59, 1, 10969, 97, 114, 116, 105, 110, 116, 59, 1, 10765, 4, 2, 97, 111, 10042, 10159, 4, 2, 99, 115, 10048, 10155, 4, 6, 49, 50, 51, 52, 53, 55, 10062, 10102, 10114, 10135, 10139, 10151, 4, 6, 50, 51, 52, 53, 54, 56, 10076, 10083, 10086, 10093, 10096, 10099, 5, 189, 1, 59, 10081, 1, 189, 59, 1, 8531, 5, 188, 1, 59, 10091, 1, 188, 59, 1, 8533, 59, 1, 8537, 59, 1, 8539, 4, 2, 51, 53, 10108, 10111, 59, 1, 8532, 59, 1, 8534, 4, 3, 52, 53, 56, 10122, 10129, 10132, 5, 190, 1, 59, 10127, 1, 190, 59, 1, 8535, 59, 1, 8540, 53, 59, 1, 8536, 4, 2, 54, 56, 10145, 10148, 59, 1, 8538, 59, 1, 8541, 56, 59, 1, 8542, 108, 59, 1, 8260, 119, 110, 59, 1, 8994, 99, 114, 59, 3, 55349, 56507, 4, 17, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 10206, 10217, 10247, 10254, 10268, 10273, 10358, 10363, 10374, 10380, 10385, 10406, 10458, 10464, 10470, 10497, 10610, 4, 2, 59, 108, 10212, 10214, 1, 8807, 59, 1, 10892, 4, 3, 99, 109, 112, 10225, 10231, 10244, 117, 116, 101, 59, 1, 501, 109, 97, 4, 2, 59, 100, 10239, 10241, 1, 947, 59, 1, 989, 59, 1, 10886, 114, 101, 118, 101, 59, 1, 287, 4, 2, 105, 121, 10260, 10265, 114, 99, 59, 1, 285, 59, 1, 1075, 111, 116, 59, 1, 289, 4, 4, 59, 108, 113, 115, 10283, 10285, 10288, 10308, 1, 8805, 59, 1, 8923, 4, 3, 59, 113, 115, 10296, 10298, 10301, 1, 8805, 59, 1, 8807, 108, 97, 110, 116, 59, 1, 10878, 4, 4, 59, 99, 100, 108, 10318, 10320, 10324, 10345, 1, 10878, 99, 59, 1, 10921, 111, 116, 4, 2, 59, 111, 10332, 10334, 1, 10880, 4, 2, 59, 108, 10340, 10342, 1, 10882, 59, 1, 10884, 4, 2, 59, 101, 10351, 10354, 3, 8923, 65024, 115, 59, 1, 10900, 114, 59, 3, 55349, 56612, 4, 2, 59, 103, 10369, 10371, 1, 8811, 59, 1, 8921, 109, 101, 108, 59, 1, 8503, 99, 121, 59, 1, 1107, 4, 4, 59, 69, 97, 106, 10395, 10397, 10400, 10403, 1, 8823, 59, 1, 10898, 59, 1, 10917, 59, 1, 10916, 4, 4, 69, 97, 101, 115, 10416, 10419, 10434, 10453, 59, 1, 8809, 112, 4, 2, 59, 112, 10426, 10428, 1, 10890, 114, 111, 120, 59, 1, 10890, 4, 2, 59, 113, 10440, 10442, 1, 10888, 4, 2, 59, 113, 10448, 10450, 1, 10888, 59, 1, 8809, 105, 109, 59, 1, 8935, 112, 102, 59, 3, 55349, 56664, 97, 118, 101, 59, 1, 96, 4, 2, 99, 105, 10476, 10480, 114, 59, 1, 8458, 109, 4, 3, 59, 101, 108, 10489, 10491, 10494, 1, 8819, 59, 1, 10894, 59, 1, 10896, 5, 62, 6, 59, 99, 100, 108, 113, 114, 10512, 10514, 10527, 10532, 10538, 10545, 1, 62, 4, 2, 99, 105, 10520, 10523, 59, 1, 10919, 114, 59, 1, 10874, 111, 116, 59, 1, 8919, 80, 97, 114, 59, 1, 10645, 117, 101, 115, 116, 59, 1, 10876, 4, 5, 97, 100, 101, 108, 115, 10557, 10574, 10579, 10599, 10605, 4, 2, 112, 114, 10563, 10570, 112, 114, 111, 120, 59, 1, 10886, 114, 59, 1, 10616, 111, 116, 59, 1, 8919, 113, 4, 2, 108, 113, 10586, 10592, 101, 115, 115, 59, 1, 8923, 108, 101, 115, 115, 59, 1, 10892, 101, 115, 115, 59, 1, 8823, 105, 109, 59, 1, 8819, 4, 2, 101, 110, 10616, 10626, 114, 116, 110, 101, 113, 113, 59, 3, 8809, 65024, 69, 59, 3, 8809, 65024, 4, 10, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 10653, 10658, 10713, 10718, 10724, 10760, 10765, 10786, 10850, 10875, 114, 114, 59, 1, 8660, 4, 4, 105, 108, 109, 114, 10668, 10674, 10678, 10684, 114, 115, 112, 59, 1, 8202, 102, 59, 1, 189, 105, 108, 116, 59, 1, 8459, 4, 2, 100, 114, 10690, 10695, 99, 121, 59, 1, 1098, 4, 3, 59, 99, 119, 10703, 10705, 10710, 1, 8596, 105, 114, 59, 1, 10568, 59, 1, 8621, 97, 114, 59, 1, 8463, 105, 114, 99, 59, 1, 293, 4, 3, 97, 108, 114, 10732, 10748, 10754, 114, 116, 115, 4, 2, 59, 117, 10741, 10743, 1, 9829, 105, 116, 59, 1, 9829, 108, 105, 112, 59, 1, 8230, 99, 111, 110, 59, 1, 8889, 114, 59, 3, 55349, 56613, 115, 4, 2, 101, 119, 10772, 10779, 97, 114, 111, 119, 59, 1, 10533, 97, 114, 111, 119, 59, 1, 10534, 4, 5, 97, 109, 111, 112, 114, 10798, 10803, 10809, 10839, 10844, 114, 114, 59, 1, 8703, 116, 104, 116, 59, 1, 8763, 107, 4, 2, 108, 114, 10816, 10827, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8617, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8618, 102, 59, 3, 55349, 56665, 98, 97, 114, 59, 1, 8213, 4, 3, 99, 108, 116, 10858, 10863, 10869, 114, 59, 3, 55349, 56509, 97, 115, 104, 59, 1, 8463, 114, 111, 107, 59, 1, 295, 4, 2, 98, 112, 10881, 10887, 117, 108, 108, 59, 1, 8259, 104, 101, 110, 59, 1, 8208, 4, 15, 97, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 117, 10925, 10936, 10958, 10977, 10990, 11001, 11039, 11045, 11101, 11192, 11220, 11226, 11237, 11285, 11299, 99, 117, 116, 101, 5, 237, 1, 59, 10934, 1, 237, 4, 3, 59, 105, 121, 10944, 10946, 10955, 1, 8291, 114, 99, 5, 238, 1, 59, 10953, 1, 238, 59, 1, 1080, 4, 2, 99, 120, 10964, 10968, 121, 59, 1, 1077, 99, 108, 5, 161, 1, 59, 10975, 1, 161, 4, 2, 102, 114, 10983, 10986, 59, 1, 8660, 59, 3, 55349, 56614, 114, 97, 118, 101, 5, 236, 1, 59, 10999, 1, 236, 4, 4, 59, 105, 110, 111, 11011, 11013, 11028, 11034, 1, 8520, 4, 2, 105, 110, 11019, 11024, 110, 116, 59, 1, 10764, 116, 59, 1, 8749, 102, 105, 110, 59, 1, 10716, 116, 97, 59, 1, 8489, 108, 105, 103, 59, 1, 307, 4, 3, 97, 111, 112, 11053, 11092, 11096, 4, 3, 99, 103, 116, 11061, 11065, 11088, 114, 59, 1, 299, 4, 3, 101, 108, 112, 11073, 11076, 11082, 59, 1, 8465, 105, 110, 101, 59, 1, 8464, 97, 114, 116, 59, 1, 8465, 104, 59, 1, 305, 102, 59, 1, 8887, 101, 100, 59, 1, 437, 4, 5, 59, 99, 102, 111, 116, 11113, 11115, 11121, 11136, 11142, 1, 8712, 97, 114, 101, 59, 1, 8453, 105, 110, 4, 2, 59, 116, 11129, 11131, 1, 8734, 105, 101, 59, 1, 10717, 100, 111, 116, 59, 1, 305, 4, 5, 59, 99, 101, 108, 112, 11154, 11156, 11161, 11179, 11186, 1, 8747, 97, 108, 59, 1, 8890, 4, 2, 103, 114, 11167, 11173, 101, 114, 115, 59, 1, 8484, 99, 97, 108, 59, 1, 8890, 97, 114, 104, 107, 59, 1, 10775, 114, 111, 100, 59, 1, 10812, 4, 4, 99, 103, 112, 116, 11202, 11206, 11211, 11216, 121, 59, 1, 1105, 111, 110, 59, 1, 303, 102, 59, 3, 55349, 56666, 97, 59, 1, 953, 114, 111, 100, 59, 1, 10812, 117, 101, 115, 116, 5, 191, 1, 59, 11235, 1, 191, 4, 2, 99, 105, 11243, 11248, 114, 59, 3, 55349, 56510, 110, 4, 5, 59, 69, 100, 115, 118, 11261, 11263, 11266, 11271, 11282, 1, 8712, 59, 1, 8953, 111, 116, 59, 1, 8949, 4, 2, 59, 118, 11277, 11279, 1, 8948, 59, 1, 8947, 59, 1, 8712, 4, 2, 59, 105, 11291, 11293, 1, 8290, 108, 100, 101, 59, 1, 297, 4, 2, 107, 109, 11305, 11310, 99, 121, 59, 1, 1110, 108, 5, 239, 1, 59, 11316, 1, 239, 4, 6, 99, 102, 109, 111, 115, 117, 11332, 11346, 11351, 11357, 11363, 11380, 4, 2, 105, 121, 11338, 11343, 114, 99, 59, 1, 309, 59, 1, 1081, 114, 59, 3, 55349, 56615, 97, 116, 104, 59, 1, 567, 112, 102, 59, 3, 55349, 56667, 4, 2, 99, 101, 11369, 11374, 114, 59, 3, 55349, 56511, 114, 99, 121, 59, 1, 1112, 107, 99, 121, 59, 1, 1108, 4, 8, 97, 99, 102, 103, 104, 106, 111, 115, 11404, 11418, 11433, 11438, 11445, 11450, 11455, 11461, 112, 112, 97, 4, 2, 59, 118, 11413, 11415, 1, 954, 59, 1, 1008, 4, 2, 101, 121, 11424, 11430, 100, 105, 108, 59, 1, 311, 59, 1, 1082, 114, 59, 3, 55349, 56616, 114, 101, 101, 110, 59, 1, 312, 99, 121, 59, 1, 1093, 99, 121, 59, 1, 1116, 112, 102, 59, 3, 55349, 56668, 99, 114, 59, 3, 55349, 56512, 4, 23, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 11515, 11538, 11544, 11555, 11560, 11721, 11780, 11818, 11868, 12136, 12160, 12171, 12203, 12208, 12246, 12275, 12327, 12509, 12523, 12569, 12641, 12732, 12752, 4, 3, 97, 114, 116, 11523, 11528, 11532, 114, 114, 59, 1, 8666, 114, 59, 1, 8656, 97, 105, 108, 59, 1, 10523, 97, 114, 114, 59, 1, 10510, 4, 2, 59, 103, 11550, 11552, 1, 8806, 59, 1, 10891, 97, 114, 59, 1, 10594, 4, 9, 99, 101, 103, 109, 110, 112, 113, 114, 116, 11580, 11586, 11594, 11600, 11606, 11624, 11627, 11636, 11694, 117, 116, 101, 59, 1, 314, 109, 112, 116, 121, 118, 59, 1, 10676, 114, 97, 110, 59, 1, 8466, 98, 100, 97, 59, 1, 955, 103, 4, 3, 59, 100, 108, 11615, 11617, 11620, 1, 10216, 59, 1, 10641, 101, 59, 1, 10216, 59, 1, 10885, 117, 111, 5, 171, 1, 59, 11634, 1, 171, 114, 4, 8, 59, 98, 102, 104, 108, 112, 115, 116, 11655, 11657, 11669, 11673, 11677, 11681, 11685, 11690, 1, 8592, 4, 2, 59, 102, 11663, 11665, 1, 8676, 115, 59, 1, 10527, 115, 59, 1, 10525, 107, 59, 1, 8617, 112, 59, 1, 8619, 108, 59, 1, 10553, 105, 109, 59, 1, 10611, 108, 59, 1, 8610, 4, 3, 59, 97, 101, 11702, 11704, 11709, 1, 10923, 105, 108, 59, 1, 10521, 4, 2, 59, 115, 11715, 11717, 1, 10925, 59, 3, 10925, 65024, 4, 3, 97, 98, 114, 11729, 11734, 11739, 114, 114, 59, 1, 10508, 114, 107, 59, 1, 10098, 4, 2, 97, 107, 11745, 11758, 99, 4, 2, 101, 107, 11752, 11755, 59, 1, 123, 59, 1, 91, 4, 2, 101, 115, 11764, 11767, 59, 1, 10635, 108, 4, 2, 100, 117, 11774, 11777, 59, 1, 10639, 59, 1, 10637, 4, 4, 97, 101, 117, 121, 11790, 11796, 11811, 11815, 114, 111, 110, 59, 1, 318, 4, 2, 100, 105, 11802, 11807, 105, 108, 59, 1, 316, 108, 59, 1, 8968, 98, 59, 1, 123, 59, 1, 1083, 4, 4, 99, 113, 114, 115, 11828, 11832, 11845, 11864, 97, 59, 1, 10550, 117, 111, 4, 2, 59, 114, 11840, 11842, 1, 8220, 59, 1, 8222, 4, 2, 100, 117, 11851, 11857, 104, 97, 114, 59, 1, 10599, 115, 104, 97, 114, 59, 1, 10571, 104, 59, 1, 8626, 4, 5, 59, 102, 103, 113, 115, 11880, 11882, 12008, 12011, 12031, 1, 8804, 116, 4, 5, 97, 104, 108, 114, 116, 11895, 11913, 11935, 11947, 11996, 114, 114, 111, 119, 4, 2, 59, 116, 11905, 11907, 1, 8592, 97, 105, 108, 59, 1, 8610, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 11925, 11931, 111, 119, 110, 59, 1, 8637, 112, 59, 1, 8636, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8647, 105, 103, 104, 116, 4, 3, 97, 104, 115, 11959, 11974, 11984, 114, 114, 111, 119, 4, 2, 59, 115, 11969, 11971, 1, 8596, 59, 1, 8646, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8651, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8621, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8907, 59, 1, 8922, 4, 3, 59, 113, 115, 12019, 12021, 12024, 1, 8804, 59, 1, 8806, 108, 97, 110, 116, 59, 1, 10877, 4, 5, 59, 99, 100, 103, 115, 12043, 12045, 12049, 12070, 12083, 1, 10877, 99, 59, 1, 10920, 111, 116, 4, 2, 59, 111, 12057, 12059, 1, 10879, 4, 2, 59, 114, 12065, 12067, 1, 10881, 59, 1, 10883, 4, 2, 59, 101, 12076, 12079, 3, 8922, 65024, 115, 59, 1, 10899, 4, 5, 97, 100, 101, 103, 115, 12095, 12103, 12108, 12126, 12131, 112, 112, 114, 111, 120, 59, 1, 10885, 111, 116, 59, 1, 8918, 113, 4, 2, 103, 113, 12115, 12120, 116, 114, 59, 1, 8922, 103, 116, 114, 59, 1, 10891, 116, 114, 59, 1, 8822, 105, 109, 59, 1, 8818, 4, 3, 105, 108, 114, 12144, 12150, 12156, 115, 104, 116, 59, 1, 10620, 111, 111, 114, 59, 1, 8970, 59, 3, 55349, 56617, 4, 2, 59, 69, 12166, 12168, 1, 8822, 59, 1, 10897, 4, 2, 97, 98, 12177, 12198, 114, 4, 2, 100, 117, 12184, 12187, 59, 1, 8637, 4, 2, 59, 108, 12193, 12195, 1, 8636, 59, 1, 10602, 108, 107, 59, 1, 9604, 99, 121, 59, 1, 1113, 4, 5, 59, 97, 99, 104, 116, 12220, 12222, 12227, 12235, 12241, 1, 8810, 114, 114, 59, 1, 8647, 111, 114, 110, 101, 114, 59, 1, 8990, 97, 114, 100, 59, 1, 10603, 114, 105, 59, 1, 9722, 4, 2, 105, 111, 12252, 12258, 100, 111, 116, 59, 1, 320, 117, 115, 116, 4, 2, 59, 97, 12267, 12269, 1, 9136, 99, 104, 101, 59, 1, 9136, 4, 4, 69, 97, 101, 115, 12285, 12288, 12303, 12322, 59, 1, 8808, 112, 4, 2, 59, 112, 12295, 12297, 1, 10889, 114, 111, 120, 59, 1, 10889, 4, 2, 59, 113, 12309, 12311, 1, 10887, 4, 2, 59, 113, 12317, 12319, 1, 10887, 59, 1, 8808, 105, 109, 59, 1, 8934, 4, 8, 97, 98, 110, 111, 112, 116, 119, 122, 12345, 12359, 12364, 12421, 12446, 12467, 12474, 12490, 4, 2, 110, 114, 12351, 12355, 103, 59, 1, 10220, 114, 59, 1, 8701, 114, 107, 59, 1, 10214, 103, 4, 3, 108, 109, 114, 12373, 12401, 12409, 101, 102, 116, 4, 2, 97, 114, 12382, 12389, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10231, 97, 112, 115, 116, 111, 59, 1, 10236, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10230, 112, 97, 114, 114, 111, 119, 4, 2, 108, 114, 12433, 12439, 101, 102, 116, 59, 1, 8619, 105, 103, 104, 116, 59, 1, 8620, 4, 3, 97, 102, 108, 12454, 12458, 12462, 114, 59, 1, 10629, 59, 3, 55349, 56669, 117, 115, 59, 1, 10797, 105, 109, 101, 115, 59, 1, 10804, 4, 2, 97, 98, 12480, 12485, 115, 116, 59, 1, 8727, 97, 114, 59, 1, 95, 4, 3, 59, 101, 102, 12498, 12500, 12506, 1, 9674, 110, 103, 101, 59, 1, 9674, 59, 1, 10731, 97, 114, 4, 2, 59, 108, 12517, 12519, 1, 40, 116, 59, 1, 10643, 4, 5, 97, 99, 104, 109, 116, 12535, 12540, 12548, 12561, 12564, 114, 114, 59, 1, 8646, 111, 114, 110, 101, 114, 59, 1, 8991, 97, 114, 4, 2, 59, 100, 12556, 12558, 1, 8651, 59, 1, 10605, 59, 1, 8206, 114, 105, 59, 1, 8895, 4, 6, 97, 99, 104, 105, 113, 116, 12583, 12589, 12594, 12597, 12614, 12635, 113, 117, 111, 59, 1, 8249, 114, 59, 3, 55349, 56513, 59, 1, 8624, 109, 4, 3, 59, 101, 103, 12606, 12608, 12611, 1, 8818, 59, 1, 10893, 59, 1, 10895, 4, 2, 98, 117, 12620, 12623, 59, 1, 91, 111, 4, 2, 59, 114, 12630, 12632, 1, 8216, 59, 1, 8218, 114, 111, 107, 59, 1, 322, 5, 60, 8, 59, 99, 100, 104, 105, 108, 113, 114, 12660, 12662, 12675, 12680, 12686, 12692, 12698, 12705, 1, 60, 4, 2, 99, 105, 12668, 12671, 59, 1, 10918, 114, 59, 1, 10873, 111, 116, 59, 1, 8918, 114, 101, 101, 59, 1, 8907, 109, 101, 115, 59, 1, 8905, 97, 114, 114, 59, 1, 10614, 117, 101, 115, 116, 59, 1, 10875, 4, 2, 80, 105, 12711, 12716, 97, 114, 59, 1, 10646, 4, 3, 59, 101, 102, 12724, 12726, 12729, 1, 9667, 59, 1, 8884, 59, 1, 9666, 114, 4, 2, 100, 117, 12739, 12746, 115, 104, 97, 114, 59, 1, 10570, 104, 97, 114, 59, 1, 10598, 4, 2, 101, 110, 12758, 12768, 114, 116, 110, 101, 113, 113, 59, 3, 8808, 65024, 69, 59, 3, 8808, 65024, 4, 14, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 12803, 12809, 12893, 12908, 12914, 12928, 12933, 12937, 13011, 13025, 13032, 13049, 13052, 13069, 68, 111, 116, 59, 1, 8762, 4, 4, 99, 108, 112, 114, 12819, 12827, 12849, 12887, 114, 5, 175, 1, 59, 12825, 1, 175, 4, 2, 101, 116, 12833, 12836, 59, 1, 9794, 4, 2, 59, 101, 12842, 12844, 1, 10016, 115, 101, 59, 1, 10016, 4, 2, 59, 115, 12855, 12857, 1, 8614, 116, 111, 4, 4, 59, 100, 108, 117, 12869, 12871, 12877, 12883, 1, 8614, 111, 119, 110, 59, 1, 8615, 101, 102, 116, 59, 1, 8612, 112, 59, 1, 8613, 107, 101, 114, 59, 1, 9646, 4, 2, 111, 121, 12899, 12905, 109, 109, 97, 59, 1, 10793, 59, 1, 1084, 97, 115, 104, 59, 1, 8212, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59, 1, 8737, 114, 59, 3, 55349, 56618, 111, 59, 1, 8487, 4, 3, 99, 100, 110, 12945, 12954, 12985, 114, 111, 5, 181, 1, 59, 12952, 1, 181, 4, 4, 59, 97, 99, 100, 12964, 12966, 12971, 12976, 1, 8739, 115, 116, 59, 1, 42, 105, 114, 59, 1, 10992, 111, 116, 5, 183, 1, 59, 12983, 1, 183, 117, 115, 4, 3, 59, 98, 100, 12995, 12997, 13e3, 1, 8722, 59, 1, 8863, 4, 2, 59, 117, 13006, 13008, 1, 8760, 59, 1, 10794, 4, 2, 99, 100, 13017, 13021, 112, 59, 1, 10971, 114, 59, 1, 8230, 112, 108, 117, 115, 59, 1, 8723, 4, 2, 100, 112, 13038, 13044, 101, 108, 115, 59, 1, 8871, 102, 59, 3, 55349, 56670, 59, 1, 8723, 4, 2, 99, 116, 13058, 13063, 114, 59, 3, 55349, 56514, 112, 111, 115, 59, 1, 8766, 4, 3, 59, 108, 109, 13077, 13079, 13087, 1, 956, 116, 105, 109, 97, 112, 59, 1, 8888, 97, 112, 59, 1, 8888, 4, 24, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 13142, 13165, 13217, 13229, 13247, 13330, 13359, 13414, 13420, 13508, 13513, 13579, 13602, 13626, 13631, 13762, 13767, 13855, 13936, 13995, 14214, 14285, 14312, 14432, 4, 2, 103, 116, 13148, 13152, 59, 3, 8921, 824, 4, 2, 59, 118, 13158, 13161, 3, 8811, 8402, 59, 3, 8811, 824, 4, 3, 101, 108, 116, 13173, 13200, 13204, 102, 116, 4, 2, 97, 114, 13181, 13188, 114, 114, 111, 119, 59, 1, 8653, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8654, 59, 3, 8920, 824, 4, 2, 59, 118, 13210, 13213, 3, 8810, 8402, 59, 3, 8810, 824, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8655, 4, 2, 68, 100, 13235, 13241, 97, 115, 104, 59, 1, 8879, 97, 115, 104, 59, 1, 8878, 4, 5, 98, 99, 110, 112, 116, 13259, 13264, 13270, 13275, 13308, 108, 97, 59, 1, 8711, 117, 116, 101, 59, 1, 324, 103, 59, 3, 8736, 8402, 4, 5, 59, 69, 105, 111, 112, 13287, 13289, 13293, 13298, 13302, 1, 8777, 59, 3, 10864, 824, 100, 59, 3, 8779, 824, 115, 59, 1, 329, 114, 111, 120, 59, 1, 8777, 117, 114, 4, 2, 59, 97, 13316, 13318, 1, 9838, 108, 4, 2, 59, 115, 13325, 13327, 1, 9838, 59, 1, 8469, 4, 2, 115, 117, 13336, 13344, 112, 5, 160, 1, 59, 13342, 1, 160, 109, 112, 4, 2, 59, 101, 13352, 13355, 3, 8782, 824, 59, 3, 8783, 824, 4, 5, 97, 101, 111, 117, 121, 13371, 13385, 13391, 13407, 13411, 4, 2, 112, 114, 13377, 13380, 59, 1, 10819, 111, 110, 59, 1, 328, 100, 105, 108, 59, 1, 326, 110, 103, 4, 2, 59, 100, 13399, 13401, 1, 8775, 111, 116, 59, 3, 10861, 824, 112, 59, 1, 10818, 59, 1, 1085, 97, 115, 104, 59, 1, 8211, 4, 7, 59, 65, 97, 100, 113, 115, 120, 13436, 13438, 13443, 13466, 13472, 13478, 13494, 1, 8800, 114, 114, 59, 1, 8663, 114, 4, 2, 104, 114, 13450, 13454, 107, 59, 1, 10532, 4, 2, 59, 111, 13460, 13462, 1, 8599, 119, 59, 1, 8599, 111, 116, 59, 3, 8784, 824, 117, 105, 118, 59, 1, 8802, 4, 2, 101, 105, 13484, 13489, 97, 114, 59, 1, 10536, 109, 59, 3, 8770, 824, 105, 115, 116, 4, 2, 59, 115, 13503, 13505, 1, 8708, 59, 1, 8708, 114, 59, 3, 55349, 56619, 4, 4, 69, 101, 115, 116, 13523, 13527, 13563, 13568, 59, 3, 8807, 824, 4, 3, 59, 113, 115, 13535, 13537, 13559, 1, 8817, 4, 3, 59, 113, 115, 13545, 13547, 13551, 1, 8817, 59, 3, 8807, 824, 108, 97, 110, 116, 59, 3, 10878, 824, 59, 3, 10878, 824, 105, 109, 59, 1, 8821, 4, 2, 59, 114, 13574, 13576, 1, 8815, 59, 1, 8815, 4, 3, 65, 97, 112, 13587, 13592, 13597, 114, 114, 59, 1, 8654, 114, 114, 59, 1, 8622, 97, 114, 59, 1, 10994, 4, 3, 59, 115, 118, 13610, 13612, 13623, 1, 8715, 4, 2, 59, 100, 13618, 13620, 1, 8956, 59, 1, 8954, 59, 1, 8715, 99, 121, 59, 1, 1114, 4, 7, 65, 69, 97, 100, 101, 115, 116, 13647, 13652, 13656, 13661, 13665, 13737, 13742, 114, 114, 59, 1, 8653, 59, 3, 8806, 824, 114, 114, 59, 1, 8602, 114, 59, 1, 8229, 4, 4, 59, 102, 113, 115, 13675, 13677, 13703, 13725, 1, 8816, 116, 4, 2, 97, 114, 13684, 13691, 114, 114, 111, 119, 59, 1, 8602, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8622, 4, 3, 59, 113, 115, 13711, 13713, 13717, 1, 8816, 59, 3, 8806, 824, 108, 97, 110, 116, 59, 3, 10877, 824, 4, 2, 59, 115, 13731, 13734, 3, 10877, 824, 59, 1, 8814, 105, 109, 59, 1, 8820, 4, 2, 59, 114, 13748, 13750, 1, 8814, 105, 4, 2, 59, 101, 13757, 13759, 1, 8938, 59, 1, 8940, 105, 100, 59, 1, 8740, 4, 2, 112, 116, 13773, 13778, 102, 59, 3, 55349, 56671, 5, 172, 3, 59, 105, 110, 13787, 13789, 13829, 1, 172, 110, 4, 4, 59, 69, 100, 118, 13800, 13802, 13806, 13812, 1, 8713, 59, 3, 8953, 824, 111, 116, 59, 3, 8949, 824, 4, 3, 97, 98, 99, 13820, 13823, 13826, 59, 1, 8713, 59, 1, 8951, 59, 1, 8950, 105, 4, 2, 59, 118, 13836, 13838, 1, 8716, 4, 3, 97, 98, 99, 13846, 13849, 13852, 59, 1, 8716, 59, 1, 8958, 59, 1, 8957, 4, 3, 97, 111, 114, 13863, 13892, 13899, 114, 4, 4, 59, 97, 115, 116, 13874, 13876, 13883, 13888, 1, 8742, 108, 108, 101, 108, 59, 1, 8742, 108, 59, 3, 11005, 8421, 59, 3, 8706, 824, 108, 105, 110, 116, 59, 1, 10772, 4, 3, 59, 99, 101, 13907, 13909, 13914, 1, 8832, 117, 101, 59, 1, 8928, 4, 2, 59, 99, 13920, 13923, 3, 10927, 824, 4, 2, 59, 101, 13929, 13931, 1, 8832, 113, 59, 3, 10927, 824, 4, 4, 65, 97, 105, 116, 13946, 13951, 13971, 13982, 114, 114, 59, 1, 8655, 114, 114, 4, 3, 59, 99, 119, 13961, 13963, 13967, 1, 8603, 59, 3, 10547, 824, 59, 3, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8603, 114, 105, 4, 2, 59, 101, 13990, 13992, 1, 8939, 59, 1, 8941, 4, 7, 99, 104, 105, 109, 112, 113, 117, 14011, 14036, 14060, 14080, 14085, 14090, 14106, 4, 4, 59, 99, 101, 114, 14021, 14023, 14028, 14032, 1, 8833, 117, 101, 59, 1, 8929, 59, 3, 10928, 824, 59, 3, 55349, 56515, 111, 114, 116, 4, 2, 109, 112, 14045, 14050, 105, 100, 59, 1, 8740, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8742, 109, 4, 2, 59, 101, 14067, 14069, 1, 8769, 4, 2, 59, 113, 14075, 14077, 1, 8772, 59, 1, 8772, 105, 100, 59, 1, 8740, 97, 114, 59, 1, 8742, 115, 117, 4, 2, 98, 112, 14098, 14102, 101, 59, 1, 8930, 101, 59, 1, 8931, 4, 3, 98, 99, 112, 14114, 14157, 14171, 4, 4, 59, 69, 101, 115, 14124, 14126, 14130, 14133, 1, 8836, 59, 3, 10949, 824, 59, 1, 8840, 101, 116, 4, 2, 59, 101, 14141, 14144, 3, 8834, 8402, 113, 4, 2, 59, 113, 14151, 14153, 1, 8840, 59, 3, 10949, 824, 99, 4, 2, 59, 101, 14164, 14166, 1, 8833, 113, 59, 3, 10928, 824, 4, 4, 59, 69, 101, 115, 14181, 14183, 14187, 14190, 1, 8837, 59, 3, 10950, 824, 59, 1, 8841, 101, 116, 4, 2, 59, 101, 14198, 14201, 3, 8835, 8402, 113, 4, 2, 59, 113, 14208, 14210, 1, 8841, 59, 3, 10950, 824, 4, 4, 103, 105, 108, 114, 14224, 14228, 14238, 14242, 108, 59, 1, 8825, 108, 100, 101, 5, 241, 1, 59, 14236, 1, 241, 103, 59, 1, 8824, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 14254, 14269, 101, 102, 116, 4, 2, 59, 101, 14263, 14265, 1, 8938, 113, 59, 1, 8940, 105, 103, 104, 116, 4, 2, 59, 101, 14279, 14281, 1, 8939, 113, 59, 1, 8941, 4, 2, 59, 109, 14291, 14293, 1, 957, 4, 3, 59, 101, 115, 14301, 14303, 14308, 1, 35, 114, 111, 59, 1, 8470, 112, 59, 1, 8199, 4, 9, 68, 72, 97, 100, 103, 105, 108, 114, 115, 14332, 14338, 14344, 14349, 14355, 14369, 14376, 14408, 14426, 97, 115, 104, 59, 1, 8877, 97, 114, 114, 59, 1, 10500, 112, 59, 3, 8781, 8402, 97, 115, 104, 59, 1, 8876, 4, 2, 101, 116, 14361, 14365, 59, 3, 8805, 8402, 59, 3, 62, 8402, 110, 102, 105, 110, 59, 1, 10718, 4, 3, 65, 101, 116, 14384, 14389, 14393, 114, 114, 59, 1, 10498, 59, 3, 8804, 8402, 4, 2, 59, 114, 14399, 14402, 3, 60, 8402, 105, 101, 59, 3, 8884, 8402, 4, 2, 65, 116, 14414, 14419, 114, 114, 59, 1, 10499, 114, 105, 101, 59, 3, 8885, 8402, 105, 109, 59, 3, 8764, 8402, 4, 3, 65, 97, 110, 14440, 14445, 14468, 114, 114, 59, 1, 8662, 114, 4, 2, 104, 114, 14452, 14456, 107, 59, 1, 10531, 4, 2, 59, 111, 14462, 14464, 1, 8598, 119, 59, 1, 8598, 101, 97, 114, 59, 1, 10535, 4, 18, 83, 97, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 14512, 14515, 14535, 14560, 14597, 14603, 14618, 14643, 14657, 14662, 14701, 14741, 14747, 14769, 14851, 14877, 14907, 14916, 59, 1, 9416, 4, 2, 99, 115, 14521, 14531, 117, 116, 101, 5, 243, 1, 59, 14529, 1, 243, 116, 59, 1, 8859, 4, 2, 105, 121, 14541, 14557, 114, 4, 2, 59, 99, 14548, 14550, 1, 8858, 5, 244, 1, 59, 14555, 1, 244, 59, 1, 1086, 4, 5, 97, 98, 105, 111, 115, 14572, 14577, 14583, 14587, 14591, 115, 104, 59, 1, 8861, 108, 97, 99, 59, 1, 337, 118, 59, 1, 10808, 116, 59, 1, 8857, 111, 108, 100, 59, 1, 10684, 108, 105, 103, 59, 1, 339, 4, 2, 99, 114, 14609, 14614, 105, 114, 59, 1, 10687, 59, 3, 55349, 56620, 4, 3, 111, 114, 116, 14626, 14630, 14640, 110, 59, 1, 731, 97, 118, 101, 5, 242, 1, 59, 14638, 1, 242, 59, 1, 10689, 4, 2, 98, 109, 14649, 14654, 97, 114, 59, 1, 10677, 59, 1, 937, 110, 116, 59, 1, 8750, 4, 4, 97, 99, 105, 116, 14672, 14677, 14693, 14698, 114, 114, 59, 1, 8634, 4, 2, 105, 114, 14683, 14687, 114, 59, 1, 10686, 111, 115, 115, 59, 1, 10683, 110, 101, 59, 1, 8254, 59, 1, 10688, 4, 3, 97, 101, 105, 14709, 14714, 14719, 99, 114, 59, 1, 333, 103, 97, 59, 1, 969, 4, 3, 99, 100, 110, 14727, 14733, 14736, 114, 111, 110, 59, 1, 959, 59, 1, 10678, 117, 115, 59, 1, 8854, 112, 102, 59, 3, 55349, 56672, 4, 3, 97, 101, 108, 14755, 14759, 14764, 114, 59, 1, 10679, 114, 112, 59, 1, 10681, 117, 115, 59, 1, 8853, 4, 7, 59, 97, 100, 105, 111, 115, 118, 14785, 14787, 14792, 14831, 14837, 14841, 14848, 1, 8744, 114, 114, 59, 1, 8635, 4, 4, 59, 101, 102, 109, 14802, 14804, 14817, 14824, 1, 10845, 114, 4, 2, 59, 111, 14811, 14813, 1, 8500, 102, 59, 1, 8500, 5, 170, 1, 59, 14822, 1, 170, 5, 186, 1, 59, 14829, 1, 186, 103, 111, 102, 59, 1, 8886, 114, 59, 1, 10838, 108, 111, 112, 101, 59, 1, 10839, 59, 1, 10843, 4, 3, 99, 108, 111, 14859, 14863, 14873, 114, 59, 1, 8500, 97, 115, 104, 5, 248, 1, 59, 14871, 1, 248, 108, 59, 1, 8856, 105, 4, 2, 108, 109, 14884, 14893, 100, 101, 5, 245, 1, 59, 14891, 1, 245, 101, 115, 4, 2, 59, 97, 14901, 14903, 1, 8855, 115, 59, 1, 10806, 109, 108, 5, 246, 1, 59, 14914, 1, 246, 98, 97, 114, 59, 1, 9021, 4, 12, 97, 99, 101, 102, 104, 105, 108, 109, 111, 114, 115, 117, 14948, 14992, 14996, 15033, 15038, 15068, 15090, 15189, 15192, 15222, 15427, 15441, 114, 4, 4, 59, 97, 115, 116, 14959, 14961, 14976, 14989, 1, 8741, 5, 182, 2, 59, 108, 14968, 14970, 1, 182, 108, 101, 108, 59, 1, 8741, 4, 2, 105, 108, 14982, 14986, 109, 59, 1, 10995, 59, 1, 11005, 59, 1, 8706, 121, 59, 1, 1087, 114, 4, 5, 99, 105, 109, 112, 116, 15009, 15014, 15019, 15024, 15027, 110, 116, 59, 1, 37, 111, 100, 59, 1, 46, 105, 108, 59, 1, 8240, 59, 1, 8869, 101, 110, 107, 59, 1, 8241, 114, 59, 3, 55349, 56621, 4, 3, 105, 109, 111, 15046, 15057, 15063, 4, 2, 59, 118, 15052, 15054, 1, 966, 59, 1, 981, 109, 97, 116, 59, 1, 8499, 110, 101, 59, 1, 9742, 4, 3, 59, 116, 118, 15076, 15078, 15087, 1, 960, 99, 104, 102, 111, 114, 107, 59, 1, 8916, 59, 1, 982, 4, 2, 97, 117, 15096, 15119, 110, 4, 2, 99, 107, 15103, 15115, 107, 4, 2, 59, 104, 15110, 15112, 1, 8463, 59, 1, 8462, 118, 59, 1, 8463, 115, 4, 9, 59, 97, 98, 99, 100, 101, 109, 115, 116, 15140, 15142, 15148, 15151, 15156, 15168, 15171, 15179, 15184, 1, 43, 99, 105, 114, 59, 1, 10787, 59, 1, 8862, 105, 114, 59, 1, 10786, 4, 2, 111, 117, 15162, 15165, 59, 1, 8724, 59, 1, 10789, 59, 1, 10866, 110, 5, 177, 1, 59, 15177, 1, 177, 105, 109, 59, 1, 10790, 119, 111, 59, 1, 10791, 59, 1, 177, 4, 3, 105, 112, 117, 15200, 15208, 15213, 110, 116, 105, 110, 116, 59, 1, 10773, 102, 59, 3, 55349, 56673, 110, 100, 5, 163, 1, 59, 15220, 1, 163, 4, 10, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 15244, 15246, 15249, 15253, 15258, 15334, 15347, 15367, 15416, 15421, 1, 8826, 59, 1, 10931, 112, 59, 1, 10935, 117, 101, 59, 1, 8828, 4, 2, 59, 99, 15264, 15266, 1, 10927, 4, 6, 59, 97, 99, 101, 110, 115, 15280, 15282, 15290, 15299, 15303, 15329, 1, 8826, 112, 112, 114, 111, 120, 59, 1, 10935, 117, 114, 108, 121, 101, 113, 59, 1, 8828, 113, 59, 1, 10927, 4, 3, 97, 101, 115, 15311, 15319, 15324, 112, 112, 114, 111, 120, 59, 1, 10937, 113, 113, 59, 1, 10933, 105, 109, 59, 1, 8936, 105, 109, 59, 1, 8830, 109, 101, 4, 2, 59, 115, 15342, 15344, 1, 8242, 59, 1, 8473, 4, 3, 69, 97, 115, 15355, 15358, 15362, 59, 1, 10933, 112, 59, 1, 10937, 105, 109, 59, 1, 8936, 4, 3, 100, 102, 112, 15375, 15378, 15404, 59, 1, 8719, 4, 3, 97, 108, 115, 15386, 15392, 15398, 108, 97, 114, 59, 1, 9006, 105, 110, 101, 59, 1, 8978, 117, 114, 102, 59, 1, 8979, 4, 2, 59, 116, 15410, 15412, 1, 8733, 111, 59, 1, 8733, 105, 109, 59, 1, 8830, 114, 101, 108, 59, 1, 8880, 4, 2, 99, 105, 15433, 15438, 114, 59, 3, 55349, 56517, 59, 1, 968, 110, 99, 115, 112, 59, 1, 8200, 4, 6, 102, 105, 111, 112, 115, 117, 15462, 15467, 15472, 15478, 15485, 15491, 114, 59, 3, 55349, 56622, 110, 116, 59, 1, 10764, 112, 102, 59, 3, 55349, 56674, 114, 105, 109, 101, 59, 1, 8279, 99, 114, 59, 3, 55349, 56518, 4, 3, 97, 101, 111, 15499, 15520, 15534, 116, 4, 2, 101, 105, 15506, 15515, 114, 110, 105, 111, 110, 115, 59, 1, 8461, 110, 116, 59, 1, 10774, 115, 116, 4, 2, 59, 101, 15528, 15530, 1, 63, 113, 59, 1, 8799, 116, 5, 34, 1, 59, 15540, 1, 34, 4, 21, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 15586, 15609, 15615, 15620, 15796, 15855, 15893, 15931, 15977, 16001, 16039, 16183, 16204, 16222, 16228, 16285, 16312, 16318, 16363, 16408, 16416, 4, 3, 97, 114, 116, 15594, 15599, 15603, 114, 114, 59, 1, 8667, 114, 59, 1, 8658, 97, 105, 108, 59, 1, 10524, 97, 114, 114, 59, 1, 10511, 97, 114, 59, 1, 10596, 4, 7, 99, 100, 101, 110, 113, 114, 116, 15636, 15651, 15656, 15664, 15687, 15696, 15770, 4, 2, 101, 117, 15642, 15646, 59, 3, 8765, 817, 116, 101, 59, 1, 341, 105, 99, 59, 1, 8730, 109, 112, 116, 121, 118, 59, 1, 10675, 103, 4, 4, 59, 100, 101, 108, 15675, 15677, 15680, 15683, 1, 10217, 59, 1, 10642, 59, 1, 10661, 101, 59, 1, 10217, 117, 111, 5, 187, 1, 59, 15694, 1, 187, 114, 4, 11, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 15721, 15723, 15727, 15739, 15742, 15746, 15750, 15754, 15758, 15763, 15767, 1, 8594, 112, 59, 1, 10613, 4, 2, 59, 102, 15733, 15735, 1, 8677, 115, 59, 1, 10528, 59, 1, 10547, 115, 59, 1, 10526, 107, 59, 1, 8618, 112, 59, 1, 8620, 108, 59, 1, 10565, 105, 109, 59, 1, 10612, 108, 59, 1, 8611, 59, 1, 8605, 4, 2, 97, 105, 15776, 15781, 105, 108, 59, 1, 10522, 111, 4, 2, 59, 110, 15788, 15790, 1, 8758, 97, 108, 115, 59, 1, 8474, 4, 3, 97, 98, 114, 15804, 15809, 15814, 114, 114, 59, 1, 10509, 114, 107, 59, 1, 10099, 4, 2, 97, 107, 15820, 15833, 99, 4, 2, 101, 107, 15827, 15830, 59, 1, 125, 59, 1, 93, 4, 2, 101, 115, 15839, 15842, 59, 1, 10636, 108, 4, 2, 100, 117, 15849, 15852, 59, 1, 10638, 59, 1, 10640, 4, 4, 97, 101, 117, 121, 15865, 15871, 15886, 15890, 114, 111, 110, 59, 1, 345, 4, 2, 100, 105, 15877, 15882, 105, 108, 59, 1, 343, 108, 59, 1, 8969, 98, 59, 1, 125, 59, 1, 1088, 4, 4, 99, 108, 113, 115, 15903, 15907, 15914, 15927, 97, 59, 1, 10551, 100, 104, 97, 114, 59, 1, 10601, 117, 111, 4, 2, 59, 114, 15922, 15924, 1, 8221, 59, 1, 8221, 104, 59, 1, 8627, 4, 3, 97, 99, 103, 15939, 15966, 15970, 108, 4, 4, 59, 105, 112, 115, 15950, 15952, 15957, 15963, 1, 8476, 110, 101, 59, 1, 8475, 97, 114, 116, 59, 1, 8476, 59, 1, 8477, 116, 59, 1, 9645, 5, 174, 1, 59, 15975, 1, 174, 4, 3, 105, 108, 114, 15985, 15991, 15997, 115, 104, 116, 59, 1, 10621, 111, 111, 114, 59, 1, 8971, 59, 3, 55349, 56623, 4, 2, 97, 111, 16007, 16028, 114, 4, 2, 100, 117, 16014, 16017, 59, 1, 8641, 4, 2, 59, 108, 16023, 16025, 1, 8640, 59, 1, 10604, 4, 2, 59, 118, 16034, 16036, 1, 961, 59, 1, 1009, 4, 3, 103, 110, 115, 16047, 16167, 16171, 104, 116, 4, 6, 97, 104, 108, 114, 115, 116, 16063, 16081, 16103, 16130, 16143, 16155, 114, 114, 111, 119, 4, 2, 59, 116, 16073, 16075, 1, 8594, 97, 105, 108, 59, 1, 8611, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 16093, 16099, 111, 119, 110, 59, 1, 8641, 112, 59, 1, 8640, 101, 102, 116, 4, 2, 97, 104, 16112, 16120, 114, 114, 111, 119, 115, 59, 1, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8908, 103, 59, 1, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8787, 4, 3, 97, 104, 109, 16191, 16196, 16201, 114, 114, 59, 1, 8644, 97, 114, 59, 1, 8652, 59, 1, 8207, 111, 117, 115, 116, 4, 2, 59, 97, 16214, 16216, 1, 9137, 99, 104, 101, 59, 1, 9137, 109, 105, 100, 59, 1, 10990, 4, 4, 97, 98, 112, 116, 16238, 16252, 16257, 16278, 4, 2, 110, 114, 16244, 16248, 103, 59, 1, 10221, 114, 59, 1, 8702, 114, 107, 59, 1, 10215, 4, 3, 97, 102, 108, 16265, 16269, 16273, 114, 59, 1, 10630, 59, 3, 55349, 56675, 117, 115, 59, 1, 10798, 105, 109, 101, 115, 59, 1, 10805, 4, 2, 97, 112, 16291, 16304, 114, 4, 2, 59, 103, 16298, 16300, 1, 41, 116, 59, 1, 10644, 111, 108, 105, 110, 116, 59, 1, 10770, 97, 114, 114, 59, 1, 8649, 4, 4, 97, 99, 104, 113, 16328, 16334, 16339, 16342, 113, 117, 111, 59, 1, 8250, 114, 59, 3, 55349, 56519, 59, 1, 8625, 4, 2, 98, 117, 16348, 16351, 59, 1, 93, 111, 4, 2, 59, 114, 16358, 16360, 1, 8217, 59, 1, 8217, 4, 3, 104, 105, 114, 16371, 16377, 16383, 114, 101, 101, 59, 1, 8908, 109, 101, 115, 59, 1, 8906, 105, 4, 4, 59, 101, 102, 108, 16394, 16396, 16399, 16402, 1, 9657, 59, 1, 8885, 59, 1, 9656, 116, 114, 105, 59, 1, 10702, 108, 117, 104, 97, 114, 59, 1, 10600, 59, 1, 8478, 4, 19, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 122, 16459, 16466, 16472, 16572, 16590, 16672, 16687, 16746, 16844, 16850, 16924, 16963, 16988, 17115, 17121, 17154, 17206, 17614, 17656, 99, 117, 116, 101, 59, 1, 347, 113, 117, 111, 59, 1, 8218, 4, 10, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 16494, 16496, 16499, 16513, 16518, 16531, 16536, 16556, 16564, 16569, 1, 8827, 59, 1, 10932, 4, 2, 112, 114, 16505, 16508, 59, 1, 10936, 111, 110, 59, 1, 353, 117, 101, 59, 1, 8829, 4, 2, 59, 100, 16524, 16526, 1, 10928, 105, 108, 59, 1, 351, 114, 99, 59, 1, 349, 4, 3, 69, 97, 115, 16544, 16547, 16551, 59, 1, 10934, 112, 59, 1, 10938, 105, 109, 59, 1, 8937, 111, 108, 105, 110, 116, 59, 1, 10771, 105, 109, 59, 1, 8831, 59, 1, 1089, 111, 116, 4, 3, 59, 98, 101, 16582, 16584, 16587, 1, 8901, 59, 1, 8865, 59, 1, 10854, 4, 7, 65, 97, 99, 109, 115, 116, 120, 16606, 16611, 16634, 16642, 16646, 16652, 16668, 114, 114, 59, 1, 8664, 114, 4, 2, 104, 114, 16618, 16622, 107, 59, 1, 10533, 4, 2, 59, 111, 16628, 16630, 1, 8600, 119, 59, 1, 8600, 116, 5, 167, 1, 59, 16640, 1, 167, 105, 59, 1, 59, 119, 97, 114, 59, 1, 10537, 109, 4, 2, 105, 110, 16659, 16665, 110, 117, 115, 59, 1, 8726, 59, 1, 8726, 116, 59, 1, 10038, 114, 4, 2, 59, 111, 16679, 16682, 3, 55349, 56624, 119, 110, 59, 1, 8994, 4, 4, 97, 99, 111, 121, 16697, 16702, 16716, 16739, 114, 112, 59, 1, 9839, 4, 2, 104, 121, 16708, 16713, 99, 121, 59, 1, 1097, 59, 1, 1096, 114, 116, 4, 2, 109, 112, 16724, 16729, 105, 100, 59, 1, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8741, 5, 173, 1, 59, 16744, 1, 173, 4, 2, 103, 109, 16752, 16770, 109, 97, 4, 3, 59, 102, 118, 16762, 16764, 16767, 1, 963, 59, 1, 962, 59, 1, 962, 4, 8, 59, 100, 101, 103, 108, 110, 112, 114, 16788, 16790, 16795, 16806, 16817, 16828, 16832, 16838, 1, 8764, 111, 116, 59, 1, 10858, 4, 2, 59, 113, 16801, 16803, 1, 8771, 59, 1, 8771, 4, 2, 59, 69, 16812, 16814, 1, 10910, 59, 1, 10912, 4, 2, 59, 69, 16823, 16825, 1, 10909, 59, 1, 10911, 101, 59, 1, 8774, 108, 117, 115, 59, 1, 10788, 97, 114, 114, 59, 1, 10610, 97, 114, 114, 59, 1, 8592, 4, 4, 97, 101, 105, 116, 16860, 16883, 16891, 16904, 4, 2, 108, 115, 16866, 16878, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 1, 8726, 104, 112, 59, 1, 10803, 112, 97, 114, 115, 108, 59, 1, 10724, 4, 2, 100, 108, 16897, 16900, 59, 1, 8739, 101, 59, 1, 8995, 4, 2, 59, 101, 16910, 16912, 1, 10922, 4, 2, 59, 115, 16918, 16920, 1, 10924, 59, 3, 10924, 65024, 4, 3, 102, 108, 112, 16932, 16938, 16958, 116, 99, 121, 59, 1, 1100, 4, 2, 59, 98, 16944, 16946, 1, 47, 4, 2, 59, 97, 16952, 16954, 1, 10692, 114, 59, 1, 9023, 102, 59, 3, 55349, 56676, 97, 4, 2, 100, 114, 16970, 16985, 101, 115, 4, 2, 59, 117, 16978, 16980, 1, 9824, 105, 116, 59, 1, 9824, 59, 1, 8741, 4, 3, 99, 115, 117, 16996, 17028, 17089, 4, 2, 97, 117, 17002, 17015, 112, 4, 2, 59, 115, 17009, 17011, 1, 8851, 59, 3, 8851, 65024, 112, 4, 2, 59, 115, 17022, 17024, 1, 8852, 59, 3, 8852, 65024, 117, 4, 2, 98, 112, 17035, 17062, 4, 3, 59, 101, 115, 17043, 17045, 17048, 1, 8847, 59, 1, 8849, 101, 116, 4, 2, 59, 101, 17056, 17058, 1, 8847, 113, 59, 1, 8849, 4, 3, 59, 101, 115, 17070, 17072, 17075, 1, 8848, 59, 1, 8850, 101, 116, 4, 2, 59, 101, 17083, 17085, 1, 8848, 113, 59, 1, 8850, 4, 3, 59, 97, 102, 17097, 17099, 17112, 1, 9633, 114, 4, 2, 101, 102, 17106, 17109, 59, 1, 9633, 59, 1, 9642, 59, 1, 9642, 97, 114, 114, 59, 1, 8594, 4, 4, 99, 101, 109, 116, 17131, 17136, 17142, 17148, 114, 59, 3, 55349, 56520, 116, 109, 110, 59, 1, 8726, 105, 108, 101, 59, 1, 8995, 97, 114, 102, 59, 1, 8902, 4, 2, 97, 114, 17160, 17172, 114, 4, 2, 59, 102, 17167, 17169, 1, 9734, 59, 1, 9733, 4, 2, 97, 110, 17178, 17202, 105, 103, 104, 116, 4, 2, 101, 112, 17188, 17197, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 104, 105, 59, 1, 981, 115, 59, 1, 175, 4, 5, 98, 99, 109, 110, 112, 17218, 17351, 17420, 17423, 17427, 4, 9, 59, 69, 100, 101, 109, 110, 112, 114, 115, 17238, 17240, 17243, 17248, 17261, 17267, 17279, 17285, 17291, 1, 8834, 59, 1, 10949, 111, 116, 59, 1, 10941, 4, 2, 59, 100, 17254, 17256, 1, 8838, 111, 116, 59, 1, 10947, 117, 108, 116, 59, 1, 10945, 4, 2, 69, 101, 17273, 17276, 59, 1, 10955, 59, 1, 8842, 108, 117, 115, 59, 1, 10943, 97, 114, 114, 59, 1, 10617, 4, 3, 101, 105, 117, 17299, 17335, 17339, 116, 4, 3, 59, 101, 110, 17308, 17310, 17322, 1, 8834, 113, 4, 2, 59, 113, 17317, 17319, 1, 8838, 59, 1, 10949, 101, 113, 4, 2, 59, 113, 17330, 17332, 1, 8842, 59, 1, 10955, 109, 59, 1, 10951, 4, 2, 98, 112, 17345, 17348, 59, 1, 10965, 59, 1, 10963, 99, 4, 6, 59, 97, 99, 101, 110, 115, 17366, 17368, 17376, 17385, 17389, 17415, 1, 8827, 112, 112, 114, 111, 120, 59, 1, 10936, 117, 114, 108, 121, 101, 113, 59, 1, 8829, 113, 59, 1, 10928, 4, 3, 97, 101, 115, 17397, 17405, 17410, 112, 112, 114, 111, 120, 59, 1, 10938, 113, 113, 59, 1, 10934, 105, 109, 59, 1, 8937, 105, 109, 59, 1, 8831, 59, 1, 8721, 103, 59, 1, 9834, 4, 13, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 17455, 17462, 17469, 17476, 17478, 17481, 17496, 17509, 17524, 17530, 17536, 17548, 17554, 5, 185, 1, 59, 17460, 1, 185, 5, 178, 1, 59, 17467, 1, 178, 5, 179, 1, 59, 17474, 1, 179, 1, 8835, 59, 1, 10950, 4, 2, 111, 115, 17487, 17491, 116, 59, 1, 10942, 117, 98, 59, 1, 10968, 4, 2, 59, 100, 17502, 17504, 1, 8839, 111, 116, 59, 1, 10948, 115, 4, 2, 111, 117, 17516, 17520, 108, 59, 1, 10185, 98, 59, 1, 10967, 97, 114, 114, 59, 1, 10619, 117, 108, 116, 59, 1, 10946, 4, 2, 69, 101, 17542, 17545, 59, 1, 10956, 59, 1, 8843, 108, 117, 115, 59, 1, 10944, 4, 3, 101, 105, 117, 17562, 17598, 17602, 116, 4, 3, 59, 101, 110, 17571, 17573, 17585, 1, 8835, 113, 4, 2, 59, 113, 17580, 17582, 1, 8839, 59, 1, 10950, 101, 113, 4, 2, 59, 113, 17593, 17595, 1, 8843, 59, 1, 10956, 109, 59, 1, 10952, 4, 2, 98, 112, 17608, 17611, 59, 1, 10964, 59, 1, 10966, 4, 3, 65, 97, 110, 17622, 17627, 17650, 114, 114, 59, 1, 8665, 114, 4, 2, 104, 114, 17634, 17638, 107, 59, 1, 10534, 4, 2, 59, 111, 17644, 17646, 1, 8601, 119, 59, 1, 8601, 119, 97, 114, 59, 1, 10538, 108, 105, 103, 5, 223, 1, 59, 17664, 1, 223, 4, 13, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 114, 115, 119, 17694, 17709, 17714, 17737, 17742, 17749, 17754, 17860, 17905, 17957, 17964, 18090, 18122, 4, 2, 114, 117, 17700, 17706, 103, 101, 116, 59, 1, 8982, 59, 1, 964, 114, 107, 59, 1, 9140, 4, 3, 97, 101, 121, 17722, 17728, 17734, 114, 111, 110, 59, 1, 357, 100, 105, 108, 59, 1, 355, 59, 1, 1090, 111, 116, 59, 1, 8411, 108, 114, 101, 99, 59, 1, 8981, 114, 59, 3, 55349, 56625, 4, 4, 101, 105, 107, 111, 17764, 17805, 17836, 17851, 4, 2, 114, 116, 17770, 17786, 101, 4, 2, 52, 102, 17777, 17780, 59, 1, 8756, 111, 114, 101, 59, 1, 8756, 97, 4, 3, 59, 115, 118, 17795, 17797, 17802, 1, 952, 121, 109, 59, 1, 977, 59, 1, 977, 4, 2, 99, 110, 17811, 17831, 107, 4, 2, 97, 115, 17818, 17826, 112, 112, 114, 111, 120, 59, 1, 8776, 105, 109, 59, 1, 8764, 115, 112, 59, 1, 8201, 4, 2, 97, 115, 17842, 17846, 112, 59, 1, 8776, 105, 109, 59, 1, 8764, 114, 110, 5, 254, 1, 59, 17858, 1, 254, 4, 3, 108, 109, 110, 17868, 17873, 17901, 100, 101, 59, 1, 732, 101, 115, 5, 215, 3, 59, 98, 100, 17884, 17886, 17898, 1, 215, 4, 2, 59, 97, 17892, 17894, 1, 8864, 114, 59, 1, 10801, 59, 1, 10800, 116, 59, 1, 8749, 4, 3, 101, 112, 115, 17913, 17917, 17953, 97, 59, 1, 10536, 4, 4, 59, 98, 99, 102, 17927, 17929, 17934, 17939, 1, 8868, 111, 116, 59, 1, 9014, 105, 114, 59, 1, 10993, 4, 2, 59, 111, 17945, 17948, 3, 55349, 56677, 114, 107, 59, 1, 10970, 97, 59, 1, 10537, 114, 105, 109, 101, 59, 1, 8244, 4, 3, 97, 105, 112, 17972, 17977, 18082, 100, 101, 59, 1, 8482, 4, 7, 97, 100, 101, 109, 112, 115, 116, 17993, 18051, 18056, 18059, 18066, 18072, 18076, 110, 103, 108, 101, 4, 5, 59, 100, 108, 113, 114, 18009, 18011, 18017, 18032, 18035, 1, 9653, 111, 119, 110, 59, 1, 9663, 101, 102, 116, 4, 2, 59, 101, 18026, 18028, 1, 9667, 113, 59, 1, 8884, 59, 1, 8796, 105, 103, 104, 116, 4, 2, 59, 101, 18045, 18047, 1, 9657, 113, 59, 1, 8885, 111, 116, 59, 1, 9708, 59, 1, 8796, 105, 110, 117, 115, 59, 1, 10810, 108, 117, 115, 59, 1, 10809, 98, 59, 1, 10701, 105, 109, 101, 59, 1, 10811, 101, 122, 105, 117, 109, 59, 1, 9186, 4, 3, 99, 104, 116, 18098, 18111, 18116, 4, 2, 114, 121, 18104, 18108, 59, 3, 55349, 56521, 59, 1, 1094, 99, 121, 59, 1, 1115, 114, 111, 107, 59, 1, 359, 4, 2, 105, 111, 18128, 18133, 120, 116, 59, 1, 8812, 104, 101, 97, 100, 4, 2, 108, 114, 18143, 18154, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8608, 4, 18, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 18204, 18209, 18214, 18234, 18250, 18268, 18292, 18308, 18319, 18343, 18379, 18397, 18413, 18504, 18547, 18553, 18584, 18603, 114, 114, 59, 1, 8657, 97, 114, 59, 1, 10595, 4, 2, 99, 114, 18220, 18230, 117, 116, 101, 5, 250, 1, 59, 18228, 1, 250, 114, 59, 1, 8593, 114, 4, 2, 99, 101, 18241, 18245, 121, 59, 1, 1118, 118, 101, 59, 1, 365, 4, 2, 105, 121, 18256, 18265, 114, 99, 5, 251, 1, 59, 18263, 1, 251, 59, 1, 1091, 4, 3, 97, 98, 104, 18276, 18281, 18287, 114, 114, 59, 1, 8645, 108, 97, 99, 59, 1, 369, 97, 114, 59, 1, 10606, 4, 2, 105, 114, 18298, 18304, 115, 104, 116, 59, 1, 10622, 59, 3, 55349, 56626, 114, 97, 118, 101, 5, 249, 1, 59, 18317, 1, 249, 4, 2, 97, 98, 18325, 18338, 114, 4, 2, 108, 114, 18332, 18335, 59, 1, 8639, 59, 1, 8638, 108, 107, 59, 1, 9600, 4, 2, 99, 116, 18349, 18374, 4, 2, 111, 114, 18355, 18369, 114, 110, 4, 2, 59, 101, 18363, 18365, 1, 8988, 114, 59, 1, 8988, 111, 112, 59, 1, 8975, 114, 105, 59, 1, 9720, 4, 2, 97, 108, 18385, 18390, 99, 114, 59, 1, 363, 5, 168, 1, 59, 18395, 1, 168, 4, 2, 103, 112, 18403, 18408, 111, 110, 59, 1, 371, 102, 59, 3, 55349, 56678, 4, 6, 97, 100, 104, 108, 115, 117, 18427, 18434, 18445, 18470, 18475, 18494, 114, 114, 111, 119, 59, 1, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8597, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 18457, 18463, 101, 102, 116, 59, 1, 8639, 105, 103, 104, 116, 59, 1, 8638, 117, 115, 59, 1, 8846, 105, 4, 3, 59, 104, 108, 18484, 18486, 18489, 1, 965, 59, 1, 978, 111, 110, 59, 1, 965, 112, 97, 114, 114, 111, 119, 115, 59, 1, 8648, 4, 3, 99, 105, 116, 18512, 18537, 18542, 4, 2, 111, 114, 18518, 18532, 114, 110, 4, 2, 59, 101, 18526, 18528, 1, 8989, 114, 59, 1, 8989, 111, 112, 59, 1, 8974, 110, 103, 59, 1, 367, 114, 105, 59, 1, 9721, 99, 114, 59, 3, 55349, 56522, 4, 3, 100, 105, 114, 18561, 18566, 18572, 111, 116, 59, 1, 8944, 108, 100, 101, 59, 1, 361, 105, 4, 2, 59, 102, 18579, 18581, 1, 9653, 59, 1, 9652, 4, 2, 97, 109, 18590, 18595, 114, 114, 59, 1, 8648, 108, 5, 252, 1, 59, 18601, 1, 252, 97, 110, 103, 108, 101, 59, 1, 10663, 4, 15, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 18643, 18648, 18661, 18667, 18847, 18851, 18857, 18904, 18909, 18915, 18931, 18937, 18943, 18949, 18996, 114, 114, 59, 1, 8661, 97, 114, 4, 2, 59, 118, 18656, 18658, 1, 10984, 59, 1, 10985, 97, 115, 104, 59, 1, 8872, 4, 2, 110, 114, 18673, 18679, 103, 114, 116, 59, 1, 10652, 4, 7, 101, 107, 110, 112, 114, 115, 116, 18695, 18704, 18711, 18720, 18742, 18754, 18810, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 97, 112, 112, 97, 59, 1, 1008, 111, 116, 104, 105, 110, 103, 59, 1, 8709, 4, 3, 104, 105, 114, 18728, 18732, 18735, 105, 59, 1, 981, 59, 1, 982, 111, 112, 116, 111, 59, 1, 8733, 4, 2, 59, 104, 18748, 18750, 1, 8597, 111, 59, 1, 1009, 4, 2, 105, 117, 18760, 18766, 103, 109, 97, 59, 1, 962, 4, 2, 98, 112, 18772, 18791, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18784, 18787, 3, 8842, 65024, 59, 3, 10955, 65024, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18803, 18806, 3, 8843, 65024, 59, 3, 10956, 65024, 4, 2, 104, 114, 18816, 18822, 101, 116, 97, 59, 1, 977, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 18834, 18840, 101, 102, 116, 59, 1, 8882, 105, 103, 104, 116, 59, 1, 8883, 121, 59, 1, 1074, 97, 115, 104, 59, 1, 8866, 4, 3, 101, 108, 114, 18865, 18884, 18890, 4, 3, 59, 98, 101, 18873, 18875, 18880, 1, 8744, 97, 114, 59, 1, 8891, 113, 59, 1, 8794, 108, 105, 112, 59, 1, 8942, 4, 2, 98, 116, 18896, 18901, 97, 114, 59, 1, 124, 59, 1, 124, 114, 59, 3, 55349, 56627, 116, 114, 105, 59, 1, 8882, 115, 117, 4, 2, 98, 112, 18923, 18927, 59, 3, 8834, 8402, 59, 3, 8835, 8402, 112, 102, 59, 3, 55349, 56679, 114, 111, 112, 59, 1, 8733, 116, 114, 105, 59, 1, 8883, 4, 2, 99, 117, 18955, 18960, 114, 59, 3, 55349, 56523, 4, 2, 98, 112, 18966, 18981, 110, 4, 2, 69, 101, 18973, 18977, 59, 3, 10955, 65024, 59, 3, 8842, 65024, 110, 4, 2, 69, 101, 18988, 18992, 59, 3, 10956, 65024, 59, 3, 8843, 65024, 105, 103, 122, 97, 103, 59, 1, 10650, 4, 7, 99, 101, 102, 111, 112, 114, 115, 19020, 19026, 19061, 19066, 19072, 19075, 19089, 105, 114, 99, 59, 1, 373, 4, 2, 100, 105, 19032, 19055, 4, 2, 98, 103, 19038, 19043, 97, 114, 59, 1, 10847, 101, 4, 2, 59, 113, 19050, 19052, 1, 8743, 59, 1, 8793, 101, 114, 112, 59, 1, 8472, 114, 59, 3, 55349, 56628, 112, 102, 59, 3, 55349, 56680, 59, 1, 8472, 4, 2, 59, 101, 19081, 19083, 1, 8768, 97, 116, 104, 59, 1, 8768, 99, 114, 59, 3, 55349, 56524, 4, 14, 99, 100, 102, 104, 105, 108, 109, 110, 111, 114, 115, 117, 118, 119, 19125, 19146, 19152, 19157, 19173, 19176, 19192, 19197, 19202, 19236, 19252, 19269, 19286, 19291, 4, 3, 97, 105, 117, 19133, 19137, 19142, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 116, 114, 105, 59, 1, 9661, 114, 59, 3, 55349, 56629, 4, 2, 65, 97, 19163, 19168, 114, 114, 59, 1, 10234, 114, 114, 59, 1, 10231, 59, 1, 958, 4, 2, 65, 97, 19182, 19187, 114, 114, 59, 1, 10232, 114, 114, 59, 1, 10229, 97, 112, 59, 1, 10236, 105, 115, 59, 1, 8955, 4, 3, 100, 112, 116, 19210, 19215, 19230, 111, 116, 59, 1, 10752, 4, 2, 102, 108, 19221, 19225, 59, 3, 55349, 56681, 117, 115, 59, 1, 10753, 105, 109, 101, 59, 1, 10754, 4, 2, 65, 97, 19242, 19247, 114, 114, 59, 1, 10233, 114, 114, 59, 1, 10230, 4, 2, 99, 113, 19258, 19263, 114, 59, 3, 55349, 56525, 99, 117, 112, 59, 1, 10758, 4, 2, 112, 116, 19275, 19281, 108, 117, 115, 59, 1, 10756, 114, 105, 59, 1, 9651, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 19316, 19335, 19349, 19357, 19362, 19367, 19373, 19379, 99, 4, 2, 117, 121, 19323, 19332, 116, 101, 5, 253, 1, 59, 19330, 1, 253, 59, 1, 1103, 4, 2, 105, 121, 19341, 19346, 114, 99, 59, 1, 375, 59, 1, 1099, 110, 5, 165, 1, 59, 19355, 1, 165, 114, 59, 3, 55349, 56630, 99, 121, 59, 1, 1111, 112, 102, 59, 3, 55349, 56682, 99, 114, 59, 3, 55349, 56526, 4, 2, 99, 109, 19385, 19389, 121, 59, 1, 1102, 108, 5, 255, 1, 59, 19395, 1, 255, 4, 10, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 19419, 19426, 19441, 19446, 19462, 19467, 19472, 19480, 19486, 19492, 99, 117, 116, 101, 59, 1, 378, 4, 2, 97, 121, 19432, 19438, 114, 111, 110, 59, 1, 382, 59, 1, 1079, 111, 116, 59, 1, 380, 4, 2, 101, 116, 19452, 19458, 116, 114, 102, 59, 1, 8488, 97, 59, 1, 950, 114, 59, 3, 55349, 56631, 99, 121, 59, 1, 1078, 103, 114, 97, 114, 114, 59, 1, 8669, 112, 102, 59, 3, 55349, 56683, 99, 114, 59, 3, 55349, 56527, 4, 2, 106, 110, 19498, 19501, 59, 1, 8205, 106, 59, 1, 8204]);
    }
  });

  // node_modules/parse5/lib/tokenizer/index.js
  var require_tokenizer = __commonJS({
    "node_modules/parse5/lib/tokenizer/index.js"(exports, module) {
      init_globals();
      var Preprocessor = require_preprocessor();
      var unicode = require_unicode();
      var neTree = require_named_entity_data();
      var ERR = require_error_codes();
      var $ = unicode.CODE_POINTS;
      var $$ = unicode.CODE_POINT_SEQUENCES;
      var C1_CONTROLS_REFERENCE_REPLACEMENTS = {
        128: 8364,
        130: 8218,
        131: 402,
        132: 8222,
        133: 8230,
        134: 8224,
        135: 8225,
        136: 710,
        137: 8240,
        138: 352,
        139: 8249,
        140: 338,
        142: 381,
        145: 8216,
        146: 8217,
        147: 8220,
        148: 8221,
        149: 8226,
        150: 8211,
        151: 8212,
        152: 732,
        153: 8482,
        154: 353,
        155: 8250,
        156: 339,
        158: 382,
        159: 376
      };
      var HAS_DATA_FLAG = 1 << 0;
      var DATA_DUPLET_FLAG = 1 << 1;
      var HAS_BRANCHES_FLAG = 1 << 2;
      var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;
      var DATA_STATE = "DATA_STATE";
      var RCDATA_STATE = "RCDATA_STATE";
      var RAWTEXT_STATE = "RAWTEXT_STATE";
      var SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE";
      var PLAINTEXT_STATE = "PLAINTEXT_STATE";
      var TAG_OPEN_STATE = "TAG_OPEN_STATE";
      var END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE";
      var TAG_NAME_STATE = "TAG_NAME_STATE";
      var RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE";
      var RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE";
      var RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE";
      var RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE";
      var RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE";
      var RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE";
      var SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE";
      var SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE";
      var SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE";
      var SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE";
      var SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE";
      var SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE";
      var BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE";
      var ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE";
      var AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE";
      var BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE";
      var ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE";
      var ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE";
      var ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE";
      var AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE";
      var SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE";
      var BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE";
      var MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE";
      var COMMENT_START_STATE = "COMMENT_START_STATE";
      var COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE";
      var COMMENT_STATE = "COMMENT_STATE";
      var COMMENT_LESS_THAN_SIGN_STATE = "COMMENT_LESS_THAN_SIGN_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_STATE = "COMMENT_LESS_THAN_SIGN_BANG_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE";
      var COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE";
      var COMMENT_END_STATE = "COMMENT_END_STATE";
      var COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE";
      var DOCTYPE_STATE = "DOCTYPE_STATE";
      var BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE";
      var DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE";
      var AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE";
      var AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE";
      var BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
      var DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE";
      var DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE";
      var AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
      var BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE";
      var AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE";
      var BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
      var DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE";
      var DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE";
      var AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
      var BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE";
      var CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
      var CDATA_SECTION_BRACKET_STATE = "CDATA_SECTION_BRACKET_STATE";
      var CDATA_SECTION_END_STATE = "CDATA_SECTION_END_STATE";
      var CHARACTER_REFERENCE_STATE = "CHARACTER_REFERENCE_STATE";
      var NAMED_CHARACTER_REFERENCE_STATE = "NAMED_CHARACTER_REFERENCE_STATE";
      var AMBIGUOUS_AMPERSAND_STATE = "AMBIGUOS_AMPERSAND_STATE";
      var NUMERIC_CHARACTER_REFERENCE_STATE = "NUMERIC_CHARACTER_REFERENCE_STATE";
      var HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_START_STATE";
      var DECIMAL_CHARACTER_REFERENCE_START_STATE = "DECIMAL_CHARACTER_REFERENCE_START_STATE";
      var HEXADEMICAL_CHARACTER_REFERENCE_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_STATE";
      var DECIMAL_CHARACTER_REFERENCE_STATE = "DECIMAL_CHARACTER_REFERENCE_STATE";
      var NUMERIC_CHARACTER_REFERENCE_END_STATE = "NUMERIC_CHARACTER_REFERENCE_END_STATE";
      function isWhitespace(cp) {
        return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
      }
      function isAsciiDigit(cp) {
        return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
      }
      function isAsciiUpper(cp) {
        return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
      }
      function isAsciiLower(cp) {
        return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
      }
      function isAsciiLetter(cp) {
        return isAsciiLower(cp) || isAsciiUpper(cp);
      }
      function isAsciiAlphaNumeric(cp) {
        return isAsciiLetter(cp) || isAsciiDigit(cp);
      }
      function isAsciiUpperHexDigit(cp) {
        return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;
      }
      function isAsciiLowerHexDigit(cp) {
        return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;
      }
      function isAsciiHexDigit(cp) {
        return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
      }
      function toAsciiLowerCodePoint(cp) {
        return cp + 32;
      }
      function toChar(cp) {
        if (cp <= 65535) {
          return String.fromCharCode(cp);
        }
        cp -= 65536;
        return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
      }
      function toAsciiLowerChar(cp) {
        return String.fromCharCode(toAsciiLowerCodePoint(cp));
      }
      function findNamedEntityTreeBranch(nodeIx, cp) {
        const branchCount = neTree[++nodeIx];
        let lo = ++nodeIx;
        let hi = lo + branchCount - 1;
        while (lo <= hi) {
          const mid = lo + hi >>> 1;
          const midCp = neTree[mid];
          if (midCp < cp) {
            lo = mid + 1;
          } else if (midCp > cp) {
            hi = mid - 1;
          } else {
            return neTree[mid + branchCount];
          }
        }
        return -1;
      }
      var Tokenizer = class {
        constructor() {
          this.preprocessor = new Preprocessor();
          this.tokenQueue = [];
          this.allowCDATA = false;
          this.state = DATA_STATE;
          this.returnState = "";
          this.charRefCode = -1;
          this.tempBuff = [];
          this.lastStartTagName = "";
          this.consumedAfterSnapshot = -1;
          this.active = false;
          this.currentCharacterToken = null;
          this.currentToken = null;
          this.currentAttr = null;
        }
        _err() {
        }
        _errOnNextCodePoint(err) {
          this._consume();
          this._err(err);
          this._unconsume();
        }
        getNextToken() {
          while (!this.tokenQueue.length && this.active) {
            this.consumedAfterSnapshot = 0;
            const cp = this._consume();
            if (!this._ensureHibernation()) {
              this[this.state](cp);
            }
          }
          return this.tokenQueue.shift();
        }
        write(chunk, isLastChunk) {
          this.active = true;
          this.preprocessor.write(chunk, isLastChunk);
        }
        insertHtmlAtCurrentPos(chunk) {
          this.active = true;
          this.preprocessor.insertHtmlAtCurrentPos(chunk);
        }
        _ensureHibernation() {
          if (this.preprocessor.endOfChunkHit) {
            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
              this.preprocessor.retreat();
            }
            this.active = false;
            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });
            return true;
          }
          return false;
        }
        _consume() {
          this.consumedAfterSnapshot++;
          return this.preprocessor.advance();
        }
        _unconsume() {
          this.consumedAfterSnapshot--;
          this.preprocessor.retreat();
        }
        _reconsumeInState(state) {
          this.state = state;
          this._unconsume();
        }
        _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
          let consumedCount = 0;
          let isMatch = true;
          const patternLength = pattern.length;
          let patternPos = 0;
          let cp = startCp;
          let patternCp = void 0;
          for (; patternPos < patternLength; patternPos++) {
            if (patternPos > 0) {
              cp = this._consume();
              consumedCount++;
            }
            if (cp === $.EOF) {
              isMatch = false;
              break;
            }
            patternCp = pattern[patternPos];
            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
              isMatch = false;
              break;
            }
          }
          if (!isMatch) {
            while (consumedCount--) {
              this._unconsume();
            }
          }
          return isMatch;
        }
        _isTempBufferEqualToScriptString() {
          if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
            return false;
          }
          for (let i = 0; i < this.tempBuff.length; i++) {
            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
              return false;
            }
          }
          return true;
        }
        _createStartTagToken() {
          this.currentToken = {
            type: Tokenizer.START_TAG_TOKEN,
            tagName: "",
            selfClosing: false,
            ackSelfClosing: false,
            attrs: []
          };
        }
        _createEndTagToken() {
          this.currentToken = {
            type: Tokenizer.END_TAG_TOKEN,
            tagName: "",
            selfClosing: false,
            attrs: []
          };
        }
        _createCommentToken() {
          this.currentToken = {
            type: Tokenizer.COMMENT_TOKEN,
            data: ""
          };
        }
        _createDoctypeToken(initialName) {
          this.currentToken = {
            type: Tokenizer.DOCTYPE_TOKEN,
            name: initialName,
            forceQuirks: false,
            publicId: null,
            systemId: null
          };
        }
        _createCharacterToken(type2, ch) {
          this.currentCharacterToken = {
            type: type2,
            chars: ch
          };
        }
        _createEOFToken() {
          this.currentToken = { type: Tokenizer.EOF_TOKEN };
        }
        _createAttr(attrNameFirstCh) {
          this.currentAttr = {
            name: attrNameFirstCh,
            value: ""
          };
        }
        _leaveAttrName(toState) {
          if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
            this.currentToken.attrs.push(this.currentAttr);
          } else {
            this._err(ERR.duplicateAttribute);
          }
          this.state = toState;
        }
        _leaveAttrValue(toState) {
          this.state = toState;
        }
        _emitCurrentToken() {
          this._emitCurrentCharacterToken();
          const ct = this.currentToken;
          this.currentToken = null;
          if (ct.type === Tokenizer.START_TAG_TOKEN) {
            this.lastStartTagName = ct.tagName;
          } else if (ct.type === Tokenizer.END_TAG_TOKEN) {
            if (ct.attrs.length > 0) {
              this._err(ERR.endTagWithAttributes);
            }
            if (ct.selfClosing) {
              this._err(ERR.endTagWithTrailingSolidus);
            }
          }
          this.tokenQueue.push(ct);
        }
        _emitCurrentCharacterToken() {
          if (this.currentCharacterToken) {
            this.tokenQueue.push(this.currentCharacterToken);
            this.currentCharacterToken = null;
          }
        }
        _emitEOFToken() {
          this._createEOFToken();
          this._emitCurrentToken();
        }
        _appendCharToCurrentCharacterToken(type2, ch) {
          if (this.currentCharacterToken && this.currentCharacterToken.type !== type2) {
            this._emitCurrentCharacterToken();
          }
          if (this.currentCharacterToken) {
            this.currentCharacterToken.chars += ch;
          } else {
            this._createCharacterToken(type2, ch);
          }
        }
        _emitCodePoint(cp) {
          let type2 = Tokenizer.CHARACTER_TOKEN;
          if (isWhitespace(cp)) {
            type2 = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
          } else if (cp === $.NULL) {
            type2 = Tokenizer.NULL_CHARACTER_TOKEN;
          }
          this._appendCharToCurrentCharacterToken(type2, toChar(cp));
        }
        _emitSeveralCodePoints(codePoints) {
          for (let i = 0; i < codePoints.length; i++) {
            this._emitCodePoint(codePoints[i]);
          }
        }
        _emitChars(ch) {
          this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
        }
        _matchNamedCharacterReference(startCp) {
          let result = null;
          let excess = 1;
          let i = findNamedEntityTreeBranch(0, startCp);
          this.tempBuff.push(startCp);
          while (i > -1) {
            const current = neTree[i];
            const inNode = current < MAX_BRANCH_MARKER_VALUE;
            const nodeWithData = inNode && current & HAS_DATA_FLAG;
            if (nodeWithData) {
              result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
              excess = 0;
            }
            const cp = this._consume();
            this.tempBuff.push(cp);
            excess++;
            if (cp === $.EOF) {
              break;
            }
            if (inNode) {
              i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
            } else {
              i = cp === current ? ++i : -1;
            }
          }
          while (excess--) {
            this.tempBuff.pop();
            this._unconsume();
          }
          return result;
        }
        _isCharacterReferenceInAttribute() {
          return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;
        }
        _isCharacterReferenceAttributeQuirk(withSemicolon) {
          if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
            const nextCp = this._consume();
            this._unconsume();
            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
          }
          return false;
        }
        _flushCodePointsConsumedAsCharacterReference() {
          if (this._isCharacterReferenceInAttribute()) {
            for (let i = 0; i < this.tempBuff.length; i++) {
              this.currentAttr.value += toChar(this.tempBuff[i]);
            }
          } else {
            this._emitSeveralCodePoints(this.tempBuff);
          }
          this.tempBuff = [];
        }
        [DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = TAG_OPEN_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = DATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitCodePoint(cp);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [RCDATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.AMPERSAND) {
            this.returnState = RCDATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = RCDATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [RAWTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [PLAINTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [TAG_OPEN_STATE](cp) {
          if (cp === $.EXCLAMATION_MARK) {
            this.state = MARKUP_DECLARATION_OPEN_STATE;
          } else if (cp === $.SOLIDUS) {
            this.state = END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
            this._createStartTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $.QUESTION_MARK) {
            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("<");
            this._emitEOFToken();
          } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._emitChars("<");
            this._reconsumeInState(DATA_STATE);
          }
        }
        [END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingEndTagName);
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("</");
            this._emitEOFToken();
          } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
        }
        [TAG_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          } else if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentToken.tagName += toChar(cp);
          }
        }
        [RCDATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RCDATA_END_TAG_OPEN_STATE;
          } else {
            this._emitChars("<");
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RCDATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RCDATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this.state = DATA_STATE;
                this._emitCurrentToken();
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RAWTEXT_END_TAG_OPEN_STATE;
          } else {
            this._emitChars("<");
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [RAWTEXT_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [RAWTEXT_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
          } else if (cp === $.EXCLAMATION_MARK) {
            this.state = SCRIPT_DATA_ESCAPE_START_STATE;
            this._emitChars("<!");
          } else {
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              } else if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              } else if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPE_START_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
            this._emitChars("-");
          } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars(">");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
            this.tempBuff = [];
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
          } else {
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
          } else {
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars(">");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
            this._emitChars("/");
          } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
          } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
        }
        [BEFORE_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.EQUALS_SIGN) {
            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
            this._createAttr("=");
            this.state = ATTRIBUTE_NAME_STATE;
          } else {
            this._createAttr("");
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
        }
        [ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
            this._unconsume();
          } else if (cp === $.EQUALS_SIGN) {
            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
          } else if (isAsciiUpper(cp)) {
            this.currentAttr.name += toAsciiLowerChar(cp);
          } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
            this._err(ERR.unexpectedCharacterInAttributeName);
            this.currentAttr.name += toChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;
          } else {
            this.currentAttr.name += toChar(cp);
          }
        }
        [AFTER_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $.EQUALS_SIGN) {
            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._createAttr("");
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
        }
        [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingAttributeValue);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else {
            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
          }
        }
        [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {
          if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
            this.currentAttr.value += toChar(cp);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {
          if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.SOLIDUS) {
            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._err(ERR.missingWhitespaceBetweenAttributes);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
        }
        [SELF_CLOSING_START_TAG_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.selfClosing = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._err(ERR.unexpectedSolidusInTag);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
        }
        [BOGUS_COMMENT_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
          } else {
            this.currentToken.data += toChar(cp);
          }
        }
        [MARKUP_DECLARATION_OPEN_STATE](cp) {
          if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
            this._createCommentToken();
            this.state = COMMENT_START_STATE;
          } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
            this.state = DOCTYPE_STATE;
          } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
            if (this.allowCDATA) {
              this.state = CDATA_SECTION_STATE;
            } else {
              this._err(ERR.cdataInHtmlContent);
              this._createCommentToken();
              this.currentToken.data = "[CDATA[";
              this.state = BOGUS_COMMENT_STATE;
            }
          } else if (!this._ensureHibernation()) {
            this._err(ERR.incorrectlyOpenedComment);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
        }
        [COMMENT_START_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_START_DASH_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_START_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "-";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += "<";
            this.state = COMMENT_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += toChar(cp);
          }
        }
        [COMMENT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.EXCLAMATION_MARK) {
            this.currentToken.data += "!";
            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += "!";
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
          } else {
            this._reconsumeInState(COMMENT_END_DASH_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {
          if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {
            this._err(ERR.nestedComment);
          }
          this._reconsumeInState(COMMENT_END_STATE);
        }
        [COMMENT_END_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "-";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_END_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EXCLAMATION_MARK) {
            this.state = COMMENT_END_BANG_STATE;
          } else if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += "-";
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "--";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_END_BANG_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += "--!";
            this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.incorrectlyClosedComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "--!";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [DOCTYPE_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingWhitespaceBeforeDoctypeName);
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          }
        }
        [BEFORE_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (isAsciiUpper(cp)) {
            this._createDoctypeToken(toAsciiLowerChar(cp));
            this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);
            this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeName);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._createDoctypeToken(toChar(cp));
            this.state = DOCTYPE_NAME_STATE;
          }
        }
        [DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = AFTER_DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
            this.currentToken.name += toAsciiLowerChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.name += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
          } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
          } else if (!this._ensureHibernation()) {
            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.publicId += toChar(cp);
          }
        }
        [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.publicId += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.systemId += toChar(cp);
          }
        }
        [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.systemId += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BOGUS_DOCTYPE_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
          } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
          }
        }
        [CDATA_SECTION_STATE](cp) {
          if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_BRACKET_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInCdata);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [CDATA_SECTION_BRACKET_STATE](cp) {
          if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_END_STATE;
          } else {
            this._emitChars("]");
            this._reconsumeInState(CDATA_SECTION_STATE);
          }
        }
        [CDATA_SECTION_END_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
          } else if (cp === $.RIGHT_SQUARE_BRACKET) {
            this._emitChars("]");
          } else {
            this._emitChars("]]");
            this._reconsumeInState(CDATA_SECTION_STATE);
          }
        }
        [CHARACTER_REFERENCE_STATE](cp) {
          this.tempBuff = [$.AMPERSAND];
          if (cp === $.NUMBER_SIGN) {
            this.tempBuff.push(cp);
            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
          } else if (isAsciiAlphaNumeric(cp)) {
            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
          } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [NAMED_CHARACTER_REFERENCE_STATE](cp) {
          const matchResult = this._matchNamedCharacterReference(cp);
          if (this._ensureHibernation()) {
            this.tempBuff = [$.AMPERSAND];
          } else if (matchResult) {
            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;
            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
              if (!withSemicolon) {
                this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);
              }
              this.tempBuff = matchResult;
            }
            this._flushCodePointsConsumedAsCharacterReference();
            this.state = this.returnState;
          } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this.state = AMBIGUOUS_AMPERSAND_STATE;
          }
        }
        [AMBIGUOUS_AMPERSAND_STATE](cp) {
          if (isAsciiAlphaNumeric(cp)) {
            if (this._isCharacterReferenceInAttribute()) {
              this.currentAttr.value += toChar(cp);
            } else {
              this._emitCodePoint(cp);
            }
          } else {
            if (cp === $.SEMICOLON) {
              this._err(ERR.unknownNamedCharacterReference);
            }
            this._reconsumeInState(this.returnState);
          }
        }
        [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {
          this.charRefCode = 0;
          if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {
            this.tempBuff.push(cp);
            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
          } else {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
          }
        }
        [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiHexDigit(cp)) {
            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
          } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiDigit(cp)) {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
          } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiUpperHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 55;
          } else if (isAsciiLowerHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 87;
          } else if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 48;
          } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
        }
        [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 10 + cp - 48;
          } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
        }
        [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {
          if (this.charRefCode === $.NULL) {
            this._err(ERR.nullCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (this.charRefCode > 1114111) {
            this._err(ERR.characterReferenceOutsideUnicodeRange);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (unicode.isSurrogate(this.charRefCode)) {
            this._err(ERR.surrogateCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {
            this._err(ERR.noncharacterCharacterReference);
          } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {
            this._err(ERR.controlCharacterReference);
            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];
            if (replacement) {
              this.charRefCode = replacement;
            }
          }
          this.tempBuff = [this.charRefCode];
          this._flushCodePointsConsumedAsCharacterReference();
          this._reconsumeInState(this.returnState);
        }
      };
      Tokenizer.CHARACTER_TOKEN = "CHARACTER_TOKEN";
      Tokenizer.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
      Tokenizer.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
      Tokenizer.START_TAG_TOKEN = "START_TAG_TOKEN";
      Tokenizer.END_TAG_TOKEN = "END_TAG_TOKEN";
      Tokenizer.COMMENT_TOKEN = "COMMENT_TOKEN";
      Tokenizer.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
      Tokenizer.EOF_TOKEN = "EOF_TOKEN";
      Tokenizer.HIBERNATION_TOKEN = "HIBERNATION_TOKEN";
      Tokenizer.MODE = {
        DATA: DATA_STATE,
        RCDATA: RCDATA_STATE,
        RAWTEXT: RAWTEXT_STATE,
        SCRIPT_DATA: SCRIPT_DATA_STATE,
        PLAINTEXT: PLAINTEXT_STATE
      };
      Tokenizer.getTokenAttr = function(token, attrName) {
        for (let i = token.attrs.length - 1; i >= 0; i--) {
          if (token.attrs[i].name === attrName) {
            return token.attrs[i].value;
          }
        }
        return null;
      };
      module.exports = Tokenizer;
    }
  });

  // node_modules/parse5/lib/common/html.js
  var require_html4 = __commonJS({
    "node_modules/parse5/lib/common/html.js"(exports) {
      init_globals();
      var NS = exports.NAMESPACES = {
        HTML: "http://www.w3.org/1999/xhtml",
        MATHML: "http://www.w3.org/1998/Math/MathML",
        SVG: "http://www.w3.org/2000/svg",
        XLINK: "http://www.w3.org/1999/xlink",
        XML: "http://www.w3.org/XML/1998/namespace",
        XMLNS: "http://www.w3.org/2000/xmlns/"
      };
      exports.ATTRS = {
        TYPE: "type",
        ACTION: "action",
        ENCODING: "encoding",
        PROMPT: "prompt",
        NAME: "name",
        COLOR: "color",
        FACE: "face",
        SIZE: "size"
      };
      exports.DOCUMENT_MODE = {
        NO_QUIRKS: "no-quirks",
        QUIRKS: "quirks",
        LIMITED_QUIRKS: "limited-quirks"
      };
      var $ = exports.TAG_NAMES = {
        A: "a",
        ADDRESS: "address",
        ANNOTATION_XML: "annotation-xml",
        APPLET: "applet",
        AREA: "area",
        ARTICLE: "article",
        ASIDE: "aside",
        B: "b",
        BASE: "base",
        BASEFONT: "basefont",
        BGSOUND: "bgsound",
        BIG: "big",
        BLOCKQUOTE: "blockquote",
        BODY: "body",
        BR: "br",
        BUTTON: "button",
        CAPTION: "caption",
        CENTER: "center",
        CODE: "code",
        COL: "col",
        COLGROUP: "colgroup",
        DD: "dd",
        DESC: "desc",
        DETAILS: "details",
        DIALOG: "dialog",
        DIR: "dir",
        DIV: "div",
        DL: "dl",
        DT: "dt",
        EM: "em",
        EMBED: "embed",
        FIELDSET: "fieldset",
        FIGCAPTION: "figcaption",
        FIGURE: "figure",
        FONT: "font",
        FOOTER: "footer",
        FOREIGN_OBJECT: "foreignObject",
        FORM: "form",
        FRAME: "frame",
        FRAMESET: "frameset",
        H1: "h1",
        H2: "h2",
        H3: "h3",
        H4: "h4",
        H5: "h5",
        H6: "h6",
        HEAD: "head",
        HEADER: "header",
        HGROUP: "hgroup",
        HR: "hr",
        HTML: "html",
        I: "i",
        IMG: "img",
        IMAGE: "image",
        INPUT: "input",
        IFRAME: "iframe",
        KEYGEN: "keygen",
        LABEL: "label",
        LI: "li",
        LINK: "link",
        LISTING: "listing",
        MAIN: "main",
        MALIGNMARK: "malignmark",
        MARQUEE: "marquee",
        MATH: "math",
        MENU: "menu",
        META: "meta",
        MGLYPH: "mglyph",
        MI: "mi",
        MO: "mo",
        MN: "mn",
        MS: "ms",
        MTEXT: "mtext",
        NAV: "nav",
        NOBR: "nobr",
        NOFRAMES: "noframes",
        NOEMBED: "noembed",
        NOSCRIPT: "noscript",
        OBJECT: "object",
        OL: "ol",
        OPTGROUP: "optgroup",
        OPTION: "option",
        P: "p",
        PARAM: "param",
        PLAINTEXT: "plaintext",
        PRE: "pre",
        RB: "rb",
        RP: "rp",
        RT: "rt",
        RTC: "rtc",
        RUBY: "ruby",
        S: "s",
        SCRIPT: "script",
        SECTION: "section",
        SELECT: "select",
        SOURCE: "source",
        SMALL: "small",
        SPAN: "span",
        STRIKE: "strike",
        STRONG: "strong",
        STYLE: "style",
        SUB: "sub",
        SUMMARY: "summary",
        SUP: "sup",
        TABLE: "table",
        TBODY: "tbody",
        TEMPLATE: "template",
        TEXTAREA: "textarea",
        TFOOT: "tfoot",
        TD: "td",
        TH: "th",
        THEAD: "thead",
        TITLE: "title",
        TR: "tr",
        TRACK: "track",
        TT: "tt",
        U: "u",
        UL: "ul",
        SVG: "svg",
        VAR: "var",
        WBR: "wbr",
        XMP: "xmp"
      };
      exports.SPECIAL_ELEMENTS = {
        [NS.HTML]: {
          [$.ADDRESS]: true,
          [$.APPLET]: true,
          [$.AREA]: true,
          [$.ARTICLE]: true,
          [$.ASIDE]: true,
          [$.BASE]: true,
          [$.BASEFONT]: true,
          [$.BGSOUND]: true,
          [$.BLOCKQUOTE]: true,
          [$.BODY]: true,
          [$.BR]: true,
          [$.BUTTON]: true,
          [$.CAPTION]: true,
          [$.CENTER]: true,
          [$.COL]: true,
          [$.COLGROUP]: true,
          [$.DD]: true,
          [$.DETAILS]: true,
          [$.DIR]: true,
          [$.DIV]: true,
          [$.DL]: true,
          [$.DT]: true,
          [$.EMBED]: true,
          [$.FIELDSET]: true,
          [$.FIGCAPTION]: true,
          [$.FIGURE]: true,
          [$.FOOTER]: true,
          [$.FORM]: true,
          [$.FRAME]: true,
          [$.FRAMESET]: true,
          [$.H1]: true,
          [$.H2]: true,
          [$.H3]: true,
          [$.H4]: true,
          [$.H5]: true,
          [$.H6]: true,
          [$.HEAD]: true,
          [$.HEADER]: true,
          [$.HGROUP]: true,
          [$.HR]: true,
          [$.HTML]: true,
          [$.IFRAME]: true,
          [$.IMG]: true,
          [$.INPUT]: true,
          [$.LI]: true,
          [$.LINK]: true,
          [$.LISTING]: true,
          [$.MAIN]: true,
          [$.MARQUEE]: true,
          [$.MENU]: true,
          [$.META]: true,
          [$.NAV]: true,
          [$.NOEMBED]: true,
          [$.NOFRAMES]: true,
          [$.NOSCRIPT]: true,
          [$.OBJECT]: true,
          [$.OL]: true,
          [$.P]: true,
          [$.PARAM]: true,
          [$.PLAINTEXT]: true,
          [$.PRE]: true,
          [$.SCRIPT]: true,
          [$.SECTION]: true,
          [$.SELECT]: true,
          [$.SOURCE]: true,
          [$.STYLE]: true,
          [$.SUMMARY]: true,
          [$.TABLE]: true,
          [$.TBODY]: true,
          [$.TD]: true,
          [$.TEMPLATE]: true,
          [$.TEXTAREA]: true,
          [$.TFOOT]: true,
          [$.TH]: true,
          [$.THEAD]: true,
          [$.TITLE]: true,
          [$.TR]: true,
          [$.TRACK]: true,
          [$.UL]: true,
          [$.WBR]: true,
          [$.XMP]: true
        },
        [NS.MATHML]: {
          [$.MI]: true,
          [$.MO]: true,
          [$.MN]: true,
          [$.MS]: true,
          [$.MTEXT]: true,
          [$.ANNOTATION_XML]: true
        },
        [NS.SVG]: {
          [$.TITLE]: true,
          [$.FOREIGN_OBJECT]: true,
          [$.DESC]: true
        }
      };
    }
  });

  // node_modules/parse5/lib/parser/open-element-stack.js
  var require_open_element_stack = __commonJS({
    "node_modules/parse5/lib/parser/open-element-stack.js"(exports, module) {
      init_globals();
      var HTML = require_html4();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      function isImpliedEndTagRequired(tn) {
        switch (tn.length) {
          case 1:
            return tn === $.P;
          case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;
          case 3:
            return tn === $.RTC;
          case 6:
            return tn === $.OPTION;
          case 8:
            return tn === $.OPTGROUP;
        }
        return false;
      }
      function isImpliedEndTagRequiredThoroughly(tn) {
        switch (tn.length) {
          case 1:
            return tn === $.P;
          case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI || tn === $.TD || tn === $.TH || tn === $.TR;
          case 3:
            return tn === $.RTC;
          case 5:
            return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;
          case 6:
            return tn === $.OPTION;
          case 7:
            return tn === $.CAPTION;
          case 8:
            return tn === $.OPTGROUP || tn === $.COLGROUP;
        }
        return false;
      }
      function isScopingElement(tn, ns) {
        switch (tn.length) {
          case 2:
            if (tn === $.TD || tn === $.TH) {
              return ns === NS.HTML;
            } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {
              return ns === NS.MATHML;
            }
            break;
          case 4:
            if (tn === $.HTML) {
              return ns === NS.HTML;
            } else if (tn === $.DESC) {
              return ns === NS.SVG;
            }
            break;
          case 5:
            if (tn === $.TABLE) {
              return ns === NS.HTML;
            } else if (tn === $.MTEXT) {
              return ns === NS.MATHML;
            } else if (tn === $.TITLE) {
              return ns === NS.SVG;
            }
            break;
          case 6:
            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;
          case 7:
            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;
          case 8:
            return tn === $.TEMPLATE && ns === NS.HTML;
          case 13:
            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;
          case 14:
            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
        }
        return false;
      }
      var OpenElementStack = class {
        constructor(document2, treeAdapter) {
          this.stackTop = -1;
          this.items = [];
          this.current = document2;
          this.currentTagName = null;
          this.currentTmplContent = null;
          this.tmplCount = 0;
          this.treeAdapter = treeAdapter;
        }
        _indexOf(element) {
          let idx = -1;
          for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
              idx = i;
              break;
            }
          }
          return idx;
        }
        _isInTemplate() {
          return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
        }
        _updateCurrentElement() {
          this.current = this.items[this.stackTop];
          this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
          this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
        }
        push(element) {
          this.items[++this.stackTop] = element;
          this._updateCurrentElement();
          if (this._isInTemplate()) {
            this.tmplCount++;
          }
        }
        pop() {
          this.stackTop--;
          if (this.tmplCount > 0 && this._isInTemplate()) {
            this.tmplCount--;
          }
          this._updateCurrentElement();
        }
        replace(oldElement, newElement) {
          const idx = this._indexOf(oldElement);
          this.items[idx] = newElement;
          if (idx === this.stackTop) {
            this._updateCurrentElement();
          }
        }
        insertAfter(referenceElement, newElement) {
          const insertionIdx = this._indexOf(referenceElement) + 1;
          this.items.splice(insertionIdx, 0, newElement);
          if (insertionIdx === ++this.stackTop) {
            this._updateCurrentElement();
          }
        }
        popUntilTagNamePopped(tagName) {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === tagName && ns === NS.HTML) {
              break;
            }
          }
        }
        popUntilElementPopped(element) {
          while (this.stackTop > -1) {
            const poppedElement = this.current;
            this.pop();
            if (poppedElement === element) {
              break;
            }
          }
        }
        popUntilNumberedHeaderPopped() {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML) {
              break;
            }
          }
        }
        popUntilTableCellPopped() {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === $.TD || tn === $.TH && ns === NS.HTML) {
              break;
            }
          }
        }
        popAllUpToHtmlElement() {
          this.stackTop = 0;
          this._updateCurrentElement();
        }
        clearBackToTableContext() {
          while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        clearBackToTableBodyContext() {
          while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        clearBackToTableRowContext() {
          while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        remove(element) {
          for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
              this.items.splice(i, 1);
              this.stackTop--;
              this._updateCurrentElement();
              break;
            }
          }
        }
        tryPeekProperlyNestedBodyElement() {
          const element = this.items[1];
          return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
        }
        contains(element) {
          return this._indexOf(element) > -1;
        }
        getCommonAncestor(element) {
          let elementIdx = this._indexOf(element);
          return --elementIdx >= 0 ? this.items[elementIdx] : null;
        }
        isRootHtmlElementCurrent() {
          return this.stackTop === 0 && this.currentTagName === $.HTML;
        }
        hasInScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if (isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasNumberedHeaderInScope() {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML) {
              return true;
            }
            if (isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInListItemScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInButtonScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInTableScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === tagName) {
              return true;
            }
            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {
              return false;
            }
          }
          return true;
        }
        hasTableBodyContextInTableScope() {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {
              return true;
            }
            if (tn === $.TABLE || tn === $.HTML) {
              return false;
            }
          }
          return true;
        }
        hasInSelectScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === tagName) {
              return true;
            }
            if (tn !== $.OPTION && tn !== $.OPTGROUP) {
              return false;
            }
          }
          return true;
        }
        generateImpliedEndTags() {
          while (isImpliedEndTagRequired(this.currentTagName)) {
            this.pop();
          }
        }
        generateImpliedEndTagsThoroughly() {
          while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
            this.pop();
          }
        }
        generateImpliedEndTagsWithExclusion(exclusionTagName) {
          while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
            this.pop();
          }
        }
      };
      module.exports = OpenElementStack;
    }
  });

  // node_modules/parse5/lib/parser/formatting-element-list.js
  var require_formatting_element_list = __commonJS({
    "node_modules/parse5/lib/parser/formatting-element-list.js"(exports, module) {
      init_globals();
      var NOAH_ARK_CAPACITY = 3;
      var FormattingElementList = class {
        constructor(treeAdapter) {
          this.length = 0;
          this.entries = [];
          this.treeAdapter = treeAdapter;
          this.bookmark = null;
        }
        _getNoahArkConditionCandidates(newElement) {
          const candidates = [];
          if (this.length >= NOAH_ARK_CAPACITY) {
            const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
            const neTagName = this.treeAdapter.getTagName(newElement);
            const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
            for (let i = this.length - 1; i >= 0; i--) {
              const entry = this.entries[i];
              if (entry.type === FormattingElementList.MARKER_ENTRY) {
                break;
              }
              const element = entry.element;
              const elementAttrs = this.treeAdapter.getAttrList(element);
              const isCandidate = this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength;
              if (isCandidate) {
                candidates.push({ idx: i, attrs: elementAttrs });
              }
            }
          }
          return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
        }
        _ensureNoahArkCondition(newElement) {
          const candidates = this._getNoahArkConditionCandidates(newElement);
          let cLength = candidates.length;
          if (cLength) {
            const neAttrs = this.treeAdapter.getAttrList(newElement);
            const neAttrsLength = neAttrs.length;
            const neAttrsMap = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < neAttrsLength; i++) {
              const neAttr = neAttrs[i];
              neAttrsMap[neAttr.name] = neAttr.value;
            }
            for (let i = 0; i < neAttrsLength; i++) {
              for (let j = 0; j < cLength; j++) {
                const cAttr = candidates[j].attrs[i];
                if (neAttrsMap[cAttr.name] !== cAttr.value) {
                  candidates.splice(j, 1);
                  cLength--;
                }
                if (candidates.length < NOAH_ARK_CAPACITY) {
                  return;
                }
              }
            }
            for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
              this.entries.splice(candidates[i].idx, 1);
              this.length--;
            }
          }
        }
        insertMarker() {
          this.entries.push({ type: FormattingElementList.MARKER_ENTRY });
          this.length++;
        }
        pushElement(element, token) {
          this._ensureNoahArkCondition(element);
          this.entries.push({
            type: FormattingElementList.ELEMENT_ENTRY,
            element,
            token
          });
          this.length++;
        }
        insertElementAfterBookmark(element, token) {
          let bookmarkIdx = this.length - 1;
          for (; bookmarkIdx >= 0; bookmarkIdx--) {
            if (this.entries[bookmarkIdx] === this.bookmark) {
              break;
            }
          }
          this.entries.splice(bookmarkIdx + 1, 0, {
            type: FormattingElementList.ELEMENT_ENTRY,
            element,
            token
          });
          this.length++;
        }
        removeEntry(entry) {
          for (let i = this.length - 1; i >= 0; i--) {
            if (this.entries[i] === entry) {
              this.entries.splice(i, 1);
              this.length--;
              break;
            }
          }
        }
        clearToLastMarker() {
          while (this.length) {
            const entry = this.entries.pop();
            this.length--;
            if (entry.type === FormattingElementList.MARKER_ENTRY) {
              break;
            }
          }
        }
        getElementEntryInScopeWithTagName(tagName) {
          for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];
            if (entry.type === FormattingElementList.MARKER_ENTRY) {
              return null;
            }
            if (this.treeAdapter.getTagName(entry.element) === tagName) {
              return entry;
            }
          }
          return null;
        }
        getElementEntry(element) {
          for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];
            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {
              return entry;
            }
          }
          return null;
        }
      };
      FormattingElementList.MARKER_ENTRY = "MARKER_ENTRY";
      FormattingElementList.ELEMENT_ENTRY = "ELEMENT_ENTRY";
      module.exports = FormattingElementList;
    }
  });

  // node_modules/parse5/lib/utils/mixin.js
  var require_mixin = __commonJS({
    "node_modules/parse5/lib/utils/mixin.js"(exports, module) {
      init_globals();
      var Mixin = class {
        constructor(host) {
          const originalMethods = {};
          const overriddenMethods = this._getOverriddenMethods(this, originalMethods);
          for (const key of Object.keys(overriddenMethods)) {
            if (typeof overriddenMethods[key] === "function") {
              originalMethods[key] = host[key];
              host[key] = overriddenMethods[key];
            }
          }
        }
        _getOverriddenMethods() {
          throw new Error("Not implemented");
        }
      };
      Mixin.install = function(host, Ctor, opts) {
        if (!host.__mixins) {
          host.__mixins = [];
        }
        for (let i = 0; i < host.__mixins.length; i++) {
          if (host.__mixins[i].constructor === Ctor) {
            return host.__mixins[i];
          }
        }
        const mixin = new Ctor(host, opts);
        host.__mixins.push(mixin);
        return mixin;
      };
      module.exports = Mixin;
    }
  });

  // node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js
  var require_preprocessor_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js"(exports, module) {
      init_globals();
      var Mixin = require_mixin();
      var PositionTrackingPreprocessorMixin = class extends Mixin {
        constructor(preprocessor) {
          super(preprocessor);
          this.preprocessor = preprocessor;
          this.isEol = false;
          this.lineStartPos = 0;
          this.droppedBufferSize = 0;
          this.offset = 0;
          this.col = 0;
          this.line = 1;
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            advance() {
              const pos = this.pos + 1;
              const ch = this.html[pos];
              if (mxn.isEol) {
                mxn.isEol = false;
                mxn.line++;
                mxn.lineStartPos = pos;
              }
              if (ch === "\n" || ch === "\r" && this.html[pos + 1] !== "\n") {
                mxn.isEol = true;
              }
              mxn.col = pos - mxn.lineStartPos + 1;
              mxn.offset = mxn.droppedBufferSize + pos;
              return orig.advance.call(this);
            },
            retreat() {
              orig.retreat.call(this);
              mxn.isEol = false;
              mxn.col = this.pos - mxn.lineStartPos + 1;
            },
            dropParsedChunk() {
              const prevPos = this.pos;
              orig.dropParsedChunk.call(this);
              const reduction = prevPos - this.pos;
              mxn.lineStartPos -= reduction;
              mxn.droppedBufferSize += reduction;
              mxn.offset = mxn.droppedBufferSize + this.pos;
            }
          };
        }
      };
      module.exports = PositionTrackingPreprocessorMixin;
    }
  });

  // node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js
  var require_tokenizer_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js"(exports, module) {
      init_globals();
      var Mixin = require_mixin();
      var Tokenizer = require_tokenizer();
      var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
      var LocationInfoTokenizerMixin = class extends Mixin {
        constructor(tokenizer) {
          super(tokenizer);
          this.tokenizer = tokenizer;
          this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);
          this.currentAttrLocation = null;
          this.ctLoc = null;
        }
        _getCurrentLocation() {
          return {
            startLine: this.posTracker.line,
            startCol: this.posTracker.col,
            startOffset: this.posTracker.offset,
            endLine: -1,
            endCol: -1,
            endOffset: -1
          };
        }
        _attachCurrentAttrLocationInfo() {
          this.currentAttrLocation.endLine = this.posTracker.line;
          this.currentAttrLocation.endCol = this.posTracker.col;
          this.currentAttrLocation.endOffset = this.posTracker.offset;
          const currentToken = this.tokenizer.currentToken;
          const currentAttr = this.tokenizer.currentAttr;
          if (!currentToken.location.attrs) {
            currentToken.location.attrs = /* @__PURE__ */ Object.create(null);
          }
          currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
        }
        _getOverriddenMethods(mxn, orig) {
          const methods = {
            _createStartTagToken() {
              orig._createStartTagToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createEndTagToken() {
              orig._createEndTagToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createCommentToken() {
              orig._createCommentToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createDoctypeToken(initialName) {
              orig._createDoctypeToken.call(this, initialName);
              this.currentToken.location = mxn.ctLoc;
            },
            _createCharacterToken(type2, ch) {
              orig._createCharacterToken.call(this, type2, ch);
              this.currentCharacterToken.location = mxn.ctLoc;
            },
            _createEOFToken() {
              orig._createEOFToken.call(this);
              this.currentToken.location = mxn._getCurrentLocation();
            },
            _createAttr(attrNameFirstCh) {
              orig._createAttr.call(this, attrNameFirstCh);
              mxn.currentAttrLocation = mxn._getCurrentLocation();
            },
            _leaveAttrName(toState) {
              orig._leaveAttrName.call(this, toState);
              mxn._attachCurrentAttrLocationInfo();
            },
            _leaveAttrValue(toState) {
              orig._leaveAttrValue.call(this, toState);
              mxn._attachCurrentAttrLocationInfo();
            },
            _emitCurrentToken() {
              const ctLoc = this.currentToken.location;
              if (this.currentCharacterToken) {
                this.currentCharacterToken.location.endLine = ctLoc.startLine;
                this.currentCharacterToken.location.endCol = ctLoc.startCol;
                this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
              }
              if (this.currentToken.type === Tokenizer.EOF_TOKEN) {
                ctLoc.endLine = ctLoc.startLine;
                ctLoc.endCol = ctLoc.startCol;
                ctLoc.endOffset = ctLoc.startOffset;
              } else {
                ctLoc.endLine = mxn.posTracker.line;
                ctLoc.endCol = mxn.posTracker.col + 1;
                ctLoc.endOffset = mxn.posTracker.offset + 1;
              }
              orig._emitCurrentToken.call(this);
            },
            _emitCurrentCharacterToken() {
              const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;
              if (ctLoc && ctLoc.endOffset === -1) {
                ctLoc.endLine = mxn.posTracker.line;
                ctLoc.endCol = mxn.posTracker.col;
                ctLoc.endOffset = mxn.posTracker.offset;
              }
              orig._emitCurrentCharacterToken.call(this);
            }
          };
          Object.keys(Tokenizer.MODE).forEach((modeName) => {
            const state = Tokenizer.MODE[modeName];
            methods[state] = function(cp) {
              mxn.ctLoc = mxn._getCurrentLocation();
              orig[state].call(this, cp);
            };
          });
          return methods;
        }
      };
      module.exports = LocationInfoTokenizerMixin;
    }
  });

  // node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js
  var require_open_element_stack_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js"(exports, module) {
      init_globals();
      var Mixin = require_mixin();
      var LocationInfoOpenElementStackMixin = class extends Mixin {
        constructor(stack, opts) {
          super(stack);
          this.onItemPop = opts.onItemPop;
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            pop() {
              mxn.onItemPop(this.current);
              orig.pop.call(this);
            },
            popAllUpToHtmlElement() {
              for (let i = this.stackTop; i > 0; i--) {
                mxn.onItemPop(this.items[i]);
              }
              orig.popAllUpToHtmlElement.call(this);
            },
            remove(element) {
              mxn.onItemPop(this.current);
              orig.remove.call(this, element);
            }
          };
        }
      };
      module.exports = LocationInfoOpenElementStackMixin;
    }
  });

  // node_modules/parse5/lib/extensions/location-info/parser-mixin.js
  var require_parser_mixin = __commonJS({
    "node_modules/parse5/lib/extensions/location-info/parser-mixin.js"(exports, module) {
      init_globals();
      var Mixin = require_mixin();
      var Tokenizer = require_tokenizer();
      var LocationInfoTokenizerMixin = require_tokenizer_mixin();
      var LocationInfoOpenElementStackMixin = require_open_element_stack_mixin();
      var HTML = require_html4();
      var $ = HTML.TAG_NAMES;
      var LocationInfoParserMixin = class extends Mixin {
        constructor(parser) {
          super(parser);
          this.parser = parser;
          this.treeAdapter = this.parser.treeAdapter;
          this.posTracker = null;
          this.lastStartTagToken = null;
          this.lastFosterParentingLocation = null;
          this.currentToken = null;
        }
        _setStartLocation(element) {
          let loc = null;
          if (this.lastStartTagToken) {
            loc = Object.assign({}, this.lastStartTagToken.location);
            loc.startTag = this.lastStartTagToken.location;
          }
          this.treeAdapter.setNodeSourceCodeLocation(element, loc);
        }
        _setEndLocation(element, closingToken) {
          const loc = this.treeAdapter.getNodeSourceCodeLocation(element);
          if (loc) {
            if (closingToken.location) {
              const ctLoc = closingToken.location;
              const tn = this.treeAdapter.getTagName(element);
              const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;
              const endLoc = {};
              if (isClosingEndTag) {
                endLoc.endTag = Object.assign({}, ctLoc);
                endLoc.endLine = ctLoc.endLine;
                endLoc.endCol = ctLoc.endCol;
                endLoc.endOffset = ctLoc.endOffset;
              } else {
                endLoc.endLine = ctLoc.startLine;
                endLoc.endCol = ctLoc.startCol;
                endLoc.endOffset = ctLoc.startOffset;
              }
              this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
            }
          }
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            _bootstrap(document2, fragmentContext) {
              orig._bootstrap.call(this, document2, fragmentContext);
              mxn.lastStartTagToken = null;
              mxn.lastFosterParentingLocation = null;
              mxn.currentToken = null;
              const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
              mxn.posTracker = tokenizerMixin.posTracker;
              Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {
                onItemPop: function(element) {
                  mxn._setEndLocation(element, mxn.currentToken);
                }
              });
            },
            _runParsingLoop(scriptHandler) {
              orig._runParsingLoop.call(this, scriptHandler);
              for (let i = this.openElements.stackTop; i >= 0; i--) {
                mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
              }
            },
            _processTokenInForeignContent(token) {
              mxn.currentToken = token;
              orig._processTokenInForeignContent.call(this, token);
            },
            _processToken(token) {
              mxn.currentToken = token;
              orig._processToken.call(this, token);
              const requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));
              if (requireExplicitUpdate) {
                for (let i = this.openElements.stackTop; i >= 0; i--) {
                  const element = this.openElements.items[i];
                  if (this.treeAdapter.getTagName(element) === token.tagName) {
                    mxn._setEndLocation(element, token);
                    break;
                  }
                }
              }
            },
            _setDocumentType(token) {
              orig._setDocumentType.call(this, token);
              const documentChildren = this.treeAdapter.getChildNodes(this.document);
              const cnLength = documentChildren.length;
              for (let i = 0; i < cnLength; i++) {
                const node = documentChildren[i];
                if (this.treeAdapter.isDocumentTypeNode(node)) {
                  this.treeAdapter.setNodeSourceCodeLocation(node, token.location);
                  break;
                }
              }
            },
            _attachElementToTree(element) {
              mxn._setStartLocation(element);
              mxn.lastStartTagToken = null;
              orig._attachElementToTree.call(this, element);
            },
            _appendElement(token, namespaceURI) {
              mxn.lastStartTagToken = token;
              orig._appendElement.call(this, token, namespaceURI);
            },
            _insertElement(token, namespaceURI) {
              mxn.lastStartTagToken = token;
              orig._insertElement.call(this, token, namespaceURI);
            },
            _insertTemplate(token) {
              mxn.lastStartTagToken = token;
              orig._insertTemplate.call(this, token);
              const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
              this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
            },
            _insertFakeRootElement() {
              orig._insertFakeRootElement.call(this);
              this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
            },
            _appendCommentNode(token, parent) {
              orig._appendCommentNode.call(this, token, parent);
              const children = this.treeAdapter.getChildNodes(parent);
              const commentNode = children[children.length - 1];
              this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
            },
            _findFosterParentingLocation() {
              mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);
              return mxn.lastFosterParentingLocation;
            },
            _insertCharacters(token) {
              orig._insertCharacters.call(this, token);
              const hasFosterParent = this._shouldFosterParentOnInsertion();
              const parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;
              const siblings = this.treeAdapter.getChildNodes(parent);
              const textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;
              const textNode = siblings[textNodeIdx];
              const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
              if (tnLoc) {
                const { endLine, endCol, endOffset } = token.location;
                this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
              } else {
                this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
              }
            }
          };
        }
      };
      module.exports = LocationInfoParserMixin;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/mixin-base.js
  var require_mixin_base = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/mixin-base.js"(exports, module) {
      init_globals();
      var Mixin = require_mixin();
      var ErrorReportingMixinBase = class extends Mixin {
        constructor(host, opts) {
          super(host);
          this.posTracker = null;
          this.onParseError = opts.onParseError;
        }
        _setErrorLocation(err) {
          err.startLine = err.endLine = this.posTracker.line;
          err.startCol = err.endCol = this.posTracker.col;
          err.startOffset = err.endOffset = this.posTracker.offset;
        }
        _reportError(code2) {
          const err = {
            code: code2,
            startLine: -1,
            startCol: -1,
            startOffset: -1,
            endLine: -1,
            endCol: -1,
            endOffset: -1
          };
          this._setErrorLocation(err);
          this.onParseError(err);
        }
        _getOverriddenMethods(mxn) {
          return {
            _err(code2) {
              mxn._reportError(code2);
            }
          };
        }
      };
      module.exports = ErrorReportingMixinBase;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js
  var require_preprocessor_mixin2 = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js"(exports, module) {
      init_globals();
      var ErrorReportingMixinBase = require_mixin_base();
      var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
      var Mixin = require_mixin();
      var ErrorReportingPreprocessorMixin = class extends ErrorReportingMixinBase {
        constructor(preprocessor, opts) {
          super(preprocessor, opts);
          this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);
          this.lastErrOffset = -1;
        }
        _reportError(code2) {
          if (this.lastErrOffset !== this.posTracker.offset) {
            this.lastErrOffset = this.posTracker.offset;
            super._reportError(code2);
          }
        }
      };
      module.exports = ErrorReportingPreprocessorMixin;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js
  var require_tokenizer_mixin2 = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js"(exports, module) {
      init_globals();
      var ErrorReportingMixinBase = require_mixin_base();
      var ErrorReportingPreprocessorMixin = require_preprocessor_mixin2();
      var Mixin = require_mixin();
      var ErrorReportingTokenizerMixin = class extends ErrorReportingMixinBase {
        constructor(tokenizer, opts) {
          super(tokenizer, opts);
          const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);
          this.posTracker = preprocessorMixin.posTracker;
        }
      };
      module.exports = ErrorReportingTokenizerMixin;
    }
  });

  // node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js
  var require_parser_mixin2 = __commonJS({
    "node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"(exports, module) {
      init_globals();
      var ErrorReportingMixinBase = require_mixin_base();
      var ErrorReportingTokenizerMixin = require_tokenizer_mixin2();
      var LocationInfoTokenizerMixin = require_tokenizer_mixin();
      var Mixin = require_mixin();
      var ErrorReportingParserMixin = class extends ErrorReportingMixinBase {
        constructor(parser, opts) {
          super(parser, opts);
          this.opts = opts;
          this.ctLoc = null;
          this.locBeforeToken = false;
        }
        _setErrorLocation(err) {
          if (this.ctLoc) {
            err.startLine = this.ctLoc.startLine;
            err.startCol = this.ctLoc.startCol;
            err.startOffset = this.ctLoc.startOffset;
            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
          }
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            _bootstrap(document2, fragmentContext) {
              orig._bootstrap.call(this, document2, fragmentContext);
              Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
              Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
            },
            _processInputToken(token) {
              mxn.ctLoc = token.location;
              orig._processInputToken.call(this, token);
            },
            _err(code2, options) {
              mxn.locBeforeToken = options && options.beforeToken;
              mxn._reportError(code2);
            }
          };
        }
      };
      module.exports = ErrorReportingParserMixin;
    }
  });

  // node_modules/parse5/lib/tree-adapters/default.js
  var require_default = __commonJS({
    "node_modules/parse5/lib/tree-adapters/default.js"(exports) {
      init_globals();
      var { DOCUMENT_MODE } = require_html4();
      exports.createDocument = function() {
        return {
          nodeName: "#document",
          mode: DOCUMENT_MODE.NO_QUIRKS,
          childNodes: []
        };
      };
      exports.createDocumentFragment = function() {
        return {
          nodeName: "#document-fragment",
          childNodes: []
        };
      };
      exports.createElement = function(tagName, namespaceURI, attrs) {
        return {
          nodeName: tagName,
          tagName,
          attrs,
          namespaceURI,
          childNodes: [],
          parentNode: null
        };
      };
      exports.createCommentNode = function(data) {
        return {
          nodeName: "#comment",
          data,
          parentNode: null
        };
      };
      var createTextNode = function(value) {
        return {
          nodeName: "#text",
          value,
          parentNode: null
        };
      };
      var appendChild = exports.appendChild = function(parentNode, newNode) {
        parentNode.childNodes.push(newNode);
        newNode.parentNode = parentNode;
      };
      var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
        parentNode.childNodes.splice(insertionIdx, 0, newNode);
        newNode.parentNode = parentNode;
      };
      exports.setTemplateContent = function(templateElement, contentElement) {
        templateElement.content = contentElement;
      };
      exports.getTemplateContent = function(templateElement) {
        return templateElement.content;
      };
      exports.setDocumentType = function(document2, name, publicId, systemId) {
        let doctypeNode = null;
        for (let i = 0; i < document2.childNodes.length; i++) {
          if (document2.childNodes[i].nodeName === "#documentType") {
            doctypeNode = document2.childNodes[i];
            break;
          }
        }
        if (doctypeNode) {
          doctypeNode.name = name;
          doctypeNode.publicId = publicId;
          doctypeNode.systemId = systemId;
        } else {
          appendChild(document2, {
            nodeName: "#documentType",
            name,
            publicId,
            systemId
          });
        }
      };
      exports.setDocumentMode = function(document2, mode) {
        document2.mode = mode;
      };
      exports.getDocumentMode = function(document2) {
        return document2.mode;
      };
      exports.detachNode = function(node) {
        if (node.parentNode) {
          const idx = node.parentNode.childNodes.indexOf(node);
          node.parentNode.childNodes.splice(idx, 1);
          node.parentNode = null;
        }
      };
      exports.insertText = function(parentNode, text) {
        if (parentNode.childNodes.length) {
          const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
          if (prevNode.nodeName === "#text") {
            prevNode.value += text;
            return;
          }
        }
        appendChild(parentNode, createTextNode(text));
      };
      exports.insertTextBefore = function(parentNode, text, referenceNode) {
        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
        if (prevNode && prevNode.nodeName === "#text") {
          prevNode.value += text;
        } else {
          insertBefore(parentNode, createTextNode(text), referenceNode);
        }
      };
      exports.adoptAttributes = function(recipient2, attrs) {
        const recipientAttrsMap = [];
        for (let i = 0; i < recipient2.attrs.length; i++) {
          recipientAttrsMap.push(recipient2.attrs[i].name);
        }
        for (let j = 0; j < attrs.length; j++) {
          if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {
            recipient2.attrs.push(attrs[j]);
          }
        }
      };
      exports.getFirstChild = function(node) {
        return node.childNodes[0];
      };
      exports.getChildNodes = function(node) {
        return node.childNodes;
      };
      exports.getParentNode = function(node) {
        return node.parentNode;
      };
      exports.getAttrList = function(element) {
        return element.attrs;
      };
      exports.getTagName = function(element) {
        return element.tagName;
      };
      exports.getNamespaceURI = function(element) {
        return element.namespaceURI;
      };
      exports.getTextNodeContent = function(textNode) {
        return textNode.value;
      };
      exports.getCommentNodeContent = function(commentNode) {
        return commentNode.data;
      };
      exports.getDocumentTypeNodeName = function(doctypeNode) {
        return doctypeNode.name;
      };
      exports.getDocumentTypeNodePublicId = function(doctypeNode) {
        return doctypeNode.publicId;
      };
      exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
        return doctypeNode.systemId;
      };
      exports.isTextNode = function(node) {
        return node.nodeName === "#text";
      };
      exports.isCommentNode = function(node) {
        return node.nodeName === "#comment";
      };
      exports.isDocumentTypeNode = function(node) {
        return node.nodeName === "#documentType";
      };
      exports.isElementNode = function(node) {
        return !!node.tagName;
      };
      exports.setNodeSourceCodeLocation = function(node, location) {
        node.sourceCodeLocation = location;
      };
      exports.getNodeSourceCodeLocation = function(node) {
        return node.sourceCodeLocation;
      };
      exports.updateNodeSourceCodeLocation = function(node, endLocation) {
        node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);
      };
    }
  });

  // node_modules/parse5/lib/utils/merge-options.js
  var require_merge_options = __commonJS({
    "node_modules/parse5/lib/utils/merge-options.js"(exports, module) {
      init_globals();
      module.exports = function mergeOptions(defaults2, options) {
        options = options || /* @__PURE__ */ Object.create(null);
        return [defaults2, options].reduce((merged, optObj) => {
          Object.keys(optObj).forEach((key) => {
            merged[key] = optObj[key];
          });
          return merged;
        }, /* @__PURE__ */ Object.create(null));
      };
    }
  });

  // node_modules/parse5/lib/common/doctype.js
  var require_doctype = __commonJS({
    "node_modules/parse5/lib/common/doctype.js"(exports) {
      init_globals();
      var { DOCUMENT_MODE } = require_html4();
      var VALID_DOCTYPE_NAME = "html";
      var VALID_SYSTEM_ID = "about:legacy-compat";
      var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
      var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
        "+//silmaril//dtd html pro v0r11 19970101//",
        "-//as//dtd html 3.0 aswedit + extensions//",
        "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
        "-//ietf//dtd html 2.0 level 1//",
        "-//ietf//dtd html 2.0 level 2//",
        "-//ietf//dtd html 2.0 strict level 1//",
        "-//ietf//dtd html 2.0 strict level 2//",
        "-//ietf//dtd html 2.0 strict//",
        "-//ietf//dtd html 2.0//",
        "-//ietf//dtd html 2.1e//",
        "-//ietf//dtd html 3.0//",
        "-//ietf//dtd html 3.2 final//",
        "-//ietf//dtd html 3.2//",
        "-//ietf//dtd html 3//",
        "-//ietf//dtd html level 0//",
        "-//ietf//dtd html level 1//",
        "-//ietf//dtd html level 2//",
        "-//ietf//dtd html level 3//",
        "-//ietf//dtd html strict level 0//",
        "-//ietf//dtd html strict level 1//",
        "-//ietf//dtd html strict level 2//",
        "-//ietf//dtd html strict level 3//",
        "-//ietf//dtd html strict//",
        "-//ietf//dtd html//",
        "-//metrius//dtd metrius presentational//",
        "-//microsoft//dtd internet explorer 2.0 html strict//",
        "-//microsoft//dtd internet explorer 2.0 html//",
        "-//microsoft//dtd internet explorer 2.0 tables//",
        "-//microsoft//dtd internet explorer 3.0 html strict//",
        "-//microsoft//dtd internet explorer 3.0 html//",
        "-//microsoft//dtd internet explorer 3.0 tables//",
        "-//netscape comm. corp.//dtd html//",
        "-//netscape comm. corp.//dtd strict html//",
        "-//o'reilly and associates//dtd html 2.0//",
        "-//o'reilly and associates//dtd html extended 1.0//",
        "-//o'reilly and associates//dtd html extended relaxed 1.0//",
        "-//sq//dtd html 2.0 hotmetal + extensions//",
        "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
        "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
        "-//spyglass//dtd html 2.0 extended//",
        "-//sun microsystems corp.//dtd hotjava html//",
        "-//sun microsystems corp.//dtd hotjava strict html//",
        "-//w3c//dtd html 3 1995-03-24//",
        "-//w3c//dtd html 3.2 draft//",
        "-//w3c//dtd html 3.2 final//",
        "-//w3c//dtd html 3.2//",
        "-//w3c//dtd html 3.2s draft//",
        "-//w3c//dtd html 4.0 frameset//",
        "-//w3c//dtd html 4.0 transitional//",
        "-//w3c//dtd html experimental 19960712//",
        "-//w3c//dtd html experimental 970421//",
        "-//w3c//dtd w3 html//",
        "-//w3o//dtd w3 html 3.0//",
        "-//webtechs//dtd mozilla html 2.0//",
        "-//webtechs//dtd mozilla html//"
      ];
      var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
        "-//w3c//dtd html 4.01 frameset//",
        "-//w3c//dtd html 4.01 transitional//"
      ]);
      var QUIRKS_MODE_PUBLIC_IDS = ["-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html"];
      var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
      var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
        "-//w3c//dtd html 4.01 frameset//",
        "-//w3c//dtd html 4.01 transitional//"
      ]);
      function enquoteDoctypeId(id) {
        const quote = id.indexOf('"') !== -1 ? "'" : '"';
        return quote + id + quote;
      }
      function hasPrefix(publicId, prefixes) {
        for (let i = 0; i < prefixes.length; i++) {
          if (publicId.indexOf(prefixes[i]) === 0) {
            return true;
          }
        }
        return false;
      }
      exports.isConforming = function(token) {
        return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
      };
      exports.getDocumentMode = function(token) {
        if (token.name !== VALID_DOCTYPE_NAME) {
          return DOCUMENT_MODE.QUIRKS;
        }
        const systemId = token.systemId;
        if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
          return DOCUMENT_MODE.QUIRKS;
        }
        let publicId = token.publicId;
        if (publicId !== null) {
          publicId = publicId.toLowerCase();
          if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
            return DOCUMENT_MODE.QUIRKS;
          }
          let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
          if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.QUIRKS;
          }
          prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
          if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.LIMITED_QUIRKS;
          }
        }
        return DOCUMENT_MODE.NO_QUIRKS;
      };
      exports.serializeContent = function(name, publicId, systemId) {
        let str = "!DOCTYPE ";
        if (name) {
          str += name;
        }
        if (publicId) {
          str += " PUBLIC " + enquoteDoctypeId(publicId);
        } else if (systemId) {
          str += " SYSTEM";
        }
        if (systemId !== null) {
          str += " " + enquoteDoctypeId(systemId);
        }
        return str;
      };
    }
  });

  // node_modules/parse5/lib/common/foreign-content.js
  var require_foreign_content = __commonJS({
    "node_modules/parse5/lib/common/foreign-content.js"(exports) {
      init_globals();
      var Tokenizer = require_tokenizer();
      var HTML = require_html4();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      var ATTRS = HTML.ATTRS;
      var MIME_TYPES = {
        TEXT_HTML: "text/html",
        APPLICATION_XML: "application/xhtml+xml"
      };
      var DEFINITION_URL_ATTR = "definitionurl";
      var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
      var SVG_ATTRS_ADJUSTMENT_MAP = {
        attributename: "attributeName",
        attributetype: "attributeType",
        basefrequency: "baseFrequency",
        baseprofile: "baseProfile",
        calcmode: "calcMode",
        clippathunits: "clipPathUnits",
        diffuseconstant: "diffuseConstant",
        edgemode: "edgeMode",
        filterunits: "filterUnits",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        limitingconeangle: "limitingConeAngle",
        markerheight: "markerHeight",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        numoctaves: "numOctaves",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        refx: "refX",
        refy: "refY",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stitchtiles: "stitchTiles",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textlength: "textLength",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        xchannelselector: "xChannelSelector",
        ychannelselector: "yChannelSelector",
        zoomandpan: "zoomAndPan"
      };
      var XML_ATTRS_ADJUSTMENT_MAP = {
        "xlink:actuate": { prefix: "xlink", name: "actuate", namespace: NS.XLINK },
        "xlink:arcrole": { prefix: "xlink", name: "arcrole", namespace: NS.XLINK },
        "xlink:href": { prefix: "xlink", name: "href", namespace: NS.XLINK },
        "xlink:role": { prefix: "xlink", name: "role", namespace: NS.XLINK },
        "xlink:show": { prefix: "xlink", name: "show", namespace: NS.XLINK },
        "xlink:title": { prefix: "xlink", name: "title", namespace: NS.XLINK },
        "xlink:type": { prefix: "xlink", name: "type", namespace: NS.XLINK },
        "xml:base": { prefix: "xml", name: "base", namespace: NS.XML },
        "xml:lang": { prefix: "xml", name: "lang", namespace: NS.XML },
        "xml:space": { prefix: "xml", name: "space", namespace: NS.XML },
        xmlns: { prefix: "", name: "xmlns", namespace: NS.XMLNS },
        "xmlns:xlink": { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }
      };
      var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
        altglyph: "altGlyph",
        altglyphdef: "altGlyphDef",
        altglyphitem: "altGlyphItem",
        animatecolor: "animateColor",
        animatemotion: "animateMotion",
        animatetransform: "animateTransform",
        clippath: "clipPath",
        feblend: "feBlend",
        fecolormatrix: "feColorMatrix",
        fecomponenttransfer: "feComponentTransfer",
        fecomposite: "feComposite",
        feconvolvematrix: "feConvolveMatrix",
        fediffuselighting: "feDiffuseLighting",
        fedisplacementmap: "feDisplacementMap",
        fedistantlight: "feDistantLight",
        feflood: "feFlood",
        fefunca: "feFuncA",
        fefuncb: "feFuncB",
        fefuncg: "feFuncG",
        fefuncr: "feFuncR",
        fegaussianblur: "feGaussianBlur",
        feimage: "feImage",
        femerge: "feMerge",
        femergenode: "feMergeNode",
        femorphology: "feMorphology",
        feoffset: "feOffset",
        fepointlight: "fePointLight",
        fespecularlighting: "feSpecularLighting",
        fespotlight: "feSpotLight",
        fetile: "feTile",
        feturbulence: "feTurbulence",
        foreignobject: "foreignObject",
        glyphref: "glyphRef",
        lineargradient: "linearGradient",
        radialgradient: "radialGradient",
        textpath: "textPath"
      };
      var EXITS_FOREIGN_CONTENT = {
        [$.B]: true,
        [$.BIG]: true,
        [$.BLOCKQUOTE]: true,
        [$.BODY]: true,
        [$.BR]: true,
        [$.CENTER]: true,
        [$.CODE]: true,
        [$.DD]: true,
        [$.DIV]: true,
        [$.DL]: true,
        [$.DT]: true,
        [$.EM]: true,
        [$.EMBED]: true,
        [$.H1]: true,
        [$.H2]: true,
        [$.H3]: true,
        [$.H4]: true,
        [$.H5]: true,
        [$.H6]: true,
        [$.HEAD]: true,
        [$.HR]: true,
        [$.I]: true,
        [$.IMG]: true,
        [$.LI]: true,
        [$.LISTING]: true,
        [$.MENU]: true,
        [$.META]: true,
        [$.NOBR]: true,
        [$.OL]: true,
        [$.P]: true,
        [$.PRE]: true,
        [$.RUBY]: true,
        [$.S]: true,
        [$.SMALL]: true,
        [$.SPAN]: true,
        [$.STRONG]: true,
        [$.STRIKE]: true,
        [$.SUB]: true,
        [$.SUP]: true,
        [$.TABLE]: true,
        [$.TT]: true,
        [$.U]: true,
        [$.UL]: true,
        [$.VAR]: true
      };
      exports.causesExit = function(startTagToken) {
        const tn = startTagToken.tagName;
        const isFontWithAttrs = tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);
        return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
      };
      exports.adjustTokenMathMLAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          if (token.attrs[i].name === DEFINITION_URL_ATTR) {
            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
            break;
          }
        }
      };
      exports.adjustTokenSVGAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
          if (adjustedAttrName) {
            token.attrs[i].name = adjustedAttrName;
          }
        }
      };
      exports.adjustTokenXMLAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
          if (adjustedAttrEntry) {
            token.attrs[i].prefix = adjustedAttrEntry.prefix;
            token.attrs[i].name = adjustedAttrEntry.name;
            token.attrs[i].namespace = adjustedAttrEntry.namespace;
          }
        }
      };
      exports.adjustTokenSVGTagName = function(token) {
        const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
        if (adjustedTagName) {
          token.tagName = adjustedTagName;
        }
      };
      function isMathMLTextIntegrationPoint(tn, ns) {
        return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
      }
      function isHtmlIntegrationPoint(tn, ns, attrs) {
        if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
          for (let i = 0; i < attrs.length; i++) {
            if (attrs[i].name === ATTRS.ENCODING) {
              const value = attrs[i].value.toLowerCase();
              return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
            }
          }
        }
        return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
      }
      exports.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {
        if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
          return true;
        }
        if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
          return true;
        }
        return false;
      };
    }
  });

  // node_modules/parse5/lib/parser/index.js
  var require_parser = __commonJS({
    "node_modules/parse5/lib/parser/index.js"(exports, module) {
      init_globals();
      var Tokenizer = require_tokenizer();
      var OpenElementStack = require_open_element_stack();
      var FormattingElementList = require_formatting_element_list();
      var LocationInfoParserMixin = require_parser_mixin();
      var ErrorReportingParserMixin = require_parser_mixin2();
      var Mixin = require_mixin();
      var defaultTreeAdapter = require_default();
      var mergeOptions = require_merge_options();
      var doctype = require_doctype();
      var foreignContent = require_foreign_content();
      var ERR = require_error_codes();
      var unicode = require_unicode();
      var HTML = require_html4();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      var ATTRS = HTML.ATTRS;
      var DEFAULT_OPTIONS = {
        scriptingEnabled: true,
        sourceCodeLocationInfo: false,
        onParseError: null,
        treeAdapter: defaultTreeAdapter
      };
      var HIDDEN_INPUT_TYPE = "hidden";
      var AA_OUTER_LOOP_ITER = 8;
      var AA_INNER_LOOP_ITER = 3;
      var INITIAL_MODE = "INITIAL_MODE";
      var BEFORE_HTML_MODE = "BEFORE_HTML_MODE";
      var BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE";
      var IN_HEAD_MODE = "IN_HEAD_MODE";
      var IN_HEAD_NO_SCRIPT_MODE = "IN_HEAD_NO_SCRIPT_MODE";
      var AFTER_HEAD_MODE = "AFTER_HEAD_MODE";
      var IN_BODY_MODE = "IN_BODY_MODE";
      var TEXT_MODE = "TEXT_MODE";
      var IN_TABLE_MODE = "IN_TABLE_MODE";
      var IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE";
      var IN_CAPTION_MODE = "IN_CAPTION_MODE";
      var IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE";
      var IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE";
      var IN_ROW_MODE = "IN_ROW_MODE";
      var IN_CELL_MODE = "IN_CELL_MODE";
      var IN_SELECT_MODE = "IN_SELECT_MODE";
      var IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE";
      var IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE";
      var AFTER_BODY_MODE = "AFTER_BODY_MODE";
      var IN_FRAMESET_MODE = "IN_FRAMESET_MODE";
      var AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE";
      var AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE";
      var AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
      var INSERTION_MODE_RESET_MAP = {
        [$.TR]: IN_ROW_MODE,
        [$.TBODY]: IN_TABLE_BODY_MODE,
        [$.THEAD]: IN_TABLE_BODY_MODE,
        [$.TFOOT]: IN_TABLE_BODY_MODE,
        [$.CAPTION]: IN_CAPTION_MODE,
        [$.COLGROUP]: IN_COLUMN_GROUP_MODE,
        [$.TABLE]: IN_TABLE_MODE,
        [$.BODY]: IN_BODY_MODE,
        [$.FRAMESET]: IN_FRAMESET_MODE
      };
      var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {
        [$.CAPTION]: IN_TABLE_MODE,
        [$.COLGROUP]: IN_TABLE_MODE,
        [$.TBODY]: IN_TABLE_MODE,
        [$.TFOOT]: IN_TABLE_MODE,
        [$.THEAD]: IN_TABLE_MODE,
        [$.COL]: IN_COLUMN_GROUP_MODE,
        [$.TR]: IN_TABLE_BODY_MODE,
        [$.TD]: IN_ROW_MODE,
        [$.TH]: IN_ROW_MODE
      };
      var TOKEN_HANDLERS = {
        [INITIAL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,
          [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.EOF_TOKEN]: tokenInInitialMode
        },
        [BEFORE_HTML_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHtml
        },
        [BEFORE_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHead
        },
        [IN_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHead,
          [Tokenizer.END_TAG_TOKEN]: endTagInHead,
          [Tokenizer.EOF_TOKEN]: tokenInHead
        },
        [IN_HEAD_NO_SCRIPT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,
          [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,
          [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript
        },
        [AFTER_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,
          [Tokenizer.EOF_TOKEN]: tokenAfterHead
        },
        [IN_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: ignoreToken,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: ignoreToken,
          [Tokenizer.END_TAG_TOKEN]: endTagInText,
          [Tokenizer.EOF_TOKEN]: eofInText
        },
        [IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TABLE_TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTableText,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,
          [Tokenizer.COMMENT_TOKEN]: tokenInTableText,
          [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,
          [Tokenizer.START_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.END_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.EOF_TOKEN]: tokenInTableText
        },
        [IN_CAPTION_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCaption,
          [Tokenizer.END_TAG_TOKEN]: endTagInCaption,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_COLUMN_GROUP_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,
          [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TABLE_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_ROW_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInRow,
          [Tokenizer.END_TAG_TOKEN]: endTagInRow,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_CELL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCell,
          [Tokenizer.END_TAG_TOKEN]: endTagInCell,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_SELECT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelect,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelect,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_SELECT_IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TEMPLATE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,
          [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,
          [Tokenizer.EOF_TOKEN]: eofInTemplate
        },
        [AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [IN_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,
          [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: ignoreToken,
          [Tokenizer.EOF_TOKEN]: stopParsing
        }
      };
      var Parser = class {
        constructor(options) {
          this.options = mergeOptions(DEFAULT_OPTIONS, options);
          this.treeAdapter = this.options.treeAdapter;
          this.pendingScript = null;
          if (this.options.sourceCodeLocationInfo) {
            Mixin.install(this, LocationInfoParserMixin);
          }
          if (this.options.onParseError) {
            Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });
          }
        }
        parse(html2) {
          const document2 = this.treeAdapter.createDocument();
          this._bootstrap(document2, null);
          this.tokenizer.write(html2, true);
          this._runParsingLoop(null);
          return document2;
        }
        parseFragment(html2, fragmentContext) {
          if (!fragmentContext) {
            fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
          }
          const documentMock = this.treeAdapter.createElement("documentmock", NS.HTML, []);
          this._bootstrap(documentMock, fragmentContext);
          if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {
            this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
          }
          this._initTokenizerForFragmentParsing();
          this._insertFakeRootElement();
          this._resetInsertionMode();
          this._findFormInFragmentContext();
          this.tokenizer.write(html2, true);
          this._runParsingLoop(null);
          const rootElement = this.treeAdapter.getFirstChild(documentMock);
          const fragment = this.treeAdapter.createDocumentFragment();
          this._adoptNodes(rootElement, fragment);
          return fragment;
        }
        _bootstrap(document2, fragmentContext) {
          this.tokenizer = new Tokenizer(this.options);
          this.stopped = false;
          this.insertionMode = INITIAL_MODE;
          this.originalInsertionMode = "";
          this.document = document2;
          this.fragmentContext = fragmentContext;
          this.headElement = null;
          this.formElement = null;
          this.openElements = new OpenElementStack(this.document, this.treeAdapter);
          this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
          this.tmplInsertionModeStack = [];
          this.tmplInsertionModeStackTop = -1;
          this.currentTmplInsertionMode = null;
          this.pendingCharacterTokens = [];
          this.hasNonWhitespacePendingCharacterToken = false;
          this.framesetOk = true;
          this.skipNextNewLine = false;
          this.fosterParentingEnabled = false;
        }
        _err() {
        }
        _runParsingLoop(scriptHandler) {
          while (!this.stopped) {
            this._setupTokenizerCDATAMode();
            const token = this.tokenizer.getNextToken();
            if (token.type === Tokenizer.HIBERNATION_TOKEN) {
              break;
            }
            if (this.skipNextNewLine) {
              this.skipNextNewLine = false;
              if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === "\n") {
                if (token.chars.length === 1) {
                  continue;
                }
                token.chars = token.chars.substr(1);
              }
            }
            this._processInputToken(token);
            if (scriptHandler && this.pendingScript) {
              break;
            }
          }
        }
        runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
          this._runParsingLoop(scriptHandler);
          if (scriptHandler && this.pendingScript) {
            const script = this.pendingScript;
            this.pendingScript = null;
            scriptHandler(script);
            return;
          }
          if (writeCallback) {
            writeCallback();
          }
        }
        _setupTokenizerCDATAMode() {
          const current = this._getAdjustedCurrentElement();
          this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
        }
        _switchToTextParsing(currentToken, nextTokenizerState) {
          this._insertElement(currentToken, NS.HTML);
          this.tokenizer.state = nextTokenizerState;
          this.originalInsertionMode = this.insertionMode;
          this.insertionMode = TEXT_MODE;
        }
        switchToPlaintextParsing() {
          this.insertionMode = TEXT_MODE;
          this.originalInsertionMode = IN_BODY_MODE;
          this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
        }
        _getAdjustedCurrentElement() {
          return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
        }
        _findFormInFragmentContext() {
          let node = this.fragmentContext;
          do {
            if (this.treeAdapter.getTagName(node) === $.FORM) {
              this.formElement = node;
              break;
            }
            node = this.treeAdapter.getParentNode(node);
          } while (node);
        }
        _initTokenizerForFragmentParsing() {
          if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
            const tn = this.treeAdapter.getTagName(this.fragmentContext);
            if (tn === $.TITLE || tn === $.TEXTAREA) {
              this.tokenizer.state = Tokenizer.MODE.RCDATA;
            } else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
              this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
            } else if (tn === $.SCRIPT) {
              this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
            } else if (tn === $.PLAINTEXT) {
              this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
            }
          }
        }
        _setDocumentType(token) {
          const name = token.name || "";
          const publicId = token.publicId || "";
          const systemId = token.systemId || "";
          this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
        }
        _attachElementToTree(element) {
          if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentElement(element);
          } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;
            this.treeAdapter.appendChild(parent, element);
          }
        }
        _appendElement(token, namespaceURI) {
          const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
          this._attachElementToTree(element);
        }
        _insertElement(token, namespaceURI) {
          const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
          this._attachElementToTree(element);
          this.openElements.push(element);
        }
        _insertFakeElement(tagName) {
          const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
          this._attachElementToTree(element);
          this.openElements.push(element);
        }
        _insertTemplate(token) {
          const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
          const content = this.treeAdapter.createDocumentFragment();
          this.treeAdapter.setTemplateContent(tmpl, content);
          this._attachElementToTree(tmpl);
          this.openElements.push(tmpl);
        }
        _insertFakeRootElement() {
          const element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
          this.treeAdapter.appendChild(this.openElements.current, element);
          this.openElements.push(element);
        }
        _appendCommentNode(token, parent) {
          const commentNode = this.treeAdapter.createCommentNode(token.data);
          this.treeAdapter.appendChild(parent, commentNode);
        }
        _insertCharacters(token) {
          if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentText(token.chars);
          } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;
            this.treeAdapter.insertText(parent, token.chars);
          }
        }
        _adoptNodes(donor, recipient2) {
          for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
            this.treeAdapter.detachNode(child);
            this.treeAdapter.appendChild(recipient2, child);
          }
        }
        _shouldProcessTokenInForeignContent(token) {
          const current = this._getAdjustedCurrentElement();
          if (!current || current === this.document) {
            return false;
          }
          const ns = this.treeAdapter.getNamespaceURI(current);
          if (ns === NS.HTML) {
            return false;
          }
          if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
            return false;
          }
          const isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;
          const isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;
          if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
            return false;
          }
          if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) {
            return false;
          }
          return token.type !== Tokenizer.EOF_TOKEN;
        }
        _processToken(token) {
          TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
        }
        _processTokenInBodyMode(token) {
          TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
        }
        _processTokenInForeignContent(token) {
          if (token.type === Tokenizer.CHARACTER_TOKEN) {
            characterInForeignContent(this, token);
          } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
            nullCharacterInForeignContent(this, token);
          } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
            insertCharacters(this, token);
          } else if (token.type === Tokenizer.COMMENT_TOKEN) {
            appendComment(this, token);
          } else if (token.type === Tokenizer.START_TAG_TOKEN) {
            startTagInForeignContent(this, token);
          } else if (token.type === Tokenizer.END_TAG_TOKEN) {
            endTagInForeignContent(this, token);
          }
        }
        _processInputToken(token) {
          if (this._shouldProcessTokenInForeignContent(token)) {
            this._processTokenInForeignContent(token);
          } else {
            this._processToken(token);
          }
          if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
            this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
          }
        }
        _isIntegrationPoint(element, foreignNS) {
          const tn = this.treeAdapter.getTagName(element);
          const ns = this.treeAdapter.getNamespaceURI(element);
          const attrs = this.treeAdapter.getAttrList(element);
          return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
        }
        _reconstructActiveFormattingElements() {
          const listLength = this.activeFormattingElements.length;
          if (listLength) {
            let unopenIdx = listLength;
            let entry = null;
            do {
              unopenIdx--;
              entry = this.activeFormattingElements.entries[unopenIdx];
              if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                unopenIdx++;
                break;
              }
            } while (unopenIdx > 0);
            for (let i = unopenIdx; i < listLength; i++) {
              entry = this.activeFormattingElements.entries[i];
              this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
              entry.element = this.openElements.current;
            }
          }
        }
        _closeTableCell() {
          this.openElements.generateImpliedEndTags();
          this.openElements.popUntilTableCellPopped();
          this.activeFormattingElements.clearToLastMarker();
          this.insertionMode = IN_ROW_MODE;
        }
        _closePElement() {
          this.openElements.generateImpliedEndTagsWithExclusion($.P);
          this.openElements.popUntilTagNamePopped($.P);
        }
        _resetInsertionMode() {
          for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {
            let element = this.openElements.items[i];
            if (i === 0) {
              last = true;
              if (this.fragmentContext) {
                element = this.fragmentContext;
              }
            }
            const tn = this.treeAdapter.getTagName(element);
            const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
            if (newInsertionMode) {
              this.insertionMode = newInsertionMode;
              break;
            } else if (!last && (tn === $.TD || tn === $.TH)) {
              this.insertionMode = IN_CELL_MODE;
              break;
            } else if (!last && tn === $.HEAD) {
              this.insertionMode = IN_HEAD_MODE;
              break;
            } else if (tn === $.SELECT) {
              this._resetInsertionModeForSelect(i);
              break;
            } else if (tn === $.TEMPLATE) {
              this.insertionMode = this.currentTmplInsertionMode;
              break;
            } else if (tn === $.HTML) {
              this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
              break;
            } else if (last) {
              this.insertionMode = IN_BODY_MODE;
              break;
            }
          }
        }
        _resetInsertionModeForSelect(selectIdx) {
          if (selectIdx > 0) {
            for (let i = selectIdx - 1; i > 0; i--) {
              const ancestor = this.openElements.items[i];
              const tn = this.treeAdapter.getTagName(ancestor);
              if (tn === $.TEMPLATE) {
                break;
              } else if (tn === $.TABLE) {
                this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                return;
              }
            }
          }
          this.insertionMode = IN_SELECT_MODE;
        }
        _pushTmplInsertionMode(mode) {
          this.tmplInsertionModeStack.push(mode);
          this.tmplInsertionModeStackTop++;
          this.currentTmplInsertionMode = mode;
        }
        _popTmplInsertionMode() {
          this.tmplInsertionModeStack.pop();
          this.tmplInsertionModeStackTop--;
          this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
        }
        _isElementCausesFosterParenting(element) {
          const tn = this.treeAdapter.getTagName(element);
          return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
        }
        _shouldFosterParentOnInsertion() {
          return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
        }
        _findFosterParentingLocation() {
          const location = {
            parent: null,
            beforeElement: null
          };
          for (let i = this.openElements.stackTop; i >= 0; i--) {
            const openElement = this.openElements.items[i];
            const tn = this.treeAdapter.getTagName(openElement);
            const ns = this.treeAdapter.getNamespaceURI(openElement);
            if (tn === $.TEMPLATE && ns === NS.HTML) {
              location.parent = this.treeAdapter.getTemplateContent(openElement);
              break;
            } else if (tn === $.TABLE) {
              location.parent = this.treeAdapter.getParentNode(openElement);
              if (location.parent) {
                location.beforeElement = openElement;
              } else {
                location.parent = this.openElements.items[i - 1];
              }
              break;
            }
          }
          if (!location.parent) {
            location.parent = this.openElements.items[0];
          }
          return location;
        }
        _fosterParentElement(element) {
          const location = this._findFosterParentingLocation();
          if (location.beforeElement) {
            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
          } else {
            this.treeAdapter.appendChild(location.parent, element);
          }
        }
        _fosterParentText(chars) {
          const location = this._findFosterParentingLocation();
          if (location.beforeElement) {
            this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
          } else {
            this.treeAdapter.insertText(location.parent, chars);
          }
        }
        _isSpecialElement(element) {
          const tn = this.treeAdapter.getTagName(element);
          const ns = this.treeAdapter.getNamespaceURI(element);
          return HTML.SPECIAL_ELEMENTS[ns][tn];
        }
      };
      module.exports = Parser;
      function aaObtainFormattingElementEntry(p, token) {
        let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
        if (formattingElementEntry) {
          if (!p.openElements.contains(formattingElementEntry.element)) {
            p.activeFormattingElements.removeEntry(formattingElementEntry);
            formattingElementEntry = null;
          } else if (!p.openElements.hasInScope(token.tagName)) {
            formattingElementEntry = null;
          }
        } else {
          genericEndTagInBody(p, token);
        }
        return formattingElementEntry;
      }
      function aaObtainFurthestBlock(p, formattingElementEntry) {
        let furthestBlock = null;
        for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element = p.openElements.items[i];
          if (element === formattingElementEntry.element) {
            break;
          }
          if (p._isSpecialElement(element)) {
            furthestBlock = element;
          }
        }
        if (!furthestBlock) {
          p.openElements.popUntilElementPopped(formattingElementEntry.element);
          p.activeFormattingElements.removeEntry(formattingElementEntry);
        }
        return furthestBlock;
      }
      function aaInnerLoop(p, furthestBlock, formattingElement) {
        let lastElement = furthestBlock;
        let nextElement = p.openElements.getCommonAncestor(furthestBlock);
        for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
          nextElement = p.openElements.getCommonAncestor(element);
          const elementEntry = p.activeFormattingElements.getElementEntry(element);
          const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
          const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
          if (shouldRemoveFromOpenElements) {
            if (counterOverflow) {
              p.activeFormattingElements.removeEntry(elementEntry);
            }
            p.openElements.remove(element);
          } else {
            element = aaRecreateElementFromEntry(p, elementEntry);
            if (lastElement === furthestBlock) {
              p.activeFormattingElements.bookmark = elementEntry;
            }
            p.treeAdapter.detachNode(lastElement);
            p.treeAdapter.appendChild(element, lastElement);
            lastElement = element;
          }
        }
        return lastElement;
      }
      function aaRecreateElementFromEntry(p, elementEntry) {
        const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
        const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
        p.openElements.replace(elementEntry.element, newElement);
        elementEntry.element = newElement;
        return newElement;
      }
      function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
        if (p._isElementCausesFosterParenting(commonAncestor)) {
          p._fosterParentElement(lastElement);
        } else {
          const tn = p.treeAdapter.getTagName(commonAncestor);
          const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
          if (tn === $.TEMPLATE && ns === NS.HTML) {
            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
          }
          p.treeAdapter.appendChild(commonAncestor, lastElement);
        }
      }
      function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
        const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
        const token = formattingElementEntry.token;
        const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
        p._adoptNodes(furthestBlock, newElement);
        p.treeAdapter.appendChild(furthestBlock, newElement);
        p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
        p.activeFormattingElements.removeEntry(formattingElementEntry);
        p.openElements.remove(formattingElementEntry.element);
        p.openElements.insertAfter(furthestBlock, newElement);
      }
      function callAdoptionAgency(p, token) {
        let formattingElementEntry;
        for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
          formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
          if (!formattingElementEntry) {
            break;
          }
          const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
          if (!furthestBlock) {
            break;
          }
          p.activeFormattingElements.bookmark = formattingElementEntry;
          const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
          const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
          p.treeAdapter.detachNode(lastElement);
          aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
          aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
        }
      }
      function ignoreToken() {
      }
      function misplacedDoctype(p) {
        p._err(ERR.misplacedDoctype);
      }
      function appendComment(p, token) {
        p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
      }
      function appendCommentToRootHtmlElement(p, token) {
        p._appendCommentNode(token, p.openElements.items[0]);
      }
      function appendCommentToDocument(p, token) {
        p._appendCommentNode(token, p.document);
      }
      function insertCharacters(p, token) {
        p._insertCharacters(token);
      }
      function stopParsing(p) {
        p.stopped = true;
      }
      function doctypeInInitialMode(p, token) {
        p._setDocumentType(token);
        const mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);
        if (!doctype.isConforming(token)) {
          p._err(ERR.nonConformingDoctype);
        }
        p.treeAdapter.setDocumentMode(p.document, mode);
        p.insertionMode = BEFORE_HTML_MODE;
      }
      function tokenInInitialMode(p, token) {
        p._err(ERR.missingDoctype, { beforeToken: true });
        p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
        p.insertionMode = BEFORE_HTML_MODE;
        p._processToken(token);
      }
      function startTagBeforeHtml(p, token) {
        if (token.tagName === $.HTML) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = BEFORE_HEAD_MODE;
        } else {
          tokenBeforeHtml(p, token);
        }
      }
      function endTagBeforeHtml(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {
          tokenBeforeHtml(p, token);
        }
      }
      function tokenBeforeHtml(p, token) {
        p._insertFakeRootElement();
        p.insertionMode = BEFORE_HEAD_MODE;
        p._processToken(token);
      }
      function startTagBeforeHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.HEAD) {
          p._insertElement(token, NS.HTML);
          p.headElement = p.openElements.current;
          p.insertionMode = IN_HEAD_MODE;
        } else {
          tokenBeforeHead(p, token);
        }
      }
      function endTagBeforeHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenBeforeHead(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenBeforeHead(p, token) {
        p._insertFakeElement($.HEAD);
        p.headElement = p.openElements.current;
        p.insertionMode = IN_HEAD_MODE;
        p._processToken(token);
      }
      function startTagInHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.TITLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
        } else if (tn === $.NOSCRIPT) {
          if (p.options.scriptingEnabled) {
            p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
          } else {
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
          }
        } else if (tn === $.NOFRAMES || tn === $.STYLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
        } else if (tn === $.SCRIPT) {
          p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
        } else if (tn === $.TEMPLATE) {
          p._insertTemplate(token, NS.HTML);
          p.activeFormattingElements.insertMarker();
          p.framesetOk = false;
          p.insertionMode = IN_TEMPLATE_MODE;
          p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
        } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
        } else {
          tokenInHead(p, token);
        }
      }
      function endTagInHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HEAD) {
          p.openElements.pop();
          p.insertionMode = AFTER_HEAD_MODE;
        } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {
          tokenInHead(p, token);
        } else if (tn === $.TEMPLATE) {
          if (p.openElements.tmplCount > 0) {
            p.openElements.generateImpliedEndTagsThoroughly();
            if (p.openElements.currentTagName !== $.TEMPLATE) {
              p._err(ERR.closingOfElementWithOpenChildElements);
            }
            p.openElements.popUntilTagNamePopped($.TEMPLATE);
            p.activeFormattingElements.clearToLastMarker();
            p._popTmplInsertionMode();
            p._resetInsertionMode();
          } else {
            p._err(ERR.endTagWithoutMatchingOpenElement);
          }
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenInHead(p, token) {
        p.openElements.pop();
        p.insertionMode = AFTER_HEAD_MODE;
        p._processToken(token);
      }
      function startTagInHeadNoScript(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BASEFONT || tn === $.BGSOUND || tn === $.HEAD || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.STYLE) {
          startTagInHead(p, token);
        } else if (tn === $.NOSCRIPT) {
          p._err(ERR.nestedNoscriptInHead);
        } else {
          tokenInHeadNoScript(p, token);
        }
      }
      function endTagInHeadNoScript(p, token) {
        const tn = token.tagName;
        if (tn === $.NOSCRIPT) {
          p.openElements.pop();
          p.insertionMode = IN_HEAD_MODE;
        } else if (tn === $.BR) {
          tokenInHeadNoScript(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenInHeadNoScript(p, token) {
        const errCode = token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
        p._err(errCode);
        p.openElements.pop();
        p.insertionMode = IN_HEAD_MODE;
        p._processToken(token);
      }
      function startTagAfterHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BODY) {
          p._insertElement(token, NS.HTML);
          p.framesetOk = false;
          p.insertionMode = IN_BODY_MODE;
        } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
        } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
          p._err(ERR.abandonedHeadElementChild);
          p.openElements.push(p.headElement);
          startTagInHead(p, token);
          p.openElements.remove(p.headElement);
        } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
        } else {
          tokenAfterHead(p, token);
        }
      }
      function endTagAfterHead(p, token) {
        const tn = token.tagName;
        if (tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenAfterHead(p, token);
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenAfterHead(p, token) {
        p._insertFakeElement($.BODY);
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function whitespaceCharacterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
      }
      function characterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
        p.framesetOk = false;
      }
      function htmlStartTagInBody(p, token) {
        if (p.openElements.tmplCount === 0) {
          p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
        }
      }
      function bodyStartTagInBody(p, token) {
        const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
        if (bodyElement && p.openElements.tmplCount === 0) {
          p.framesetOk = false;
          p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
        }
      }
      function framesetStartTagInBody(p, token) {
        const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
        if (p.framesetOk && bodyElement) {
          p.treeAdapter.detachNode(bodyElement);
          p.openElements.popAllUpToHtmlElement();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
        }
      }
      function addressStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function numberedHeaderStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        const tn = p.openElements.currentTagName;
        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
          p.openElements.pop();
        }
        p._insertElement(token, NS.HTML);
      }
      function preStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.skipNextNewLine = true;
        p.framesetOk = false;
      }
      function formStartTagInBody(p, token) {
        const inTemplate = p.openElements.tmplCount > 0;
        if (!p.formElement || inTemplate) {
          if (p.openElements.hasInButtonScope($.P)) {
            p._closePElement();
          }
          p._insertElement(token, NS.HTML);
          if (!inTemplate) {
            p.formElement = p.openElements.current;
          }
        }
      }
      function listItemStartTagInBody(p, token) {
        p.framesetOk = false;
        const tn = token.tagName;
        for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element = p.openElements.items[i];
          const elementTn = p.treeAdapter.getTagName(element);
          let closeTn = null;
          if (tn === $.LI && elementTn === $.LI) {
            closeTn = $.LI;
          } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {
            closeTn = elementTn;
          }
          if (closeTn) {
            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
            p.openElements.popUntilTagNamePopped(closeTn);
            break;
          }
          if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {
            break;
          }
        }
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function plaintextStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
      }
      function buttonStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.BUTTON)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped($.BUTTON);
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
      }
      function aStartTagInBody(p, token) {
        const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);
        if (activeElementEntry) {
          callAdoptionAgency(p, token);
          p.openElements.remove(activeElementEntry.element);
          p.activeFormattingElements.removeEntry(activeElementEntry);
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function bStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function nobrStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        if (p.openElements.hasInScope($.NOBR)) {
          callAdoptionAgency(p, token);
          p._reconstructActiveFormattingElements();
        }
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function appletStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
      }
      function tableStartTagInBody(p, token) {
        if (p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = IN_TABLE_MODE;
      }
      function areaStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
        token.ackSelfClosing = true;
      }
      function inputStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);
        const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
        if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
          p.framesetOk = false;
        }
        token.ackSelfClosing = true;
      }
      function paramStartTagInBody(p, token) {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
      }
      function hrStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
        token.ackSelfClosing = true;
      }
      function imageStartTagInBody(p, token) {
        token.tagName = $.IMG;
        areaStartTagInBody(p, token);
      }
      function textareaStartTagInBody(p, token) {
        p._insertElement(token, NS.HTML);
        p.skipNextNewLine = true;
        p.tokenizer.state = Tokenizer.MODE.RCDATA;
        p.originalInsertionMode = p.insertionMode;
        p.framesetOk = false;
        p.insertionMode = TEXT_MODE;
      }
      function xmpStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._reconstructActiveFormattingElements();
        p.framesetOk = false;
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function iframeStartTagInBody(p, token) {
        p.framesetOk = false;
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function noembedStartTagInBody(p, token) {
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function selectStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
          p.insertionMode = IN_SELECT_IN_TABLE_MODE;
        } else {
          p.insertionMode = IN_SELECT_MODE;
        }
      }
      function optgroupStartTagInBody(p, token) {
        if (p.openElements.currentTagName === $.OPTION) {
          p.openElements.pop();
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
      }
      function rbStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTags();
        }
        p._insertElement(token, NS.HTML);
      }
      function rtStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
        }
        p._insertElement(token, NS.HTML);
      }
      function menuStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function mathStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        foreignContent.adjustTokenMathMLAttrs(token);
        foreignContent.adjustTokenXMLAttrs(token);
        if (token.selfClosing) {
          p._appendElement(token, NS.MATHML);
        } else {
          p._insertElement(token, NS.MATHML);
        }
        token.ackSelfClosing = true;
      }
      function svgStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        foreignContent.adjustTokenSVGAttrs(token);
        foreignContent.adjustTokenXMLAttrs(token);
        if (token.selfClosing) {
          p._appendElement(token, NS.SVG);
        } else {
          p._insertElement(token, NS.SVG);
        }
        token.ackSelfClosing = true;
      }
      function genericStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
      }
      function startTagInBody(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 1:
            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {
              bStartTagInBody(p, token);
            } else if (tn === $.P) {
              addressStartTagInBody(p, token);
            } else if (tn === $.A) {
              aStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 2:
            if (tn === $.DL || tn === $.OL || tn === $.UL) {
              addressStartTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
              numberedHeaderStartTagInBody(p, token);
            } else if (tn === $.LI || tn === $.DD || tn === $.DT) {
              listItemStartTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
              bStartTagInBody(p, token);
            } else if (tn === $.BR) {
              areaStartTagInBody(p, token);
            } else if (tn === $.HR) {
              hrStartTagInBody(p, token);
            } else if (tn === $.RB) {
              rbStartTagInBody(p, token);
            } else if (tn === $.RT || tn === $.RP) {
              rtStartTagInBody(p, token);
            } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {
              genericStartTagInBody(p, token);
            }
            break;
          case 3:
            if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {
              addressStartTagInBody(p, token);
            } else if (tn === $.PRE) {
              preStartTagInBody(p, token);
            } else if (tn === $.BIG) {
              bStartTagInBody(p, token);
            } else if (tn === $.IMG || tn === $.WBR) {
              areaStartTagInBody(p, token);
            } else if (tn === $.XMP) {
              xmpStartTagInBody(p, token);
            } else if (tn === $.SVG) {
              svgStartTagInBody(p, token);
            } else if (tn === $.RTC) {
              rbStartTagInBody(p, token);
            } else if (tn !== $.COL) {
              genericStartTagInBody(p, token);
            }
            break;
          case 4:
            if (tn === $.HTML) {
              htmlStartTagInBody(p, token);
            } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {
              startTagInHead(p, token);
            } else if (tn === $.BODY) {
              bodyStartTagInBody(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
              addressStartTagInBody(p, token);
            } else if (tn === $.FORM) {
              formStartTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT) {
              bStartTagInBody(p, token);
            } else if (tn === $.NOBR) {
              nobrStartTagInBody(p, token);
            } else if (tn === $.AREA) {
              areaStartTagInBody(p, token);
            } else if (tn === $.MATH) {
              mathStartTagInBody(p, token);
            } else if (tn === $.MENU) {
              menuStartTagInBody(p, token);
            } else if (tn !== $.HEAD) {
              genericStartTagInBody(p, token);
            }
            break;
          case 5:
            if (tn === $.STYLE || tn === $.TITLE) {
              startTagInHead(p, token);
            } else if (tn === $.ASIDE) {
              addressStartTagInBody(p, token);
            } else if (tn === $.SMALL) {
              bStartTagInBody(p, token);
            } else if (tn === $.TABLE) {
              tableStartTagInBody(p, token);
            } else if (tn === $.EMBED) {
              areaStartTagInBody(p, token);
            } else if (tn === $.INPUT) {
              inputStartTagInBody(p, token);
            } else if (tn === $.PARAM || tn === $.TRACK) {
              paramStartTagInBody(p, token);
            } else if (tn === $.IMAGE) {
              imageStartTagInBody(p, token);
            } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {
              genericStartTagInBody(p, token);
            }
            break;
          case 6:
            if (tn === $.SCRIPT) {
              startTagInHead(p, token);
            } else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
              addressStartTagInBody(p, token);
            } else if (tn === $.BUTTON) {
              buttonStartTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
              bStartTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
              appletStartTagInBody(p, token);
            } else if (tn === $.KEYGEN) {
              areaStartTagInBody(p, token);
            } else if (tn === $.SOURCE) {
              paramStartTagInBody(p, token);
            } else if (tn === $.IFRAME) {
              iframeStartTagInBody(p, token);
            } else if (tn === $.SELECT) {
              selectStartTagInBody(p, token);
            } else if (tn === $.OPTION) {
              optgroupStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 7:
            if (tn === $.BGSOUND) {
              startTagInHead(p, token);
            } else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) {
              addressStartTagInBody(p, token);
            } else if (tn === $.LISTING) {
              preStartTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
              appletStartTagInBody(p, token);
            } else if (tn === $.NOEMBED) {
              noembedStartTagInBody(p, token);
            } else if (tn !== $.CAPTION) {
              genericStartTagInBody(p, token);
            }
            break;
          case 8:
            if (tn === $.BASEFONT) {
              startTagInHead(p, token);
            } else if (tn === $.FRAMESET) {
              framesetStartTagInBody(p, token);
            } else if (tn === $.FIELDSET) {
              addressStartTagInBody(p, token);
            } else if (tn === $.TEXTAREA) {
              textareaStartTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
              startTagInHead(p, token);
            } else if (tn === $.NOSCRIPT) {
              if (p.options.scriptingEnabled) {
                noembedStartTagInBody(p, token);
              } else {
                genericStartTagInBody(p, token);
              }
            } else if (tn === $.OPTGROUP) {
              optgroupStartTagInBody(p, token);
            } else if (tn !== $.COLGROUP) {
              genericStartTagInBody(p, token);
            }
            break;
          case 9:
            if (tn === $.PLAINTEXT) {
              plaintextStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
              addressStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          default:
            genericStartTagInBody(p, token);
        }
      }
      function bodyEndTagInBody(p) {
        if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
        }
      }
      function htmlEndTagInBody(p, token) {
        if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
          p._processToken(token);
        }
      }
      function addressEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
        }
      }
      function formEndTagInBody(p) {
        const inTemplate = p.openElements.tmplCount > 0;
        const formElement = p.formElement;
        if (!inTemplate) {
          p.formElement = null;
        }
        if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
          p.openElements.generateImpliedEndTags();
          if (inTemplate) {
            p.openElements.popUntilTagNamePopped($.FORM);
          } else {
            p.openElements.remove(formElement);
          }
        }
      }
      function pEndTagInBody(p) {
        if (!p.openElements.hasInButtonScope($.P)) {
          p._insertFakeElement($.P);
        }
        p._closePElement();
      }
      function liEndTagInBody(p) {
        if (p.openElements.hasInListItemScope($.LI)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.LI);
          p.openElements.popUntilTagNamePopped($.LI);
        }
      }
      function ddEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTagsWithExclusion(tn);
          p.openElements.popUntilTagNamePopped(tn);
        }
      }
      function numberedHeaderEndTagInBody(p) {
        if (p.openElements.hasNumberedHeaderInScope()) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilNumberedHeaderPopped();
        }
      }
      function appletEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
          p.activeFormattingElements.clearToLastMarker();
        }
      }
      function brEndTagInBody(p) {
        p._reconstructActiveFormattingElements();
        p._insertFakeElement($.BR);
        p.openElements.pop();
        p.framesetOk = false;
      }
      function genericEndTagInBody(p, token) {
        const tn = token.tagName;
        for (let i = p.openElements.stackTop; i > 0; i--) {
          const element = p.openElements.items[i];
          if (p.treeAdapter.getTagName(element) === tn) {
            p.openElements.generateImpliedEndTagsWithExclusion(tn);
            p.openElements.popUntilElementPopped(element);
            break;
          }
          if (p._isSpecialElement(element)) {
            break;
          }
        }
      }
      function endTagInBody(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 1:
            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {
              callAdoptionAgency(p, token);
            } else if (tn === $.P) {
              pEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 2:
            if (tn === $.DL || tn === $.UL || tn === $.OL) {
              addressEndTagInBody(p, token);
            } else if (tn === $.LI) {
              liEndTagInBody(p, token);
            } else if (tn === $.DD || tn === $.DT) {
              ddEndTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
              numberedHeaderEndTagInBody(p, token);
            } else if (tn === $.BR) {
              brEndTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 3:
            if (tn === $.BIG) {
              callAdoptionAgency(p, token);
            } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 4:
            if (tn === $.BODY) {
              bodyEndTagInBody(p, token);
            } else if (tn === $.HTML) {
              htmlEndTagInBody(p, token);
            } else if (tn === $.FORM) {
              formEndTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {
              callAdoptionAgency(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 5:
            if (tn === $.ASIDE) {
              addressEndTagInBody(p, token);
            } else if (tn === $.SMALL) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 6:
            if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
              addressEndTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
              appletEndTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 7:
            if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY || tn === $.LISTING) {
              addressEndTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
              appletEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 8:
            if (tn === $.FIELDSET) {
              addressEndTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
              endTagInHead(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          default:
            genericEndTagInBody(p, token);
        }
      }
      function eofInBody(p, token) {
        if (p.tmplInsertionModeStackTop > -1) {
          eofInTemplate(p, token);
        } else {
          p.stopped = true;
        }
      }
      function endTagInText(p, token) {
        if (token.tagName === $.SCRIPT) {
          p.pendingScript = p.openElements.current;
        }
        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
      }
      function eofInText(p, token) {
        p._err(ERR.eofInElementThatCanContainOnlyText);
        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
      }
      function characterInTable(p, token) {
        const curTn = p.openElements.currentTagName;
        if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
          p.pendingCharacterTokens = [];
          p.hasNonWhitespacePendingCharacterToken = false;
          p.originalInsertionMode = p.insertionMode;
          p.insertionMode = IN_TABLE_TEXT_MODE;
          p._processToken(token);
        } else {
          tokenInTable(p, token);
        }
      }
      function captionStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p.activeFormattingElements.insertMarker();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_CAPTION_MODE;
      }
      function colgroupStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
      }
      function colStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.COLGROUP);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
        p._processToken(token);
      }
      function tbodyStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_TABLE_BODY_MODE;
      }
      function tdStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.TBODY);
        p.insertionMode = IN_TABLE_BODY_MODE;
        p._processToken(token);
      }
      function tableStartTagInTable(p, token) {
        if (p.openElements.hasInTableScope($.TABLE)) {
          p.openElements.popUntilTagNamePopped($.TABLE);
          p._resetInsertionMode();
          p._processToken(token);
        }
      }
      function inputStartTagInTable(p, token) {
        const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
        if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
          p._appendElement(token, NS.HTML);
        } else {
          tokenInTable(p, token);
        }
        token.ackSelfClosing = true;
      }
      function formStartTagInTable(p, token) {
        if (!p.formElement && p.openElements.tmplCount === 0) {
          p._insertElement(token, NS.HTML);
          p.formElement = p.openElements.current;
          p.openElements.pop();
        }
      }
      function startTagInTable(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 2:
            if (tn === $.TD || tn === $.TH || tn === $.TR) {
              tdStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 3:
            if (tn === $.COL) {
              colStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 4:
            if (tn === $.FORM) {
              formStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 5:
            if (tn === $.TABLE) {
              tableStartTagInTable(p, token);
            } else if (tn === $.STYLE) {
              startTagInHead(p, token);
            } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
              tbodyStartTagInTable(p, token);
            } else if (tn === $.INPUT) {
              inputStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 6:
            if (tn === $.SCRIPT) {
              startTagInHead(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 7:
            if (tn === $.CAPTION) {
              captionStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 8:
            if (tn === $.COLGROUP) {
              colgroupStartTagInTable(p, token);
            } else if (tn === $.TEMPLATE) {
              startTagInHead(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          default:
            tokenInTable(p, token);
        }
      }
      function endTagInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TABLE)) {
            p.openElements.popUntilTagNamePopped($.TABLE);
            p._resetInsertionMode();
          }
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
          tokenInTable(p, token);
        }
      }
      function tokenInTable(p, token) {
        const savedFosterParentingState = p.fosterParentingEnabled;
        p.fosterParentingEnabled = true;
        p._processTokenInBodyMode(token);
        p.fosterParentingEnabled = savedFosterParentingState;
      }
      function whitespaceCharacterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
      }
      function characterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
        p.hasNonWhitespacePendingCharacterToken = true;
      }
      function tokenInTableText(p, token) {
        let i = 0;
        if (p.hasNonWhitespacePendingCharacterToken) {
          for (; i < p.pendingCharacterTokens.length; i++) {
            tokenInTable(p, p.pendingCharacterTokens[i]);
          }
        } else {
          for (; i < p.pendingCharacterTokens.length; i++) {
            p._insertCharacters(p.pendingCharacterTokens[i]);
          }
        }
        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
      }
      function startTagInCaption(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else {
          startTagInBody(p, token);
        }
      }
      function endTagInCaption(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            if (tn === $.TABLE) {
              p._processToken(token);
            }
          }
        } else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
          endTagInBody(p, token);
        }
      }
      function startTagInColumnGroup(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.COL) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.TEMPLATE) {
          startTagInHead(p, token);
        } else {
          tokenInColumnGroup(p, token);
        }
      }
      function endTagInColumnGroup(p, token) {
        const tn = token.tagName;
        if (tn === $.COLGROUP) {
          if (p.openElements.currentTagName === $.COLGROUP) {
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
          }
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else if (tn !== $.COL) {
          tokenInColumnGroup(p, token);
        }
      }
      function tokenInColumnGroup(p, token) {
        if (p.openElements.currentTagName === $.COLGROUP) {
          p.openElements.pop();
          p.insertionMode = IN_TABLE_MODE;
          p._processToken(token);
        }
      }
      function startTagInTableBody(p, token) {
        const tn = token.tagName;
        if (tn === $.TR) {
          p.openElements.clearBackToTableBodyContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_ROW_MODE;
        } else if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableBodyContext();
          p._insertFakeElement($.TR);
          p.insertionMode = IN_ROW_MODE;
          p._processToken(token);
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else {
          startTagInTable(p, token);
        }
      }
      function endTagInTableBody(p, token) {
        const tn = token.tagName;
        if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
          }
        } else if (tn === $.TABLE) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
          endTagInTable(p, token);
        }
      }
      function startTagInRow(p, token) {
        const tn = token.tagName;
        if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableRowContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_CELL_MODE;
          p.activeFormattingElements.insertMarker();
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else {
          startTagInTable(p, token);
        }
      }
      function endTagInRow(p, token) {
        const tn = token.tagName;
        if (tn === $.TR) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
          }
        } else if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
          endTagInTable(p, token);
        }
      }
      function startTagInCell(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
            p._closeTableCell();
            p._processToken(token);
          }
        } else {
          startTagInBody(p, token);
        }
      }
      function endTagInCell(p, token) {
        const tn = token.tagName;
        if (tn === $.TD || tn === $.TH) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_ROW_MODE;
          }
        } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope(tn)) {
            p._closeTableCell();
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {
          endTagInBody(p, token);
        }
      }
      function startTagInSelect(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
          p._insertElement(token, NS.HTML);
        } else if (tn === $.OPTGROUP) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
          if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
          }
          p._insertElement(token, NS.HTML);
        } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
          if (p.openElements.hasInSelectScope($.SELECT)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            if (tn !== $.SELECT) {
              p._processToken(token);
            }
          }
        } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {
          startTagInHead(p, token);
        }
      }
      function endTagInSelect(p, token) {
        const tn = token.tagName;
        if (tn === $.OPTGROUP) {
          const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];
          const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
          if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {
            p.openElements.pop();
          }
          if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
          }
        } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
        } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        }
      }
      function startTagInSelectInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
          p._processToken(token);
        } else {
          startTagInSelect(p, token);
        }
      }
      function endTagInSelectInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            p._processToken(token);
          }
        } else {
          endTagInSelect(p, token);
        }
      }
      function startTagInTemplate(p, token) {
        const tn = token.tagName;
        if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
          startTagInHead(p, token);
        } else {
          const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
          p._popTmplInsertionMode();
          p._pushTmplInsertionMode(newInsertionMode);
          p.insertionMode = newInsertionMode;
          p._processToken(token);
        }
      }
      function endTagInTemplate(p, token) {
        if (token.tagName === $.TEMPLATE) {
          endTagInHead(p, token);
        }
      }
      function eofInTemplate(p, token) {
        if (p.openElements.tmplCount > 0) {
          p.openElements.popUntilTagNamePopped($.TEMPLATE);
          p.activeFormattingElements.clearToLastMarker();
          p._popTmplInsertionMode();
          p._resetInsertionMode();
          p._processToken(token);
        } else {
          p.stopped = true;
        }
      }
      function startTagAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          startTagInBody(p, token);
        } else {
          tokenAfterBody(p, token);
        }
      }
      function endTagAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          if (!p.fragmentContext) {
            p.insertionMode = AFTER_AFTER_BODY_MODE;
          }
        } else {
          tokenAfterBody(p, token);
        }
      }
      function tokenAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function startTagInFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
        } else if (tn === $.FRAME) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function endTagInFrameset(p, token) {
        if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
          p.openElements.pop();
          if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {
            p.insertionMode = AFTER_FRAMESET_MODE;
          }
        }
      }
      function startTagAfterFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function endTagAfterFrameset(p, token) {
        if (token.tagName === $.HTML) {
          p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
        }
      }
      function startTagAfterAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          startTagInBody(p, token);
        } else {
          tokenAfterAfterBody(p, token);
        }
      }
      function tokenAfterAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function startTagAfterAfterFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function nullCharacterInForeignContent(p, token) {
        token.chars = unicode.REPLACEMENT_CHARACTER;
        p._insertCharacters(token);
      }
      function characterInForeignContent(p, token) {
        p._insertCharacters(token);
        p.framesetOk = false;
      }
      function startTagInForeignContent(p, token) {
        if (foreignContent.causesExit(token) && !p.fragmentContext) {
          while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current)) {
            p.openElements.pop();
          }
          p._processToken(token);
        } else {
          const current = p._getAdjustedCurrentElement();
          const currentNs = p.treeAdapter.getNamespaceURI(current);
          if (currentNs === NS.MATHML) {
            foreignContent.adjustTokenMathMLAttrs(token);
          } else if (currentNs === NS.SVG) {
            foreignContent.adjustTokenSVGTagName(token);
            foreignContent.adjustTokenSVGAttrs(token);
          }
          foreignContent.adjustTokenXMLAttrs(token);
          if (token.selfClosing) {
            p._appendElement(token, currentNs);
          } else {
            p._insertElement(token, currentNs);
          }
          token.ackSelfClosing = true;
        }
      }
      function endTagInForeignContent(p, token) {
        for (let i = p.openElements.stackTop; i > 0; i--) {
          const element = p.openElements.items[i];
          if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
            p._processToken(token);
            break;
          }
          if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
            p.openElements.popUntilElementPopped(element);
            break;
          }
        }
      }
    }
  });

  // node_modules/rehype-parse/errors.json
  var require_errors = __commonJS({
    "node_modules/rehype-parse/errors.json"(exports, module) {
      module.exports = {
        abandonedHeadElementChild: {
          reason: "Unexpected metadata element after head",
          description: "Unexpected element after head. Expected the element before `</head>`",
          url: false
        },
        abruptClosingOfEmptyComment: {
          reason: "Unexpected abruptly closed empty comment",
          description: "Unexpected `>` or `->`. Expected `-->` to close comments"
        },
        abruptDoctypePublicIdentifier: {
          reason: "Unexpected abruptly closed public identifier",
          description: "Unexpected `>`. Expected a closing `\"` or `'` after the public identifier"
        },
        abruptDoctypeSystemIdentifier: {
          reason: "Unexpected abruptly closed system identifier",
          description: "Unexpected `>`. Expected a closing `\"` or `'` after the identifier identifier"
        },
        absenceOfDigitsInNumericCharacterReference: {
          reason: "Unexpected non-digit at start of numeric character reference",
          description: "Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references"
        },
        cdataInHtmlContent: {
          reason: "Unexpected CDATA section in HTML",
          description: "Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead"
        },
        characterReferenceOutsideUnicodeRange: {
          reason: "Unexpected too big numeric character reference",
          description: "Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)"
        },
        closingOfElementWithOpenChildElements: {
          reason: "Unexpected closing tag with open child elements",
          description: "Unexpectedly closing tag. Expected other tags to be closed first",
          url: false
        },
        controlCharacterInInputStream: {
          reason: "Unexpected control character",
          description: "Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace"
        },
        controlCharacterReference: {
          reason: "Unexpected control character reference",
          description: "Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace"
        },
        disallowedContentInNoscriptInHead: {
          reason: "Disallowed content inside `<noscript>` in `<head>`",
          description: "Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`",
          url: false
        },
        duplicateAttribute: {
          reason: "Unexpected duplicate attribute",
          description: "Unexpectedly double attribute. Expected attributes to occur only once"
        },
        endTagWithAttributes: {
          reason: "Unexpected attribute on closing tag",
          description: "Unexpected attribute. Expected `>` instead"
        },
        endTagWithTrailingSolidus: {
          reason: "Unexpected slash at end of closing tag",
          description: "Unexpected `%c-1`. Expected `>` instead"
        },
        endTagWithoutMatchingOpenElement: {
          reason: "Unexpected unopened end tag",
          description: "Unexpected end tag. Expected no end tag or another end tag",
          url: false
        },
        eofBeforeTagName: {
          reason: "Unexpected end of file",
          description: "Unexpected end of file. Expected tag name instead"
        },
        eofInCdata: {
          reason: "Unexpected end of file in CDATA",
          description: "Unexpected end of file. Expected `]]>` to close the CDATA"
        },
        eofInComment: {
          reason: "Unexpected end of file in comment",
          description: "Unexpected end of file. Expected `-->` to close the comment"
        },
        eofInDoctype: {
          reason: "Unexpected end of file in doctype",
          description: "Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)"
        },
        eofInElementThatCanContainOnlyText: {
          reason: "Unexpected end of file in element that can only contain text",
          description: "Unexpected end of file. Expected text or a closing tag",
          url: false
        },
        eofInScriptHtmlCommentLikeText: {
          reason: "Unexpected end of file in comment inside script",
          description: "Unexpected end of file. Expected `-->` to close the comment"
        },
        eofInTag: {
          reason: "Unexpected end of file in tag",
          description: "Unexpected end of file. Expected `>` to close the tag"
        },
        incorrectlyClosedComment: {
          reason: "Incorrectly closed comment",
          description: "Unexpected `%c-1`. Expected `-->` to close the comment"
        },
        incorrectlyOpenedComment: {
          reason: "Incorrectly opened comment",
          description: "Unexpected `%c`. Expected `<!--` to open the comment"
        },
        invalidCharacterSequenceAfterDoctypeName: {
          reason: "Invalid sequence after doctype name",
          description: "Unexpected sequence at `%c`. Expected `public` or `system`"
        },
        invalidFirstCharacterOfTagName: {
          reason: "Invalid first character in tag name",
          description: "Unexpected `%c`. Expected an ASCII letter instead"
        },
        misplacedDoctype: {
          reason: "Misplaced doctype",
          description: "Unexpected doctype. Expected doctype before head",
          url: false
        },
        misplacedStartTagForHeadElement: {
          reason: "Misplaced `<head>` start tag",
          description: "Unexpected start tag `<head>`. Expected `<head>` directly after doctype",
          url: false
        },
        missingAttributeValue: {
          reason: "Missing attribute value",
          description: "Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead"
        },
        missingDoctype: {
          reason: "Missing doctype before other content",
          description: "Expected a `<!doctype html>` before anything else",
          url: false
        },
        missingDoctypeName: {
          reason: "Missing doctype name",
          description: "Unexpected doctype end at `%c`. Expected `html` instead"
        },
        missingDoctypePublicIdentifier: {
          reason: "Missing public identifier in doctype",
          description: "Unexpected `%c`. Expected identifier for `public` instead"
        },
        missingDoctypeSystemIdentifier: {
          reason: "Missing system identifier in doctype",
          description: 'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
        },
        missingEndTagName: {
          reason: "Missing name in end tag",
          description: "Unexpected `%c`. Expected an ASCII letter instead"
        },
        missingQuoteBeforeDoctypePublicIdentifier: {
          reason: "Missing quote before public identifier in doctype",
          description: "Unexpected `%c`. Expected `\"` or `'` instead"
        },
        missingQuoteBeforeDoctypeSystemIdentifier: {
          reason: "Missing quote before system identifier in doctype",
          description: "Unexpected `%c`. Expected `\"` or `'` instead"
        },
        missingSemicolonAfterCharacterReference: {
          reason: "Missing semicolon after character reference",
          description: "Unexpected `%c`. Expected `;` instead"
        },
        missingWhitespaceAfterDoctypePublicKeyword: {
          reason: "Missing whitespace after public identifier in doctype",
          description: "Unexpected `%c`. Expected ASCII whitespace instead"
        },
        missingWhitespaceAfterDoctypeSystemKeyword: {
          reason: "Missing whitespace after system identifier in doctype",
          description: "Unexpected `%c`. Expected ASCII whitespace instead"
        },
        missingWhitespaceBeforeDoctypeName: {
          reason: "Missing whitespace before doctype name",
          description: "Unexpected `%c`. Expected ASCII whitespace instead"
        },
        missingWhitespaceBetweenAttributes: {
          reason: "Missing whitespace between attributes",
          description: "Unexpected `%c`. Expected ASCII whitespace instead"
        },
        missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
          reason: "Missing whitespace between public and system identifiers in doctype",
          description: "Unexpected `%c`. Expected ASCII whitespace instead"
        },
        nestedComment: {
          reason: "Unexpected nested comment",
          description: "Unexpected `<!--`. Expected `-->`"
        },
        nestedNoscriptInHead: {
          reason: "Unexpected nested `<noscript>` in `<head>`",
          description: "Unexpected `<noscript>`. Expected a closing tag or a meta element",
          url: false
        },
        nonConformingDoctype: {
          reason: "Unexpected non-conforming doctype declaration",
          description: 'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
          url: false
        },
        nonVoidHtmlElementStartTagWithTrailingSolidus: {
          reason: "Unexpected trailing slash on start tag of non-void element",
          description: "Unexpected `/`. Expected `>` instead"
        },
        noncharacterCharacterReference: {
          reason: "Unexpected noncharacter code point referenced by character reference",
          description: "Unexpected code point. Do not use noncharacters in HTML"
        },
        noncharacterInInputStream: {
          reason: "Unexpected noncharacter character",
          description: "Unexpected code point `%x`. Do not use noncharacters in HTML"
        },
        nullCharacterReference: {
          reason: "Unexpected NULL character referenced by character reference",
          description: "Unexpected code point. Do not use NULL characters in HTML"
        },
        openElementsLeftAfterEof: {
          reason: "Unexpected end of file",
          description: "Unexpected end of file. Expected closing tag instead",
          url: false
        },
        surrogateCharacterReference: {
          reason: "Unexpected surrogate character referenced by character reference",
          description: "Unexpected code point. Do not use lone surrogate characters in HTML"
        },
        surrogateInInputStream: {
          reason: "Unexpected surrogate character",
          description: "Unexpected code point `%x`. Do not use lone surrogate characters in HTML"
        },
        unexpectedCharacterAfterDoctypeSystemIdentifier: {
          reason: "Invalid character after system identifier in doctype",
          description: "Unexpected character at `%c`. Expected `>`"
        },
        unexpectedCharacterInAttributeName: {
          reason: "Unexpected character in attribute name",
          description: "Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter"
        },
        unexpectedCharacterInUnquotedAttributeValue: {
          reason: "Unexpected character in unquoted attribute value",
          description: "Unexpected `%c`. Quote the attribute value to include it"
        },
        unexpectedEqualsSignBeforeAttributeName: {
          reason: "Unexpected equals sign before attribute name ",
          description: "Unexpected `%c`. Add an attribute name before it"
        },
        unexpectedNullCharacter: {
          reason: "Unexpected NULL character",
          description: "Unexpected code point `%x`. Do not use NULL characters in HTML"
        },
        unexpectedQuestionMarkInsteadOfTagName: {
          reason: "Unexpected question mark instead of tag name",
          description: "Unexpected `%c`. Expected an ASCII letter instead"
        },
        unexpectedSolidusInTag: {
          reason: "Unexpected slash in tag",
          description: "Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value"
        },
        unknownNamedCharacterReference: {
          reason: "Unexpected unknown named character reference",
          description: "Unexpected character reference. Expected known named character references"
        }
      };
    }
  });

  // node_modules/rehype-parse/index.js
  var require_rehype_parse = __commonJS({
    "node_modules/rehype-parse/index.js"(exports, module) {
      init_globals();
      var fromParse5 = require_hast_util_from_parse5();
      var Parser5 = require_parser();
      var errors = require_errors();
      var base = "https://html.spec.whatwg.org/multipage/parsing.html#parse-error-";
      var fatalities = { 2: true, 1: false, 0: null };
      module.exports = parse;
      function parse(options) {
        var settings = Object.assign({}, options, this.data("settings"));
        var position = settings.position;
        position = typeof position === "boolean" ? position : true;
        this.Parser = parser;
        function parser(doc, file) {
          var fn = settings.fragment ? "parseFragment" : "parse";
          var onParseError = settings.emitParseErrors ? onerror : null;
          var parse5 = new Parser5({
            sourceCodeLocationInfo: position,
            onParseError,
            scriptingEnabled: false
          });
          return fromParse5(parse5[fn](doc), {
            space: settings.space,
            file,
            verbose: settings.verbose
          });
          function onerror(err) {
            var code2 = err.code;
            var name = camelcase(code2);
            var setting = settings[name];
            var config = setting === void 0 || setting === null ? true : setting;
            var level = typeof config === "number" ? config : config ? 1 : 0;
            var start = {
              line: err.startLine,
              column: err.startCol,
              offset: err.startOffset
            };
            var end = { line: err.endLine, column: err.endCol, offset: err.endOffset };
            var info;
            var message;
            if (level) {
              info = errors[name] || {
                reason: "",
                description: ""
              };
              message = file.message(format(info.reason), { start, end });
              message.source = "parse-error";
              message.ruleId = code2;
              message.fatal = fatalities[level];
              message.note = format(info.description);
              message.url = info.url === false ? null : base + code2;
            }
            function format(value) {
              return value.replace(/%c(?:-(\d+))?/g, char).replace(/%x/g, encodedChar);
            }
            function char($0, $1) {
              var offset = $1 ? -parseInt($1, 10) : 0;
              var char2 = doc.charAt(err.startOffset + offset);
              return char2 === "`" ? "` ` `" : char2;
            }
            function encodedChar() {
              var char2 = doc.charCodeAt(err.startOffset).toString(16).toUpperCase();
              return "0x" + char2;
            }
          }
        }
      }
      function camelcase(value) {
        return value.replace(/-[a-z]/g, replacer);
      }
      function replacer($0) {
        return $0.charAt(1).toUpperCase();
      }
    }
  });

  // node_modules/hast-util-is-element/index.js
  var require_hast_util_is_element = __commonJS({
    "node_modules/hast-util-is-element/index.js"(exports, module) {
      init_globals();
      var convert = require_convert();
      module.exports = isElement;
      isElement.convert = convert;
      function isElement(node, test, index, parent, context) {
        var hasParent = parent !== null && parent !== void 0;
        var hasIndex = index !== null && index !== void 0;
        var check = convert(test);
        if (hasIndex && (typeof index !== "number" || index < 0 || index === Infinity)) {
          throw new Error("Expected positive finite index for child node");
        }
        if (hasParent && (!parent.type || !parent.children)) {
          throw new Error("Expected parent node");
        }
        if (!node || !node.type || typeof node.type !== "string") {
          return false;
        }
        if (hasParent !== hasIndex) {
          throw new Error("Expected both parent and index");
        }
        return check.call(context, node, index, parent);
      }
    }
  });

  // node_modules/hast-util-embedded/index.js
  var require_hast_util_embedded = __commonJS({
    "node_modules/hast-util-embedded/index.js"(exports, module) {
      init_globals();
      var convert = require_convert();
      module.exports = convert([
        "audio",
        "canvas",
        "embed",
        "iframe",
        "img",
        "math",
        "object",
        "picture",
        "svg",
        "video"
      ]);
    }
  });

  // node_modules/hast-util-whitespace/index.js
  var require_hast_util_whitespace = __commonJS({
    "node_modules/hast-util-whitespace/index.js"(exports, module) {
      init_globals();
      module.exports = interElementWhiteSpace;
      var re2 = /[ \t\n\f\r]/g;
      function interElementWhiteSpace(node) {
        var value;
        if (node && typeof node === "object" && node.type === "text") {
          value = node.value || "";
        } else if (typeof node === "string") {
          value = node;
        } else {
          return false;
        }
        return value.replace(re2, "") === "";
      }
    }
  });

  // node_modules/rehype-minify-whitespace/block.js
  var require_block = __commonJS({
    "node_modules/rehype-minify-whitespace/block.js"(exports, module) {
      init_globals();
      module.exports = [
        "br",
        "wbr",
        "li",
        "table",
        "caption",
        "colgroup",
        "col",
        "thead",
        "tbody",
        "tfoot",
        "tr",
        "td",
        "th",
        "summary",
        "optgroup",
        "option",
        "html",
        "head",
        "body",
        "address",
        "blockquote",
        "center",
        "dialog",
        "div",
        "figure",
        "figcaption",
        "footer",
        "form",
        "header",
        "hr",
        "legend",
        "listing",
        "main",
        "p",
        "plaintext",
        "pre",
        "xmp",
        "article",
        "aside",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "hgroup",
        "nav",
        "section",
        "dir",
        "dd",
        "dl",
        "dt",
        "menu",
        "ol",
        "ul",
        "li",
        "th",
        "td"
      ];
    }
  });

  // node_modules/rehype-minify-whitespace/content.js
  var require_content = __commonJS({
    "node_modules/rehype-minify-whitespace/content.js"(exports, module) {
      init_globals();
      module.exports = [
        "button",
        "input",
        "select",
        "textarea"
      ];
    }
  });

  // node_modules/rehype-minify-whitespace/skippable.js
  var require_skippable = __commonJS({
    "node_modules/rehype-minify-whitespace/skippable.js"(exports, module) {
      init_globals();
      module.exports = [
        "area",
        "base",
        "basefont",
        "dialog",
        "datalist",
        "head",
        "link",
        "meta",
        "noembed",
        "noframes",
        "param",
        "rp",
        "script",
        "source",
        "style",
        "template",
        "track",
        "title"
      ];
    }
  });

  // node_modules/rehype-minify-whitespace/index.js
  var require_rehype_minify_whitespace = __commonJS({
    "node_modules/rehype-minify-whitespace/index.js"(exports, module) {
      init_globals();
      var is = require_hast_util_is_element();
      var embedded = require_hast_util_embedded();
      var convert = require_convert2();
      var whitespace = require_hast_util_whitespace();
      var blocks = require_block();
      var contents = require_content();
      var skippables = require_skippable();
      module.exports = minifyWhitespace;
      var ignorableNode = convert(["doctype", "comment"]);
      var parent = convert(["element", "root"]);
      var root = convert(["root"]);
      var element = convert(["element"]);
      var text = convert(["text"]);
      function minifyWhitespace(options) {
        var collapse = collapseFactory((options || {}).newlines ? replaceNewlines : replaceWhitespace);
        return transform;
        function transform(tree) {
          minify(tree, { collapse, whitespace: "normal" });
        }
      }
      function minify(node, options) {
        var settings;
        if (parent(node)) {
          settings = Object.assign({}, options);
          if (root(node) || blocklike(node)) {
            settings.before = true;
            settings.after = true;
          }
          settings.whitespace = inferWhiteSpace(node, options);
          return all(node, settings);
        }
        if (text(node)) {
          if (options.whitespace === "normal") {
            return minifyText(node, options);
          }
          if (options.whitespace === "nowrap") {
            node.value = options.collapse(node.value);
          }
        }
        return {
          remove: false,
          ignore: ignorableNode(node),
          stripAtStart: false
        };
      }
      function minifyText(node, options) {
        var value = options.collapse(node.value);
        var start = 0;
        var end = value.length;
        var result = { remove: false, ignore: false, stripAtStart: false };
        if (options.before && removable(value.charAt(0))) {
          start++;
        }
        if (start !== end && removable(value.charAt(end - 1))) {
          if (options.after) {
            end--;
          } else {
            result.stripAtStart = true;
          }
        }
        if (start === end) {
          result.remove = true;
        } else {
          node.value = value.slice(start, end);
        }
        return result;
      }
      function all(parent2, options) {
        var before = options.before;
        var after = options.after;
        var children = parent2.children;
        var length = children.length;
        var index = -1;
        var result;
        while (++index < length) {
          result = minify(children[index], Object.assign({}, options, {
            before,
            after: collapsableAfter(children, index, after)
          }));
          if (result.remove) {
            children.splice(index, 1);
            index--;
            length--;
          } else if (!result.ignore) {
            before = result.stripAtStart;
          }
          if (content(children[index])) {
            before = false;
          }
        }
        return {
          remove: false,
          ignore: false,
          stripAtStart: before || after
        };
      }
      function collapsableAfter(nodes, index, after) {
        var length = nodes.length;
        var node;
        var result;
        while (++index < length) {
          node = nodes[index];
          result = inferBoundary(node);
          if (result === void 0 && node.children && !skippable(node)) {
            result = collapsableAfter(node.children, -1);
          }
          if (typeof result === "boolean") {
            return result;
          }
        }
        return after;
      }
      function inferBoundary(node) {
        if (element(node)) {
          if (content(node)) {
            return false;
          }
          if (blocklike(node)) {
            return true;
          }
        } else if (text(node)) {
          if (!whitespace(node)) {
            return false;
          }
        } else if (!ignorableNode(node)) {
          return false;
        }
      }
      function content(node) {
        return embedded(node) || is(node, contents);
      }
      function blocklike(node) {
        return is(node, blocks);
      }
      function skippable(node) {
        var props = node.properties || {};
        return ignorableNode(node) || is(node, skippables) || props.hidden;
      }
      function removable(character) {
        return character === " " || character === "\n";
      }
      function replaceNewlines(value) {
        var match = /\r?\n|\r/.exec(value);
        return match ? match[0] : " ";
      }
      function replaceWhitespace() {
        return " ";
      }
      function collapseFactory(replace) {
        return collapse;
        function collapse(value) {
          return String(value).replace(/[\t\n\v\f\r ]+/g, replace);
        }
      }
      function inferWhiteSpace(node, options) {
        var props = node.properties || {};
        switch (node.tagName) {
          case "listing":
          case "plaintext":
          case "xmp":
            return "pre";
          case "nobr":
            return "nowrap";
          case "pre":
            return props.wrap ? "pre-wrap" : "pre";
          case "td":
          case "th":
            return props.noWrap ? "nowrap" : options.whitespace;
          case "textarea":
            return "pre-wrap";
          default:
            return options.whitespace;
        }
      }
    }
  });

  // node_modules/unist-util-visit-parents/color.browser.js
  var require_color_browser = __commonJS({
    "node_modules/unist-util-visit-parents/color.browser.js"(exports, module) {
      init_globals();
      module.exports = identity;
      function identity(d) {
        return d;
      }
    }
  });

  // node_modules/unist-util-visit-parents/index.js
  var require_unist_util_visit_parents = __commonJS({
    "node_modules/unist-util-visit-parents/index.js"(exports, module) {
      init_globals();
      module.exports = visitParents;
      var convert = require_convert2();
      var color = require_color_browser();
      var CONTINUE = true;
      var SKIP = "skip";
      var EXIT = false;
      visitParents.CONTINUE = CONTINUE;
      visitParents.SKIP = SKIP;
      visitParents.EXIT = EXIT;
      function visitParents(tree, test, visitor, reverse) {
        var step;
        var is;
        if (typeof test === "function" && typeof visitor !== "function") {
          reverse = visitor;
          visitor = test;
          test = null;
        }
        is = convert(test);
        step = reverse ? -1 : 1;
        factory(tree, null, [])();
        function factory(node, index, parents) {
          var value = typeof node === "object" && node !== null ? node : {};
          var name;
          if (typeof value.type === "string") {
            name = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : void 0;
            visit.displayName = "node (" + color(value.type + (name ? "<" + name + ">" : "")) + ")";
          }
          return visit;
          function visit() {
            var grandparents = parents.concat(node);
            var result = [];
            var subresult;
            var offset;
            if (!test || is(node, index, parents[parents.length - 1] || null)) {
              result = toResult(visitor(node, parents));
              if (result[0] === EXIT) {
                return result;
              }
            }
            if (node.children && result[0] !== SKIP) {
              offset = (reverse ? node.children.length : -1) + step;
              while (offset > -1 && offset < node.children.length) {
                subresult = factory(node.children[offset], offset, grandparents)();
                if (subresult[0] === EXIT) {
                  return subresult;
                }
                offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
              }
            }
            return result;
          }
        }
      }
      function toResult(value) {
        if (value !== null && typeof value === "object" && "length" in value) {
          return value;
        }
        if (typeof value === "number") {
          return [CONTINUE, value];
        }
        return [value];
      }
    }
  });

  // node_modules/unist-util-visit/index.js
  var require_unist_util_visit = __commonJS({
    "node_modules/unist-util-visit/index.js"(exports, module) {
      init_globals();
      module.exports = visit;
      var visitParents = require_unist_util_visit_parents();
      var CONTINUE = visitParents.CONTINUE;
      var SKIP = visitParents.SKIP;
      var EXIT = visitParents.EXIT;
      visit.CONTINUE = CONTINUE;
      visit.SKIP = SKIP;
      visit.EXIT = EXIT;
      function visit(tree, test, visitor, reverse) {
        if (typeof test === "function" && typeof visitor !== "function") {
          reverse = visitor;
          visitor = test;
          test = null;
        }
        visitParents(tree, test, overload, reverse);
        function overload(node, parents) {
          var parent = parents[parents.length - 1];
          var index = parent ? parent.children.indexOf(node) : null;
          return visitor(node, index, parent);
        }
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/all.js
  var require_all = __commonJS({
    "node_modules/hast-util-to-mdast/lib/all.js"(exports, module) {
      init_globals();
      module.exports = all;
      var one = require_one();
      function all(h, parent) {
        var nodes = parent.children || [];
        var values = [];
        var index = -1;
        var result;
        while (++index < nodes.length) {
          result = one(h, nodes[index], parent);
          if (result) {
            values = values.concat(result);
          }
        }
        return values;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/own.js
  var require_own = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/own.js"(exports, module) {
      init_globals();
      module.exports = {}.hasOwnProperty;
    }
  });

  // node_modules/hast-util-to-mdast/lib/one.js
  var require_one = __commonJS({
    "node_modules/hast-util-to-mdast/lib/one.js"(exports, module) {
      init_globals();
      module.exports = one;
      var all = require_all();
      var own = require_own();
      var wrapText = require_wrap_text();
      function one(h, node, parent) {
        var fn;
        if (node.type === "element") {
          if (node.properties && node.properties.dataMdast === "ignore") {
            return;
          }
          if (own.call(h.handlers, node.tagName)) {
            fn = h.handlers[node.tagName];
          }
        } else if (own.call(h.handlers, node.type)) {
          fn = h.handlers[node.type];
        }
        return (typeof fn === "function" ? fn : unknown)(h, node, parent);
      }
      function unknown(h, node) {
        if (node.value) {
          return h(node, "text", wrapText(h, node.value));
        }
        return all(h, node);
      }
    }
  });

  // node_modules/mdast-util-phrasing/index.js
  var require_mdast_util_phrasing = __commonJS({
    "node_modules/mdast-util-phrasing/index.js"(exports, module) {
      init_globals();
      var convert = require_convert2();
      var isPhrasing = convert([
        "break",
        "delete",
        "emphasis",
        "footnote",
        "footnoteReference",
        "image",
        "imageReference",
        "inlineCode",
        "link",
        "linkReference",
        "strong",
        "text"
      ]);
      isPhrasing.displayName = "isPhrasing";
      module.exports = isPhrasing;
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/shallow.js
  var require_shallow = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/shallow.js"(exports, module) {
      init_globals();
      module.exports = shallow;
      var own = require_own();
      function shallow(node) {
        var copy = {};
        var key;
        for (key in node) {
          if (own.call(node, key) && key !== "children") {
            copy[key] = node[key];
          }
        }
        return copy;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/wrap.js
  var require_wrap2 = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/wrap.js"(exports, module) {
      init_globals();
      module.exports = wrap;
      wrap.needed = needed;
      var extend = require_extend();
      var phrasing = require_mdast_util_phrasing();
      var shallow = require_shallow();
      function wrap(nodes) {
        return runs(nodes, onphrasing);
        function onphrasing(nodes2) {
          var head = nodes2[0];
          if (nodes2.length === 1 && head.type === "text" && (head.value === " " || head.value === "\n")) {
            return [];
          }
          return { type: "paragraph", children: nodes2 };
        }
      }
      function runs(nodes, onphrasing, onnonphrasing) {
        var nonphrasing = onnonphrasing || identity;
        var flattened = flatten(nodes);
        var result = [];
        var index = -1;
        var node;
        var queue;
        while (++index < flattened.length) {
          node = flattened[index];
          if (phrasing(node)) {
            if (!queue)
              queue = [];
            queue.push(node);
          } else {
            if (queue) {
              result = result.concat(onphrasing(queue));
              queue = void 0;
            }
            result = result.concat(nonphrasing(node));
          }
        }
        if (queue) {
          result = result.concat(onphrasing(queue));
        }
        return result;
      }
      function flatten(nodes) {
        var flattened = [];
        var index = -1;
        var node;
        while (++index < nodes.length) {
          node = nodes[index];
          if ((node.type === "delete" || node.type === "link") && needed(node.children)) {
            flattened = flattened.concat(split(node));
          } else {
            flattened.push(node);
          }
        }
        return flattened;
      }
      function needed(nodes) {
        var index = -1;
        var node;
        while (++index < nodes.length) {
          node = nodes[index];
          if (!phrasing(node) || node.children && needed(node.children)) {
            return true;
          }
        }
      }
      function split(node) {
        return runs(node.children, onphrasing, onnonphrasing);
        function onnonphrasing(child) {
          var parent = extend(true, {}, shallow(node));
          var copy = shallow(child);
          copy.children = [parent];
          parent.children = child.children;
          return copy;
        }
        function onphrasing(nodes) {
          var parent = extend(true, {}, shallow(node));
          parent.children = nodes;
          return parent;
        }
      }
      function identity(n) {
        return n;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/wrap-children.js
  var require_wrap_children = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/wrap-children.js"(exports, module) {
      init_globals();
      module.exports = wrapped;
      var all = require_all();
      var wrap = require_wrap2();
      function wrapped(h, node) {
        return wrap(all(h, node));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/base.js
  var require_base = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/base.js"(exports, module) {
      init_globals();
      module.exports = base;
      function base(h, node) {
        if (!h.baseFound) {
          h.frozenBaseUrl = node.properties.href;
          h.baseFound = true;
        }
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/blockquote.js
  var require_blockquote = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/blockquote.js"(exports, module) {
      init_globals();
      module.exports = blockquote;
      var wrapChildren = require_wrap_children();
      function blockquote(h, node) {
        return h(node, "blockquote", wrapChildren(h, node));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/break.js
  var require_break = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/break.js"(exports, module) {
      init_globals();
      module.exports = br;
      function br(h, node) {
        return h.wrapText ? h(node, "break") : h(node, "text", " ");
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/code.js
  var require_code = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/code.js"(exports, module) {
      init_globals();
      module.exports = code2;
      var has = require_hast_util_has_property();
      var convert = require_convert();
      var toText = require_hast_util_to_text();
      var trim = require_trim_trailing_lines();
      var wrapText = require_wrap_text();
      var prefix = "language-";
      var pre = convert("pre");
      var isCode = convert("code");
      function code2(h, node) {
        var children = node.children;
        var index = -1;
        var classList;
        var lang;
        if (pre(node)) {
          while (++index < children.length) {
            if (isCode(children[index]) && has(children[index], "className")) {
              classList = children[index].properties.className;
              break;
            }
          }
        }
        if (classList) {
          index = -1;
          while (++index < classList.length) {
            if (classList[index].slice(0, prefix.length) === prefix) {
              lang = classList[index].slice(prefix.length);
              break;
            }
          }
        }
        return h(node, "code", { lang: lang || null, meta: null }, trim(wrapText(h, toText(node))));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/comment.js
  var require_comment = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/comment.js"(exports, module) {
      init_globals();
      module.exports = comment;
      var wrapText = require_wrap_text();
      function comment(h, node) {
        return h(node, "html", "<!--" + wrapText(h, node.value) + "-->");
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/delete.js
  var require_delete = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/delete.js"(exports, module) {
      init_globals();
      module.exports = del;
      var all = require_all();
      function del(h, node) {
        return h(node, "delete", all(h, node));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/list-items-spread.js
  var require_list_items_spread = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/list-items-spread.js"(exports, module) {
      init_globals();
      module.exports = spread;
      function spread(children) {
        var index = -1;
        if (children.length > 1) {
          while (++index < children.length) {
            if (children[index].spread) {
              return true;
            }
          }
        }
        return false;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js
  var require_wrap_list_items = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js"(exports, module) {
      init_globals();
      module.exports = wrapListItems;
      var all = require_all();
      function wrapListItems(h, node) {
        var children = all(h, node);
        var index = -1;
        while (++index < children.length) {
          if (children[index].type !== "listItem") {
            children[index] = {
              type: "listItem",
              spread: false,
              checked: null,
              children: [children[index]]
            };
          }
        }
        return children;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/dl.js
  var require_dl = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/dl.js"(exports, module) {
      init_globals();
      module.exports = dl;
      var convert = require_convert();
      var spread = require_list_items_spread();
      var wrapListItems = require_wrap_list_items();
      var div = convert("div");
      var dt = convert("dt");
      var dd = convert("dd");
      function dl(h, node) {
        var children = node.children;
        var index = -1;
        var clean2 = [];
        var groups = [];
        var group = { titles: [], definitions: [] };
        var content;
        var child;
        while (++index < children.length) {
          child = children[index];
          clean2 = clean2.concat(div(child) ? child.children : child);
        }
        index = -1;
        while (++index < clean2.length) {
          child = clean2[index];
          if (dt(child)) {
            if (dd(clean2[index - 1])) {
              groups.push(group);
              group = { titles: [], definitions: [] };
            }
            group.titles.push(child);
          } else {
            group.definitions.push(child);
          }
        }
        groups.push(group);
        index = -1;
        content = [];
        while (++index < groups.length) {
          group = handle(h, groups[index].titles).concat(handle(h, groups[index].definitions));
          if (group.length) {
            content.push({
              type: "listItem",
              spread: group.length > 1,
              checked: null,
              children: group
            });
          }
        }
        if (content.length) {
          return h(node, "list", { ordered: false, start: null, spread: spread(content) }, content);
        }
      }
      function handle(h, children) {
        var nodes = wrapListItems(h, { children });
        if (!nodes.length) {
          return nodes;
        }
        if (nodes.length === 1) {
          return nodes[0].children;
        }
        return [
          {
            type: "list",
            ordered: false,
            start: null,
            spread: spread(nodes),
            children: nodes
          }
        ];
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/emphasis.js
  var require_emphasis = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/emphasis.js"(exports, module) {
      init_globals();
      module.exports = emphasis;
      var all = require_all();
      function emphasis(h, node) {
        return h(node, "emphasis", all(h, node));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/heading.js
  var require_heading = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/heading.js"(exports, module) {
      init_globals();
      module.exports = heading;
      var all = require_all();
      function heading(h, node) {
        var depth = Number(node.tagName.charAt(1)) || 1;
        var wrap = h.wrapText;
        var result;
        h.wrapText = false;
        result = h(node, "heading", { depth }, all(h, node));
        h.wrapText = wrap;
        return result;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/resolve.js
  var require_resolve = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/resolve.js"(exports, module) {
      init_globals();
      module.exports = resolve;
      function resolve(h, url2) {
        if (url2 === null || url2 === void 0) {
          return "";
        }
        if (h.frozenBaseUrl && typeof URL !== "undefined") {
          return String(new URL(url2, h.frozenBaseUrl));
        }
        return url2;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/iframe.js
  var require_iframe = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/iframe.js"(exports, module) {
      init_globals();
      module.exports = iframe;
      var resolve = require_resolve();
      var wrapText = require_wrap_text();
      function iframe(h, node) {
        var src = node.properties.src;
        var title2 = node.properties.title;
        if (src && title2) {
          return {
            type: "link",
            title: null,
            url: resolve(h, src),
            children: [{ type: "text", value: wrapText(h, title2) }]
          };
        }
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/image.js
  var require_image = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/image.js"(exports, module) {
      init_globals();
      module.exports = image;
      var resolve = require_resolve();
      function image(h, node) {
        return h(node, "image", {
          url: resolve(h, node.properties.src),
          title: node.properties.title || null,
          alt: node.properties.alt || ""
        });
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/inline-code.js
  var require_inline_code = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/inline-code.js"(exports, module) {
      init_globals();
      module.exports = inlineCode;
      var toText = require_hast_util_to_text();
      var wrapText = require_wrap_text();
      function inlineCode(h, node) {
        return h(node, "inlineCode", wrapText(h, toText(node)));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/util/find-selected-options.js
  var require_find_selected_options = __commonJS({
    "node_modules/hast-util-to-mdast/lib/util/find-selected-options.js"(exports, module) {
      init_globals();
      var has = require_hast_util_has_property();
      var convert = require_convert();
      var toText = require_hast_util_to_text();
      var wrapText = require_wrap_text();
      module.exports = findSelectedOptions;
      var option = convert("option");
      function findSelectedOptions(h, node, properties) {
        var props = properties || node.properties;
        var options = findOptions(node);
        var size = Math.min(parseInt(props.size, 10), 0) || (props.multiple ? 4 : 1);
        var index = -1;
        var selectedOptions = [];
        var values = [];
        var option2;
        var list;
        var content;
        var label2;
        var value;
        while (++index < options.length) {
          if (has(options[index], "selected")) {
            selectedOptions.push(options[index]);
          }
        }
        list = selectedOptions.length ? selectedOptions : options;
        options = list.slice(0, size);
        index = -1;
        while (++index < options.length) {
          option2 = options[index];
          content = wrapText(h, toText(option2));
          label2 = content || option2.properties.label;
          value = option2.properties.value || content;
          values.push([value, label2 === value ? null : label2]);
        }
        return values;
      }
      function findOptions(node) {
        var children = node.children;
        var index = -1;
        var results = [];
        var child;
        while (++index < children.length) {
          child = children[index];
          if (option(child)) {
            if (!has(child, "disabled")) {
              results.push(child);
            }
          } else if (child.children) {
            results = results.concat(findOptions(child));
          }
        }
        return results;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/input.js
  var require_input = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/input.js"(exports, module) {
      init_globals();
      module.exports = input;
      var convert = require_convert();
      var repeat = require_repeat_string();
      var findSelectedOptions = require_find_selected_options();
      var own = require_own();
      var resolve = require_resolve();
      var wrapText = require_wrap_text();
      var datalist = convert("datalist");
      function input(h, node) {
        var props = node.properties;
        var value = props.value || props.placeholder;
        var results = [];
        var values = [];
        var index = -1;
        var list;
        if (props.disabled || props.type === "hidden" || props.type === "file") {
          return;
        }
        if (props.type === "checkbox" || props.type === "radio") {
          return h(node, "text", wrapText(h, h[props.checked ? "checked" : "unchecked"]));
        }
        if (props.type === "image") {
          return props.alt || value ? h(node, "image", {
            url: resolve(h, props.src),
            title: props.title && wrapText(h, props.title) || null,
            alt: wrapText(h, props.alt || value)
          }) : [];
        }
        if (value) {
          values = [[value]];
        } else if (props.type !== "password" && props.type !== "file" && props.type !== "submit" && props.type !== "reset" && props.type !== "button" && props.list) {
          list = String(props.list).toUpperCase();
          if (own.call(h.nodeById, list) && datalist(h.nodeById[list])) {
            values = findSelectedOptions(h, h.nodeById[list], props);
          }
        }
        if (!values.length) {
          return;
        }
        if (props.type === "password") {
          values[0] = [repeat("\u2022", values[0][0].length)];
        }
        if (props.type === "url" || props.type === "email") {
          while (++index < values.length) {
            value = resolve(h, values[index][0]);
            results.push(h(node, "link", {
              title: null,
              url: wrapText(h, props.type === "email" ? "mailto:" + value : value)
            }, [{ type: "text", value: wrapText(h, values[index][1] || value) }]));
            if (index !== values.length - 1) {
              results.push({ type: "text", value: ", " });
            }
          }
          return results;
        }
        while (++index < values.length) {
          results.push(values[index][1] ? values[index][1] + " (" + values[index][0] + ")" : values[index][0]);
        }
        return h(node, "text", wrapText(h, results.join(", ")));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/link.js
  var require_link = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/link.js"(exports, module) {
      init_globals();
      module.exports = link;
      var all = require_all();
      var resolve = require_resolve();
      function link(h, node) {
        return h(node, "link", {
          title: node.properties.title || null,
          url: resolve(h, node.properties.href)
        }, all(h, node));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/list-item.js
  var require_list_item = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/list-item.js"(exports, module) {
      init_globals();
      module.exports = listItem;
      var convert = require_convert();
      var shallow = require_shallow();
      var wrapChildren = require_wrap_children();
      var p = convert("p");
      var input = convert("input");
      function listItem(h, node) {
        var head = node.children[0];
        var checked = null;
        var content;
        var checkbox;
        var clone;
        var headClone;
        if (p(head)) {
          checkbox = head.children[0];
          if (input(checkbox) && (checkbox.properties.type === "checkbox" || checkbox.properties.type === "radio")) {
            checked = Boolean(checkbox.properties.checked);
            headClone = shallow(head);
            headClone.children = head.children.slice(1);
            clone = shallow(node);
            clone.children = [headClone].concat(node.children.slice(1));
          }
        }
        content = wrapChildren(h, clone || node);
        return h(node, "listItem", { spread: content.length > 1, checked }, content);
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/list.js
  var require_list = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/list.js"(exports, module) {
      init_globals();
      module.exports = list;
      var convert = require_convert();
      var has = require_hast_util_has_property();
      var spread = require_list_items_spread();
      var wrapListItems = require_wrap_list_items();
      var ol = convert("ol");
      function list(h, node) {
        var ordered = ol(node);
        var children = wrapListItems(h, node);
        var start = null;
        if (ordered) {
          start = has(node, "start") ? node.properties.start : 1;
        }
        return h(node, "list", { ordered, start, spread: spread(children) }, children);
      }
    }
  });

  // node_modules/hast-util-to-mdast/node_modules/mdast-util-to-string/index.js
  var require_mdast_util_to_string = __commonJS({
    "node_modules/hast-util-to-mdast/node_modules/mdast-util-to-string/index.js"(exports, module) {
      init_globals();
      module.exports = toString;
      function toString(node) {
        return node && (node.value || node.alt || node.title || "children" in node && all(node.children) || "length" in node && all(node)) || "";
      }
      function all(values) {
        var result = [];
        var length = values.length;
        var index = -1;
        while (++index < length) {
          result[index] = toString(values[index]);
        }
        return result.join("");
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/media.js
  var require_media = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/media.js"(exports, module) {
      init_globals();
      module.exports = media;
      var convert = require_convert();
      var toString = require_mdast_util_to_string();
      var visit = require_unist_util_visit();
      var all = require_all();
      var resolve = require_resolve();
      var wrap = require_wrap2();
      var source2 = convert("source");
      var video = convert("video");
      function media(h, node) {
        var nodes = all(h, node);
        var poster = video(node) && node.properties.poster;
        var src = node.properties.src;
        var index = -1;
        var linkInFallbackContent;
        visit({ type: "root", children: nodes }, "link", findLink);
        if (linkInFallbackContent || wrap.needed(nodes)) {
          return nodes;
        }
        while (!src && ++index < node.children.length) {
          if (source2(node.children[index])) {
            src = node.children[index].properties.src;
          }
        }
        if (poster) {
          nodes = [
            {
              type: "image",
              title: null,
              url: resolve(h, poster),
              alt: toString({ children: nodes })
            }
          ];
        }
        return {
          type: "link",
          title: node.properties.title || null,
          url: resolve(h, src),
          children: nodes
        };
        function findLink() {
          linkInFallbackContent = true;
          return visit.EXIT;
        }
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/paragraph.js
  var require_paragraph = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/paragraph.js"(exports, module) {
      init_globals();
      module.exports = paragraph;
      var all = require_all();
      function paragraph(h, node) {
        var nodes = all(h, node);
        if (nodes.length) {
          return h(node, "paragraph", nodes);
        }
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/q.js
  var require_q = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/q.js"(exports, module) {
      init_globals();
      module.exports = q;
      var all = require_all();
      function q(h, node) {
        var expected = h.quotes[h.qNesting % h.quotes.length];
        var contents;
        h.qNesting++;
        contents = all(h, node);
        h.qNesting--;
        contents.unshift({ type: "text", value: expected.charAt(0) });
        contents.push({
          type: "text",
          value: expected.length > 1 ? expected.charAt(1) : expected
        });
        return contents;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/root.js
  var require_root = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/root.js"(exports, module) {
      init_globals();
      module.exports = root;
      var all = require_all();
      var wrap = require_wrap2();
      function root(h, node) {
        var children = all(h, node);
        if (h.document || wrap.needed(children)) {
          children = wrap(children);
        }
        return h(node, "root", children);
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/select.js
  var require_select = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/select.js"(exports, module) {
      init_globals();
      module.exports = select;
      var findSelectedOptions = require_find_selected_options();
      var wrapText = require_wrap_text();
      function select(h, node) {
        var values = findSelectedOptions(h, node);
        var index = -1;
        var results = [];
        var value;
        while (++index < values.length) {
          value = values[index];
          results.push(value[1] ? value[1] + " (" + value[0] + ")" : value[0]);
        }
        if (results.length) {
          return h(node, "text", wrapText(h, results.join(", ")));
        }
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/strong.js
  var require_strong = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/strong.js"(exports, module) {
      init_globals();
      module.exports = strong;
      var all = require_all();
      function strong(h, node) {
        return h(node, "strong", all(h, node));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/table-cell.js
  var require_table_cell = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/table-cell.js"(exports, module) {
      init_globals();
      module.exports = cell;
      var all = require_all();
      function cell(h, node) {
        var wrap = h.wrapText;
        var result;
        h.wrapText = false;
        result = h(node, "tableCell", all(h, node));
        h.wrapText = wrap;
        return result;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/table-row.js
  var require_table_row = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/table-row.js"(exports, module) {
      init_globals();
      module.exports = row;
      var all = require_all();
      function row(h, node) {
        return h(node, "tableRow", all(h, node));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/table.js
  var require_table = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/table.js"(exports, module) {
      init_globals();
      module.exports = table;
      var convert = require_convert();
      var visit = require_unist_util_visit();
      var all = require_all();
      var thead = convert("thead");
      var tr = convert("tr");
      var cell = convert(["th", "td"]);
      function table(h, node) {
        var info = inspect(node);
        return h(node, "table", { align: info.align }, toRows(all(h, node), info));
      }
      function inspect(node) {
        var headless = true;
        var align = [null];
        var rowIndex = 0;
        var cellIndex = 0;
        visit(node, "element", visitor);
        return { align, headless };
        function visitor(child) {
          if (thead(child)) {
            headless = false;
          } else if (tr(child)) {
            rowIndex++;
            cellIndex = 0;
          } else if (cell(child)) {
            if (!align[cellIndex]) {
              align[cellIndex] = child.properties.align || null;
            }
            if (headless && rowIndex < 2 && child.tagName === "th") {
              headless = false;
            }
            cellIndex++;
          }
        }
      }
      function toRows(children, info) {
        var nodes = [];
        var index = -1;
        var node;
        var queue;
        if (info.headless) {
          nodes.push({ type: "tableRow", children: [] });
        }
        while (++index < children.length) {
          node = children[index];
          if (node.type === "tableRow") {
            if (queue) {
              node.children = queue.concat(node.children);
              queue = void 0;
            }
            nodes.push(node);
          } else {
            if (!queue)
              queue = [];
            queue.push(node);
          }
        }
        if (queue) {
          node = nodes[nodes.length - 1];
          node.children = node.children.concat(queue);
        }
        index = -1;
        while (++index < nodes.length) {
          node = nodes[index];
          node.children = toCells(node.children, info);
        }
        return nodes;
      }
      function toCells(children, info) {
        var nodes = [];
        var index = -1;
        var node;
        var queue;
        while (++index < children.length) {
          node = children[index];
          if (node.type === "tableCell") {
            if (queue) {
              node.children = queue.concat(node.children);
              queue = void 0;
            }
            nodes.push(node);
          } else {
            if (!queue)
              queue = [];
            queue.push(node);
          }
        }
        if (queue) {
          node = nodes[nodes.length - 1];
          if (!node) {
            node = { type: "tableCell", children: [] };
            nodes.push(node);
          }
          node.children = node.children.concat(queue);
        }
        index = nodes.length - 1;
        while (++index < info.align.length) {
          nodes.push({ type: "tableCell", children: [] });
        }
        return nodes;
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/text.js
  var require_text = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/text.js"(exports, module) {
      init_globals();
      module.exports = text;
      var wrapText = require_wrap_text();
      function text(h, node) {
        return h(node, "text", wrapText(h, node.value));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/textarea.js
  var require_textarea = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/textarea.js"(exports, module) {
      init_globals();
      module.exports = textarea;
      var toText = require_hast_util_to_text();
      var wrapText = require_wrap_text();
      function textarea(h, node) {
        return h(node, "text", wrapText(h, toText(node)));
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/thematic-break.js
  var require_thematic_break = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/thematic-break.js"(exports, module) {
      init_globals();
      module.exports = thematicBreak;
      function thematicBreak(h, node) {
        return h(node, "thematicBreak");
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/wbr.js
  var require_wbr = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/wbr.js"(exports, module) {
      init_globals();
      module.exports = wbr;
      function wbr(h, node) {
        return h(node, "text", "\u200B");
      }
    }
  });

  // node_modules/hast-util-to-mdast/lib/handlers/index.js
  var require_handlers = __commonJS({
    "node_modules/hast-util-to-mdast/lib/handlers/index.js"(exports) {
      init_globals();
      var all = require_all();
      var wrapped = require_wrap_children();
      var base = require_base();
      var blockquote = require_blockquote();
      var br = require_break();
      var code2 = require_code();
      var comment = require_comment();
      var del = require_delete();
      var dl = require_dl();
      var emphasis = require_emphasis();
      var heading = require_heading();
      var iframe = require_iframe();
      var image = require_image();
      var inlineCode = require_inline_code();
      var input = require_input();
      var link = require_link();
      var listItem = require_list_item();
      var list = require_list();
      var media = require_media();
      var paragraph = require_paragraph();
      var quote = require_q();
      var root = require_root();
      var select = require_select();
      var strong = require_strong();
      var cell = require_table_cell();
      var row = require_table_row();
      var table = require_table();
      var text = require_text();
      var textarea = require_textarea();
      var thematicBreak = require_thematic_break();
      var wbr = require_wbr();
      exports.root = root;
      exports.text = text;
      exports.comment = comment;
      exports.doctype = ignore;
      exports.applet = ignore;
      exports.area = ignore;
      exports.basefont = ignore;
      exports.bgsound = ignore;
      exports.caption = ignore;
      exports.col = ignore;
      exports.colgroup = ignore;
      exports.command = ignore;
      exports.content = ignore;
      exports.datalist = ignore;
      exports.dialog = ignore;
      exports.element = ignore;
      exports.embed = ignore;
      exports.frame = ignore;
      exports.frameset = ignore;
      exports.isindex = ignore;
      exports.keygen = ignore;
      exports.link = ignore;
      exports.math = ignore;
      exports.menu = ignore;
      exports.menuitem = ignore;
      exports.meta = ignore;
      exports.nextid = ignore;
      exports.noembed = ignore;
      exports.noframes = ignore;
      exports.optgroup = ignore;
      exports.option = ignore;
      exports.param = ignore;
      exports.script = ignore;
      exports.shadow = ignore;
      exports.source = ignore;
      exports.spacer = ignore;
      exports.style = ignore;
      exports.svg = ignore;
      exports.template = ignore;
      exports.title = ignore;
      exports.track = ignore;
      exports.abbr = all;
      exports.acronym = all;
      exports.bdi = all;
      exports.bdo = all;
      exports.big = all;
      exports.blink = all;
      exports.button = all;
      exports.canvas = all;
      exports.cite = all;
      exports.data = all;
      exports.details = all;
      exports.dfn = all;
      exports.font = all;
      exports.ins = all;
      exports.label = all;
      exports.map = all;
      exports.marquee = all;
      exports.meter = all;
      exports.nobr = all;
      exports.noscript = all;
      exports.object = all;
      exports.output = all;
      exports.progress = all;
      exports.rb = all;
      exports.rbc = all;
      exports.rp = all;
      exports.rt = all;
      exports.rtc = all;
      exports.ruby = all;
      exports.slot = all;
      exports.small = all;
      exports.span = all;
      exports.sup = all;
      exports.sub = all;
      exports.tbody = all;
      exports.tfoot = all;
      exports.thead = all;
      exports.time = all;
      exports.address = wrapped;
      exports.article = wrapped;
      exports.aside = wrapped;
      exports.body = wrapped;
      exports.center = wrapped;
      exports.div = wrapped;
      exports.fieldset = wrapped;
      exports.figcaption = wrapped;
      exports.figure = wrapped;
      exports.form = wrapped;
      exports.footer = wrapped;
      exports.header = wrapped;
      exports.hgroup = wrapped;
      exports.html = wrapped;
      exports.legend = wrapped;
      exports.main = wrapped;
      exports.multicol = wrapped;
      exports.nav = wrapped;
      exports.picture = wrapped;
      exports.section = wrapped;
      exports.a = link;
      exports.audio = media;
      exports.b = strong;
      exports.base = base;
      exports.blockquote = blockquote;
      exports.br = br;
      exports.code = inlineCode;
      exports.dir = list;
      exports.dl = dl;
      exports.dt = listItem;
      exports.dd = listItem;
      exports.del = del;
      exports.em = emphasis;
      exports.h1 = heading;
      exports.h2 = heading;
      exports.h3 = heading;
      exports.h4 = heading;
      exports.h5 = heading;
      exports.h6 = heading;
      exports.hr = thematicBreak;
      exports.i = emphasis;
      exports.iframe = iframe;
      exports.img = image;
      exports.image = image;
      exports.input = input;
      exports.kbd = inlineCode;
      exports.li = listItem;
      exports.listing = code2;
      exports.mark = emphasis;
      exports.ol = list;
      exports.p = paragraph;
      exports.plaintext = code2;
      exports.pre = code2;
      exports.q = quote;
      exports.s = del;
      exports.samp = inlineCode;
      exports.select = select;
      exports.strike = del;
      exports.strong = strong;
      exports.summary = paragraph;
      exports.table = table;
      exports.td = cell;
      exports.textarea = textarea;
      exports.th = cell;
      exports.tr = row;
      exports.tt = inlineCode;
      exports.u = emphasis;
      exports.ul = list;
      exports.var = inlineCode;
      exports.video = media;
      exports.wbr = wbr;
      exports.xmp = code2;
      function ignore() {
      }
    }
  });

  // node_modules/hast-util-to-mdast/index.js
  var require_hast_util_to_mdast = __commonJS({
    "node_modules/hast-util-to-mdast/index.js"(exports, module) {
      init_globals();
      module.exports = toMdast;
      var has = require_hast_util_has_property();
      var minify = require_rehype_minify_whitespace();
      var convert = require_convert2();
      var visit = require_unist_util_visit();
      var xtend = require_immutable();
      var one = require_one();
      var handlers = require_handlers();
      var own = require_own();
      var block = convert(["heading", "paragraph", "root"]);
      function toMdast(tree, options) {
        var settings = options || {};
        var byId = {};
        var mdast;
        h.nodeById = byId;
        h.baseFound = false;
        h.frozenBaseUrl = null;
        h.wrapText = true;
        h.qNesting = 0;
        h.handlers = settings.handlers ? xtend(handlers, settings.handlers) : handlers;
        h.augment = augment;
        h.document = settings.document;
        h.checked = settings.checked || "[x]";
        h.unchecked = settings.unchecked || "[ ]";
        h.quotes = settings.quotes || ['"'];
        visit(tree, "element", onelement);
        minify({ newlines: settings.newlines === true })(tree);
        mdast = one(h, tree, null);
        visit(mdast, "text", ontext);
        return mdast;
        function h(node, type2, props, children) {
          var result;
          if (!children && (typeof props === "string" || typeof props === "object" && "length" in props)) {
            children = props;
            props = {};
          }
          result = xtend({ type: type2 }, props);
          if (typeof children === "string") {
            result.value = children;
          } else if (children) {
            result.children = children;
          }
          return augment(node, result);
        }
        function augment(left, right) {
          if (left.position) {
            right.position = left.position;
          }
          return right;
        }
        function onelement(node) {
          var id = has(node, "id") && String(node.properties.id).toUpperCase();
          if (id && !own.call(byId, id)) {
            byId[id] = node;
          }
        }
        function ontext(node, index, parent) {
          var previous = parent.children[index - 1];
          if (previous && node.type === previous.type) {
            previous.value += node.value;
            parent.children.splice(index, 1);
            if (previous.position && node.position) {
              previous.position.end = node.position.end;
            }
            return index - 1;
          }
          node.value = node.value.replace(/[\t ]*(\r?\n|\r)[\t ]*/, "$1");
          if (block(parent)) {
            if (!index) {
              node.value = node.value.replace(/^[\t ]+/, "");
            }
            if (index === parent.children.length - 1) {
              node.value = node.value.replace(/[\t ]+$/, "");
            }
          }
          if (!node.value) {
            parent.children.splice(index, 1);
            return index;
          }
        }
      }
    }
  });

  // node_modules/rehype-remark/index.js
  var require_rehype_remark = __commonJS({
    "node_modules/rehype-remark/index.js"(exports, module) {
      init_globals();
      var hast2mdast = require_hast_util_to_mdast();
      module.exports = function(destination, options) {
        var settings;
        var processor;
        if (typeof destination === "function") {
          processor = destination;
          settings = options || {};
        } else {
          settings = destination || {};
        }
        if (settings.document === void 0 || settings.document === null) {
          settings = Object.assign({}, settings, { document: true });
        }
        return processor ? bridge(processor, settings) : mutate(settings);
      };
      function bridge(destination, options) {
        return transformer;
        function transformer(node, file, next) {
          destination.run(hast2mdast(node, options), file, done);
          function done(err) {
            next(err);
          }
        }
      }
      function mutate(options) {
        return transformer;
        function transformer(node) {
          return hast2mdast(node, options);
        }
      }
    }
  });

  // node_modules/zwitch/index.js
  var require_zwitch = __commonJS({
    "node_modules/zwitch/index.js"(exports, module) {
      init_globals();
      module.exports = factory;
      var noop = Function.prototype;
      var own = {}.hasOwnProperty;
      function factory(key, options) {
        var settings = options || {};
        function one(value) {
          var fn = one.invalid;
          var handlers = one.handlers;
          if (value && own.call(value, key)) {
            fn = own.call(handlers, value[key]) ? handlers[value[key]] : one.unknown;
          }
          return (fn || noop).apply(this, arguments);
        }
        one.handlers = settings.handlers || {};
        one.invalid = settings.invalid;
        one.unknown = settings.unknown;
        return one;
      }
    }
  });

  // node_modules/direction/index.js
  var require_direction = __commonJS({
    "node_modules/direction/index.js"(exports, module) {
      init_globals();
      module.exports = direction;
      var RTL = "\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC";
      var LTR = "A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF";
      var rtl = new RegExp("^[^" + LTR + "]*[" + RTL + "]");
      var ltr = new RegExp("^[^" + RTL + "]*[" + LTR + "]");
      function direction(value) {
        value = String(value || "");
        if (rtl.test(value)) {
          return "rtl";
        }
        if (ltr.test(value)) {
          return "ltr";
        }
        return "neutral";
      }
    }
  });

  // node_modules/hast-util-to-string/index.js
  var require_hast_util_to_string = __commonJS({
    "node_modules/hast-util-to-string/index.js"(exports, module) {
      init_globals();
      module.exports = toString;
      function toString(node) {
        if ("children" in node) {
          return all(node);
        }
        return "value" in node ? node.value : "";
      }
      function one(node) {
        if (node.type === "text") {
          return node.value;
        }
        return node.children ? all(node) : "";
      }
      function all(node) {
        var children = node.children;
        var length = children.length;
        var index = -1;
        var result = [];
        while (++index < length) {
          result[index] = one(children[index]);
        }
        return result.join("");
      }
    }
  });

  // node_modules/hast-util-select/lib/enter-state.js
  var require_enter_state = __commonJS({
    "node_modules/hast-util-select/lib/enter-state.js"(exports, module) {
      init_globals();
      module.exports = enter;
      var direction = require_direction();
      var is = require_hast_util_is_element();
      var toString = require_hast_util_to_string();
      var svg = require_svg2();
      var visit = require_unist_util_visit();
      function enter(state, node) {
        var schema2 = state.schema;
        var language2 = state.language;
        var currentDirection = state.direction;
        var editableOrEditingHost = state.editableOrEditingHost;
        var dirInferred;
        var type2;
        var found;
        var lang;
        var dir;
        if (node.type === "element") {
          lang = node.properties.xmlLang || node.properties.lang;
          type2 = node.properties.type || "text";
          dir = dirProperty(node);
          if (lang != null) {
            state.language = lang;
            found = true;
          }
          if (schema2.space === "html") {
            if (node.properties.contentEditable === "true") {
              state.editableOrEditingHost = true;
              found = true;
            }
            if (is(node, "svg")) {
              state.schema = svg;
              found = true;
            }
            if (dir === "rtl") {
              dirInferred = dir;
            } else if (dir === "ltr" || dir !== "auto" && is(node, "html") || dir !== "auto" && is(node, "input") && type2 === "tel") {
              dirInferred = "ltr";
            } else if (dir === "auto" || is(node, "bdi")) {
              if (is(node, "textarea")) {
                dirInferred = dirBidi(toString(node));
              } else if (is(node, "input") && (type2 === "email" || type2 === "search" || type2 === "tel" || type2 === "text")) {
                dirInferred = node.properties.value ? dirBidi(node.properties.value) : "ltr";
              } else {
                visit(node, inferDirectionality);
              }
            }
            if (dirInferred) {
              state.direction = dirInferred;
              found = true;
            }
          } else if (state.editableOrEditingHost) {
            state.editableOrEditingHost = false;
            found = true;
          }
        }
        return found ? reset : noop;
        function reset() {
          state.schema = schema2;
          state.language = language2;
          state.direction = currentDirection;
          state.editableOrEditingHost = editableOrEditingHost;
        }
        function inferDirectionality(child) {
          if (child.type === "text") {
            dirInferred = dirBidi(child.value);
            return dirInferred ? visit.EXIT : null;
          }
          if (child !== node && (is(child, ["bdi", "script", "style", "textare"]) || dirProperty(child))) {
            return visit.SKIP;
          }
        }
      }
      function dirBidi(value) {
        var result = direction(value);
        return result === "neutral" ? null : result;
      }
      function dirProperty(node) {
        var value = typeof node.properties.dir === "string" ? node.properties.dir.toLowerCase() : null;
        return value === "auto" || value === "ltr" || value === "rtl" ? value : null;
      }
      function noop() {
      }
    }
  });

  // node_modules/hast-util-select/lib/nest.js
  var require_nest = __commonJS({
    "node_modules/hast-util-select/lib/nest.js"(exports, module) {
      init_globals();
      module.exports = match;
      var zwitch = require_zwitch();
      var enter = require_enter_state();
      var own = {}.hasOwnProperty;
      var handle = zwitch("nestingOperator", {
        unknown: unknownNesting,
        invalid: topScan,
        handlers: {
          null: descendant,
          ">": child,
          "+": nextSibling,
          "~": subsequentSibling
        }
      });
      function match(query, node, index, parent, state) {
        return handle(query, node, index, parent, state);
      }
      function unknownNesting(query) {
        throw new Error("Unexpected nesting `" + query.nestingOperator + "`");
      }
      function topScan(query, node, index, parent, state) {
        if (parent) {
          throw new Error("topScan is supposed to be called from the root node");
        }
        state.iterator.apply(null, arguments);
        if (!state.shallow)
          descendant.apply(null, arguments);
      }
      function descendant(query, node, index, parent, state) {
        var previous = state.iterator;
        state.iterator = iterator;
        child.apply(this, arguments);
        function iterator(_, node2, index2, parent2, state2) {
          state2.iterator = previous;
          previous.apply(this, arguments);
          state2.iterator = iterator;
          if (state2.one && state2.found)
            return;
          child.call(this, query, node2, index2, parent2, state2);
        }
      }
      function child(query, node, index, parent, state) {
        if (!node.children || !node.children.length)
          return;
        indexedSearch(query, node, state);
      }
      function nextSibling(query, node, index, parent, state) {
        if (!parent)
          return;
        indexedSearch(query, parent, state, index + 1, true);
      }
      function subsequentSibling(query, node, index, parent, state) {
        if (!parent)
          return;
        indexedSearch(query, parent, state, index + 1);
      }
      function indexedSearch(query, parent, state, from, firstElementOnly) {
        var handle2 = state.index ? delay : add;
        var children = parent.children;
        var types = {};
        var delayed = [];
        var elements = 0;
        var index = -1;
        if (from == null)
          from = 0;
        if (from >= children.length)
          return;
        if (state.index) {
          while (++index < from) {
            if (children[index].type === "element")
              count(children[index].tagName);
          }
        }
        index = from - 1;
        while (++index < children.length) {
          if (children[index].type === "element") {
            handle2(children[index], index);
            if (state.one && state.found)
              return;
            if (firstElementOnly)
              break;
          }
        }
        if (state.index) {
          index = -1;
          while (++index < delayed.length) {
            delayed[index]();
            if (state.one && state.found)
              return;
          }
        }
        function delay(node, childIndex) {
          var elementsBefore = elements;
          var elementsByTypeBefore = own.call(types, node.tagName) ? types[node.tagName] : 0;
          count(node.tagName);
          delayed.push(fn);
          function fn() {
            state.elementIndex = elementsBefore;
            state.typeIndex = elementsByTypeBefore;
            state.elementCount = elements;
            state.typeCount = types[node.tagName];
            add(node, childIndex);
          }
        }
        function add(node, childIndex) {
          var exit = enter(state, node);
          state.iterator(query, node, childIndex, parent, state);
          exit();
        }
        function count(name) {
          if (!own.call(types, name))
            types[name] = 0;
          elements++;
          types[name]++;
        }
      }
    }
  });

  // node_modules/bcp-47-match/index.js
  var require_bcp_47_match = __commonJS({
    "node_modules/bcp-47-match/index.js"(exports) {
      init_globals();
      exports.basicFilter = factory(basic, true);
      exports.extendedFilter = factory(extended, true);
      exports.lookup = factory(lookup);
      function basic(tag, range) {
        return range === "*" || tag === range || tag.indexOf(range + "-") > -1;
      }
      function extended(tag, range) {
        var left = tag.split("-");
        var right = range.split("-");
        var leftIndex = 0;
        var rightIndex = 0;
        if (right[rightIndex] !== "*" && left[leftIndex] !== right[rightIndex]) {
          return false;
        }
        leftIndex++;
        rightIndex++;
        while (rightIndex < right.length) {
          if (right[rightIndex] === "*") {
            rightIndex++;
            continue;
          }
          if (!left[leftIndex])
            return false;
          if (left[leftIndex] === right[rightIndex]) {
            leftIndex++;
            rightIndex++;
            continue;
          }
          if (left[leftIndex].length === 1)
            return false;
          leftIndex++;
        }
        return true;
      }
      function lookup(tag, range) {
        var right = range;
        var index;
        while (true) {
          if (right === "*" || tag === right)
            return true;
          index = right.lastIndexOf("-");
          if (index < 0)
            return false;
          if (right.charAt(index - 2) === "-")
            index -= 2;
          right = right.slice(0, index);
        }
      }
      function factory(check, filter) {
        return match;
        function match(tags, ranges) {
          var left = cast(tags, "tag");
          var right = cast(ranges == null ? "*" : ranges, "range");
          var matches = [];
          var rightIndex = -1;
          var range;
          var leftIndex;
          var next;
          while (++rightIndex < right.length) {
            range = right[rightIndex].toLowerCase();
            if (!filter && range === "*")
              continue;
            leftIndex = -1;
            next = [];
            while (++leftIndex < left.length) {
              if (check(left[leftIndex].toLowerCase(), range)) {
                if (!filter)
                  return left[leftIndex];
                matches.push(left[leftIndex]);
              } else {
                next.push(left[leftIndex]);
              }
            }
            left = next;
          }
          return filter ? matches : void 0;
        }
      }
      function cast(values, name) {
        var value = values && typeof values === "string" ? [values] : values;
        if (!value || typeof value !== "object" || !("length" in value)) {
          throw new Error("Invalid " + name + " `" + value + "`, expected non-empty string");
        }
        return value;
      }
    }
  });

  // node_modules/not/index.js
  var require_not = __commonJS({
    "node_modules/not/index.js"(exports, module) {
      init_globals();
      module.exports = not;
      function not(f) {
        return negation;
        function negation() {
          return !f.apply(this, arguments);
        }
      }
    }
  });

  // node_modules/hast-util-select/lib/pseudo.js
  var require_pseudo = __commonJS({
    "node_modules/hast-util-select/lib/pseudo.js"(exports, module) {
      init_globals();
      module.exports = match;
      var bcp47Match = require_bcp_47_match();
      var commaSeparated = require_comma_separated_tokens();
      var has = require_hast_util_has_property();
      var is = require_hast_util_is_element();
      var whitespace = require_hast_util_whitespace();
      var not = require_not();
      var zwitch = require_zwitch();
      var anything = require_any();
      var handle = zwitch("name", {
        unknown: unknownPseudo,
        invalid: invalidPseudo,
        handlers: {
          any: matches,
          "any-link": anyLink,
          blank,
          checked,
          dir,
          disabled,
          empty,
          enabled: not(disabled),
          "first-child": firstChild,
          "first-of-type": firstOfType,
          has: hasSelector,
          lang,
          "last-child": lastChild,
          "last-of-type": lastOfType,
          matches,
          not: not(matches),
          "nth-child": nthChild,
          "nth-last-child": nthLastChild,
          "nth-of-type": nthOfType,
          "nth-last-of-type": nthLastOfType,
          "only-child": onlyChild,
          "only-of-type": onlyOfType,
          optional: not(required),
          "read-only": not(readWrite),
          "read-write": readWrite,
          required,
          root,
          scope
        }
      });
      match.needsIndex = [
        "first-child",
        "first-of-type",
        "last-child",
        "last-of-type",
        "nth-child",
        "nth-last-child",
        "nth-of-type",
        "nth-last-of-type",
        "only-child",
        "only-of-type"
      ];
      function match(query, node, index, parent, state) {
        var pseudos = query.pseudos;
        var offset = -1;
        while (++offset < pseudos.length) {
          if (!handle(pseudos[offset], node, index, parent, state))
            return;
        }
        return true;
      }
      function matches(query, node, index, parent, state) {
        var shallow = state.shallow;
        var one = state.one;
        var result;
        state.shallow = true;
        state.one = true;
        result = anything(query.value, node, state)[0] === node;
        state.shallow = shallow;
        state.one = one;
        return result;
      }
      function anyLink(query, node) {
        return is(node, ["a", "area", "link"]) && has(node, "href");
      }
      function checked(query, node) {
        if (is(node, ["input", "menuitem"])) {
          return (node.properties.type === "checkbox" || node.properties.type === "radio") && has(node, "checked");
        }
        if (is(node, "option"))
          return has(node, "selected");
      }
      function dir(query, node, index, parent, state) {
        return state.direction === query.value;
      }
      function disabled(query, node) {
        return is(node, [
          "button",
          "input",
          "select",
          "textarea",
          "optgroup",
          "option",
          "menuitem",
          "fieldset"
        ]) && has(node, "disabled");
      }
      function required(query, node) {
        return is(node, ["input", "textarea", "select"]) && has(node, "required");
      }
      function readWrite(query, node, index, parent, state) {
        return is(node, ["input", "textarea"]) ? !has(node, "readOnly") && !has(node, "disabled") : state.editableOrEditingHost;
      }
      function root(query, node, index, parent, state) {
        return (!parent || parent.type === "root") && (state.schema.space === "html" || state.schema.space === "svg") && is(node, ["html", "svg"]);
      }
      function scope(query, node, index, parent, state) {
        return is(node) && state.scopeElements.indexOf(node) > -1;
      }
      function empty(query, node) {
        return !someChildren(node, check);
        function check(child) {
          return child.type === "element" || child.type === "text";
        }
      }
      function blank(query, node) {
        return !someChildren(node, check);
        function check(child) {
          return child.type === "element" || child.type === "text" && !whitespace(child);
        }
      }
      function firstChild(query, node, index, parent, state) {
        assertDeep(state, query);
        return state.elementIndex === 0;
      }
      function lang(query, node, index, parent, state) {
        return state.language !== "" && state.language != null && bcp47Match.extendedFilter(state.language, commaSeparated.parse(query.value)).length;
      }
      function lastChild(query, node, index, parent, state) {
        assertDeep(state, query);
        return state.elementIndex === state.elementCount - 1;
      }
      function onlyChild(query, node, index, parent, state) {
        assertDeep(state, query);
        return state.elementCount === 1;
      }
      function nthChild(query, node, index, parent, state) {
        assertDeep(state, query);
        return query.value(state.elementIndex);
      }
      function nthLastChild(query, node, index, parent, state) {
        assertDeep(state, query);
        return query.value(state.elementCount - state.elementIndex - 1);
      }
      function nthOfType(query, node, index, parent, state) {
        assertDeep(state, query);
        return query.value(state.typeIndex);
      }
      function nthLastOfType(query, node, index, parent, state) {
        assertDeep(state, query);
        return query.value(state.typeCount - 1 - state.typeIndex);
      }
      function firstOfType(query, node, index, parent, state) {
        assertDeep(state, query);
        return state.typeIndex === 0;
      }
      function lastOfType(query, node, index, parent, state) {
        assertDeep(state, query);
        return state.typeIndex === state.typeCount - 1;
      }
      function onlyOfType(query, node, index, parent, state) {
        assertDeep(state, query);
        return state.typeCount === 1;
      }
      function someChildren(node, check) {
        var children = node.children;
        var index = -1;
        while (++index < children.length) {
          if (check(children[index]))
            return true;
        }
      }
      function invalidPseudo() {
        throw new Error("Invalid pseudo-selector");
      }
      function unknownPseudo(query) {
        if (query.name) {
          throw new Error("Unknown pseudo-selector `" + query.name + "`");
        }
        throw new Error("Unexpected pseudo-element or empty pseudo-class");
      }
      function assertDeep(state, query) {
        if (state.shallow) {
          throw new Error("Cannot use `:" + query.name + "` without parent");
        }
      }
      function hasSelector(query, node, index, parent, state) {
        var shallow = state.shallow;
        var one = state.one;
        var scopeElements = state.scopeElements;
        var value = appendScope(query.value);
        var result;
        state.shallow = false;
        state.one = true;
        state.scopeElements = [node];
        result = anything(value, node, state)[0];
        state.shallow = shallow;
        state.one = one;
        state.scopeElements = scopeElements;
        return result;
      }
      function appendScope(value) {
        var selector = value.type === "ruleSet" ? { type: "selectors", selectors: [value] } : value;
        var index = -1;
        var rule;
        while (++index < selector.selectors.length) {
          rule = selector.selectors[index].rule;
          rule.nestingOperator = null;
          if (!rule.pseudos || rule.pseudos.length !== 1 || rule.pseudos[0].name !== "scope") {
            selector.selectors[index] = {
              type: "rule",
              rule,
              pseudos: [{ name: "scope" }]
            };
          }
        }
        return selector;
      }
    }
  });

  // node_modules/hast-util-select/lib/attribute.js
  var require_attribute = __commonJS({
    "node_modules/hast-util-select/lib/attribute.js"(exports, module) {
      init_globals();
      module.exports = match;
      var commas = require_comma_separated_tokens();
      var has = require_hast_util_has_property();
      var find = require_find();
      var spaces = require_space_separated_tokens();
      var zwitch = require_zwitch();
      var handle = zwitch("operator", {
        unknown: unknownOperator,
        invalid: exists,
        handlers: {
          "=": exact,
          "~=": spaceSeparatedList,
          "|=": exactOrPrefix,
          "^=": begins,
          "$=": ends,
          "*=": contains
        }
      });
      function match(query, node, schema2) {
        var attrs = query.attrs;
        var index = -1;
        while (++index < attrs.length) {
          if (!handle(attrs[index], node, find(schema2, attrs[index].name)))
            return;
        }
        return true;
      }
      function exists(query, node, info) {
        return has(node, info.property);
      }
      function exact(query, node, info) {
        return has(node, info.property) && normalizeValue(node.properties[info.property], info) === query.value;
      }
      function spaceSeparatedList(query, node, info) {
        var value = node.properties[info.property];
        return !info.commaSeparated && value && typeof value === "object" && value.indexOf(query.value) > -1 || has(node, info.property) && normalizeValue(value, info) === query.value;
      }
      function exactOrPrefix(query, node, info) {
        var value = normalizeValue(node.properties[info.property], info);
        return has(node, info.property) && (value === query.value || value.slice(0, query.value.length) === query.value && value.charAt(query.value.length) === "-");
      }
      function begins(query, node, info) {
        return has(node, info.property) && normalizeValue(node.properties[info.property], info).slice(0, query.value.length) === query.value;
      }
      function ends(query, node, info) {
        return has(node, info.property) && normalizeValue(node.properties[info.property], info).slice(-query.value.length) === query.value;
      }
      function contains(query, node, info) {
        return has(node, info.property) && normalizeValue(node.properties[info.property], info).indexOf(query.value) > -1;
      }
      function unknownOperator(query) {
        throw new Error("Unknown operator `" + query.operator + "`");
      }
      function normalizeValue(value, info) {
        if (typeof value === "number") {
          return String(value);
        }
        if (typeof value === "boolean") {
          return info.attribute;
        }
        if (typeof value === "object" && "length" in value) {
          return (info.commaSeparated ? commas.stringify : spaces.stringify)(value);
        }
        return value;
      }
    }
  });

  // node_modules/hast-util-select/lib/class-name.js
  var require_class_name = __commonJS({
    "node_modules/hast-util-select/lib/class-name.js"(exports, module) {
      init_globals();
      module.exports = match;
      function match(query, node) {
        var value = node.properties.className || [];
        var index = -1;
        while (++index < query.classNames.length) {
          if (value.indexOf(query.classNames[index]) < 0)
            return;
        }
        return true;
      }
    }
  });

  // node_modules/hast-util-select/lib/id.js
  var require_id = __commonJS({
    "node_modules/hast-util-select/lib/id.js"(exports, module) {
      init_globals();
      module.exports = match;
      function match(query, node) {
        return node.properties.id === query.id;
      }
    }
  });

  // node_modules/hast-util-select/lib/name.js
  var require_name = __commonJS({
    "node_modules/hast-util-select/lib/name.js"(exports, module) {
      init_globals();
      module.exports = match;
      function match(query, node) {
        return query.tagName === "*" || query.tagName === node.tagName;
      }
    }
  });

  // node_modules/hast-util-select/lib/test.js
  var require_test = __commonJS({
    "node_modules/hast-util-select/lib/test.js"(exports, module) {
      init_globals();
      module.exports = test;
      var attributes = require_attribute();
      var classNames = require_class_name();
      var id = require_id();
      var name = require_name();
      var pseudos = require_pseudo();
      function test(query, node, index, parent, state) {
        return node && node.type === "element" && (!query.tagName || name(query, node)) && (!query.classNames || classNames(query, node)) && (!query.id || id(query, node)) && (!query.attrs || attributes(query, node, state.schema)) && (!query.pseudos || pseudos(query, node, index, parent, state));
      }
    }
  });

  // node_modules/hast-util-select/lib/any.js
  var require_any = __commonJS({
    "node_modules/hast-util-select/lib/any.js"(exports, module) {
      init_globals();
      module.exports = match;
      var html2 = require_html2();
      var svg = require_svg2();
      var zwitch = require_zwitch();
      var enter = require_enter_state();
      var nest = require_nest();
      var pseudo = require_pseudo();
      var test = require_test();
      var type2 = zwitch("type", {
        unknown: unknownType,
        invalid: invalidType,
        handlers: {
          selectors,
          ruleSet,
          rule
        }
      });
      function match(query, node, state) {
        return query && node ? type2(query, node, state) : [];
      }
      function selectors(query, node, state) {
        var collect = collector(state.one);
        var index = -1;
        while (++index < query.selectors.length) {
          collect(ruleSet(query.selectors[index], node, state));
        }
        return collect.result;
      }
      function ruleSet(query, node, state) {
        return rule(query.rule, node, state);
      }
      function rule(query, tree, state) {
        var collect = collector(state.one);
        if (state.shallow && query.rule) {
          throw new Error("Expected selector without nesting");
        }
        nest(query, tree, 0, null, configure(query, {
          schema: state.space === "svg" ? svg : html2,
          language: null,
          direction: "ltr",
          editableOrEditingHost: false,
          scopeElements: tree.type === "root" ? tree.children : [tree],
          iterator,
          one: state.one,
          shallow: state.shallow
        }));
        return collect.result;
        function iterator(query2, node, index, parent, state2) {
          var exit = enter(state2, node);
          if (test(query2, node, index, parent, state2)) {
            if (query2.rule) {
              nest(query2.rule, node, index, parent, configure(query2.rule, state2));
            } else {
              collect(node);
              state2.found = true;
            }
          }
          exit();
        }
        function configure(query2, state2) {
          var pseudos = query2.pseudos || [];
          var index = -1;
          while (++index < pseudos.length) {
            if (pseudo.needsIndex.indexOf(pseudos[index].name) > -1) {
              state2.index = true;
              break;
            }
          }
          return state2;
        }
      }
      function unknownType(query) {
        throw new Error("Unknown type `" + query.type + "`");
      }
      function invalidType() {
        throw new Error("Invalid type");
      }
      function collector(one) {
        var result = [];
        var found;
        collect.result = result;
        return collect;
        function collect(source2) {
          var index = -1;
          if ("length" in source2) {
            while (++index < source2.length) {
              collectOne(source2[index]);
            }
          } else {
            collectOne(source2);
          }
          function collectOne(element) {
            if (one) {
              if (found)
                throw new Error("Cannot collect multiple nodes");
              found = true;
            }
            if (result.indexOf(element) < 0)
              result.push(element);
          }
        }
      }
    }
  });

  // node_modules/css-selector-parser/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/css-selector-parser/lib/utils.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function isIdentStart(c) {
        return c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c === "-" || c === "_";
      }
      exports.isIdentStart = isIdentStart;
      function isIdent(c) {
        return c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c >= "0" && c <= "9" || c === "-" || c === "_";
      }
      exports.isIdent = isIdent;
      function isHex(c) {
        return c >= "a" && c <= "f" || c >= "A" && c <= "F" || c >= "0" && c <= "9";
      }
      exports.isHex = isHex;
      function escapeIdentifier(s) {
        var len = s.length;
        var result = "";
        var i = 0;
        while (i < len) {
          var chr = s.charAt(i);
          if (exports.identSpecialChars[chr]) {
            result += "\\" + chr;
          } else {
            if (!(chr === "_" || chr === "-" || chr >= "A" && chr <= "Z" || chr >= "a" && chr <= "z" || i !== 0 && chr >= "0" && chr <= "9")) {
              var charCode = chr.charCodeAt(0);
              if ((charCode & 63488) === 55296) {
                var extraCharCode = s.charCodeAt(i++);
                if ((charCode & 64512) !== 55296 || (extraCharCode & 64512) !== 56320) {
                  throw Error("UCS-2(decode): illegal sequence");
                }
                charCode = ((charCode & 1023) << 10) + (extraCharCode & 1023) + 65536;
              }
              result += "\\" + charCode.toString(16) + " ";
            } else {
              result += chr;
            }
          }
          i++;
        }
        return result;
      }
      exports.escapeIdentifier = escapeIdentifier;
      function escapeStr(s) {
        var len = s.length;
        var result = "";
        var i = 0;
        var replacement;
        while (i < len) {
          var chr = s.charAt(i);
          if (chr === '"') {
            chr = '\\"';
          } else if (chr === "\\") {
            chr = "\\\\";
          } else if ((replacement = exports.strReplacementsRev[chr]) !== void 0) {
            chr = replacement;
          }
          result += chr;
          i++;
        }
        return '"' + result + '"';
      }
      exports.escapeStr = escapeStr;
      exports.identSpecialChars = {
        "!": true,
        '"': true,
        "#": true,
        "$": true,
        "%": true,
        "&": true,
        "'": true,
        "(": true,
        ")": true,
        "*": true,
        "+": true,
        ",": true,
        ".": true,
        "/": true,
        ";": true,
        "<": true,
        "=": true,
        ">": true,
        "?": true,
        "@": true,
        "[": true,
        "\\": true,
        "]": true,
        "^": true,
        "`": true,
        "{": true,
        "|": true,
        "}": true,
        "~": true
      };
      exports.strReplacementsRev = {
        "\n": "\\n",
        "\r": "\\r",
        "	": "\\t",
        "\f": "\\f",
        "\v": "\\v"
      };
      exports.singleQuoteEscapeChars = {
        n: "\n",
        r: "\r",
        t: "	",
        f: "\f",
        "\\": "\\",
        "'": "'"
      };
      exports.doubleQuotesEscapeChars = {
        n: "\n",
        r: "\r",
        t: "	",
        f: "\f",
        "\\": "\\",
        '"': '"'
      };
    }
  });

  // node_modules/css-selector-parser/lib/parser-context.js
  var require_parser_context = __commonJS({
    "node_modules/css-selector-parser/lib/parser-context.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_utils();
      function parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {
        var l = str.length;
        var chr = "";
        function getStr(quote, escapeTable) {
          var result = "";
          pos++;
          chr = str.charAt(pos);
          while (pos < l) {
            if (chr === quote) {
              pos++;
              return result;
            } else if (chr === "\\") {
              pos++;
              chr = str.charAt(pos);
              var esc = void 0;
              if (chr === quote) {
                result += quote;
              } else if ((esc = escapeTable[chr]) !== void 0) {
                result += esc;
              } else if (utils_1.isHex(chr)) {
                var hex = chr;
                pos++;
                chr = str.charAt(pos);
                while (utils_1.isHex(chr)) {
                  hex += chr;
                  pos++;
                  chr = str.charAt(pos);
                }
                if (chr === " ") {
                  pos++;
                  chr = str.charAt(pos);
                }
                result += String.fromCharCode(parseInt(hex, 16));
                continue;
              } else {
                result += chr;
              }
            } else {
              result += chr;
            }
            pos++;
            chr = str.charAt(pos);
          }
          return result;
        }
        function getIdent() {
          var result = "";
          chr = str.charAt(pos);
          while (pos < l) {
            if (utils_1.isIdent(chr)) {
              result += chr;
            } else if (chr === "\\") {
              pos++;
              if (pos >= l) {
                throw Error("Expected symbol but end of file reached.");
              }
              chr = str.charAt(pos);
              if (utils_1.identSpecialChars[chr]) {
                result += chr;
              } else if (utils_1.isHex(chr)) {
                var hex = chr;
                pos++;
                chr = str.charAt(pos);
                while (utils_1.isHex(chr)) {
                  hex += chr;
                  pos++;
                  chr = str.charAt(pos);
                }
                if (chr === " ") {
                  pos++;
                  chr = str.charAt(pos);
                }
                result += String.fromCharCode(parseInt(hex, 16));
                continue;
              } else {
                result += chr;
              }
            } else {
              return result;
            }
            pos++;
            chr = str.charAt(pos);
          }
          return result;
        }
        function skipWhitespace() {
          chr = str.charAt(pos);
          var result = false;
          while (chr === " " || chr === "	" || chr === "\n" || chr === "\r" || chr === "\f") {
            result = true;
            pos++;
            chr = str.charAt(pos);
          }
          return result;
        }
        function parse() {
          var res = parseSelector();
          if (pos < l) {
            throw Error('Rule expected but "' + str.charAt(pos) + '" found.');
          }
          return res;
        }
        function parseSelector() {
          var selector = parseSingleSelector();
          if (!selector) {
            return null;
          }
          var res = selector;
          chr = str.charAt(pos);
          while (chr === ",") {
            pos++;
            skipWhitespace();
            if (res.type !== "selectors") {
              res = {
                type: "selectors",
                selectors: [selector]
              };
            }
            selector = parseSingleSelector();
            if (!selector) {
              throw Error('Rule expected after ",".');
            }
            res.selectors.push(selector);
          }
          return res;
        }
        function parseSingleSelector() {
          skipWhitespace();
          var selector = {
            type: "ruleSet"
          };
          var rule = parseRule();
          if (!rule) {
            return null;
          }
          var currentRule = selector;
          while (rule) {
            rule.type = "rule";
            currentRule.rule = rule;
            currentRule = rule;
            skipWhitespace();
            chr = str.charAt(pos);
            if (pos >= l || chr === "," || chr === ")") {
              break;
            }
            if (ruleNestingOperators[chr]) {
              var op = chr;
              pos++;
              skipWhitespace();
              rule = parseRule();
              if (!rule) {
                throw Error('Rule expected after "' + op + '".');
              }
              rule.nestingOperator = op;
            } else {
              rule = parseRule();
              if (rule) {
                rule.nestingOperator = null;
              }
            }
          }
          return selector;
        }
        function parseRule() {
          var rule = null;
          while (pos < l) {
            chr = str.charAt(pos);
            if (chr === "*") {
              pos++;
              (rule = rule || {}).tagName = "*";
            } else if (utils_1.isIdentStart(chr) || chr === "\\") {
              (rule = rule || {}).tagName = getIdent();
            } else if (chr === ".") {
              pos++;
              rule = rule || {};
              (rule.classNames = rule.classNames || []).push(getIdent());
            } else if (chr === "#") {
              pos++;
              (rule = rule || {}).id = getIdent();
            } else if (chr === "[") {
              pos++;
              skipWhitespace();
              var attr = {
                name: getIdent()
              };
              skipWhitespace();
              if (chr === "]") {
                pos++;
              } else {
                var operator = "";
                if (attrEqualityMods[chr]) {
                  operator = chr;
                  pos++;
                  chr = str.charAt(pos);
                }
                if (pos >= l) {
                  throw Error('Expected "=" but end of file reached.');
                }
                if (chr !== "=") {
                  throw Error('Expected "=" but "' + chr + '" found.');
                }
                attr.operator = operator + "=";
                pos++;
                skipWhitespace();
                var attrValue = "";
                attr.valueType = "string";
                if (chr === '"') {
                  attrValue = getStr('"', utils_1.doubleQuotesEscapeChars);
                } else if (chr === "'") {
                  attrValue = getStr("'", utils_1.singleQuoteEscapeChars);
                } else if (substitutesEnabled && chr === "$") {
                  pos++;
                  attrValue = getIdent();
                  attr.valueType = "substitute";
                } else {
                  while (pos < l) {
                    if (chr === "]") {
                      break;
                    }
                    attrValue += chr;
                    pos++;
                    chr = str.charAt(pos);
                  }
                  attrValue = attrValue.trim();
                }
                skipWhitespace();
                if (pos >= l) {
                  throw Error('Expected "]" but end of file reached.');
                }
                if (chr !== "]") {
                  throw Error('Expected "]" but "' + chr + '" found.');
                }
                pos++;
                attr.value = attrValue;
              }
              rule = rule || {};
              (rule.attrs = rule.attrs || []).push(attr);
            } else if (chr === ":") {
              pos++;
              var pseudoName = getIdent();
              var pseudo = {
                name: pseudoName
              };
              if (chr === "(") {
                pos++;
                var value = "";
                skipWhitespace();
                if (pseudos[pseudoName] === "selector") {
                  pseudo.valueType = "selector";
                  value = parseSelector();
                } else {
                  pseudo.valueType = pseudos[pseudoName] || "string";
                  if (chr === '"') {
                    value = getStr('"', utils_1.doubleQuotesEscapeChars);
                  } else if (chr === "'") {
                    value = getStr("'", utils_1.singleQuoteEscapeChars);
                  } else if (substitutesEnabled && chr === "$") {
                    pos++;
                    value = getIdent();
                    pseudo.valueType = "substitute";
                  } else {
                    while (pos < l) {
                      if (chr === ")") {
                        break;
                      }
                      value += chr;
                      pos++;
                      chr = str.charAt(pos);
                    }
                    value = value.trim();
                  }
                  skipWhitespace();
                }
                if (pos >= l) {
                  throw Error('Expected ")" but end of file reached.');
                }
                if (chr !== ")") {
                  throw Error('Expected ")" but "' + chr + '" found.');
                }
                pos++;
                pseudo.value = value;
              }
              rule = rule || {};
              (rule.pseudos = rule.pseudos || []).push(pseudo);
            } else {
              break;
            }
          }
          return rule;
        }
        return parse();
      }
      exports.parseCssSelector = parseCssSelector;
    }
  });

  // node_modules/css-selector-parser/lib/render.js
  var require_render = __commonJS({
    "node_modules/css-selector-parser/lib/render.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_utils();
      function renderEntity(entity) {
        var res = "";
        switch (entity.type) {
          case "ruleSet":
            var currentEntity = entity.rule;
            var parts = [];
            while (currentEntity) {
              if (currentEntity.nestingOperator) {
                parts.push(currentEntity.nestingOperator);
              }
              parts.push(renderEntity(currentEntity));
              currentEntity = currentEntity.rule;
            }
            res = parts.join(" ");
            break;
          case "selectors":
            res = entity.selectors.map(renderEntity).join(", ");
            break;
          case "rule":
            if (entity.tagName) {
              if (entity.tagName === "*") {
                res = "*";
              } else {
                res = utils_1.escapeIdentifier(entity.tagName);
              }
            }
            if (entity.id) {
              res += "#" + utils_1.escapeIdentifier(entity.id);
            }
            if (entity.classNames) {
              res += entity.classNames.map(function(cn) {
                return "." + utils_1.escapeIdentifier(cn);
              }).join("");
            }
            if (entity.attrs) {
              res += entity.attrs.map(function(attr) {
                if ("operator" in attr) {
                  if (attr.valueType === "substitute") {
                    return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + "$" + attr.value + "]";
                  } else {
                    return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + utils_1.escapeStr(attr.value) + "]";
                  }
                } else {
                  return "[" + utils_1.escapeIdentifier(attr.name) + "]";
                }
              }).join("");
            }
            if (entity.pseudos) {
              res += entity.pseudos.map(function(pseudo) {
                if (pseudo.valueType) {
                  if (pseudo.valueType === "selector") {
                    return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + renderEntity(pseudo.value) + ")";
                  } else if (pseudo.valueType === "substitute") {
                    return ":" + utils_1.escapeIdentifier(pseudo.name) + "($" + pseudo.value + ")";
                  } else if (pseudo.valueType === "numeric") {
                    return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + pseudo.value + ")";
                  } else {
                    return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + utils_1.escapeIdentifier(pseudo.value) + ")";
                  }
                } else {
                  return ":" + utils_1.escapeIdentifier(pseudo.name);
                }
              }).join("");
            }
            break;
          default:
            throw Error('Unknown entity type: "' + entity.type + '".');
        }
        return res;
      }
      exports.renderEntity = renderEntity;
    }
  });

  // node_modules/css-selector-parser/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/css-selector-parser/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var parser_context_1 = require_parser_context();
      var render_1 = require_render();
      var CssSelectorParser = function() {
        function CssSelectorParser2() {
          this.pseudos = {};
          this.attrEqualityMods = {};
          this.ruleNestingOperators = {};
          this.substitutesEnabled = false;
        }
        CssSelectorParser2.prototype.registerSelectorPseudos = function() {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_1 = pseudos; _a < pseudos_1.length; _a++) {
            var pseudo = pseudos_1[_a];
            this.pseudos[pseudo] = "selector";
          }
          return this;
        };
        CssSelectorParser2.prototype.unregisterSelectorPseudos = function() {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_2 = pseudos; _a < pseudos_2.length; _a++) {
            var pseudo = pseudos_2[_a];
            delete this.pseudos[pseudo];
          }
          return this;
        };
        CssSelectorParser2.prototype.registerNumericPseudos = function() {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_3 = pseudos; _a < pseudos_3.length; _a++) {
            var pseudo = pseudos_3[_a];
            this.pseudos[pseudo] = "numeric";
          }
          return this;
        };
        CssSelectorParser2.prototype.unregisterNumericPseudos = function() {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_4 = pseudos; _a < pseudos_4.length; _a++) {
            var pseudo = pseudos_4[_a];
            delete this.pseudos[pseudo];
          }
          return this;
        };
        CssSelectorParser2.prototype.registerNestingOperators = function() {
          var operators = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            operators[_i] = arguments[_i];
          }
          for (var _a = 0, operators_1 = operators; _a < operators_1.length; _a++) {
            var operator = operators_1[_a];
            this.ruleNestingOperators[operator] = true;
          }
          return this;
        };
        CssSelectorParser2.prototype.unregisterNestingOperators = function() {
          var operators = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            operators[_i] = arguments[_i];
          }
          for (var _a = 0, operators_2 = operators; _a < operators_2.length; _a++) {
            var operator = operators_2[_a];
            delete this.ruleNestingOperators[operator];
          }
          return this;
        };
        CssSelectorParser2.prototype.registerAttrEqualityMods = function() {
          var mods = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            mods[_i] = arguments[_i];
          }
          for (var _a = 0, mods_1 = mods; _a < mods_1.length; _a++) {
            var mod = mods_1[_a];
            this.attrEqualityMods[mod] = true;
          }
          return this;
        };
        CssSelectorParser2.prototype.unregisterAttrEqualityMods = function() {
          var mods = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            mods[_i] = arguments[_i];
          }
          for (var _a = 0, mods_2 = mods; _a < mods_2.length; _a++) {
            var mod = mods_2[_a];
            delete this.attrEqualityMods[mod];
          }
          return this;
        };
        CssSelectorParser2.prototype.enableSubstitutes = function() {
          this.substitutesEnabled = true;
          return this;
        };
        CssSelectorParser2.prototype.disableSubstitutes = function() {
          this.substitutesEnabled = false;
          return this;
        };
        CssSelectorParser2.prototype.parse = function(str) {
          return parser_context_1.parseCssSelector(str, 0, this.pseudos, this.attrEqualityMods, this.ruleNestingOperators, this.substitutesEnabled);
        };
        CssSelectorParser2.prototype.render = function(path) {
          return render_1.renderEntity(path).trim();
        };
        return CssSelectorParser2;
      }();
      exports.CssSelectorParser = CssSelectorParser;
    }
  });

  // node_modules/nth-check/lib/parse.js
  var require_parse = __commonJS({
    "node_modules/nth-check/lib/parse.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = void 0;
      var whitespace = /* @__PURE__ */ new Set([9, 10, 12, 13, 32]);
      var ZERO = "0".charCodeAt(0);
      var NINE = "9".charCodeAt(0);
      function parse(formula) {
        formula = formula.trim().toLowerCase();
        if (formula === "even") {
          return [2, 0];
        } else if (formula === "odd") {
          return [2, 1];
        }
        var idx = 0;
        var a = 0;
        var sign = readSign();
        var number2 = readNumber();
        if (idx < formula.length && formula.charAt(idx) === "n") {
          idx++;
          a = sign * (number2 !== null && number2 !== void 0 ? number2 : 1);
          skipWhitespace();
          if (idx < formula.length) {
            sign = readSign();
            skipWhitespace();
            number2 = readNumber();
          } else {
            sign = number2 = 0;
          }
        }
        if (number2 === null || idx < formula.length) {
          throw new Error("n-th rule couldn't be parsed ('" + formula + "')");
        }
        return [a, sign * number2];
        function readSign() {
          if (formula.charAt(idx) === "-") {
            idx++;
            return -1;
          }
          if (formula.charAt(idx) === "+") {
            idx++;
          }
          return 1;
        }
        function readNumber() {
          var start = idx;
          var value = 0;
          while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {
            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
            idx++;
          }
          return idx === start ? null : value;
        }
        function skipWhitespace() {
          while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
            idx++;
          }
        }
      }
      exports.parse = parse;
    }
  });

  // node_modules/boolbase/index.js
  var require_boolbase = __commonJS({
    "node_modules/boolbase/index.js"(exports, module) {
      init_globals();
      module.exports = {
        trueFunc: function trueFunc() {
          return true;
        },
        falseFunc: function falseFunc() {
          return false;
        }
      };
    }
  });

  // node_modules/nth-check/lib/compile.js
  var require_compile = __commonJS({
    "node_modules/nth-check/lib/compile.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.compile = void 0;
      var boolbase_1 = require_boolbase();
      function compile(parsed) {
        var a = parsed[0];
        var b = parsed[1] - 1;
        if (b < 0 && a <= 0)
          return boolbase_1.falseFunc;
        if (a === -1)
          return function(index) {
            return index <= b;
          };
        if (a === 0)
          return function(index) {
            return index === b;
          };
        if (a === 1)
          return b < 0 ? boolbase_1.trueFunc : function(index) {
            return index >= b;
          };
        var absA = Math.abs(a);
        var bMod = (b % absA + absA) % absA;
        return a > 1 ? function(index) {
          return index >= b && index % absA === bMod;
        } : function(index) {
          return index <= b && index % absA === bMod;
        };
      }
      exports.compile = compile;
    }
  });

  // node_modules/nth-check/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/nth-check/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.compile = exports.parse = void 0;
      var parse_1 = require_parse();
      Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
        return parse_1.parse;
      } });
      var compile_1 = require_compile();
      Object.defineProperty(exports, "compile", { enumerable: true, get: function() {
        return compile_1.compile;
      } });
      function nthCheck(formula) {
        return (0, compile_1.compile)((0, parse_1.parse)(formula));
      }
      exports.default = nthCheck;
    }
  });

  // node_modules/hast-util-select/lib/parse.js
  var require_parse2 = __commonJS({
    "node_modules/hast-util-select/lib/parse.js"(exports, module) {
      init_globals();
      module.exports = parse;
      var Parser = require_lib2().CssSelectorParser;
      var nthCheck = require_lib3().default;
      var zwitch = require_zwitch();
      var nth = ["nth-child", "nth-last-child", "nth-of-type", "nth-last-of-type"];
      var parser = new Parser();
      var compile = zwitch("type", {
        handlers: {
          selectors,
          ruleSet,
          rule
        }
      });
      parser.registerAttrEqualityMods("~", "|", "^", "$", "*");
      parser.registerSelectorPseudos("any", "matches", "not", "has");
      parser.registerNestingOperators(">", "+", "~");
      function parse(selector) {
        if (typeof selector !== "string") {
          throw new Error("Expected `string` as selector, not `" + selector + "`");
        }
        return compile(parser.parse(selector));
      }
      function selectors(query) {
        var selectors2 = query.selectors;
        var index = -1;
        while (++index < selectors2.length) {
          compile(selectors2[index]);
        }
        return query;
      }
      function ruleSet(query) {
        return rule(query.rule);
      }
      function rule(query) {
        var pseudos = query.pseudos || [];
        var index = -1;
        var pseudo;
        while (++index < pseudos.length) {
          pseudo = pseudos[index];
          if (nth.indexOf(pseudo.name) > -1) {
            pseudo.value = nthCheck(pseudo.value);
            pseudo.valueType = "function";
          }
        }
        compile(query.rule);
        return query;
      }
    }
  });

  // node_modules/hast-util-select/index.js
  var require_hast_util_select = __commonJS({
    "node_modules/hast-util-select/index.js"(exports) {
      init_globals();
      exports.matches = matches;
      exports.selectAll = selectAll;
      exports.select = select;
      var any = require_any();
      var parse = require_parse2();
      function matches(selector, node, space) {
        return Boolean(any(parse(selector), node, { space, one: true, shallow: true })[0]);
      }
      function select(selector, node, space) {
        return any(parse(selector), node, { space, one: true })[0] || null;
      }
      function selectAll(selector, node, space) {
        return any(parse(selector), node, { space });
      }
    }
  });

  // node_modules/@inkdropapp/html2markdown/lib/to-node-array.js
  var require_to_node_array = __commonJS({
    "node_modules/@inkdropapp/html2markdown/lib/to-node-array.js"(exports, module) {
      init_globals();
      function toNodeArray(input) {
        if (typeof input === "string") {
          return [{
            type: "text",
            value: input
          }];
        } else if (Array.isArray(input)) {
          return input;
        } else if (!input) {
          return [];
        } else if (input.type === "root") {
          return input.children;
        }
        return [input];
      }
      module.exports = toNodeArray;
    }
  });

  // node_modules/@inkdropapp/html2markdown/lib/hast-util-insert.js
  var require_hast_util_insert = __commonJS({
    "node_modules/@inkdropapp/html2markdown/lib/hast-util-insert.js"(exports, module) {
      init_globals();
      var hastUtilSelect = require_hast_util_select();
      var toNodeArray = require_to_node_array();
      function hastUtilInsert(tree, selector, nodes, action = "insert") {
        const foundNode = hastUtilSelect.select(selector, tree);
        if (foundNode) {
          if (typeof nodes === "function") {
            nodes = nodes.call(tree, foundNode);
          }
          const nodeArray = toNodeArray(nodes);
          if (action === "append") {
            foundNode.children = foundNode.children.concat(nodeArray);
          } else if (action === "prepend") {
            foundNode.children = nodeArray.concat(foundNode.children);
          } else if (action === "insert") {
            foundNode.children = nodeArray.slice();
          }
        }
        return foundNode;
      }
      module.exports = hastUtilInsert;
    }
  });

  // node_modules/@inkdropapp/html2markdown/lib/rehype-insert.js
  var require_rehype_insert = __commonJS({
    "node_modules/@inkdropapp/html2markdown/lib/rehype-insert.js"(exports, module) {
      init_globals();
      var hastUtilInsert = require_hast_util_insert();
      function rehypeInsert(options = {}) {
        return function rehypeInsertTransformer(tree) {
          const {
            insertions = []
          } = options;
          insertions.forEach(function(i) {
            hastUtilInsert(tree, i.selector, i.insert, i.action);
          });
        };
      }
      module.exports = rehypeInsert;
    }
  });

  // node_modules/mdast-util-to-markdown/lib/configure.js
  var require_configure = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/configure.js"(exports, module) {
      init_globals();
      module.exports = configure;
      function configure(base, extension) {
        var index = -1;
        var key;
        if (extension.extensions) {
          while (++index < extension.extensions.length) {
            configure(base, extension.extensions[index]);
          }
        }
        for (key in extension) {
          if (key === "extensions") {
          } else if (key === "unsafe" || key === "join") {
            base[key] = base[key].concat(extension[key] || []);
          } else if (key === "handlers") {
            base[key] = Object.assign(base[key], extension[key] || {});
          } else {
            base.options[key] = extension[key];
          }
        }
        return base;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/container-flow.js
  var require_container_flow = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/container-flow.js"(exports, module) {
      init_globals();
      module.exports = flow;
      var repeat = require_repeat_string();
      function flow(parent, context) {
        var children = parent.children || [];
        var results = [];
        var index = -1;
        var child;
        while (++index < children.length) {
          child = children[index];
          results.push(context.handle(child, parent, context, { before: "\n", after: "\n" }));
          if (index + 1 < children.length) {
            results.push(between(child, children[index + 1]));
          }
        }
        return results.join("");
        function between(left, right) {
          var index2 = -1;
          var result;
          while (++index2 < context.join.length) {
            result = context.join[index2](left, right, parent, context);
            if (result === true || result === 1) {
              break;
            }
            if (typeof result === "number") {
              return repeat("\n", 1 + Number(result));
            }
            if (result === false) {
              return "\n\n<!---->\n\n";
            }
          }
          return "\n\n";
        }
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
  var require_indent_lines = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/indent-lines.js"(exports, module) {
      init_globals();
      module.exports = indentLines;
      var eol = /\r?\n|\r/g;
      function indentLines(value, map) {
        var result = [];
        var start = 0;
        var line = 0;
        var match;
        while (match = eol.exec(value)) {
          one(value.slice(start, match.index));
          result.push(match[0]);
          start = match.index + match[0].length;
          line++;
        }
        one(value.slice(start));
        return result.join("");
        function one(value2) {
          result.push(map(value2, line, !value2));
        }
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
  var require_blockquote2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/blockquote.js"(exports, module) {
      init_globals();
      module.exports = blockquote;
      var flow = require_container_flow();
      var indentLines = require_indent_lines();
      function blockquote(node, _, context) {
        var exit = context.enter("blockquote");
        var value = indentLines(flow(node, context), map);
        exit();
        return value;
      }
      function map(line, index, blank) {
        return ">" + (blank ? "" : " ") + line;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/break.js
  var require_break2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/break.js"(exports, module) {
      init_globals();
      module.exports = hardBreak;
      var patternInScope = require_pattern_in_scope();
      function hardBreak(node, _, context, safe) {
        var index = -1;
        while (++index < context.unsafe.length) {
          if (context.unsafe[index].character === "\n" && patternInScope(context.stack, context.unsafe[index])) {
            return /[ \t]/.test(safe.before) ? "" : " ";
          }
        }
        return "\\\n";
      }
    }
  });

  // node_modules/longest-streak/index.js
  var require_longest_streak = __commonJS({
    "node_modules/longest-streak/index.js"(exports, module) {
      init_globals();
      module.exports = longestStreak;
      function longestStreak(value, character) {
        var count = 0;
        var maximum = 0;
        var expected;
        var index;
        if (typeof character !== "string" || character.length !== 1) {
          throw new Error("Expected character");
        }
        value = String(value);
        index = value.indexOf(character);
        expected = index;
        while (index !== -1) {
          count++;
          if (index === expected) {
            if (count > maximum) {
              maximum = count;
            }
          } else {
            count = 1;
          }
          expected = index + 1;
          index = value.indexOf(character, expected);
        }
        return maximum;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
  var require_format_code_as_indented = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js"(exports, module) {
      init_globals();
      module.exports = formatCodeAsIndented;
      function formatCodeAsIndented(node, context) {
        return !context.options.fences && node.value && !node.lang && /[^ \r\n]/.test(node.value) && !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value);
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-fence.js
  var require_check_fence = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-fence.js"(exports, module) {
      init_globals();
      module.exports = checkFence;
      function checkFence(context) {
        var marker = context.options.fence || "`";
        if (marker !== "`" && marker !== "~") {
          throw new Error("Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`");
        }
        return marker;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js
  var require_pattern_compile = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js"(exports, module) {
      init_globals();
      module.exports = patternCompile;
      function patternCompile(pattern) {
        var before;
        var after;
        if (!pattern._compiled) {
          before = pattern.before ? "(?:" + pattern.before + ")" : "";
          after = pattern.after ? "(?:" + pattern.after + ")" : "";
          if (pattern.atBreak) {
            before = "[\\r\\n][\\t ]*" + before;
          }
          pattern._compiled = new RegExp((before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") + pattern.character + (after || ""), "g");
        }
        return pattern._compiled;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/safe.js
  var require_safe = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/safe.js"(exports, module) {
      init_globals();
      module.exports = safe;
      var patternCompile = require_pattern_compile();
      var patternInScope = require_pattern_in_scope();
      function safe(context, input, config) {
        var value = (config.before || "") + (input || "") + (config.after || "");
        var positions = [];
        var result = [];
        var infos = {};
        var index = -1;
        var before;
        var after;
        var position;
        var pattern;
        var expression;
        var match;
        var start;
        var end;
        while (++index < context.unsafe.length) {
          pattern = context.unsafe[index];
          if (!patternInScope(context.stack, pattern)) {
            continue;
          }
          expression = patternCompile(pattern);
          while (match = expression.exec(value)) {
            before = "before" in pattern || pattern.atBreak;
            after = "after" in pattern;
            position = match.index + (before ? match[1].length : 0);
            if (positions.indexOf(position) === -1) {
              positions.push(position);
              infos[position] = { before, after };
            } else {
              if (infos[position].before && !before) {
                infos[position].before = false;
              }
              if (infos[position].after && !after) {
                infos[position].after = false;
              }
            }
          }
        }
        positions.sort(numerical);
        start = config.before ? config.before.length : 0;
        end = value.length - (config.after ? config.after.length : 0);
        index = -1;
        while (++index < positions.length) {
          position = positions[index];
          if (position < start || position >= end) {
            continue;
          }
          if (position + 1 < end && positions[index + 1] === position + 1 && infos[position].after && !infos[position + 1].before && !infos[position + 1].after) {
            continue;
          }
          if (start !== position) {
            result.push(escapeBackslashes(value.slice(start, position), "\\"));
          }
          start = position;
          if (/[!-/:-@[-`{-~]/.test(value.charAt(position)) && (!config.encode || config.encode.indexOf(value.charAt(position)) === -1)) {
            result.push("\\");
          } else {
            result.push("&#x" + value.charCodeAt(position).toString(16).toUpperCase() + ";");
            start++;
          }
        }
        result.push(escapeBackslashes(value.slice(start, end), config.after));
        return result.join("");
      }
      function numerical(a, b) {
        return a - b;
      }
      function escapeBackslashes(value, after) {
        var expression = /\\(?=[!-/:-@[-`{-~])/g;
        var positions = [];
        var results = [];
        var index = -1;
        var start = 0;
        var whole = value + after;
        var match;
        while (match = expression.exec(whole)) {
          positions.push(match.index);
        }
        while (++index < positions.length) {
          if (start !== positions[index]) {
            results.push(value.slice(start, positions[index]));
          }
          results.push("\\");
          start = positions[index];
        }
        results.push(value.slice(start));
        return results.join("");
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/code.js
  var require_code2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/code.js"(exports, module) {
      init_globals();
      module.exports = code2;
      var repeat = require_repeat_string();
      var streak = require_longest_streak();
      var formatCodeAsIndented = require_format_code_as_indented();
      var checkFence = require_check_fence();
      var indentLines = require_indent_lines();
      var safe = require_safe();
      function code2(node, _, context) {
        var marker = checkFence(context);
        var raw = node.value || "";
        var suffix = marker === "`" ? "GraveAccent" : "Tilde";
        var value;
        var sequence;
        var exit;
        var subexit;
        if (formatCodeAsIndented(node, context)) {
          exit = context.enter("codeIndented");
          value = indentLines(raw, map);
        } else {
          sequence = repeat(marker, Math.max(streak(raw, marker) + 1, 3));
          exit = context.enter("codeFenced");
          value = sequence;
          if (node.lang) {
            subexit = context.enter("codeFencedLang" + suffix);
            value += safe(context, node.lang, {
              before: "`",
              after: " ",
              encode: ["`"]
            });
            subexit();
          }
          if (node.lang && node.meta) {
            subexit = context.enter("codeFencedMeta" + suffix);
            value += " " + safe(context, node.meta, {
              before: " ",
              after: "\n",
              encode: ["`"]
            });
            subexit();
          }
          value += "\n";
          if (raw) {
            value += raw + "\n";
          }
          value += sequence;
        }
        exit();
        return value;
      }
      function map(line, _, blank) {
        return (blank ? "" : "    ") + line;
      }
    }
  });

  // node_modules/parse-entities/decode-entity.browser.js
  var require_decode_entity_browser = __commonJS({
    "node_modules/parse-entities/decode-entity.browser.js"(exports, module) {
      init_globals();
      var el;
      var semicolon = 59;
      module.exports = decodeEntity;
      function decodeEntity(characters) {
        var entity = "&" + characters + ";";
        var char;
        el = el || document.createElement("i");
        el.innerHTML = entity;
        char = el.textContent;
        if (char.charCodeAt(char.length - 1) === semicolon && characters !== "semi") {
          return false;
        }
        return char === entity ? false : char;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/association.js
  var require_association = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/association.js"(exports, module) {
      init_globals();
      module.exports = association;
      var decode = require_decode_entity_browser();
      var characterEscape = /\\([!-/:-@[-`{-~])/g;
      var characterReference = /&(#(\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
      function association(node) {
        if (node.label || !node.identifier) {
          return node.label || "";
        }
        return node.identifier.replace(characterEscape, "$1").replace(characterReference, decodeIfPossible);
      }
      function decodeIfPossible($0, $1) {
        return decode($1) || $0;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-quote.js
  var require_check_quote = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-quote.js"(exports, module) {
      init_globals();
      module.exports = checkQuote;
      function checkQuote(context) {
        var marker = context.options.quote || '"';
        if (marker !== '"' && marker !== "'") {
          throw new Error("Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`");
        }
        return marker;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/definition.js
  var require_definition = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/definition.js"(exports, module) {
      init_globals();
      module.exports = definition;
      var association = require_association();
      var checkQuote = require_check_quote();
      var safe = require_safe();
      function definition(node, _, context) {
        var marker = checkQuote(context);
        var suffix = marker === '"' ? "Quote" : "Apostrophe";
        var exit = context.enter("definition");
        var subexit = context.enter("label");
        var value = "[" + safe(context, association(node), { before: "[", after: "]" }) + "]: ";
        subexit();
        if (!node.url || /[ \t\r\n]/.test(node.url)) {
          subexit = context.enter("destinationLiteral");
          value += "<" + safe(context, node.url, { before: "<", after: ">" }) + ">";
        } else {
          subexit = context.enter("destinationRaw");
          value += safe(context, node.url, { before: " ", after: " " });
        }
        subexit();
        if (node.title) {
          subexit = context.enter("title" + suffix);
          value += " " + marker + safe(context, node.title, { before: marker, after: marker }) + marker;
          subexit();
        }
        exit();
        return value;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
  var require_check_emphasis = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js"(exports, module) {
      init_globals();
      module.exports = checkEmphasis;
      function checkEmphasis(context) {
        var marker = context.options.emphasis || "*";
        if (marker !== "*" && marker !== "_") {
          throw new Error("Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`");
        }
        return marker;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
  var require_container_phrasing = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js"(exports, module) {
      init_globals();
      module.exports = phrasing;
      function phrasing(parent, context, safeOptions) {
        var children = parent.children || [];
        var results = [];
        var index = -1;
        var before = safeOptions.before;
        var after;
        var handle;
        var child;
        while (++index < children.length) {
          child = children[index];
          if (index + 1 < children.length) {
            handle = context.handle.handlers[children[index + 1].type];
            if (handle && handle.peek)
              handle = handle.peek;
            after = handle ? handle(children[index + 1], parent, context, {
              before: "",
              after: ""
            }).charAt(0) : "";
          } else {
            after = safeOptions.after;
          }
          if (results.length > 0 && (before === "\r" || before === "\n") && child.type === "html") {
            results[results.length - 1] = results[results.length - 1].replace(/(\r?\n|\r)$/, " ");
            before = " ";
          }
          results.push(context.handle(child, parent, context, {
            before,
            after
          }));
          before = results[results.length - 1].slice(-1);
        }
        return results.join("");
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
  var require_emphasis2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/emphasis.js"(exports, module) {
      init_globals();
      module.exports = emphasis;
      emphasis.peek = emphasisPeek;
      var checkEmphasis = require_check_emphasis();
      var phrasing = require_container_phrasing();
      function emphasis(node, _, context) {
        var marker = checkEmphasis(context);
        var exit = context.enter("emphasis");
        var value = phrasing(node, context, { before: marker, after: marker });
        exit();
        return marker + value + marker;
      }
      function emphasisPeek(node, _, context) {
        return context.options.emphasis || "*";
      }
    }
  });

  // node_modules/mdast-util-to-string/index.js
  var require_mdast_util_to_string2 = __commonJS({
    "node_modules/mdast-util-to-string/index.js"(exports, module) {
      init_globals();
      module.exports = toString;
      function toString(node) {
        return node && (node.value || node.alt || node.title || "children" in node && all(node.children) || "length" in node && all(node)) || "";
      }
      function all(values) {
        var result = [];
        var index = -1;
        while (++index < values.length) {
          result[index] = toString(values[index]);
        }
        return result.join("");
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
  var require_format_heading_as_setext = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js"(exports, module) {
      init_globals();
      module.exports = formatHeadingAsSetext;
      var toString = require_mdast_util_to_string2();
      function formatHeadingAsSetext(node, context) {
        return context.options.setext && (!node.depth || node.depth < 3) && toString(node);
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/heading.js
  var require_heading2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/heading.js"(exports, module) {
      init_globals();
      module.exports = heading;
      var repeat = require_repeat_string();
      var formatHeadingAsSetext = require_format_heading_as_setext();
      var phrasing = require_container_phrasing();
      function heading(node, _, context) {
        var rank = Math.max(Math.min(6, node.depth || 1), 1);
        var exit;
        var subexit;
        var value;
        var sequence;
        if (formatHeadingAsSetext(node, context)) {
          exit = context.enter("headingSetext");
          subexit = context.enter("phrasing");
          value = phrasing(node, context, { before: "\n", after: "\n" });
          subexit();
          exit();
          return value + "\n" + repeat(rank === 1 ? "=" : "-", value.length - (Math.max(value.lastIndexOf("\r"), value.lastIndexOf("\n")) + 1));
        }
        sequence = repeat("#", rank);
        exit = context.enter("headingAtx");
        subexit = context.enter("phrasing");
        value = phrasing(node, context, { before: "# ", after: "\n" });
        value = value ? sequence + " " + value : sequence;
        if (context.options.closeAtx) {
          value += " " + sequence;
        }
        subexit();
        exit();
        return value;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/html.js
  var require_html5 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/html.js"(exports, module) {
      init_globals();
      module.exports = html2;
      html2.peek = htmlPeek;
      function html2(node) {
        return node.value || "";
      }
      function htmlPeek() {
        return "<";
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/image.js
  var require_image2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/image.js"(exports, module) {
      init_globals();
      module.exports = image;
      image.peek = imagePeek;
      var checkQuote = require_check_quote();
      var safe = require_safe();
      function image(node, _, context) {
        var quote = checkQuote(context);
        var suffix = quote === '"' ? "Quote" : "Apostrophe";
        var exit = context.enter("image");
        var subexit = context.enter("label");
        var value = "![" + safe(context, node.alt, { before: "[", after: "]" }) + "](";
        subexit();
        if (!node.url && node.title || /[ \t\r\n]/.test(node.url)) {
          subexit = context.enter("destinationLiteral");
          value += "<" + safe(context, node.url, { before: "<", after: ">" }) + ">";
        } else {
          subexit = context.enter("destinationRaw");
          value += safe(context, node.url, {
            before: "(",
            after: node.title ? " " : ")"
          });
        }
        subexit();
        if (node.title) {
          subexit = context.enter("title" + suffix);
          value += " " + quote + safe(context, node.title, { before: quote, after: quote }) + quote;
          subexit();
        }
        value += ")";
        exit();
        return value;
      }
      function imagePeek() {
        return "!";
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
  var require_image_reference = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/image-reference.js"(exports, module) {
      init_globals();
      module.exports = imageReference;
      imageReference.peek = imageReferencePeek;
      var association = require_association();
      var safe = require_safe();
      function imageReference(node, _, context) {
        var type2 = node.referenceType;
        var exit = context.enter("imageReference");
        var subexit = context.enter("label");
        var alt = safe(context, node.alt, { before: "[", after: "]" });
        var value = "![" + alt + "]";
        var reference;
        var stack;
        subexit();
        stack = context.stack;
        context.stack = [];
        subexit = context.enter("reference");
        reference = safe(context, association(node), { before: "[", after: "]" });
        subexit();
        context.stack = stack;
        exit();
        if (type2 === "full" || !alt || alt !== reference) {
          value += "[" + reference + "]";
        } else if (type2 !== "shortcut") {
          value += "[]";
        }
        return value;
      }
      function imageReferencePeek() {
        return "!";
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
  var require_inline_code2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/inline-code.js"(exports, module) {
      init_globals();
      module.exports = inlineCode;
      inlineCode.peek = inlineCodePeek;
      var patternCompile = require_pattern_compile();
      function inlineCode(node, parent, context) {
        var value = node.value || "";
        var sequence = "`";
        var index = -1;
        var pattern;
        var expression;
        var match;
        var position;
        while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
          sequence += "`";
        }
        if (/[^ \r\n]/.test(value) && (/[ \r\n`]/.test(value.charAt(0)) || /[ \r\n`]/.test(value.charAt(value.length - 1)))) {
          value = " " + value + " ";
        }
        while (++index < context.unsafe.length) {
          pattern = context.unsafe[index];
          if (!pattern.atBreak)
            continue;
          expression = patternCompile(pattern);
          while (match = expression.exec(value)) {
            position = match.index;
            if (value.charCodeAt(position) === 10 && value.charCodeAt(position - 1) === 13) {
              position--;
            }
            value = value.slice(0, position) + " " + value.slice(match.index + 1);
          }
        }
        return sequence + value + sequence;
      }
      function inlineCodePeek() {
        return "`";
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
  var require_format_link_as_autolink = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js"(exports, module) {
      init_globals();
      module.exports = formatLinkAsAutolink;
      var toString = require_mdast_util_to_string2();
      function formatLinkAsAutolink(node, context) {
        var raw = toString(node);
        return !context.options.resourceLink && node.url && !node.title && node.children && node.children.length === 1 && node.children[0].type === "text" && (raw === node.url || "mailto:" + raw === node.url) && /^[a-z][a-z+.-]+:/i.test(node.url) && !/[\0- <>\u007F]/.test(node.url);
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/link.js
  var require_link2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/link.js"(exports, module) {
      init_globals();
      module.exports = link;
      link.peek = linkPeek;
      var checkQuote = require_check_quote();
      var formatLinkAsAutolink = require_format_link_as_autolink();
      var phrasing = require_container_phrasing();
      var safe = require_safe();
      function link(node, _, context) {
        var quote = checkQuote(context);
        var suffix = quote === '"' ? "Quote" : "Apostrophe";
        var exit;
        var subexit;
        var value;
        var stack;
        if (formatLinkAsAutolink(node, context)) {
          stack = context.stack;
          context.stack = [];
          exit = context.enter("autolink");
          value = "<" + phrasing(node, context, { before: "<", after: ">" }) + ">";
          exit();
          context.stack = stack;
          return value;
        }
        exit = context.enter("link");
        subexit = context.enter("label");
        value = "[" + phrasing(node, context, { before: "[", after: "]" }) + "](";
        subexit();
        if (!node.url && node.title || /[ \t\r\n]/.test(node.url)) {
          subexit = context.enter("destinationLiteral");
          value += "<" + safe(context, node.url, { before: "<", after: ">" }) + ">";
        } else {
          subexit = context.enter("destinationRaw");
          value += safe(context, node.url, {
            before: "(",
            after: node.title ? " " : ")"
          });
        }
        subexit();
        if (node.title) {
          subexit = context.enter("title" + suffix);
          value += " " + quote + safe(context, node.title, { before: quote, after: quote }) + quote;
          subexit();
        }
        value += ")";
        exit();
        return value;
      }
      function linkPeek(node, _, context) {
        return formatLinkAsAutolink(node, context) ? "<" : "[";
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
  var require_link_reference = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/link-reference.js"(exports, module) {
      init_globals();
      module.exports = linkReference;
      linkReference.peek = linkReferencePeek;
      var association = require_association();
      var phrasing = require_container_phrasing();
      var safe = require_safe();
      function linkReference(node, _, context) {
        var type2 = node.referenceType;
        var exit = context.enter("linkReference");
        var subexit = context.enter("label");
        var text = phrasing(node, context, { before: "[", after: "]" });
        var value = "[" + text + "]";
        var reference;
        var stack;
        subexit();
        stack = context.stack;
        context.stack = [];
        subexit = context.enter("reference");
        reference = safe(context, association(node), { before: "[", after: "]" });
        subexit();
        context.stack = stack;
        exit();
        if (type2 === "full" || !text || text !== reference) {
          value += "[" + reference + "]";
        } else if (type2 !== "shortcut") {
          value += "[]";
        }
        return value;
      }
      function linkReferencePeek() {
        return "[";
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/list.js
  var require_list2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/list.js"(exports, module) {
      init_globals();
      module.exports = list;
      var flow = require_container_flow();
      function list(node, _, context) {
        var exit = context.enter("list");
        var value = flow(node, context);
        exit();
        return value;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
  var require_check_bullet = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-bullet.js"(exports, module) {
      init_globals();
      module.exports = checkBullet;
      function checkBullet(context) {
        var marker = context.options.bullet || "*";
        if (marker !== "*" && marker !== "+" && marker !== "-") {
          throw new Error("Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`");
        }
        return marker;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
  var require_check_list_item_indent = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js"(exports, module) {
      init_globals();
      module.exports = checkListItemIndent;
      function checkListItemIndent(context) {
        var style = context.options.listItemIndent || "tab";
        if (style === 1 || style === "1") {
          return "one";
        }
        if (style !== "tab" && style !== "one" && style !== "mixed") {
          throw new Error("Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`");
        }
        return style;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/list-item.js
  var require_list_item2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/list-item.js"(exports, module) {
      init_globals();
      module.exports = listItem;
      var repeat = require_repeat_string();
      var checkBullet = require_check_bullet();
      var checkListItemIndent = require_check_list_item_indent();
      var flow = require_container_flow();
      var indentLines = require_indent_lines();
      function listItem(node, parent, context) {
        var bullet = checkBullet(context);
        var listItemIndent = checkListItemIndent(context);
        var size;
        var value;
        var exit;
        if (parent && parent.ordered) {
          bullet = (parent.start > -1 ? parent.start : 1) + (context.options.incrementListMarker === false ? 0 : parent.children.indexOf(node)) + ".";
        }
        size = bullet.length + 1;
        if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.spread || node.spread)) {
          size = Math.ceil(size / 4) * 4;
        }
        exit = context.enter("listItem");
        value = indentLines(flow(node, context), map);
        exit();
        return value;
        function map(line, index, blank) {
          if (index) {
            return (blank ? "" : repeat(" ", size)) + line;
          }
          return (blank ? bullet : bullet + repeat(" ", size - bullet.length)) + line;
        }
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
  var require_paragraph2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/paragraph.js"(exports, module) {
      init_globals();
      module.exports = paragraph;
      var phrasing = require_container_phrasing();
      function paragraph(node, _, context) {
        var exit = context.enter("paragraph");
        var subexit = context.enter("phrasing");
        var value = phrasing(node, context, { before: "\n", after: "\n" });
        subexit();
        exit();
        return value;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/root.js
  var require_root2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/root.js"(exports, module) {
      init_globals();
      module.exports = root;
      var flow = require_container_flow();
      function root(node, _, context) {
        return flow(node, context);
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-strong.js
  var require_check_strong = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-strong.js"(exports, module) {
      init_globals();
      module.exports = checkStrong;
      function checkStrong(context) {
        var marker = context.options.strong || "*";
        if (marker !== "*" && marker !== "_") {
          throw new Error("Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`");
        }
        return marker;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/strong.js
  var require_strong2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/strong.js"(exports, module) {
      init_globals();
      module.exports = strong;
      strong.peek = strongPeek;
      var checkStrong = require_check_strong();
      var phrasing = require_container_phrasing();
      function strong(node, _, context) {
        var marker = checkStrong(context);
        var exit = context.enter("strong");
        var value = phrasing(node, context, { before: marker, after: marker });
        exit();
        return marker + marker + value + marker + marker;
      }
      function strongPeek(node, _, context) {
        return context.options.strong || "*";
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/text.js
  var require_text2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/text.js"(exports, module) {
      init_globals();
      module.exports = text;
      var safe = require_safe();
      function text(node, parent, context, safeOptions) {
        return safe(context, node.value, safeOptions);
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-rule-repeat.js
  var require_check_rule_repeat = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-rule-repeat.js"(exports, module) {
      init_globals();
      module.exports = checkRule;
      function checkRule(context) {
        var repetition = context.options.ruleRepetition || 3;
        if (repetition < 3) {
          throw new Error("Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more");
        }
        return repetition;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/util/check-rule.js
  var require_check_rule = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/util/check-rule.js"(exports, module) {
      init_globals();
      module.exports = checkRule;
      function checkRule(context) {
        var marker = context.options.rule || "*";
        if (marker !== "*" && marker !== "-" && marker !== "_") {
          throw new Error("Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`");
        }
        return marker;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
  var require_thematic_break2 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js"(exports, module) {
      init_globals();
      module.exports = thematicBreak;
      var repeat = require_repeat_string();
      var checkRepeat = require_check_rule_repeat();
      var checkRule = require_check_rule();
      function thematicBreak(node, parent, context) {
        var value = repeat(checkRule(context) + (context.options.ruleSpaces ? " " : ""), checkRepeat(context));
        return context.options.ruleSpaces ? value.slice(0, -1) : value;
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/handle/index.js
  var require_handle = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/handle/index.js"(exports) {
      init_globals();
      exports.blockquote = require_blockquote2();
      exports.break = require_break2();
      exports.code = require_code2();
      exports.definition = require_definition();
      exports.emphasis = require_emphasis2();
      exports.hardBreak = require_break2();
      exports.heading = require_heading2();
      exports.html = require_html5();
      exports.image = require_image2();
      exports.imageReference = require_image_reference();
      exports.inlineCode = require_inline_code2();
      exports.link = require_link2();
      exports.linkReference = require_link_reference();
      exports.list = require_list2();
      exports.listItem = require_list_item2();
      exports.paragraph = require_paragraph2();
      exports.root = require_root2();
      exports.strong = require_strong2();
      exports.text = require_text2();
      exports.thematicBreak = require_thematic_break2();
    }
  });

  // node_modules/mdast-util-to-markdown/lib/join.js
  var require_join = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/join.js"(exports, module) {
      init_globals();
      module.exports = [joinDefaults];
      var formatCodeAsIndented = require_format_code_as_indented();
      var formatHeadingAsSetext = require_format_heading_as_setext();
      function joinDefaults(left, right, parent, context) {
        if (right.type === "list" && right.type === left.type && Boolean(left.ordered) === Boolean(right.ordered) || right.type === "code" && formatCodeAsIndented(right, context) && (left.type === "list" || left.type === right.type && formatCodeAsIndented(left, context))) {
          return false;
        }
        if (typeof parent.spread === "boolean") {
          if (left.type === "paragraph" && (left.type === right.type || right.type === "definition" || right.type === "heading" && formatHeadingAsSetext(right, context))) {
            return;
          }
          return parent.spread ? 1 : 0;
        }
      }
    }
  });

  // node_modules/mdast-util-to-markdown/lib/unsafe.js
  var require_unsafe = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/unsafe.js"(exports, module) {
      init_globals();
      module.exports = [
        {
          character: "	",
          inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
        },
        {
          character: "\r",
          inConstruct: [
            "codeFencedLangGraveAccent",
            "codeFencedLangTilde",
            "codeFencedMetaGraveAccent",
            "codeFencedMetaTilde",
            "destinationLiteral",
            "headingAtx"
          ]
        },
        {
          character: "\n",
          inConstruct: [
            "codeFencedLangGraveAccent",
            "codeFencedLangTilde",
            "codeFencedMetaGraveAccent",
            "codeFencedMetaTilde",
            "destinationLiteral",
            "headingAtx"
          ]
        },
        {
          character: " ",
          inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
        },
        { character: "!", after: "\\[", inConstruct: "phrasing" },
        { character: '"', inConstruct: "titleQuote" },
        { atBreak: true, character: "#" },
        { character: "#", inConstruct: "headingAtx", after: "(?:[\r\n]|$)" },
        { character: "&", after: "[#A-Za-z]", inConstruct: "phrasing" },
        { character: "'", inConstruct: "titleApostrophe" },
        { character: "(", inConstruct: "destinationRaw" },
        { before: "\\]", character: "(", inConstruct: "phrasing" },
        { atBreak: true, before: "\\d+", character: ")" },
        { character: ")", inConstruct: "destinationRaw" },
        { atBreak: true, character: "*" },
        { character: "*", inConstruct: "phrasing" },
        { atBreak: true, character: "+" },
        { atBreak: true, character: "-" },
        { atBreak: true, before: "\\d+", character: ".", after: "(?:[ 	\r\n]|$)" },
        { atBreak: true, character: "<", after: "[!/?A-Za-z]" },
        { character: "<", after: "[!/?A-Za-z]", inConstruct: "phrasing" },
        { character: "<", inConstruct: "destinationLiteral" },
        { atBreak: true, character: "=" },
        { atBreak: true, character: ">" },
        { character: ">", inConstruct: "destinationLiteral" },
        { atBreak: true, character: "[" },
        { character: "[", inConstruct: ["phrasing", "label", "reference"] },
        { character: "\\", after: "[\\r\\n]", inConstruct: "phrasing" },
        {
          character: "]",
          inConstruct: ["label", "reference"]
        },
        { atBreak: true, character: "_" },
        { before: "[^A-Za-z]", character: "_", inConstruct: "phrasing" },
        { character: "_", after: "[^A-Za-z]", inConstruct: "phrasing" },
        { atBreak: true, character: "`" },
        {
          character: "`",
          inConstruct: [
            "codeFencedLangGraveAccent",
            "codeFencedMetaGraveAccent",
            "phrasing"
          ]
        },
        { atBreak: true, character: "~" }
      ];
    }
  });

  // node_modules/mdast-util-to-markdown/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/mdast-util-to-markdown/lib/index.js"(exports, module) {
      init_globals();
      module.exports = toMarkdown;
      var zwitch = require_zwitch();
      var configure = require_configure();
      var defaultHandlers = require_handle();
      var defaultJoin = require_join();
      var defaultUnsafe = require_unsafe();
      function toMarkdown(tree, options) {
        var settings = options || {};
        var context = {
          enter,
          stack: [],
          unsafe: [],
          join: [],
          handlers: {},
          options: {}
        };
        var result;
        configure(context, {
          unsafe: defaultUnsafe,
          join: defaultJoin,
          handlers: defaultHandlers
        });
        configure(context, settings);
        if (context.options.tightDefinitions) {
          context.join = [joinDefinition].concat(context.join);
        }
        context.handle = zwitch("type", {
          invalid,
          unknown,
          handlers: context.handlers
        });
        result = context.handle(tree, null, context, { before: "\n", after: "\n" });
        if (result && result.charCodeAt(result.length - 1) !== 10 && result.charCodeAt(result.length - 1) !== 13) {
          result += "\n";
        }
        return result;
        function enter(name) {
          context.stack.push(name);
          return exit;
          function exit() {
            context.stack.pop();
          }
        }
      }
      function invalid(value) {
        throw new Error("Cannot handle value `" + value + "`, expected node");
      }
      function unknown(node) {
        throw new Error("Cannot handle unknown node `" + node.type + "`");
      }
      function joinDefinition(left, right) {
        if (left.type === "definition" && left.type === right.type) {
          return 0;
        }
      }
    }
  });

  // node_modules/mdast-util-to-markdown/index.js
  var require_mdast_util_to_markdown = __commonJS({
    "node_modules/mdast-util-to-markdown/index.js"(exports, module) {
      init_globals();
      module.exports = require_lib4();
    }
  });

  // node_modules/remark-stringify/index.js
  var require_remark_stringify = __commonJS({
    "node_modules/remark-stringify/index.js"(exports, module) {
      init_globals();
      module.exports = stringify2;
      var toMarkdown = require_mdast_util_to_markdown();
      function stringify2(options) {
        var self = this;
        this.Compiler = compile;
        function compile(tree) {
          return toMarkdown(tree, Object.assign({}, self.data("settings"), options, {
            extensions: self.data("toMarkdownExtensions") || []
          }));
        }
      }
    }
  });

  // node_modules/unist-util-remove/index.js
  var require_unist_util_remove = __commonJS({
    "node_modules/unist-util-remove/index.js"(exports, module) {
      init_globals();
      var convert = require_convert2();
      module.exports = remove;
      function remove(tree, options, test) {
        var is = convert(test || options);
        var cascade = options.cascade == null ? true : options.cascade;
        return preorder(tree, null, null);
        function preorder(node, index, parent) {
          var children = node.children;
          var childIndex = -1;
          var position = 0;
          if (is(node, index, parent)) {
            return null;
          }
          if (children && children.length) {
            while (++childIndex < children.length) {
              if (preorder(children[childIndex], childIndex, node)) {
                children[position++] = children[childIndex];
              }
            }
            if (cascade && !position) {
              return null;
            }
            children.length = position;
          }
          return node;
        }
      }
    }
  });

  // node_modules/mdast-squeeze-links/index.js
  var require_mdast_squeeze_links = __commonJS({
    "node_modules/mdast-squeeze-links/index.js"(exports, module) {
      init_globals();
      var remove = require_unist_util_remove();
      module.exports = squeeze;
      function squeeze(tree) {
        return remove(tree, { cascade: false }, isEmptyLink);
      }
      function isEmptyLink(node) {
        return node.type === "link" && node.children instanceof Array && node.children.every(isEmptyText);
      }
      function isEmptyText(node) {
        return node.type === "text" && /^\s*$/.test(node.value);
      }
    }
  });

  // node_modules/remark-squeeze-links/index.js
  var require_remark_squeeze_links = __commonJS({
    "node_modules/remark-squeeze-links/index.js"(exports, module) {
      init_globals();
      var squeezeLinks = require_mdast_squeeze_links();
      module.exports = function() {
        return squeezeLinks;
      };
    }
  });

  // node_modules/mdast-util-gfm-autolink-literal/to-markdown.js
  var require_to_markdown = __commonJS({
    "node_modules/mdast-util-gfm-autolink-literal/to-markdown.js"(exports) {
      init_globals();
      var inConstruct = "phrasing";
      var notInConstruct = ["autolink", "link", "image", "label"];
      exports.unsafe = [
        {
          character: "@",
          before: "[+\\-.\\w]",
          after: "[\\-.\\w]",
          inConstruct,
          notInConstruct
        },
        {
          character: ".",
          before: "[Ww]",
          after: "[\\-.\\w]",
          inConstruct,
          notInConstruct
        },
        {
          character: ":",
          before: "[ps]",
          after: "\\/",
          inConstruct,
          notInConstruct
        }
      ];
    }
  });

  // node_modules/mdast-util-gfm-strikethrough/to-markdown.js
  var require_to_markdown2 = __commonJS({
    "node_modules/mdast-util-gfm-strikethrough/to-markdown.js"(exports) {
      init_globals();
      var phrasing = require_container_phrasing();
      exports.unsafe = [{ character: "~", inConstruct: "phrasing" }];
      exports.handlers = { delete: handleDelete };
      handleDelete.peek = peekDelete;
      function handleDelete(node, _, context) {
        var exit = context.enter("emphasis");
        var value = phrasing(node, context, { before: "~", after: "~" });
        exit();
        return "~~" + value + "~~";
      }
      function peekDelete() {
        return "~";
      }
    }
  });

  // node_modules/markdown-table/index.js
  var require_markdown_table = __commonJS({
    "node_modules/markdown-table/index.js"(exports, module) {
      init_globals();
      var repeat = require_repeat_string();
      module.exports = markdownTable;
      var trailingWhitespace = / +$/;
      var space = " ";
      var lineFeed = "\n";
      var dash = "-";
      var colon = ":";
      var verticalBar = "|";
      var x = 0;
      var C = 67;
      var L = 76;
      var R = 82;
      var c = 99;
      var l = 108;
      var r = 114;
      function markdownTable(table, options) {
        var settings = options || {};
        var padding = settings.padding !== false;
        var start = settings.delimiterStart !== false;
        var end = settings.delimiterEnd !== false;
        var align = (settings.align || []).concat();
        var alignDelimiters = settings.alignDelimiters !== false;
        var alignments = [];
        var stringLength = settings.stringLength || defaultStringLength;
        var rowIndex = -1;
        var rowLength = table.length;
        var cellMatrix = [];
        var sizeMatrix = [];
        var row = [];
        var sizes = [];
        var longestCellByColumn = [];
        var mostCellsPerRow = 0;
        var cells;
        var columnIndex;
        var columnLength;
        var largest;
        var size;
        var cell;
        var lines;
        var line;
        var before;
        var after;
        var code2;
        while (++rowIndex < rowLength) {
          cells = table[rowIndex];
          columnIndex = -1;
          columnLength = cells.length;
          row = [];
          sizes = [];
          if (columnLength > mostCellsPerRow) {
            mostCellsPerRow = columnLength;
          }
          while (++columnIndex < columnLength) {
            cell = serialize(cells[columnIndex]);
            if (alignDelimiters === true) {
              size = stringLength(cell);
              sizes[columnIndex] = size;
              largest = longestCellByColumn[columnIndex];
              if (largest === void 0 || size > largest) {
                longestCellByColumn[columnIndex] = size;
              }
            }
            row.push(cell);
          }
          cellMatrix[rowIndex] = row;
          sizeMatrix[rowIndex] = sizes;
        }
        columnIndex = -1;
        columnLength = mostCellsPerRow;
        if (typeof align === "object" && "length" in align) {
          while (++columnIndex < columnLength) {
            alignments[columnIndex] = toAlignment(align[columnIndex]);
          }
        } else {
          code2 = toAlignment(align);
          while (++columnIndex < columnLength) {
            alignments[columnIndex] = code2;
          }
        }
        columnIndex = -1;
        columnLength = mostCellsPerRow;
        row = [];
        sizes = [];
        while (++columnIndex < columnLength) {
          code2 = alignments[columnIndex];
          before = "";
          after = "";
          if (code2 === l) {
            before = colon;
          } else if (code2 === r) {
            after = colon;
          } else if (code2 === c) {
            before = colon;
            after = colon;
          }
          size = alignDelimiters ? Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length) : 1;
          cell = before + repeat(dash, size) + after;
          if (alignDelimiters === true) {
            size = before.length + size + after.length;
            if (size > longestCellByColumn[columnIndex]) {
              longestCellByColumn[columnIndex] = size;
            }
            sizes[columnIndex] = size;
          }
          row[columnIndex] = cell;
        }
        cellMatrix.splice(1, 0, row);
        sizeMatrix.splice(1, 0, sizes);
        rowIndex = -1;
        rowLength = cellMatrix.length;
        lines = [];
        while (++rowIndex < rowLength) {
          row = cellMatrix[rowIndex];
          sizes = sizeMatrix[rowIndex];
          columnIndex = -1;
          columnLength = mostCellsPerRow;
          line = [];
          while (++columnIndex < columnLength) {
            cell = row[columnIndex] || "";
            before = "";
            after = "";
            if (alignDelimiters === true) {
              size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
              code2 = alignments[columnIndex];
              if (code2 === r) {
                before = repeat(space, size);
              } else if (code2 === c) {
                if (size % 2 === 0) {
                  before = repeat(space, size / 2);
                  after = before;
                } else {
                  before = repeat(space, size / 2 + 0.5);
                  after = repeat(space, size / 2 - 0.5);
                }
              } else {
                after = repeat(space, size);
              }
            }
            if (start === true && columnIndex === 0) {
              line.push(verticalBar);
            }
            if (padding === true && !(alignDelimiters === false && cell === "") && (start === true || columnIndex !== 0)) {
              line.push(space);
            }
            if (alignDelimiters === true) {
              line.push(before);
            }
            line.push(cell);
            if (alignDelimiters === true) {
              line.push(after);
            }
            if (padding === true) {
              line.push(space);
            }
            if (end === true || columnIndex !== columnLength - 1) {
              line.push(verticalBar);
            }
          }
          line = line.join("");
          if (end === false) {
            line = line.replace(trailingWhitespace, "");
          }
          lines.push(line);
        }
        return lines.join(lineFeed);
      }
      function serialize(value) {
        return value === null || value === void 0 ? "" : String(value);
      }
      function defaultStringLength(value) {
        return value.length;
      }
      function toAlignment(value) {
        var code2 = typeof value === "string" ? value.charCodeAt(0) : x;
        return code2 === L || code2 === l ? l : code2 === R || code2 === r ? r : code2 === C || code2 === c ? c : x;
      }
    }
  });

  // node_modules/mdast-util-gfm-table/to-markdown.js
  var require_to_markdown3 = __commonJS({
    "node_modules/mdast-util-gfm-table/to-markdown.js"(exports, module) {
      init_globals();
      var phrasing = require_container_phrasing();
      var defaultInlineCode = require_inline_code2();
      var markdownTable = require_markdown_table();
      module.exports = toMarkdown;
      function toMarkdown(options) {
        var settings = options || {};
        var padding = settings.tableCellPadding;
        var alignDelimiters = settings.tablePipeAlign;
        var stringLength = settings.stringLength;
        var around = padding ? " " : "|";
        return {
          unsafe: [
            { character: "\r", inConstruct: "tableCell" },
            { character: "\n", inConstruct: "tableCell" },
            { atBreak: true, character: "|", after: "[	 :-]" },
            { character: "|", inConstruct: "tableCell" },
            { atBreak: true, character: ":", after: "-" },
            { atBreak: true, character: "-", after: "[:|-]" }
          ],
          handlers: {
            table: handleTable,
            tableRow: handleTableRow,
            tableCell: handleTableCell,
            inlineCode: inlineCodeWithTable
          }
        };
        function handleTable(node, _, context) {
          return serializeData(handleTableAsData(node, context), node.align);
        }
        function handleTableRow(node, _, context) {
          var row = handleTableRowAsData(node, context);
          var value = serializeData([row]);
          return value.slice(0, value.indexOf("\n"));
        }
        function handleTableCell(node, _, context) {
          var exit = context.enter("tableCell");
          var value = phrasing(node, context, { before: around, after: around });
          exit();
          return value;
        }
        function serializeData(matrix, align) {
          return markdownTable(matrix, {
            align,
            alignDelimiters,
            padding,
            stringLength
          });
        }
        function handleTableAsData(node, context) {
          var children = node.children;
          var index = -1;
          var length = children.length;
          var result = [];
          var subexit = context.enter("table");
          while (++index < length) {
            result[index] = handleTableRowAsData(children[index], context);
          }
          subexit();
          return result;
        }
        function handleTableRowAsData(node, context) {
          var children = node.children;
          var index = -1;
          var length = children.length;
          var result = [];
          var subexit = context.enter("tableRow");
          while (++index < length) {
            result[index] = handleTableCell(children[index], node, context);
          }
          subexit();
          return result;
        }
        function inlineCodeWithTable(node, parent, context) {
          var value = defaultInlineCode(node, parent, context);
          if (context.stack.indexOf("tableCell") !== -1) {
            value = value.replace(/\|/g, "\\$&");
          }
          return value;
        }
      }
    }
  });

  // node_modules/mdast-util-gfm-task-list-item/to-markdown.js
  var require_to_markdown4 = __commonJS({
    "node_modules/mdast-util-gfm-task-list-item/to-markdown.js"(exports) {
      init_globals();
      var defaultListItem = require_list_item2();
      exports.unsafe = [{ atBreak: true, character: "-", after: "[:|-]" }];
      exports.handlers = {
        listItem: listItemWithTaskListItem
      };
      function listItemWithTaskListItem(node, parent, context) {
        var value = defaultListItem(node, parent, context);
        var head = node.children[0];
        if (typeof node.checked === "boolean" && head && head.type === "paragraph") {
          value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
        }
        return value;
        function check($0) {
          return $0 + "[" + (node.checked ? "x" : " ") + "] ";
        }
      }
    }
  });

  // node_modules/mdast-util-gfm/to-markdown.js
  var require_to_markdown5 = __commonJS({
    "node_modules/mdast-util-gfm/to-markdown.js"(exports, module) {
      init_globals();
      var autolinkLiteral = require_to_markdown();
      var strikethrough = require_to_markdown2();
      var table = require_to_markdown3();
      var taskListItem = require_to_markdown4();
      var configure = require_configure();
      module.exports = toMarkdown;
      function toMarkdown(options) {
        var config = configure({ handlers: {}, join: [], unsafe: [], options: {} }, {
          extensions: [autolinkLiteral, strikethrough, table(options), taskListItem]
        });
        return Object.assign(config.options, {
          handlers: config.handlers,
          join: config.join,
          unsafe: config.unsafe
        });
      }
    }
  });

  // node_modules/@inkdropapp/html2markdown/lib/index.js
  var require_lib5 = __commonJS({
    "node_modules/@inkdropapp/html2markdown/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = HTML2Markdown;
      var _hardBreak = _interopRequireDefault(require_hard_break());
      var _toMdastCodeBlock = _interopRequireDefault(require_to_mdast_code_block());
      var _toMdastComment = _interopRequireDefault(require_to_mdast_comment());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function getConverter(opts) {
        const {
          toMdast: toMdastOptions = {},
          stringify: stringifyOptions = {},
          baseURI = null
        } = opts || {};
        const unified = require_unified();
        const rehypeParse = require_rehype_parse();
        const rehype2remark = require_rehype_remark();
        const rehypeInsert = require_rehype_insert();
        const stringify2 = require_remark_stringify();
        const squeezeLinks = require_remark_squeeze_links();
        const gfm = require_to_markdown5();
        const remark = unified().data("toMarkdownExtensions", [gfm()]).use(rehypeParse).use(rehypeInsert, {
          insertions: baseURI ? [{
            selector: "head",
            insert: {
              type: "element",
              tagName: "base",
              properties: {
                href: baseURI
              },
              children: []
            }
          }] : []
        }).use(rehype2remark, {
          handlers: {
            pre: _toMdastCodeBlock.default,
            comment: _toMdastComment.default,
            ...toMdastOptions.handlers || {}
          },
          ...toMdastOptions
        });
        return remark.use(squeezeLinks).use(stringify2, {
          listItemIndent: "1",
          bullet: "*",
          commonmark: true,
          fences: true,
          handlers: {
            break: _hardBreak.default,
            ...stringifyOptions.handlers || {}
          },
          ...stringifyOptions
        });
      }
      function HTML2Markdown(html2, opts) {
        const c = getConverter(opts);
        return c.processSync(html2).toString().replace(/\\\[(x| )\]/g, "[$1]");
      }
    }
  });

  // node_modules/fast-safe-stringify/index.js
  var require_fast_safe_stringify = __commonJS({
    "node_modules/fast-safe-stringify/index.js"(exports, module) {
      init_globals();
      module.exports = stringify2;
      stringify2.default = stringify2;
      stringify2.stable = deterministicStringify;
      stringify2.stableStringify = deterministicStringify;
      var LIMIT_REPLACE_NODE = "[...]";
      var CIRCULAR_REPLACE_NODE = "[Circular]";
      var arr = [];
      var replacerStack = [];
      function defaultOptions() {
        return {
          depthLimit: Number.MAX_SAFE_INTEGER,
          edgesLimit: Number.MAX_SAFE_INTEGER
        };
      }
      function stringify2(obj, replacer, spacer, options) {
        if (typeof options === "undefined") {
          options = defaultOptions();
        }
        decirc(obj, "", 0, [], void 0, 0, options);
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(obj, replacer, spacer);
          } else {
            res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function setReplace(replace, val, k, parent) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
        if (propertyDescriptor.get !== void 0) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: replace });
            arr.push([parent, k, val, propertyDescriptor]);
          } else {
            replacerStack.push([val, k, replace]);
          }
        } else {
          parent[k] = replace;
          arr.push([parent, k, val]);
        }
      }
      function decirc(val, k, edgeIndex, stack, parent, depth, options) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              decirc(val[i], i, i, stack, val, depth, options);
            }
          } else {
            var keys = Object.keys(val);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              decirc(val[key], key, i, stack, val, depth, options);
            }
          }
          stack.pop();
        }
      }
      function compareFunction(a, b) {
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      function deterministicStringify(obj, replacer, spacer, options) {
        if (typeof options === "undefined") {
          options = defaultOptions();
        }
        var tmp = deterministicDecirc(obj, "", 0, [], void 0, 0, options) || obj;
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(tmp, replacer, spacer);
          } else {
            res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          try {
            if (typeof val.toJSON === "function") {
              return;
            }
          } catch (_) {
            return;
          }
          if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              deterministicDecirc(val[i], i, i, stack, val, depth, options);
            }
          } else {
            var tmp = {};
            var keys = Object.keys(val).sort(compareFunction);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              deterministicDecirc(val[key], key, i, stack, val, depth, options);
              tmp[key] = val[key];
            }
            if (typeof parent !== "undefined") {
              arr.push([parent, k, val]);
              parent[k] = tmp;
            } else {
              return tmp;
            }
          }
          stack.pop();
        }
      }
      function replaceGetterValues(replacer) {
        replacer = typeof replacer !== "undefined" ? replacer : function(k, v) {
          return v;
        };
        return function(key, val) {
          if (replacerStack.length > 0) {
            for (var i = 0; i < replacerStack.length; i++) {
              var part = replacerStack[i];
              if (part[1] === key && part[0] === val) {
                val = part[2];
                replacerStack.splice(i, 1);
                break;
              }
            }
          }
          return replacer.call(this, key, val);
        };
      }
    }
  });

  // node_modules/citeproc/citeproc_commonjs.js
  var require_citeproc_commonjs = __commonJS({
    "node_modules/citeproc/citeproc_commonjs.js"(exports, module) {
      init_globals();
      var CSL2 = {
        PROCESSOR_VERSION: "1.4.61",
        error: function(str) {
          if (typeof Error === "undefined") {
            throw new Error("citeproc-js error: " + str);
          } else {
            throw "citeproc-js error: " + str;
          }
        },
        debug: function(str) {
          if (typeof console === "undefined") {
            dump("CSL: " + str + "\n");
          } else {
            console.log("citeproc-js warning: " + str);
          }
        },
        toLocaleUpperCase(str) {
          var arr = this.tmp.lang_array;
          try {
            str = str.toLocaleUpperCase(arr);
          } catch (e) {
            str = str.toUpperCase();
          }
          return str;
        },
        toLocaleLowerCase(str) {
          var arr = this.tmp.lang_array;
          try {
            str = str.toLocaleLowerCase(arr);
          } catch (e) {
            str = str.toLowerCase();
          }
          return str;
        },
        LOCATOR_LABELS_REGEXP: new RegExp("^((vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\\.)\\s+(.*)"),
        STATUTE_SUBDIV_PLAIN_REGEX: /(?:(?:^| )(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
        STATUTE_SUBDIV_PLAIN_REGEX_FRONT: /(?:^\s*[.,;]*\s*(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
        STATUTE_SUBDIV_STRINGS: {
          "vrs.": "verse",
          "sv.": "sub-verbo",
          "subpara.": "subparagraph",
          "op.": "opus",
          "subch.": "subchapter",
          "add.": "addendum",
          "amend.": "amendment",
          "annot.": "annotation",
          "app.": "appendix",
          "art.": "article",
          "bibliog.": "bibliography",
          "bk.": "book",
          "ch.": "chapter",
          "cl.": "clause",
          "col.": "column",
          "cmt.": "comment",
          "dec.": "decision",
          "dept.": "department",
          "ex.": "example",
          "fig.": "figure",
          "fld.": "field",
          "fol.": "folio",
          "n.": "note",
          "hypo.": "hypothetical",
          "illus.": "illustration",
          "intro.": "introduction",
          "l.": "line",
          "no.": "issue",
          "p.": "page",
          "pp.": "page",
          "para.": "paragraph",
          "pt.": "part",
          "pmbl.": "preamble",
          "princ.": "principle",
          "pub.": "publication",
          "r.": "rule",
          "rn.": "randnummer",
          "sched.": "schedule",
          "sec.": "section",
          "ser.": "series,",
          "subdiv.": "subdivision",
          "subsec.": "subsection",
          "supp.": "supplement",
          "tbl.": "table",
          "tit.": "title",
          "vol.": "volume"
        },
        STATUTE_SUBDIV_STRINGS_REVERSE: {
          "verse": "vrs.",
          "sub-verbo": "sv.",
          "sub verbo": "sv.",
          "subparagraph": "subpara.",
          "opus": "op.",
          "subchapter": "subch.",
          "addendum": "add.",
          "amendment": "amend.",
          "annotation": "annot.",
          "appendix": "app.",
          "article": "art.",
          "bibliography": "bibliog.",
          "book": "bk.",
          "chapter": "ch.",
          "clause": "cl.",
          "column": "col.",
          "comment": "cmt.",
          "decision": "dec.",
          "department": "dept.",
          "example": "ex.",
          "figure": "fig.",
          "field": "fld.",
          "folio": "fol.",
          "note": "n.",
          "hypothetical": "hypo.",
          "illustration": "illus.",
          "introduction": "intro.",
          "line": "l.",
          "issue": "no.",
          "page": "p.",
          "paragraph": "para.",
          "part": "pt.",
          "preamble": "pmbl.",
          "principle": "princ.",
          "publication": "pub.",
          "rule": "r.",
          "randnummer": "rn.",
          "schedule": "sched.",
          "section": "sec.",
          "series,": "ser.",
          "subdivision": "subdiv.",
          "subsection": "subsec.",
          "supplement": "supp.",
          "table": "tbl.",
          "title": "tit.",
          "volume": "vol."
        },
        LOCATOR_LABELS_MAP: {
          "vrs": "verse",
          "sv": "sub-verbo",
          "subpara": "subparagraph",
          "op": "opus",
          "subch": "subchapter",
          "add": "addendum",
          "amend": "amendment",
          "annot": "annotation",
          "app": "appendix",
          "art": "article",
          "bibliog": "bibliography",
          "bk": "book",
          "ch": "chapter",
          "cl": "clause",
          "col": "column",
          "cmt": "comment",
          "dec": "decision",
          "dept": "department",
          "ex": "example",
          "fig": "figure",
          "fld": "field",
          "fol": "folio",
          "n": "note",
          "hypo": "hypothetical",
          "illus": "illustration",
          "intro": "introduction",
          "l": "line",
          "no": "issue",
          "p": "page",
          "pp": "page",
          "para": "paragraph",
          "pt": "part",
          "pmbl": "preamble",
          "princ": "principle",
          "pub": "publication",
          "r": "rule",
          "rn": "randnummer",
          "sched": "schedule",
          "sec": "section",
          "ser": "series,",
          "subdiv": "subdivision",
          "subsec": "subsection",
          "supp": "supplement",
          "tbl": "table",
          "tit": "title",
          "vol": "volume"
        },
        MODULE_MACROS: {
          "juris-pretitle": true,
          "juris-title": true,
          "juris-pretitle-short": true,
          "juris-title-short": true,
          "juris-main": true,
          "juris-main-short": true,
          "juris-tail": true,
          "juris-tail-short": true,
          "juris-locator": true
        },
        MODULE_TYPES: {
          "legal_case": true,
          "legislation": true,
          "bill": true,
          "hearing": true,
          "gazette": true,
          "report": true,
          "regulation": true,
          "standard": true,
          "patent": true,
          "locator": true
        },
        checkNestedBrace: function(state) {
          if (state.opt.xclass === "note") {
            this.depth = 0;
            this.update = function(str) {
              var str = str ? str : "";
              var lst = str.split(/([\(\)])/);
              for (var i = 1, ilen = lst.length; i < ilen; i += 2) {
                if (lst[i] === "(") {
                  if (this.depth % 2 === 1) {
                    lst[i] = "[";
                  }
                  this.depth += 1;
                } else if (lst[i] === ")") {
                  if (this.depth % 2 === 0) {
                    lst[i] = "]";
                  }
                  this.depth -= 1;
                }
              }
              var ret = lst.join("");
              return ret;
            };
          } else {
            this.update = function(str) {
              return str;
            };
          }
        },
        MULTI_FIELDS: ["event", "publisher", "publisher-place", "event-place", "title", "container-title", "collection-title", "authority", "genre", "title-short", "medium", "country", "jurisdiction", "archive", "archive-place"],
        LangPrefsMap: {
          "title": "titles",
          "title-short": "titles",
          "event": "titles",
          "genre": "titles",
          "medium": "titles",
          "container-title": "journals",
          "collection-title": "titles",
          "archive": "journals",
          "publisher": "publishers",
          "authority": "publishers",
          "publisher-place": "places",
          "event-place": "places",
          "archive-place": "places",
          "jurisdiction": "places",
          "number": "places",
          "edition": "places",
          "issue": "places",
          "volume": "places"
        },
        AbbreviationSegments: function() {
          this["container-title"] = {};
          this["collection-title"] = {};
          this["institution-entire"] = {};
          this["institution-part"] = {};
          this.nickname = {};
          this.number = {};
          this.title = {};
          this.place = {};
          this.hereinafter = {};
          this.classic = {};
          this["container-phrase"] = {};
          this["title-phrase"] = {};
        },
        getAbbrevsDomain: function(state, country2, lang) {
          var domain = null;
          if (state.opt.availableAbbrevDomains && country2 && country2 !== "default") {
            var globalDomainPreference = state.locale[state.opt.lang].opts["jurisdiction-preference"];
            var itemDomainPreference = null;
            if (state.locale[lang]) {
              itemDomainPreference = state.locale[lang].opts["jurisdiction-preference"];
            }
            if (itemDomainPreference) {
              for (var j = itemDomainPreference.length - 1; j > -1; j--) {
                if (state.opt.availableAbbrevDomains[country2].indexOf(itemDomainPreference[j]) > -1) {
                  domain = itemDomainPreference[j];
                  break;
                }
              }
            }
            if (!domain && globalDomainPreference) {
              for (var j = globalDomainPreference.length - 1; j > -1; j--) {
                if (state.opt.availableAbbrevDomains[country2].indexOf(globalDomainPreference[j]) > -1) {
                  domain = globalDomainPreference[j];
                  break;
                }
              }
            }
          }
          return domain;
        },
        FIELD_CATEGORY_REMAP: {
          "title": "title",
          "container-title": "container-title",
          "collection-title": "collection-title",
          "country": "place",
          "number": "number",
          "place": "place",
          "archive": "container-title",
          "title-short": "title",
          "genre": "title",
          "event": "title",
          "medium": "title",
          "archive-place": "place",
          "publisher-place": "place",
          "event-place": "place",
          "jurisdiction": "place",
          "language-name": "place",
          "language-name-original": "place",
          "call-number": "number",
          "chapter-number": "number",
          "collection-number": "number",
          "edition": "number",
          "page": "number",
          "issue": "number",
          "locator": "number",
          "locator-extra": "number",
          "number-of-pages": "number",
          "number-of-volumes": "number",
          "volume": "number",
          "citation-number": "number",
          "publisher": "institution-part"
        },
        parseLocator: function(item) {
          if (this.opt.development_extensions.locator_date_and_revision) {
            if (item.locator) {
              item.locator = "" + item.locator;
              var idx = item.locator.indexOf("|");
              if (idx > -1) {
                var raw_locator = item.locator;
                item.locator = raw_locator.slice(0, idx);
                raw_locator = raw_locator.slice(idx + 1);
                var m = raw_locator.match(/^([0-9]{4}-[0-9]{2}-[0-9]{2}).*/);
                if (m) {
                  item["locator-date"] = this.fun.dateparser.parseDateToObject(m[1]);
                  raw_locator = raw_locator.slice(m[1].length);
                }
                item["locator-extra"] = raw_locator.replace(/^\s+/, "").replace(/\s+$/, "");
              }
            }
          }
          if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, "");
          }
          return item;
        },
        normalizeLocaleStr: function(str) {
          if (!str) {
            return;
          }
          var lst = str.split("-");
          lst[0] = lst[0].toLowerCase();
          if (lst[1]) {
            lst[1] = lst[1].toUpperCase();
          }
          return lst.join("-");
        },
        parseNoteFieldHacks: function(Item, validFieldsForType, allowDateOverride) {
          if (typeof Item.note !== "string") {
            return;
          }
          var elems = [];
          var lines = Item.note.split("\n");
          for (var i = 0, ilen = lines.length; i < ilen; i++) {
            var line = lines[i];
            var elems = [];
            var m = line.match(CSL2.NOTE_FIELDS_REGEXP);
            if (m) {
              var splt = line.split(CSL2.NOTE_FIELDS_REGEXP);
              for (var j = 0, jlen = splt.length - 1; j < jlen; j++) {
                elems.push(splt[j]);
                elems.push(m[j]);
              }
              elems.push(splt[splt.length - 1]);
              for (var j = 1, jlen = elems.length; j < jlen; j += 2) {
                if (elems[j - 1].trim() && (i > 0 || j > 1) && !elems[j - 1].match(CSL2.NOTE_FIELD_REGEXP)) {
                  break;
                } else {
                  elems[j] = "\n" + elems[j].slice(2, -1).trim() + "\n";
                }
              }
              lines[i] = elems.join("");
            }
          }
          lines = lines.join("\n").split("\n");
          var offset = 0;
          var names2 = {};
          for (var i = 0, ilen = lines.length; i < ilen; i++) {
            var line = lines[i];
            var mm = line.match(CSL2.NOTE_FIELD_REGEXP);
            if (!line.trim()) {
              continue;
            } else if (!mm) {
              if (i === 0) {
                continue;
              } else {
                offset = i;
                break;
              }
            }
            var key = mm[1];
            var val = mm[2].replace(/^\s+/, "").replace(/\s+$/, "");
            if (key === "type") {
              Item.type = val;
              lines[i] = "";
            } else if (CSL2.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
              if (!Item[key] || allowDateOverride) {
                Item[key] = CSL2.DateParser.parseDateToArray(val);
                if (!validFieldsForType || validFieldsForType[key] && this.isDateString(val)) {
                  lines[i] = "";
                }
              }
            } else if (!Item[key]) {
              if (CSL2.NAME_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
                if (!names2[key]) {
                  names2[key] = [];
                }
                var lst = val.split(/\s*\|\|\s*/);
                if (lst.length === 1) {
                  names2[key].push({ literal: lst[0] });
                } else if (lst.length === 2) {
                  var name = { family: lst[0], given: lst[1] };
                  CSL2.parseParticles(name);
                  names2[key].push(name);
                }
              } else {
                Item[key] = val;
              }
              if (!validFieldsForType || validFieldsForType[key]) {
                lines[i] = "";
              }
            }
          }
          for (var key in names2) {
            Item[key] = names2[key];
          }
          if (validFieldsForType) {
            if (lines[offset].trim()) {
              lines[offset] = "\n" + lines[offset];
            }
            for (var i = offset - 1; i > -1; i--) {
              if (!lines[i].trim()) {
                lines = lines.slice(0, i).concat(lines.slice(i + 1));
              }
            }
          }
          Item.note = lines.join("\n").trim();
        },
        checkPrefixSpaceAppend: function(state, prefix) {
          if (!prefix) {
            prefix = "";
          }
          var sp = "";
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
          var test_char = test_prefix.slice(-1);
          if (test_prefix.match(CSL2.ENDSWITH_ROMANESQUE_REGEXP)) {
            sp = " ";
          } else if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1) {
            sp = " ";
          } else if (test_char.match(/[\)\],0-9]/)) {
            sp = " ";
          }
          var prefix = (prefix + sp).replace(/\s+/g, " ");
          return prefix;
        },
        checkIgnorePredecessor: function(state, prefix) {
          var ignorePredecessor = false;
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
          var test_char = test_prefix.slice(-1);
          if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1 && prefix.trim().indexOf(" ") > -1) {
            state.tmp.term_predecessor = false;
            return true;
          }
          return false;
        },
        checkSuffixSpacePrepend: function(state, suffix) {
          if (!suffix) {
            return "";
          }
          if (suffix.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) || ["[", "("].indexOf(suffix.slice(0, 1)) > -1) {
            suffix = " " + suffix;
          }
          return suffix;
        },
        GENDERS: ["masculine", "feminine"],
        ERROR_NO_RENDERED_FORM: 1,
        PREVIEW: "Just for laughs.",
        ASSUME_ALL_ITEMS_REGISTERED: 2,
        START: 0,
        END: 1,
        SINGLETON: 2,
        SEEN: 6,
        SUCCESSOR: 3,
        SUCCESSOR_OF_SUCCESSOR: 4,
        SUPPRESS: 5,
        SINGULAR: 0,
        PLURAL: 1,
        LITERAL: true,
        BEFORE: 1,
        AFTER: 2,
        DESCENDING: 1,
        ASCENDING: 2,
        PRIMARY: 1,
        SECONDARY: 2,
        POSITION_FIRST: 0,
        POSITION_SUBSEQUENT: 1,
        POSITION_IBID: 2,
        POSITION_IBID_WITH_LOCATOR: 3,
        POSITION_CONTAINER_SUBSEQUENT: 4,
        POSITION_MAP: {
          "0": 0,
          "4": 1,
          "1": 2,
          "2": 3,
          "3": 4
        },
        POSITION_TEST_VARS: ["position", "first-reference-note-number", "near-note"],
        AREAS: ["citation", "citation_sort", "bibliography", "bibliography_sort", "intext"],
        CITE_FIELDS: ["first-reference-note-number", "first-container-reference-note-number", "locator", "locator-extra"],
        SWAPPING_PUNCTUATION: [".", "!", "?", ":", ","],
        TERMINAL_PUNCTUATION: [":", ".", ";", "!", "?", " "],
        NONE: 0,
        NUMERIC: 1,
        POSITION: 2,
        TRIGRAPH: 3,
        DATE_PARTS: ["year", "month", "day"],
        DATE_PARTS_ALL: ["year", "month", "day", "season"],
        DATE_PARTS_INTERNAL: ["year", "month", "day", "year_end", "month_end", "day_end"],
        NAME_PARTS: ["non-dropping-particle", "family", "given", "dropping-particle", "suffix", "literal"],
        DISAMBIGUATE_OPTIONS: [
          "disambiguate-add-names",
          "disambiguate-add-givenname",
          "disambiguate-add-year-suffix"
        ],
        GIVENNAME_DISAMBIGUATION_RULES: [
          "all-names",
          "all-names-with-initials",
          "primary-name",
          "primary-name-with-initials",
          "by-cite"
        ],
        NAME_ATTRIBUTES: [
          "and",
          "delimiter-precedes-last",
          "delimiter-precedes-et-al",
          "initialize-with",
          "initialize",
          "name-as-sort-order",
          "sort-separator",
          "et-al-min",
          "et-al-use-first",
          "et-al-subsequent-min",
          "et-al-subsequent-use-first",
          "form",
          "prefix",
          "suffix",
          "delimiter"
        ],
        LOOSE: 0,
        STRICT: 1,
        TOLERANT: 2,
        PREFIX_PUNCTUATION: /[.;:]\s*$/,
        SUFFIX_PUNCTUATION: /^\s*[.;:,\(\)]/,
        NUMBER_REGEXP: /(?:^\d+|\d+$)/,
        NAME_INITIAL_REGEXP: /^([A-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u042f\u0590-\u05d4\u05d6-\u05ff\u0600-\u06ff\u0370\u0372\u0376\u0386\u0388-\u03ab\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f4\u03f7\u03fd-\u03ff])([a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u052f\u0600-\u06ff\u0370-\u03ff\u1f00-\u1fff]*|)(\.)*/,
        ROMANESQUE_REGEXP: /[-0-9a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
        ROMANESQUE_NOT_REGEXP: /[^a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/g,
        STARTSWITH_ROMANESQUE_REGEXP: /^[&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
        ENDSWITH_ROMANESQUE_REGEXP: /[.;:&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]$/,
        ALL_ROMANESQUE_REGEXP: /^[a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]+$/,
        VIETNAMESE_SPECIALS: /[\u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]/,
        VIETNAMESE_NAMES: /^(?:(?:[.AaBbCcDdEeGgHhIiKkLlMmNnOoPpQqRrSsTtUuVvXxYy \u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]{2,6})(\s+|$))+$/,
        NOTE_FIELDS_REGEXP: /\{:(?:[\-_a-z]+|[A-Z]+):[^\}]+\}/g,
        NOTE_FIELD_REGEXP: /^([\-_a-z]+|[A-Z]+):\s*([^\}]+)$/,
        PARTICLE_GIVEN_REGEXP: /^([^ ]+(?:\u02bb |\u2019 | |\' ) *)(.+)$/,
        PARTICLE_FAMILY_REGEXP: /^([^ ]+(?:\-|\u02bb|\u2019| |\') *)(.+)$/,
        DISPLAY_CLASSES: ["block", "left-margin", "right-inline", "indent"],
        NAME_VARIABLES: [
          "author",
          "chair",
          "collection-editor",
          "compiler",
          "composer",
          "container-author",
          "contributor",
          "curator",
          "director",
          "editor",
          "editor-translator",
          "editorial-director",
          "executive-producer",
          "guest",
          "host",
          "illustrator",
          "interviewer",
          "narrator",
          "organizer",
          "original-author",
          "performer",
          "producer",
          "recipient",
          "reviewed-author",
          "script-writer",
          "series-creator",
          "translator",
          "commenter"
        ],
        CREATORS: [
          "author",
          "chair",
          "collection-editor",
          "compiler",
          "composer",
          "container-author",
          "contributor",
          "curator",
          "director",
          "editor",
          "editor-translator",
          "editorial-director",
          "executive-producer",
          "guest",
          "host",
          "illustrator",
          "interviewer",
          "narrator",
          "organizer",
          "original-author",
          "performer",
          "producer",
          "recipient",
          "reviewed-author",
          "script-writer",
          "series-creator",
          "translator",
          "commenter"
        ],
        NUMERIC_VARIABLES: [
          "call-number",
          "chapter-number",
          "collection-number",
          "division",
          "edition",
          "page",
          "issue",
          "locator",
          "locator-extra",
          "number",
          "number-of-pages",
          "number-of-volumes",
          "part-number",
          "printing-number",
          "section",
          "supplement-number",
          "version",
          "volume",
          "supplement",
          "citation-number"
        ],
        DATE_VARIABLES: [
          "locator-date",
          "issued",
          "event-date",
          "accessed",
          "original-date",
          "publication-date",
          "available-date",
          "submitted",
          "alt-issued",
          "alt-event"
        ],
        VARIABLES_WITH_SHORT_FORM: [
          "title",
          "container-title"
        ],
        TITLE_FIELD_SPLITS: function(seg) {
          var keys = ["title", "short", "main", "sub", "subjoin"];
          var ret = {};
          for (var i = 0, ilen = keys.length; i < ilen; i++) {
            ret[keys[i]] = seg + "title" + (keys[i] === "title" ? "" : "-" + keys[i]);
          }
          return ret;
        },
        demoteNoiseWords: function(state, fld, drop_or_demote) {
          var SKIP_WORDS = state.locale[state.opt.lang].opts["leading-noise-words"];
          if (fld && drop_or_demote) {
            fld = fld.split(/\s+/);
            fld.reverse();
            var toEnd = [];
            for (var j = fld.length - 1; j > -1; j += -1) {
              if (SKIP_WORDS.indexOf(fld[j].toLowerCase()) > -1) {
                toEnd.push(fld.pop());
              } else {
                break;
              }
            }
            fld.reverse();
            var start = fld.join(" ");
            var end = toEnd.join(" ");
            if (drop_or_demote === "drop" || !end) {
              fld = start;
            } else if (drop_or_demote === "demote") {
              fld = [start, end].join(", ");
            }
          }
          return fld;
        },
        extractTitleAndSubtitle: function(Item, narrowSpaceLocale) {
          var narrowSpace = narrowSpaceLocale ? "\u202F" : "";
          var segments = [""];
          if (this.opt.development_extensions.split_container_title) {
            segments.push("container-");
          }
          for (var i = 0, ilen = segments.length; i < ilen; i++) {
            var seg = segments[i];
            var title2 = CSL2.TITLE_FIELD_SPLITS(seg);
            var langs = [false];
            if (Item.multi) {
              for (var lang in Item.multi._keys[title2.short]) {
                langs.push(lang);
              }
            }
            for (var j = 0, jlen = langs.length; j < jlen; j++) {
              var lang = langs[j];
              var vals = {};
              if (lang) {
                if (Item.multi._keys[title2.title]) {
                  vals[title2.title] = Item.multi._keys[title2.title][lang];
                }
                if (Item.multi._keys[title2["short"]]) {
                  vals[title2["short"]] = Item.multi._keys[title2["short"]][lang];
                }
              } else {
                vals[title2.title] = Item[title2.title];
                vals[title2["short"]] = Item[title2["short"]];
              }
              vals[title2.main] = vals[title2.title];
              vals[title2.sub] = false;
              var shortTitle2 = vals[title2["short"]];
              if (vals[title2.title]) {
                if (shortTitle2 && shortTitle2.toLowerCase() === vals[title2.title].toLowerCase()) {
                  vals[title2.main] = vals[title2.title];
                  vals[title2.subjoin] = "";
                  vals[title2.sub] = "";
                } else if (shortTitle2) {
                  var tail = vals[title2.title].slice(shortTitle2.replace(/[\?\!]+$/, "").length);
                  var top = vals[title2.title].replace(tail.replace(/^[\?\!]+/, ""), "").trim();
                  var m = CSL2.TITLE_SPLIT_REGEXP.matchfirst.exec(tail);
                  if (m && top.toLowerCase() === shortTitle2.toLowerCase()) {
                    vals[title2.main] = top;
                    vals[title2.subjoin] = m[1].replace(/[\?\!]+(\s*)$/, "$1");
                    vals[title2.sub] = tail.replace(CSL2.TITLE_SPLIT_REGEXP.matchfirst, "");
                    if (this.opt.development_extensions.force_short_title_casing_alignment) {
                      vals[title2["short"]] = vals[title2.main];
                    }
                  } else {
                    var splitTitle = CSL2.TITLE_SPLIT(vals[title2.title]);
                    if (splitTitle.length == 3) {
                      vals[title2.main] = splitTitle[0];
                      vals[title2.subjoin] = splitTitle[1];
                      vals[title2.sub] = splitTitle[2];
                    } else {
                      vals[title2.main] = vals[title2.title];
                      vals[title2.subjoin] = "";
                      vals[title2.sub] = "";
                    }
                  }
                } else {
                  var splitTitle = CSL2.TITLE_SPLIT(vals[title2.title]);
                  if (splitTitle.length == 3) {
                    vals[title2.main] = splitTitle[0];
                    vals[title2.subjoin] = splitTitle[1];
                    vals[title2.sub] = splitTitle[2];
                    if (this.opt.development_extensions.implicit_short_title && Item.type !== "legal_case") {
                      if (!Item[title2.short] && !vals[title2.main].match(/^[\-\.[0-9]+$/)) {
                        var punct = vals[title2.subjoin].trim();
                        if (["?", "!"].indexOf(punct) === -1) {
                          punct = "";
                        }
                        vals[title2.short] = vals[title2.main] + punct;
                      }
                    }
                  } else {
                    vals[title2.main] = vals[title2.title];
                    vals[title2.subjoin] = "";
                    vals[title2.sub] = "";
                  }
                }
                if (vals[title2.subjoin]) {
                  if (vals[title2.subjoin].match(/([\?\!])/)) {
                    var m = vals[title2.subjoin].match(/(\s*)$/);
                    vals[title2.main] = vals[title2.main] + narrowSpace + vals[title2.subjoin].trim();
                    vals[title2.subjoin] = m[1];
                  }
                }
              }
              if (vals[title2.subjoin]) {
                if (vals[title2.subjoin].indexOf(":") > -1) {
                  vals[title2.subjoin] = narrowSpace + ": ";
                }
                if (vals[title2.subjoin].indexOf("-") > -1 || vals[title2.subjoin].indexOf("\u2014") > -1) {
                  vals[title2.subjoin] = "\u2014";
                }
              }
              if (lang) {
                for (var key in vals) {
                  if (!Item.multi._keys[key]) {
                    Item.multi._keys[key] = {};
                  }
                  Item.multi._keys[key][lang] = vals[key];
                }
              } else {
                for (var key in vals) {
                  Item[key] = vals[key];
                }
              }
            }
          }
        },
        titlecaseSentenceOrNormal: function(state, Item, seg, lang, sentenceCase) {
          var title2 = CSL2.TITLE_FIELD_SPLITS(seg);
          var vals = {};
          if (lang && Item.multi) {
            if (Item.multi._keys[title2.title]) {
              vals[title2.title] = Item.multi._keys[title2.title][lang];
            }
            if (Item.multi._keys[title2.main]) {
              vals[title2.main] = Item.multi._keys[title2.main][lang];
            }
            if (Item.multi._keys[title2.sub]) {
              vals[title2.sub] = Item.multi._keys[title2.sub][lang];
            }
            if (Item.multi._keys[title2.subjoin]) {
              vals[title2.subjoin] = Item.multi._keys[title2.subjoin][lang];
            }
          } else {
            vals[title2.title] = Item[title2.title];
            vals[title2.main] = Item[title2.main];
            vals[title2.sub] = Item[title2.sub];
            vals[title2.subjoin] = Item[title2.subjoin];
          }
          if (vals[title2.main] && vals[title2.sub]) {
            var mainTitle = vals[title2.main];
            var subJoin = vals[title2.subjoin];
            var subTitle = vals[title2.sub];
            if (sentenceCase) {
              mainTitle = CSL2.Output.Formatters.sentence(state, mainTitle);
              subTitle = CSL2.Output.Formatters.sentence(state, subTitle);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
              subTitle = CSL2.Output.Formatters["capitalize-first"](state, subTitle);
            }
            return [mainTitle, subJoin, subTitle].join("");
          } else if (vals[title2.title]) {
            if (sentenceCase) {
              return CSL2.Output.Formatters.sentence(state, vals[title2.title]);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
              var splits = CSL2.TITLE_SPLIT(vals[title2.title]);
              for (var i = 0, ilen = splits.length; i < ilen; i += 2) {
                splits[i] = CSL2.Output.Formatters["capitalize-first"](state, splits[i]);
              }
              for (var i = 1, ilen = splits.length - 1; i < ilen; i += 2) {
                var m = splits[i].match(/([:\?\!] )/);
                if (m) {
                  var narrowSpace = state.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr" ? "\u202F" : "";
                  splits[i] = narrowSpace + m[1];
                }
                if (splits[i].indexOf("-") > -1 || splits[i].indexOf("\u2014") > -1) {
                  splits[i] = "\u2014";
                }
              }
              vals[title2.title] = splits.join("");
              return vals[title2.title];
            } else {
              return vals[title2.title];
            }
          } else {
            return "";
          }
        },
        getSafeEscape: function(state) {
          if (["bibliography", "citation"].indexOf(state.tmp.area) > -1) {
            var callbacks = [];
            if (state.opt.development_extensions.thin_non_breaking_space_html_hack && state.opt.mode === "html") {
              callbacks.push(function(txt) {
                return txt.replace(/\u202f/g, '<span style="white-space:nowrap">&thinsp;</span>');
              });
            }
            if (callbacks.length) {
              return function(txt) {
                for (var i = 0, ilen = callbacks.length; i < ilen; i += 1) {
                  txt = callbacks[i](txt);
                }
                return CSL2.Output.Formats[state.opt.mode].text_escape(txt);
              };
            } else {
              return CSL2.Output.Formats[state.opt.mode].text_escape;
            }
          } else {
            return function(txt) {
              return txt;
            };
          }
        },
        SKIP_WORDS: ["about", "above", "across", "afore", "after", "against", "al", "along", "alongside", "amid", "amidst", "among", "amongst", "anenst", "apropos", "apud", "around", "as", "aside", "astride", "at", "athwart", "atop", "barring", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "but", "by", "circa", "despite", "down", "during", "et", "except", "for", "forenenst", "from", "given", "in", "inside", "into", "lest", "like", "modulo", "near", "next", "notwithstanding", "of", "off", "on", "onto", "out", "over", "per", "plus", "pro", "qua", "sans", "since", "than", "through", " thru", "throughout", "thruout", "till", "to", "toward", "towards", "under", "underneath", "until", "unto", "up", "upon", "versus", "vs.", "v.", "vs", "v", "via", "vis-\xE0-vis", "with", "within", "without", "according to", "ahead of", "apart from", "as for", "as of", "as per", "as regards", "aside from", "back to", "because of", "close to", "due to", "except for", "far from", "inside of", "instead of", "near to", "next to", "on to", "out from", "out of", "outside of", "prior to", "pursuant to", "rather than", "regardless of", "such as", "that of", "up to", "where as", "or", "yet", "so", "for", "and", "nor", "a", "an", "the", "de", "d'", "von", "van", "c", "ca"],
        FORMAT_KEY_SEQUENCE: [
          "@strip-periods",
          "@font-style",
          "@font-variant",
          "@font-weight",
          "@text-decoration",
          "@vertical-align",
          "@quotes"
        ],
        INSTITUTION_KEYS: [
          "font-style",
          "font-variant",
          "font-weight",
          "text-decoration",
          "text-case"
        ],
        SUFFIX_CHARS: "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z",
        ROMAN_NUMERALS: [
          ["", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"],
          ["", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"],
          ["", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"],
          ["", "m", "mm", "mmm", "mmmm", "mmmmm"]
        ],
        LANGS: {
          "af-ZA": "Afrikaans",
          "ar": "Arabic",
          "bg-BG": "Bulgarian",
          "ca-AD": "Catalan",
          "cs-CZ": "Czech",
          "da-DK": "Danish",
          "de-AT": "Austrian",
          "de-CH": "German (CH)",
          "de-DE": "German (DE)",
          "el-GR": "Greek",
          "en-GB": "English (GB)",
          "en-US": "English (US)",
          "es-ES": "Spanish",
          "et-EE": "Estonian",
          "eu": "European",
          "fa-IR": "Persian",
          "fi-FI": "Finnish",
          "fr-CA": "French (CA)",
          "fr-FR": "French (FR)",
          "he-IL": "Hebrew",
          "hr-HR": "Croatian",
          "hu-HU": "Hungarian",
          "is-IS": "Icelandic",
          "it-IT": "Italian",
          "ja-JP": "Japanese",
          "km-KH": "Khmer",
          "ko-KR": "Korean",
          "lt-LT": "Lithuanian",
          "lv-LV": "Latvian",
          "mn-MN": "Mongolian",
          "nb-NO": "Norwegian (Bokm\xE5l)",
          "nl-NL": "Dutch",
          "nn-NO": "Norwegian (Nynorsk)",
          "pl-PL": "Polish",
          "pt-BR": "Portuguese (BR)",
          "pt-PT": "Portuguese (PT)",
          "ro-RO": "Romanian",
          "ru-RU": "Russian",
          "sk-SK": "Slovak",
          "sl-SI": "Slovenian",
          "sr-RS": "Serbian",
          "sv-SE": "Swedish",
          "th-TH": "Thai",
          "tr-TR": "Turkish",
          "uk-UA": "Ukrainian",
          "vi-VN": "Vietnamese",
          "zh-CN": "Chinese (CN)",
          "zh-TW": "Chinese (TW)"
        },
        LANG_BASES: {
          af: "af_ZA",
          ar: "ar",
          bg: "bg_BG",
          ca: "ca_AD",
          cs: "cs_CZ",
          da: "da_DK",
          de: "de_DE",
          el: "el_GR",
          en: "en_US",
          es: "es_ES",
          et: "et_EE",
          eu: "eu",
          fa: "fa_IR",
          fi: "fi_FI",
          fr: "fr_FR",
          he: "he_IL",
          hr: "hr-HR",
          hu: "hu_HU",
          is: "is_IS",
          it: "it_IT",
          ja: "ja_JP",
          km: "km_KH",
          ko: "ko_KR",
          lt: "lt_LT",
          lv: "lv-LV",
          mn: "mn_MN",
          nb: "nb_NO",
          nl: "nl_NL",
          nn: "nn-NO",
          pl: "pl_PL",
          pt: "pt_PT",
          ro: "ro_RO",
          ru: "ru_RU",
          sk: "sk_SK",
          sl: "sl_SI",
          sr: "sr_RS",
          sv: "sv_SE",
          th: "th_TH",
          tr: "tr_TR",
          uk: "uk_UA",
          vi: "vi_VN",
          zh: "zh_CN"
        },
        SUPERSCRIPTS: {
          "\xAA": "a",
          "\xB2": "2",
          "\xB3": "3",
          "\xB9": "1",
          "\xBA": "o",
          "\u02B0": "h",
          "\u02B1": "\u0266",
          "\u02B2": "j",
          "\u02B3": "r",
          "\u02B4": "\u0279",
          "\u02B5": "\u027B",
          "\u02B6": "\u0281",
          "\u02B7": "w",
          "\u02B8": "y",
          "\u02E0": "\u0263",
          "\u02E1": "l",
          "\u02E2": "s",
          "\u02E3": "x",
          "\u02E4": "\u0295",
          "\u1D2C": "A",
          "\u1D2D": "\xC6",
          "\u1D2E": "B",
          "\u1D30": "D",
          "\u1D31": "E",
          "\u1D32": "\u018E",
          "\u1D33": "G",
          "\u1D34": "H",
          "\u1D35": "I",
          "\u1D36": "J",
          "\u1D37": "K",
          "\u1D38": "L",
          "\u1D39": "M",
          "\u1D3A": "N",
          "\u1D3C": "O",
          "\u1D3D": "\u0222",
          "\u1D3E": "P",
          "\u1D3F": "R",
          "\u1D40": "T",
          "\u1D41": "U",
          "\u1D42": "W",
          "\u1D43": "a",
          "\u1D44": "\u0250",
          "\u1D45": "\u0251",
          "\u1D46": "\u1D02",
          "\u1D47": "b",
          "\u1D48": "d",
          "\u1D49": "e",
          "\u1D4A": "\u0259",
          "\u1D4B": "\u025B",
          "\u1D4C": "\u025C",
          "\u1D4D": "g",
          "\u1D4F": "k",
          "\u1D50": "m",
          "\u1D51": "\u014B",
          "\u1D52": "o",
          "\u1D53": "\u0254",
          "\u1D54": "\u1D16",
          "\u1D55": "\u1D17",
          "\u1D56": "p",
          "\u1D57": "t",
          "\u1D58": "u",
          "\u1D59": "\u1D1D",
          "\u1D5A": "\u026F",
          "\u1D5B": "v",
          "\u1D5C": "\u1D25",
          "\u1D5D": "\u03B2",
          "\u1D5E": "\u03B3",
          "\u1D5F": "\u03B4",
          "\u1D60": "\u03C6",
          "\u1D61": "\u03C7",
          "\u2070": "0",
          "\u2071": "i",
          "\u2074": "4",
          "\u2075": "5",
          "\u2076": "6",
          "\u2077": "7",
          "\u2078": "8",
          "\u2079": "9",
          "\u207A": "+",
          "\u207B": "\u2212",
          "\u207C": "=",
          "\u207D": "(",
          "\u207E": ")",
          "\u207F": "n",
          "\u2120": "SM",
          "\u2122": "TM",
          "\u3192": "\u4E00",
          "\u3193": "\u4E8C",
          "\u3194": "\u4E09",
          "\u3195": "\u56DB",
          "\u3196": "\u4E0A",
          "\u3197": "\u4E2D",
          "\u3198": "\u4E0B",
          "\u3199": "\u7532",
          "\u319A": "\u4E59",
          "\u319B": "\u4E19",
          "\u319C": "\u4E01",
          "\u319D": "\u5929",
          "\u319E": "\u5730",
          "\u319F": "\u4EBA",
          "\u02C0": "\u0294",
          "\u02C1": "\u0295",
          "\u06E5": "\u0648",
          "\u06E6": "\u064A"
        },
        SUPERSCRIPTS_REGEXP: new RegExp("[\xAA\xB2\xB3\xB9\xBA\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02E0\u02E1\u02E2\u02E3\u02E4\u1D2C\u1D2D\u1D2E\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u2070\u2071\u2074\u2075\u2076\u2077\u2078\u2079\u207A\u207B\u207C\u207D\u207E\u207F\u2120\u2122\u3192\u3193\u3194\u3195\u3196\u3197\u3198\u3199\u319A\u319B\u319C\u319D\u319E\u319F\u02C0\u02C1\u06E5\u06E6]", "g"),
        UPDATE_GROUP_CONTEXT_CONDITION: function(state, str, valueTerm, token, value) {
          if (!state.opt.use_context_condition)
            return;
          var flags = state.tmp.group_context.tip;
          if (flags.condition) {
            if (!flags.condition.termtxt) {
              flags.condition.termtxt = str;
              flags.condition.valueTerm = valueTerm;
            }
            if (!flags.value_seen && flags.condition.test === "comma-safe-numbers-only") {
              if (value) {
                flags.value_seen = true;
                if (!value.match(/^[0-9]/)) {
                  state.tmp.just_did_number = false;
                }
              }
            }
          } else {
            if (token && token.decorations.filter((o) => o[0] === "@vertical-align").length > 0) {
              state.tmp.just_did_number = false;
            } else if (token && token.strings.suffix) {
              state.tmp.just_did_number = false;
            } else if (str) {
              if (str.match(/[0-9]$/)) {
                state.tmp.just_did_number = true;
              } else {
                state.tmp.just_did_number = false;
              }
            }
          }
        },
        EVALUATE_GROUP_CONDITION: function(state, flags) {
          if (!state.opt.use_context_condition)
            return;
          var testres;
          var numbersOnly = flags.condition.test === "comma-safe-numbers-only";
          if (flags.condition.test === "empty-label") {
            testres = !flags.condition.termtxt;
          } else if (flags.condition.test === "empty-label-no-decor") {
            testres = !flags.condition.termtxt || flags.condition.termtxt.indexOf("%s") > -1;
          } else if (["comma-safe", "comma-safe-numbers-only"].indexOf(flags.condition.test) > -1) {
            var locale_term = flags.condition.termtxt;
            var termStartAlpha = false;
            if (flags.condition.termtxt) {
              termStartAlpha = flags.condition.termtxt.slice(0, 1).match(CSL2.ALL_ROMANESQUE_REGEXP);
            }
            var num = state.tmp.just_did_number;
            if (num) {
              if (flags.condition.valueTerm) {
                testres = numbersOnly ? false : true;
              } else if (!locale_term) {
                testres = true;
              } else if (termStartAlpha) {
                testres = numbersOnly ? false : true;
              } else if (["always", "after-number"].indexOf(state.opt.require_comma_on_symbol) > -1) {
                testres = true;
              } else {
                testres = false;
              }
            } else {
              if (flags.condition.valueTerm) {
                testres = false;
              } else if (!locale_term) {
                testres = false;
              } else if (termStartAlpha) {
                testres = numbersOnly ? false : true;
              } else if (state.opt.require_comma_on_symbol === "always") {
                testres = true;
              } else {
                testres = false;
              }
            }
          }
          if (testres) {
            var force_suppress = false;
          } else {
            var force_suppress = true;
          }
          if (flags.condition.not) {
            force_suppress = !force_suppress;
          }
          return force_suppress;
        },
        SYS_OPTIONS: [
          "prioritize_disambiguate_condition",
          "csl_reverse_lookup_support",
          "main_title_from_short_title",
          "uppercase_subtitles",
          "force_short_title_casing_alignment",
          "implicit_short_title",
          "split_container_title"
        ],
        TITLE_SPLIT_REGEXP: function() {
          var splits = [
            "\\.\\s+",
            "\\!\\s+",
            "\\?\\s+",
            "\\s*::*\\s+",
            "\\s*\u2014\\s*",
            "\\s+\\-\\s+",
            "\\s*\\-\\-\\-*\\s*"
          ];
          return {
            match: new RegExp("(" + splits.join("|") + ")", "g"),
            matchfirst: new RegExp("^(" + splits.join("|") + ")"),
            split: new RegExp("(?:" + splits.join("|") + ")")
          };
        }(),
        TITLE_SPLIT: function(str) {
          if (!str) {
            return str;
          }
          var m = str.match(CSL2.TITLE_SPLIT_REGEXP.match);
          var lst = str.split(CSL2.TITLE_SPLIT_REGEXP.split);
          for (var i = lst.length - 2; i > -1; i--) {
            lst[i] = lst[i].trim();
            if (lst[i] && lst[i].slice(-1).toLowerCase() !== lst[i].slice(-1)) {
              lst[i] = lst[i] + m[i] + lst[i + 1];
              lst = lst.slice(0, i + 1).concat(lst.slice(i + 2));
            } else {
              lst = lst.slice(0, i + 1).concat([m[i]]).concat(lst.slice(i + 1));
            }
          }
          return lst;
        },
        GET_COURT_CLASS: function(state, Item, sortKey) {
          var cls = "";
          var authority2 = null;
          var country2 = Item.jurisdiction ? Item.jurisdiction.split(":")[0] : null;
          var classType = "court_condition_classes";
          if (sortKey) {
            classType = "court_key_classes";
          }
          if (country2 && Item.authority) {
            if (typeof Item.authority === "string") {
              authority2 = Item.authority;
            } else {
              if (Item.authority[0] && Item.authority[0].literal) {
                authority2 = Item.authority[0].literal;
              }
            }
          }
          if (authority2) {
            if (this.lang && state.locale[this.lang].opts[classType] && state.locale[this.lang].opts[classType][country2] && state.locale[this.lang].opts[classType][country2][authority2]) {
              cls = state.locale[this.lang].opts[classType][country2][authority2];
            } else if (state.locale[state.opt["default-locale"][0]].opts[classType] && state.locale[state.opt["default-locale"][0]].opts[classType][country2] && state.locale[state.opt["default-locale"][0]].opts[classType][country2][authority2]) {
              cls = state.locale[state.opt["default-locale"][0]].opts[classType][country2][authority2];
            }
          }
          return cls;
        },
        SET_COURT_CLASSES: function(state, lang, myxml, dataObj) {
          var nodes = myxml.getNodesByName(dataObj, "court-class");
          for (var pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            var courtclass = nodes[pos];
            var attributes = myxml.attributes(courtclass);
            var cls = attributes["@name"];
            var country2 = attributes["@country"];
            var courts = attributes["@courts"];
            var classType = "court_key_classes";
            if (state.registry) {
              classType = "court_condition_classes";
            }
            if (cls && country2 && courts) {
              courts = courts.trim().split(/\s+/);
              if (!state.locale[lang].opts[classType]) {
                state.locale[lang].opts[classType] = {};
              }
              if (!state.locale[lang].opts[classType][country2]) {
                state.locale[lang].opts[classType][country2] = {};
              }
              for (var i = 0, ilen = courts.length; i < ilen; i++) {
                state.locale[lang].opts[classType][country2][courts[i]] = cls;
              }
            }
          }
        },
        INIT_JURISDICTION_MACROS: function(state, Item, item, macroName) {
          if (Item["best-jurisdiction"]) {
            return true;
          }
          if (!state.sys.retrieveStyleModule || !CSL2.MODULE_MACROS[macroName] || !Item.jurisdiction) {
            return false;
          }
          var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);
          if (!state.opt.jurisdictions_seen[jurisdictionList[0]]) {
            var res = state.retrieveAllStyleModules(jurisdictionList);
            for (var jurisdiction2 in res) {
              var fallback = state.loadStyleModule(jurisdiction2, res[jurisdiction2]);
              if (fallback) {
                if (!res[fallback]) {
                  Object.assign(res, state.retrieveAllStyleModules([fallback]));
                  state.loadStyleModule(fallback, res[fallback], true);
                }
              }
            }
          }
          if (state.opt.parallel.enable) {
            if (!state.parallel) {
              state.parallel = new CSL2.Parallel(state);
            }
          }
          for (var i = 0, ilen = jurisdictionList.length; i < ilen; i++) {
            var jurisdiction2 = jurisdictionList[i];
            if (item) {
              if (state.juris[jurisdiction2] && !item["best-jurisdiction"] && state.juris[jurisdiction2].types.locator) {
                Item["best-jurisdiction"] = jurisdiction2;
              }
            }
            if (state.juris[jurisdiction2] && state.juris[jurisdiction2].types[Item.type]) {
              Item["best-jurisdiction"] = jurisdiction2;
              return true;
            }
          }
          return false;
        }
      };
      CSL2.XmlJSON = function(dataObj) {
        this.dataObj = dataObj;
        this.institution = {
          name: "institution",
          attrs: {
            "institution-parts": "long",
            "delimiter": ", "
          },
          children: [
            {
              name: "institution-part",
              attrs: {
                name: "long"
              },
              children: []
            }
          ]
        };
      };
      CSL2.XmlJSON.prototype.clean = function(json) {
        return json;
      };
      CSL2.XmlJSON.prototype.getStyleId = function(myjson, styleName) {
        var tagName = "id";
        if (styleName) {
          tagName = "title";
        }
        var ret = "";
        var children = myjson.children;
        for (var i = 0, ilen = children.length; i < ilen; i++) {
          if (children[i].name === "info") {
            var grandkids = children[i].children;
            for (var j = 0, jlen = grandkids.length; j < jlen; j++) {
              if (grandkids[j].name === tagName) {
                ret = grandkids[j].children[0];
              }
            }
          }
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.children = function(myjson) {
        if (myjson && myjson.children.length) {
          return myjson.children.slice();
        } else {
          return false;
        }
      };
      CSL2.XmlJSON.prototype.nodename = function(myjson) {
        return myjson ? myjson.name : null;
      };
      CSL2.XmlJSON.prototype.attributes = function(myjson) {
        var ret = {};
        for (var attrname in myjson.attrs) {
          ret["@" + attrname] = myjson.attrs[attrname];
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.content = function(myjson) {
        var ret = "";
        if (!myjson || !myjson.children) {
          return ret;
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "string") {
            ret += myjson.children[i];
          }
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.namespace = {};
      CSL2.XmlJSON.prototype.numberofnodes = function(myjson) {
        if (myjson && typeof myjson.length == "number") {
          return myjson.length;
        } else {
          return 0;
        }
      };
      CSL2.XmlJSON.prototype.getAttributeValue = function(myjson, name, namespace) {
        var ret = "";
        if (namespace) {
          name = namespace + ":" + name;
        }
        if (myjson) {
          if (myjson.attrs) {
            if (myjson.attrs[name]) {
              ret = myjson.attrs[name];
            } else {
              ret = "";
            }
          }
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.getNodeValue = function(myjson, name) {
        var ret = "";
        if (name) {
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (myjson.children[i].name === name) {
              if (myjson.children[i].children.length) {
                ret = myjson.children[i];
              } else {
                ret = "";
              }
            }
          }
        } else if (myjson) {
          ret = myjson;
        }
        if (ret && ret.children && ret.children.length == 1 && typeof ret.children[0] === "string") {
          ret = ret.children[0];
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myjson, nodename, partname, attrname, val) {
        var pos, len, xml, nodes, node;
        if (attrname.slice(0, 1) === "@") {
          attrname = attrname.slice(1);
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name === nodename && myjson.children[i].attrs.name === partname) {
            myjson.children[i].attrs[attrname] = val;
          }
        }
      };
      CSL2.XmlJSON.prototype.deleteNodeByNameAttribute = function(myjson, val) {
        var i, ilen;
        for (i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (!myjson.children[i] || typeof myjson.children[i] === "string") {
            continue;
          }
          if (myjson.children[i].attrs.name == val) {
            myjson.children = myjson.children.slice(0, i).concat(myjson.children.slice(i + 1));
          }
        }
      };
      CSL2.XmlJSON.prototype.deleteAttribute = function(myjson, attrname) {
        var i, ilen;
        if (typeof myjson.attrs[attrname] !== "undefined") {
          myjson.attrs.pop(attrname);
        }
      };
      CSL2.XmlJSON.prototype.setAttribute = function(myjson, attr, val) {
        myjson.attrs[attr] = val;
        return false;
      };
      CSL2.XmlJSON.prototype.nodeCopy = function(myjson, clone) {
        if (!clone) {
          var clone = {};
        }
        if (typeof clone === "object" && typeof clone.length === "undefined") {
          for (var key in myjson) {
            if (typeof myjson[key] === "string") {
              clone[key] = myjson[key];
            } else if (typeof myjson[key] === "object") {
              if (typeof myjson[key].length === "undefined") {
                clone[key] = this.nodeCopy(myjson[key], {});
              } else {
                clone[key] = this.nodeCopy(myjson[key], []);
              }
            }
          }
        } else {
          for (var i = 0, ilen = myjson.length; i < ilen; i += 1) {
            if (typeof myjson[i] === "string") {
              clone[i] = myjson[i];
            } else {
              clone[i] = this.nodeCopy(myjson[i], {});
            }
          }
        }
        return clone;
      };
      CSL2.XmlJSON.prototype.getNodesByName = function(myjson, name, nameattrval, ret) {
        var nodes, node, pos, len;
        if (!ret) {
          var ret = [];
        }
        if (!myjson || !myjson.children) {
          return ret;
        }
        if (name === myjson.name) {
          if (nameattrval) {
            if (nameattrval === myjson.attrs.name) {
              ret.push(myjson);
            }
          } else {
            ret.push(myjson);
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] !== "object") {
            continue;
          }
          this.getNodesByName(myjson.children[i], name, nameattrval, ret);
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.nodeNameIs = function(myjson, name) {
        if (typeof myjson === "undefined") {
          return false;
        }
        if (name == myjson.name) {
          return true;
        }
        return false;
      };
      CSL2.XmlJSON.prototype.makeXml = function(myjson) {
        if (typeof myjson === "string") {
          if (myjson.slice(0, 1) === "<") {
            myjson = this.jsonStringWalker.walkToObject(myjson);
          } else {
            myjson = JSON.parse(myjson);
          }
        }
        return myjson;
      };
      CSL2.XmlJSON.prototype.insertChildNodeAfter = function(parent, node, pos, datejson) {
        for (var i = 0, ilen = parent.children.length; i < ilen; i += 1) {
          if (node === parent.children[i]) {
            parent.children = parent.children.slice(0, i).concat([datejson]).concat(parent.children.slice(i + 1));
            break;
          }
        }
        return parent;
      };
      CSL2.XmlJSON.prototype.insertPublisherAndPlace = function(myjson) {
        if (myjson.name === "group") {
          var useme = true;
          var mustHaves = ["publisher", "publisher-place"];
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            var haveVarname = mustHaves.indexOf(myjson.children[i].attrs.variable);
            var isText = myjson.children[i].name === "text";
            if (isText && haveVarname > -1 && !myjson.children[i].attrs.prefix && !myjson.children[i].attrs.suffix) {
              mustHaves = mustHaves.slice(0, haveVarname).concat(mustHaves.slice(haveVarname + 1));
            } else {
              useme = false;
              break;
            }
          }
          if (useme && !mustHaves.length) {
            myjson.attrs["has-publisher-and-publisher-place"] = true;
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "object") {
            this.insertPublisherAndPlace(myjson.children[i]);
          }
        }
      };
      CSL2.XmlJSON.prototype.isChildOfSubstitute = function(parents) {
        if (parents.length > 0) {
          var myparents = parents.slice();
          var parent = myparents.pop();
          if (parent === "substitute") {
            return true;
          } else {
            return this.isChildOfSubstitute(myparents);
          }
        }
        return false;
      };
      CSL2.XmlJSON.prototype.addMissingNameNodes = function(myjson, parents) {
        if (!parents) {
          parents = [];
        }
        if (myjson.name === "names") {
          if (!this.isChildOfSubstitute(parents)) {
            var addName = true;
            for (var i = 0, ilen = myjson.children.length; i < ilen; i++) {
              if (myjson.children[i].name === "name") {
                addName = false;
                break;
              }
            }
            if (addName) {
              myjson.children = [{ name: "name", attrs: {}, children: [] }].concat(myjson.children);
            }
          }
        }
        parents.push(myjson.name);
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "object") {
            this.addMissingNameNodes(myjson.children[i], parents);
          }
        }
        parents.pop();
      };
      CSL2.XmlJSON.prototype.addInstitutionNodes = function(myjson) {
        var names2, thenames, institution2, theinstitution, name, thename, xml, pos, len;
        if (myjson.name === "names") {
          var attributes = {};
          var insertPos = -1;
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (myjson.children[i].name == "name") {
              for (var key in myjson.children[i].attrs) {
                attributes[key] = myjson.children[i].attrs[key];
              }
              attributes.delimiter = myjson.children[i].attrs.delimiter;
              attributes.and = myjson.children[i].attrs.and;
              insertPos = i;
              for (var k = 0, klen = myjson.children[i].children.length; k < klen; k += 1) {
                if (myjson.children[i].children[k].attrs.name !== "family") {
                  continue;
                }
                for (var key in myjson.children[i].children[k].attrs) {
                  attributes[key] = myjson.children[i].children[k].attrs[key];
                }
              }
            }
            if (myjson.children[i].name == "institution") {
              insertPos = -1;
              break;
            }
          }
          if (insertPos > -1) {
            var institution2 = this.nodeCopy(this.institution);
            for (var i = 0, ilen = CSL2.INSTITUTION_KEYS.length; i < ilen; i += 1) {
              var attrname = CSL2.INSTITUTION_KEYS[i];
              if (typeof attributes[attrname] !== "undefined") {
                institution2.children[0].attrs[attrname] = attributes[attrname];
              }
              if (attributes.delimiter) {
                institution2.attrs.delimiter = attributes.delimiter;
              }
              if (attributes.and) {
                institution2.attrs.and = attributes.and;
              }
            }
            myjson.children = myjson.children.slice(0, insertPos + 1).concat([institution2]).concat(myjson.children.slice(insertPos + 1));
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "string") {
            continue;
          }
          this.addInstitutionNodes(myjson.children[i]);
        }
      };
      CSL2.XmlJSON.prototype.flagDateMacros = function(myjson) {
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name === "macro") {
            if (this.inspectDateMacros(myjson.children[i])) {
              myjson.children[i].attrs["macro-has-date"] = "true";
            }
          }
        }
      };
      CSL2.XmlJSON.prototype.inspectDateMacros = function(myjson) {
        if (!myjson || !myjson.children) {
          return false;
        }
        if (myjson.name === "date") {
          return true;
        } else {
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (this.inspectDateMacros(myjson.children[i])) {
              return true;
            }
          }
        }
        return false;
      };
      CSL2.stripXmlProcessingInstruction = function(xml) {
        if (!xml) {
          return xml;
        }
        xml = xml.replace(/^<\?[^?]+\?>/, "");
        xml = xml.replace(/<!--[^>]+-->/g, "");
        xml = xml.replace(/^\s+/g, "");
        xml = xml.replace(/\s+$/g, "");
        return xml;
      };
      CSL2.parseXml = function(str) {
        var _pos = 0;
        var _obj = { children: [] };
        var _stack = [_obj.children];
        function _listifyString(str2) {
          str2 = str2.split(/(?:\r\n|\n|\r)/).join(" ").replace(/>[	 ]+</g, "><").replace(/<\!--.*?-->/g, "");
          var lst2 = str2.split("><");
          var stylePos = null;
          for (var i2 = 0, ilen2 = lst2.length; i2 < ilen2; i2++) {
            if (i2 > 0) {
              lst2[i2] = "<" + lst2[i2];
            }
            if (i2 < lst2.length - 1) {
              lst2[i2] = lst2[i2] + ">";
            }
            if (typeof stylePos != "number") {
              if (lst2[i2].slice(0, 7) === "<style " || lst2[i2].slice(0, 8) == "<locale ") {
                stylePos = i2;
              }
            }
          }
          lst2 = lst2.slice(stylePos);
          for (var i2 = lst2.length - 2; i2 > -1; i2--) {
            if (lst2[i2].slice(1).indexOf("<") === -1) {
              var stub = lst2[i2].slice(0, 5);
              if (lst2[i2].slice(-2) !== "/>") {
                if (stub === "<term") {
                  if (lst2[i2 + 1].slice(0, 6) === "</term") {
                    lst2[i2] = lst2[i2] + lst2[i2 + 1];
                    lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                  }
                } else if (["<sing", "<mult"].indexOf(stub) > -1) {
                  if (lst2[i2].slice(-2) !== "/>" && lst2[i2 + 1].slice(0, 1) === "<") {
                    lst2[i2] = lst2[i2] + lst2[i2 + 1];
                    lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                  }
                }
              }
            }
          }
          return lst2;
        }
        function _decodeHtmlEntities(str2) {
          return str2.split("&amp;").join("&").split("&quot;").join('"').split("&gt;").join(">").split("&lt;").join("<").replace(/&#([0-9]{1,6});/gi, function(match, numStr) {
            var num = parseInt(numStr, 10);
            return String.fromCharCode(num);
          }).replace(/&#x([a-f0-9]{1,6});/gi, function(match, numStr) {
            var num = parseInt(numStr, 16);
            return String.fromCharCode(num);
          });
        }
        function _getAttributes(elem2) {
          var m = elem2.match(/([^\'\"=	 ]+)=(?:\"[^\"]*\"|\'[^\']*\')/g);
          if (m) {
            for (var i2 = 0, ilen2 = m.length; i2 < ilen2; i2++) {
              m[i2] = m[i2].replace(/=.*/, "");
            }
          }
          return m;
        }
        function _getAttribute(elem2, attr) {
          var rex = RegExp("^.*[	 ]+" + attr + `=("(?:[^"]*)"|'(?:[^']*)').*$`);
          var m = elem2.match(rex);
          return m ? m[1].slice(1, -1) : null;
        }
        function _getTagName(elem2) {
          var rex = RegExp("^<([^	 />]+)");
          var m = elem2.match(rex);
          return m ? m[1] : null;
        }
        function _castObjectFromOpeningTag(elem2) {
          var obj = {};
          obj.name = _getTagName(elem2);
          obj.attrs = {};
          var attributes = _getAttributes(elem2);
          if (attributes) {
            for (var i2 = 0, ilen2 = attributes.length; i2 < ilen2; i2++) {
              var attr = {
                name: attributes[i2],
                value: _getAttribute(elem2, attributes[i2])
              };
              obj.attrs[attr.name] = _decodeHtmlEntities(attr.value);
            }
          }
          obj.children = [];
          return obj;
        }
        function _extractTextFromCompositeElement(elem2) {
          var m = elem2.match(/^.*>([^<]*)<.*$/);
          return _decodeHtmlEntities(m[1]);
        }
        function _appendToChildren(obj) {
          _stack.slice(-1)[0].push(obj);
        }
        function _extendStackWithNewChildren(obj) {
          _stack.push(obj.children);
        }
        function processElement(elem2) {
          var obj;
          if (elem2.slice(1).indexOf("<") > -1) {
            var tag = elem2.slice(0, elem2.indexOf(">") + 1);
            obj = _castObjectFromOpeningTag(tag);
            obj.children = [_extractTextFromCompositeElement(elem2)];
            _appendToChildren(obj);
          } else if (elem2.slice(-2) === "/>") {
            obj = _castObjectFromOpeningTag(elem2);
            if (_getTagName(elem2) === "term") {
              obj.children.push("");
            }
            _appendToChildren(obj);
          } else if (elem2.slice(0, 2) === "</") {
            _stack.pop();
          } else {
            obj = _castObjectFromOpeningTag(elem2);
            _appendToChildren(obj);
            _extendStackWithNewChildren(obj);
          }
        }
        var lst = _listifyString(str);
        for (var i = 0, ilen = lst.length; i < ilen; i++) {
          var elem = lst[i];
          processElement(elem);
        }
        return _obj.children[0];
      };
      CSL2.XmlDOM = function(dataObj) {
        this.dataObj = dataObj;
        if (typeof DOMParser == "undefined") {
          DOMParser = function() {
          };
          DOMParser.prototype.parseFromString = function(str2, contentType) {
            if (typeof ActiveXObject != "undefined") {
              var xmldata = new ActiveXObject("MSXML.DomDocument");
              xmldata.async = false;
              xmldata.loadXML(str2);
              return xmldata;
            } else if (typeof XMLHttpRequest != "undefined") {
              var xmldata = new XMLHttpRequest();
              if (!contentType) {
                contentType = "text/xml";
              }
              xmldata.open("GET", "data:" + contentType + ";charset=utf-8," + encodeURIComponent(str2), false);
              if (xmldata.overrideMimeType) {
                xmldata.overrideMimeType(contentType);
              }
              xmldata.send(null);
              return xmldata.responseXML;
            } else if (typeof marknote != "undefined") {
              var parser = new marknote.Parser();
              return parser.parse(str2);
            }
          };
          this.hasAttributes = function(node) {
            var ret;
            if (node.attributes && node.attributes.length) {
              ret = true;
            } else {
              ret = false;
            }
            return ret;
          };
        } else {
          this.hasAttributes = function(node) {
            var ret;
            if (node.attributes && node.attributes.length) {
              ret = true;
            } else {
              ret = false;
            }
            return ret;
          };
        }
        this.importNode = function(doc, srcElement) {
          var ret;
          if (typeof doc.importNode == "undefined") {
            ret = this._importNode(doc, srcElement, true);
          } else {
            ret = doc.importNode(srcElement, true);
          }
          return ret;
        };
        this._importNode = function(doc, node, allChildren) {
          switch (node.nodeType) {
            case 1:
              var newNode = doc.createElement(node.nodeName);
              if (node.attributes && node.attributes.length > 0)
                for (var i = 0, il = node.attributes.length; i < il; )
                  newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
              if (allChildren && node.childNodes && node.childNodes.length > 0)
                for (var i = 0, il = node.childNodes.length; i < il; )
                  newNode.appendChild(this._importNode(doc, node.childNodes[i++], allChildren));
              return newNode;
              break;
            case 3:
            case 4:
            case 8:
          }
        };
        this.parser = new DOMParser();
        var str = '<docco><institution institution-parts="long" delimiter=", " substitute-use-first="1" use-last="1"><institution-part name="long"/></institution></docco>';
        var inst_doc = this.parser.parseFromString(str, "text/xml");
        var inst_node = inst_doc.getElementsByTagName("institution");
        this.institution = inst_node.item(0);
        var inst_part_node = inst_doc.getElementsByTagName("institution-part");
        this.institutionpart = inst_part_node.item(0);
        this.ns = "http://purl.org/net/xbiblio/csl";
      };
      CSL2.XmlDOM.prototype.clean = function(xml) {
        xml = xml.replace(/<\?[^?]+\?>/g, "");
        xml = xml.replace(/<![^>]+>/g, "");
        xml = xml.replace(/^\s+/, "");
        xml = xml.replace(/\s+$/, "");
        xml = xml.replace(/^\n*/, "");
        return xml;
      };
      CSL2.XmlDOM.prototype.getStyleId = function(myxml, styleName) {
        var text = "";
        var tagName = "id";
        if (styleName) {
          tagName = "title";
        }
        var node = myxml.getElementsByTagName(tagName);
        if (node && node.length) {
          node = node.item(0);
        }
        if (node) {
          text = node.textContent;
        }
        if (!text) {
          text = node.innerText;
        }
        if (!text) {
          text = node.innerHTML;
        }
        return text;
      };
      CSL2.XmlDOM.prototype.children = function(myxml) {
        var children, pos, len, ret;
        if (myxml) {
          ret = [];
          children = myxml.childNodes;
          for (pos = 0, len = children.length; pos < len; pos += 1) {
            if (children[pos].nodeName != "#text") {
              ret.push(children[pos]);
            }
          }
          return ret;
        } else {
          return [];
        }
      };
      CSL2.XmlDOM.prototype.nodename = function(myxml) {
        var ret = myxml.nodeName;
        return ret;
      };
      CSL2.XmlDOM.prototype.attributes = function(myxml) {
        var ret, attrs, attr, key, xml, pos, len;
        ret = new Object();
        if (myxml && this.hasAttributes(myxml)) {
          attrs = myxml.attributes;
          for (pos = 0, len = attrs.length; pos < len; pos += 1) {
            attr = attrs[pos];
            ret["@" + attr.name] = attr.value;
          }
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.content = function(myxml) {
        var ret;
        if (typeof myxml.textContent != "undefined") {
          ret = myxml.textContent;
        } else if (typeof myxml.innerText != "undefined") {
          ret = myxml.innerText;
        } else {
          ret = myxml.txt;
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.namespace = {
        "xml": "http://www.w3.org/XML/1998/namespace"
      };
      CSL2.XmlDOM.prototype.numberofnodes = function(myxml) {
        if (myxml) {
          return myxml.length;
        } else {
          return 0;
        }
      };
      CSL2.XmlDOM.prototype.getAttributeName = function(attr) {
        var ret = attr.name;
        return ret;
      };
      CSL2.XmlDOM.prototype.getAttributeValue = function(myxml, name, namespace) {
        var ret = "";
        if (namespace) {
          name = namespace + ":" + name;
        }
        if (myxml && this.hasAttributes(myxml) && myxml.getAttribute(name)) {
          ret = myxml.getAttribute(name);
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.getNodeValue = function(myxml, name) {
        var ret = null;
        if (name) {
          var vals = myxml.getElementsByTagName(name);
          if (vals.length > 0) {
            if (typeof vals[0].textContent != "undefined") {
              ret = vals[0].textContent;
            } else if (typeof vals[0].innerText != "undefined") {
              ret = vals[0].innerText;
            } else {
              ret = vals[0].text;
            }
          }
        }
        if (ret === null && myxml && myxml.childNodes && (myxml.childNodes.length == 0 || myxml.childNodes.length == 1 && myxml.firstChild.nodeName == "#text")) {
          if (typeof myxml.textContent != "undefined") {
            ret = myxml.textContent;
          } else if (typeof myxml.innerText != "undefined") {
            ret = myxml.innerText;
          } else {
            ret = myxml.text;
          }
        }
        if (ret === null) {
          ret = myxml;
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myxml, nodename, partname, attrname, val) {
        var pos, len, xml, nodes, node;
        if (attrname.slice(0, 1) === "@") {
          attrname = attrname.slice(1);
        }
        nodes = myxml.getElementsByTagName(nodename);
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (node.getAttribute("name") != partname) {
            continue;
          }
          node.setAttribute(attrname, val);
        }
      };
      CSL2.XmlDOM.prototype.deleteNodeByNameAttribute = function(myxml, val) {
        var pos, len, node, nodes;
        nodes = myxml.childNodes;
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (!node || node.nodeType == node.TEXT_NODE) {
            continue;
          }
          if (this.hasAttributes(node) && node.getAttribute("name") == val) {
            myxml.removeChild(nodes[pos]);
          }
        }
      };
      CSL2.XmlDOM.prototype.deleteAttribute = function(myxml, attr) {
        myxml.removeAttribute(attr);
      };
      CSL2.XmlDOM.prototype.setAttribute = function(myxml, attr, val) {
        if (!myxml.ownerDocument) {
          myxml = myxml.firstChild;
        }
        if (["function", "unknown"].indexOf(typeof myxml.setAttribute) > -1) {
          myxml.setAttribute(attr, val);
        }
        return false;
      };
      CSL2.XmlDOM.prototype.nodeCopy = function(myxml) {
        var cloned_node = myxml.cloneNode(true);
        return cloned_node;
      };
      CSL2.XmlDOM.prototype.getNodesByName = function(myxml, name, nameattrval) {
        var ret, nodes, node, pos, len;
        ret = [];
        nodes = myxml.getElementsByTagName(name);
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes.item(pos);
          if (nameattrval && !(this.hasAttributes(node) && node.getAttribute("name") == nameattrval)) {
            continue;
          }
          ret.push(node);
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.nodeNameIs = function(myxml, name) {
        if (name == myxml.nodeName) {
          return true;
        }
        return false;
      };
      CSL2.XmlDOM.prototype.makeXml = function(myxml) {
        var ret, topnode;
        if (!myxml) {
          myxml = "<docco><bogus/></docco>";
        }
        myxml = myxml.replace(/\s*<\?[^>]*\?>\s*\n*/g, "");
        var nodetree = this.parser.parseFromString(myxml, "application/xml");
        return nodetree.firstChild;
      };
      CSL2.XmlDOM.prototype.insertChildNodeAfter = function(parent, node, pos, datexml) {
        var myxml, xml;
        myxml = this.importNode(node.ownerDocument, datexml);
        parent.replaceChild(myxml, node);
        return parent;
      };
      CSL2.XmlDOM.prototype.insertPublisherAndPlace = function(myxml) {
        var group = myxml.getElementsByTagName("group");
        for (var i = 0, ilen = group.length; i < ilen; i += 1) {
          var node = group.item(i);
          var skippers = [];
          for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
            if (node.childNodes.item(j).nodeType !== 1) {
              skippers.push(j);
            }
          }
          if (node.childNodes.length - skippers.length === 2) {
            var twovars = [];
            for (var j = 0, jlen = 2; j < jlen; j += 1) {
              if (skippers.indexOf(j) > -1) {
                continue;
              }
              var child = node.childNodes.item(j);
              var subskippers = [];
              for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
                if (child.childNodes.item(k).nodeType !== 1) {
                  subskippers.push(k);
                }
              }
              if (child.childNodes.length - subskippers.length === 0) {
                twovars.push(child.getAttribute("variable"));
                if (child.getAttribute("suffix") || child.getAttribute("prefix")) {
                  twovars = [];
                  break;
                }
              }
            }
            if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
              node.setAttribute("has-publisher-and-publisher-place", true);
            }
          }
        }
      };
      CSL2.XmlDOM.prototype.isChildOfSubstitute = function(node) {
        if (node.parentNode) {
          if (node.parentNode.tagName.toLowerCase() === "substitute") {
            return true;
          } else {
            return this.isChildOfSubstitute(node.parentNode);
          }
        }
        return false;
      };
      CSL2.XmlDOM.prototype.addMissingNameNodes = function(myxml) {
        var nameslist = myxml.getElementsByTagName("names");
        for (var i = 0, ilen = nameslist.length; i < ilen; i += 1) {
          var names2 = nameslist.item(i);
          var namelist = names2.getElementsByTagName("name");
          if ((!namelist || namelist.length === 0) && !this.isChildOfSubstitute(names2)) {
            var doc = names2.ownerDocument;
            var name = doc.createElement("name");
            names2.appendChild(name);
          }
        }
      };
      CSL2.XmlDOM.prototype.addInstitutionNodes = function(myxml) {
        var names2, thenames, institution2, theinstitution, theinstitutionpart, name, thename, xml, pos, len;
        names2 = myxml.getElementsByTagName("names");
        for (pos = 0, len = names2.length; pos < len; pos += 1) {
          thenames = names2.item(pos);
          name = thenames.getElementsByTagName("name");
          if (name.length == 0) {
            continue;
          }
          institution2 = thenames.getElementsByTagName("institution");
          if (institution2.length == 0) {
            theinstitution = this.importNode(myxml.ownerDocument, this.institution);
            theinstitutionpart = theinstitution.getElementsByTagName("institution-part").item(0);
            thename = name.item(0);
            thenames.insertBefore(theinstitution, thename.nextSibling);
            for (var j = 0, jlen = CSL2.INSTITUTION_KEYS.length; j < jlen; j += 1) {
              var attrname = CSL2.INSTITUTION_KEYS[j];
              var attrval = thename.getAttribute(attrname);
              if (attrval) {
                theinstitutionpart.setAttribute(attrname, attrval);
              }
            }
            var nameparts = thename.getElementsByTagName("name-part");
            for (var j = 0, jlen = nameparts.length; j < jlen; j += 1) {
              if (nameparts[j].getAttribute("name") === "family") {
                for (var k = 0, klen = CSL2.INSTITUTION_KEYS.length; k < klen; k += 1) {
                  var attrname = CSL2.INSTITUTION_KEYS[k];
                  var attrval = nameparts[j].getAttribute(attrname);
                  if (attrval) {
                    theinstitutionpart.setAttribute(attrname, attrval);
                  }
                }
              }
            }
          }
        }
      };
      CSL2.XmlDOM.prototype.flagDateMacros = function(myxml) {
        var pos, len, thenode, thedate;
        var nodes = myxml.getElementsByTagName("macro");
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          thenode = nodes.item(pos);
          thedate = thenode.getElementsByTagName("date");
          if (thedate.length) {
            thenode.setAttribute("macro-has-date", "true");
          }
        }
      };
      CSL2.setupXml = function(xmlObject) {
        var dataObj = {};
        var parser = null;
        if (typeof xmlObject !== "undefined") {
          if (typeof xmlObject === "string") {
            xmlObject = xmlObject.replace("^\uFEFF", "").replace(/^\s+/, "");
            if (xmlObject.slice(0, 1) === "<") {
              dataObj = CSL2.parseXml(xmlObject);
            } else {
              dataObj = JSON.parse(xmlObject);
            }
            parser = new CSL2.XmlJSON(dataObj);
          } else if (typeof xmlObject.getAttribute !== "undefined") {
            parser = new CSL2.XmlDOM(xmlObject);
          } else if (typeof xmlObject.toXMLString !== "undefined") {
            parser = new CSL2.XmlE4X(xmlObject);
          } else {
            parser = new CSL2.XmlJSON(xmlObject);
          }
        } else {
          CSL2.error("unable to parse XML input");
        }
        if (!parser) {
          CSL2.error("citeproc-js error: unable to parse CSL style or locale object");
        }
        return parser;
      };
      CSL2.getSortCompare = function(default_locale) {
        if (CSL2.stringCompare) {
          return CSL2.stringCompare;
        }
        var me = this;
        var strcmp;
        var strcmp_opts = {
          sensitivity: "base",
          ignorePunctuation: true,
          numeric: true
        };
        if (!default_locale) {
          default_locale = "en-US";
        }
        strcmp = function(a, b) {
          return CSL2.toLocaleLowerCase.call(me, a).localeCompare(CSL2.toLocaleLowerCase.call(me, b), default_locale, strcmp_opts);
        };
        var stripPunct = function(str) {
          return str.replace(/^[\[\]\'\"]*/g, "");
        };
        var getBracketPreSort = function() {
          if (!strcmp("[x", "x")) {
            return false;
          } else {
            return function(a, b) {
              return strcmp(stripPunct(a), stripPunct(b));
            };
          }
        };
        var bracketPreSort = getBracketPreSort();
        var sortCompare = function(a, b) {
          if (bracketPreSort) {
            return bracketPreSort(a, b);
          } else {
            return strcmp(a, b);
          }
        };
        return sortCompare;
      };
      CSL2.ambigConfigDiff = function(a, b) {
        var pos, len, ppos, llen;
        if (a.names.length !== b.names.length) {
          return 1;
        } else {
          for (pos = 0, len = a.names.length; pos < len; pos += 1) {
            if (a.names[pos] !== b.names[pos]) {
              return 1;
            } else {
              for (ppos = 0, llen = a.givens[pos]; ppos < llen; ppos += 1) {
                if (a.givens[pos][ppos] !== b.givens[pos][ppos]) {
                  return 1;
                }
              }
            }
          }
        }
        if (a.disambiguate != b.disambiguate) {
          return 1;
        }
        if (a.year_suffix !== b.year_suffix) {
          return 1;
        }
        return 0;
      };
      CSL2.cloneAmbigConfig = function(config, oldconfig) {
        var i, ilen, j, jlen, param;
        var ret = {};
        ret.names = [];
        ret.givens = [];
        ret.year_suffix = false;
        ret.disambiguate = false;
        for (i = 0, ilen = config.names.length; i < ilen; i += 1) {
          param = config.names[i];
          ret.names[i] = param;
        }
        for (i = 0, ilen = config.givens.length; i < ilen; i += 1) {
          param = [];
          for (j = 0, jlen = config.givens[i].length; j < jlen; j += 1) {
            param.push(config.givens[i][j]);
          }
          ret.givens.push(param);
        }
        if (oldconfig) {
          ret.year_suffix = oldconfig.year_suffix;
          ret.disambiguate = oldconfig.disambiguate;
        } else {
          ret.year_suffix = config.year_suffix;
          ret.disambiguate = config.disambiguate;
        }
        return ret;
      };
      CSL2.getAmbigConfig = function() {
        var config, ret;
        config = this.tmp.disambig_request;
        if (!config) {
          config = this.tmp.disambig_settings;
        }
        var ret = CSL2.cloneAmbigConfig(config);
        return ret;
      };
      CSL2.getMaxVals = function() {
        return this.tmp.names_max.mystack.slice();
      };
      CSL2.getMinVal = function() {
        return this.tmp["et-al-min"];
      };
      CSL2.tokenExec = function(token, Item, item) {
        var next, maybenext, exec, debug;
        debug = false;
        next = token.next;
        maybenext = false;
        var record = function(result) {
          if (result) {
            this.tmp.jump.replace("succeed");
            return token.succeed;
          } else {
            this.tmp.jump.replace("fail");
            return token.fail;
          }
        };
        if (token.test) {
          next = record.call(this, token.test(Item, item));
        }
        for (var i = 0, ilen = token.execs.length; i < ilen; i++) {
          exec = token.execs[i];
          maybenext = exec.call(token, this, Item, item);
          if (maybenext) {
            next = maybenext;
          }
        }
        if (debug) {
          CSL2.debug(token.name + " (" + token.tokentype + ") ---> done");
        }
        return next;
      };
      CSL2.expandMacro = function(macro_key_token, target) {
        var mkey, macro_nodes, end_of_macro, func;
        mkey = macro_key_token.postponed_macro;
        var sort_direction = macro_key_token.strings.sort_direction;
        macro_key_token = new CSL2.Token("group", CSL2.START);
        var hasDate = false;
        var macroid = false;
        macro_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, "macro", mkey);
        if (macro_nodes.length) {
          macroid = this.cslXml.getAttributeValue(macro_nodes[0], "cslid");
          hasDate = this.cslXml.getAttributeValue(macro_nodes[0], "macro-has-date");
        }
        if (hasDate) {
          mkey = mkey + "@" + this.build.current_default_locale;
          func = function(state) {
            if (state.tmp.extension) {
              state.tmp["doing-macro-with-date"] = true;
            }
          };
          macro_key_token.execs.push(func);
        }
        if (this.build.macro_stack.indexOf(mkey) > -1) {
          CSL2.error('CSL processor error: call to macro "' + mkey + '" would cause an infinite loop');
        } else {
          this.build.macro_stack.push(mkey);
        }
        macro_key_token.cslid = macroid;
        if (CSL2.MODULE_MACROS[mkey]) {
          macro_key_token.juris = mkey;
          this.opt.update_mode = CSL2.POSITION;
        }
        CSL2.Node.group.build.call(macro_key_token, this, target, true);
        if (!this.cslXml.getNodeValue(macro_nodes)) {
          CSL2.error('CSL style error: undefined macro "' + mkey + '"');
        }
        var mytarget = CSL2.getMacroTarget.call(this, mkey);
        if (mytarget) {
          CSL2.buildMacro.call(this, mytarget, macro_nodes);
          CSL2.configureMacro.call(this, mytarget);
        }
        if (!this.build.extension) {
          var func = function(macro_name) {
            return function(state, Item, item) {
              var next = 0;
              while (next < state.macros[macro_name].length) {
                next = CSL2.tokenExec.call(state, state.macros[macro_name][next], Item, item);
              }
            };
          }(mkey);
          var text_node = new CSL2.Token("text", CSL2.SINGLETON);
          text_node.execs.push(func);
          target.push(text_node);
        }
        end_of_macro = new CSL2.Token("group", CSL2.END);
        end_of_macro.strings.sort_direction = sort_direction;
        if (hasDate) {
          func = function(state) {
            if (state.tmp.extension) {
              state.tmp["doing-macro-with-date"] = false;
            }
          };
          end_of_macro.execs.push(func);
        }
        if (macro_key_token.juris) {
          end_of_macro.juris = mkey;
        }
        CSL2.Node.group.build.call(end_of_macro, this, target, true);
        this.build.macro_stack.pop();
      };
      CSL2.getMacroTarget = function(mkey) {
        var mytarget = false;
        if (this.build.extension) {
          mytarget = this[this.build.root + this.build.extension].tokens;
        } else if (!this.macros[mkey]) {
          mytarget = [];
          this.macros[mkey] = mytarget;
        }
        return mytarget;
      };
      CSL2.buildMacro = function(mytarget, macro_nodes) {
        var builder = CSL2.makeBuilder(this, mytarget);
        var mynode;
        if (typeof macro_nodes.length === "undefined") {
          mynode = macro_nodes;
        } else {
          mynode = macro_nodes[0];
        }
        builder(mynode);
      };
      CSL2.configureMacro = function(mytarget) {
        if (!this.build.extension) {
          this.configureTokenList(mytarget);
        }
      };
      CSL2.XmlToToken = function(state, tokentype, explicitTarget, var_stack) {
        var name, txt, attrfuncs, attributes, decorations, token, key, target;
        name = state.cslXml.nodename(this);
        if (state.build.skip && state.build.skip !== name) {
          return;
        }
        if (!name) {
          txt = state.cslXml.content(this);
          if (txt) {
            state.build.text = txt;
          }
          return;
        }
        if (!CSL2.Node[state.cslXml.nodename(this)]) {
          CSL2.error('Undefined node name "' + name + '".');
        }
        attrfuncs = [];
        attributes = state.cslXml.attributes(this);
        decorations = CSL2.setDecorations.call(this, state, attributes);
        token = new CSL2.Token(name, tokentype);
        if (tokentype !== CSL2.END || name === "if" || name === "else-if" || name === "layout") {
          for (var key in attributes) {
            if (attributes.hasOwnProperty(key)) {
              if (tokentype === CSL2.END && key !== "@language" && key !== "@locale") {
                continue;
              }
              if (attributes.hasOwnProperty(key)) {
                if (CSL2.Attributes[key]) {
                  try {
                    CSL2.Attributes[key].call(token, state, "" + attributes[key]);
                  } catch (e) {
                    CSL2.error(key + " attribute: " + e);
                  }
                } else {
                  CSL2.debug('warning: undefined attribute "' + key + '" in style');
                }
              }
            }
          }
          token.decorations = decorations;
          if (CSL2.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
            var_stack.push(token.variables);
          }
        } else if (tokentype === CSL2.END && attributes["@variable"]) {
          token.hasVariable = true;
          if (CSL2.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
            token.variables = var_stack.pop();
          }
        }
        if (explicitTarget) {
          target = explicitTarget;
        } else {
          target = state[state.build.area].tokens;
        }
        CSL2.Node[name].build.call(token, state, target, true);
      };
      CSL2.DateParser = function() {
        var epochPairs = [
          ["\u660E\u6CBB", 1867],
          ["\u5927\u6B63", 1911],
          ["\u662D\u548C", 1925],
          ["\u5E73\u6210", 1988]
        ];
        var epochYearByName = {};
        for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
          var key = epochPairs[i][0];
          var val = epochPairs[i][1];
          epochYearByName[key] = val;
        }
        var epochMatchStrings = [];
        var epochMap = {};
        for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
          var pair = epochPairs[i];
          var val = pair[0];
          epochMatchStrings.push(val);
          epochMap[pair[0]] = pair[1];
        }
        var epochMatchString = epochMatchStrings.join("|");
        var epochSplitter = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)");
        var epochMatcher = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)", "g");
        var kanjiMonthDay = /(\u6708|\u5E74)/g;
        var kanjiYear = /\u65E5/g;
        var kanjiRange = /\u301c/g;
        var yearLast = "(?:[?0-9]{1,2}%%NUMD%%){0,2}[?0-9]{4}(?![0-9])";
        var yearFirst = "[?0-9]{4}(?:%%NUMD%%[?0-9]{1,2}){0,2}(?![0-9])";
        var numberVal = "[?0-9]{1,3}";
        var rangeSeparator = "[%%DATED%%]";
        var fuzzyChar = "[?~]";
        var chars = "[^-/~?0-9]+";
        var rexString = "(" + yearFirst + "|" + yearLast + "|" + numberVal + "|" + rangeSeparator + "|" + fuzzyChar + "|" + chars + ")";
        var rexDash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "-"));
        var rexDashSlash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "/"));
        var rexSlashDash = new RegExp(rexString.replace(/%%NUMD%%/g, "/").replace(/%%DATED%%/g, "-"));
        var monthString = "january february march april may june july august september october november december spring summer fall winter spring summer";
        this.monthStrings = monthString.split(" ");
        this.setOrderDayMonth = function() {
          this.monthGuess = 1;
          this.dayGuess = 0;
        };
        this.setOrderMonthDay = function() {
          this.monthGuess = 0;
          this.dayGuess = 1;
        };
        this.resetDateParserMonths = function() {
          this.monthSets = [];
          for (var i2 = 0, ilen2 = this.monthStrings.length; i2 < ilen2; i2++) {
            this.monthSets.push([this.monthStrings[i2]]);
          }
          this.monthAbbrevs = [];
          for (var i2 = 0, ilen2 = this.monthSets.length; i2 < ilen2; i2++) {
            this.monthAbbrevs.push([]);
            for (var j = 0, jlen = this.monthSets[i2].length; j < jlen; j++) {
              this.monthAbbrevs[i2].push(this.monthSets[i2][0].slice(0, 3));
            }
          }
          this.monthRexes = [];
          for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
            this.monthRexes.push(new RegExp("(?:" + this.monthAbbrevs[i2].join("|") + ")"));
          }
        };
        this.addDateParserMonths = function(lst) {
          if (typeof lst === "string") {
            lst = lst.split(/\s+/);
          }
          if (lst.length !== 12 && lst.length !== 16) {
            CSL2.debug("month [+season] list of " + lst.length + ", expected 12 or 16. Ignoring.");
            return;
          }
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            var abbrevLength = null;
            var skip = false;
            var insert = 3;
            var extendedSets = {};
            for (var j = 0, jlen = this.monthAbbrevs.length; j < jlen; j++) {
              extendedSets[j] = {};
              if (j === i2) {
                for (var k = 0, klen = this.monthAbbrevs[i2].length; k < klen; k++) {
                  if (this.monthAbbrevs[i2][k] === lst[i2].slice(0, this.monthAbbrevs[i2][k].length)) {
                    skip = true;
                    break;
                  }
                }
              } else {
                for (var k = 0, klen = this.monthAbbrevs[j].length; k < klen; k++) {
                  abbrevLength = this.monthAbbrevs[j][k].length;
                  if (this.monthAbbrevs[j][k] === lst[i2].slice(0, abbrevLength)) {
                    while (this.monthSets[j][k].slice(0, abbrevLength) === lst[i2].slice(0, abbrevLength)) {
                      if (abbrevLength > lst[i2].length || abbrevLength > this.monthSets[j][k].length) {
                        CSL2.debug("unable to disambiguate month string in date parser: " + lst[i2]);
                        break;
                      } else {
                        abbrevLength += 1;
                      }
                    }
                    insert = abbrevLength;
                    extendedSets[j][k] = abbrevLength;
                  }
                }
              }
              for (var jKey in extendedSets) {
                for (var kKey in extendedSets[jKey]) {
                  abbrevLength = extendedSets[jKey][kKey];
                  jKey = parseInt(jKey, 10);
                  kKey = parseInt(kKey, 10);
                  this.monthAbbrevs[jKey][kKey] = this.monthSets[jKey][kKey].slice(0, abbrevLength);
                }
              }
            }
            if (!skip) {
              this.monthSets[i2].push(lst[i2]);
              this.monthAbbrevs[i2].push(lst[i2].slice(0, insert));
            }
          }
          this.monthRexes = [];
          this.monthRexStrs = [];
          for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
            this.monthRexes.push(new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")"));
            this.monthRexStrs.push("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
          }
          if (this.monthAbbrevs.length === 18) {
            for (var i2 = 12, ilen2 = 14; i2 < ilen2; i2++) {
              this.monthRexes[i2 + 4] = new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
              this.monthRexStrs[i2 + 4] = "^(?:" + this.monthAbbrevs[i2].join("|") + ")";
            }
          }
        };
        this.convertDateObjectToArray = function(thedate) {
          thedate["date-parts"] = [];
          thedate["date-parts"].push([]);
          var slicelen = 0;
          var part;
          for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2++) {
            part = ["year", "month", "day"][i2];
            if (!thedate[part]) {
              break;
            }
            slicelen += 1;
            thedate["date-parts"][0].push(thedate[part]);
            delete thedate[part];
          }
          thedate["date-parts"].push([]);
          for (var i2 = 0, ilen2 = slicelen; i2 < ilen2; i2++) {
            part = ["year_end", "month_end", "day_end"][i2];
            if (!thedate[part]) {
              break;
            }
            thedate["date-parts"][1].push(thedate[part]);
            delete thedate[part];
          }
          if (thedate["date-parts"][0].length !== thedate["date-parts"][1].length) {
            thedate["date-parts"].pop();
          }
          return thedate;
        };
        this.convertDateObjectToString = function(thedate) {
          var ret = [];
          for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
            if (thedate[CSL2.DATE_PARTS_ALL[i2]]) {
              ret.push(thedate[CSL2.DATE_PARTS_ALL[i2]]);
            } else {
              break;
            }
          }
          return ret.join("-");
        };
        this._parseNumericDate = function(ret, delim, suff, txt) {
          if (!suff) {
            suff = "";
          }
          var lst = txt.split(delim);
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            if (lst[i2].length === 4) {
              ret["year" + suff] = lst[i2].replace(/^0*/, "");
              if (!i2) {
                lst = lst.slice(1);
              } else {
                lst = lst.slice(0, i2);
              }
              break;
            }
          }
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            lst[i2] = parseInt(lst[i2], 10);
          }
          if (lst.length === 1 || lst.length === 2 && !lst[1]) {
            var month = lst[0];
            if (month) {
              ret["month" + suff] = "" + lst[0];
            }
          } else if (lst.length === 2) {
            if (lst[this.monthGuess] > 12) {
              var month = lst[this.dayGuess];
              var day = lst[this.monthGuess];
              if (month) {
                ret["month" + suff] = "" + month;
                if (day) {
                  ret["day" + suff] = "" + day;
                }
              }
            } else {
              var month = lst[this.monthGuess];
              var day = lst[this.dayGuess];
              if (month) {
                ret["month" + suff] = "" + month;
                if (day) {
                  ret["day" + suff] = "" + day;
                }
              }
            }
          }
        };
        this.parseDateToObject = function(txt) {
          var orig = txt;
          var slashPos = -1;
          var dashPos = -1;
          var yearIsNegative = false;
          var lst;
          if (txt) {
            txt = txt.replace(/^(.*[0-9])T[0-9].*/, "$1");
            if (txt.slice(0, 1) === "-") {
              yearIsNegative = true;
              txt = txt.slice(1);
            }
            if (txt.match(/^[0-9]{1,3}$/)) {
              while (txt.length < 4) {
                txt = "0" + txt;
              }
            }
            txt = "" + txt;
            txt = txt.replace(/\s*[0-9]{2}:[0-9]{2}(?::[0-9]+)/, "");
            var m = txt.match(kanjiMonthDay);
            if (m) {
              txt = txt.replace(/\s+/g, "");
              txt = txt.replace(kanjiYear, "");
              txt = txt.replace(kanjiMonthDay, "-");
              txt = txt.replace(kanjiRange, "/");
              txt = txt.replace(/\-\//g, "/");
              txt = txt.replace(/-$/g, "");
              var slst = txt.split(epochSplitter);
              lst = [];
              var mm = txt.match(epochMatcher);
              if (mm) {
                var mmx = [];
                for (var i2 = 0, ilen2 = mm.length; i2 < ilen2; i2++) {
                  mmx = mmx.concat(mm[i2].match(/([^0-9]+)([0-9]+)/).slice(1));
                }
                for (var i2 = 0, ilen2 = slst.length; i2 < ilen2; i2++) {
                  lst.push(slst[i2]);
                  if (i2 !== ilen2 - 1) {
                    var mmpos = i2 * 2;
                    lst.push(mmx[mmpos]);
                    lst.push(mmx[mmpos + 1]);
                  }
                }
              } else {
                lst = slst;
              }
              for (var i2 = 1, ilen2 = lst.length; i2 < ilen2; i2 += 3) {
                lst[i2 + 1] = epochMap[lst[i2]] + parseInt(lst[i2 + 1], 10);
                lst[i2] = "";
              }
              txt = lst.join("");
              txt = txt.replace(/\s*-\s*$/, "").replace(/\s*-\s*\//, "/");
              txt = txt.replace(/\.\s*$/, "");
              txt = txt.replace(/\.(?! )/, "");
              slashPos = txt.indexOf("/");
              dashPos = txt.indexOf("-");
            }
          }
          txt = txt.replace(/([A-Za-z])\./g, "$1");
          var number2 = "";
          var note = "";
          var thedate = {};
          var rangeDelim;
          var dateDelim;
          if (txt.slice(0, 1) === '"' && txt.slice(-1) === '"') {
            thedate.literal = txt.slice(1, -1);
            return thedate;
          }
          if (slashPos > -1 && dashPos > -1) {
            var slashCount = txt.split("/");
            if (slashCount.length > 3) {
              rangeDelim = "-";
              txt = txt.replace(/\_/g, "-");
              dateDelim = "/";
              lst = txt.split(rexSlashDash);
            } else {
              rangeDelim = "/";
              txt = txt.replace(/\_/g, "/");
              dateDelim = "-";
              lst = txt.split(rexDashSlash);
            }
          } else {
            txt = txt.replace(/\//g, "-");
            txt = txt.replace(/\_/g, "-");
            rangeDelim = "-";
            dateDelim = "-";
            lst = txt.split(rexDash);
          }
          var ret = [];
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            var m = lst[i2].match(/^\s*([\-\/]|[^\-\/\~\?0-9]+|[\-~?0-9]+)\s*$/);
            if (m) {
              ret.push(m[1]);
            }
          }
          var delimPos = ret.indexOf(rangeDelim);
          var delims = [];
          var isRange = false;
          if (delimPos > -1) {
            delims.push([0, delimPos]);
            delims.push([delimPos + 1, ret.length]);
            isRange = true;
          } else {
            delims.push([0, ret.length]);
          }
          var suff = "";
          for (var i2 = 0, ilen2 = delims.length; i2 < ilen2; i2++) {
            var delim = delims[i2];
            var date2 = ret.slice(delim[0], delim[1]);
            outer:
              for (var j = 0, jlen = date2.length; j < jlen; j++) {
                var element = date2[j];
                if (element.indexOf(dateDelim) > -1) {
                  this._parseNumericDate(thedate, dateDelim, suff, element);
                  continue;
                }
                if (element.match(/[0-9]{4}/)) {
                  thedate["year" + suff] = element.replace(/^0*/, "");
                  continue;
                }
                if (element === "~" || element === "?" || element === "c" || element.match(/^cir/)) {
                  thedate.circa = true;
                }
                for (var k = 0, klen = this.monthRexes.length; k < klen; k++) {
                  if (element.toLocaleLowerCase().match(this.monthRexes[k])) {
                    thedate["month" + suff] = "" + (parseInt(k, 10) + 1);
                    continue outer;
                  }
                }
                if (element.match(/^[0-9]+$/)) {
                  number2 = element;
                }
                if (element.toLocaleLowerCase().match(/^bc/) && number2) {
                  thedate["year" + suff] = "" + number2 * -1;
                  number2 = "";
                  continue;
                }
                if (element.toLocaleLowerCase().match(/^ad/) && number2) {
                  thedate["year" + suff] = "" + number2;
                  number2 = "";
                  continue;
                }
                if (element.toLocaleLowerCase().match(/(?:mic|tri|hil|eas)/) && !thedate["season" + suff]) {
                  note = element;
                  continue;
                }
              }
            if (number2) {
              thedate["day" + suff] = number2;
              number2 = "";
            }
            if (note && !thedate["season" + suff]) {
              thedate["season" + suff] = note.trim();
              note = "";
            }
            suff = "_end";
          }
          if (isRange) {
            for (var j = 0, jlen = CSL2.DATE_PARTS_ALL.length; j < jlen; j++) {
              var item = CSL2.DATE_PARTS_ALL[j];
              if (thedate[item] && !thedate[item + "_end"]) {
                thedate[item + "_end"] = thedate[item];
              } else if (!thedate[item] && thedate[item + "_end"]) {
                thedate[item] = thedate[item + "_end"];
              }
            }
          }
          if (!thedate.year || thedate.year && thedate.day && !thedate.month) {
            thedate = { "literal": orig };
          }
          var parts = ["year", "month", "day", "year_end", "month_end", "day_end"];
          for (var i2 = 0, ilen2 = parts.length; i2 < ilen2; i2++) {
            var part = parts[i2];
            if (typeof thedate[part] === "string" && thedate[part].match(/^[0-9]+$/)) {
              thedate[part] = parseInt(thedate[part], 10);
            }
          }
          if (yearIsNegative && Object.keys(thedate).indexOf("year") > -1) {
            thedate.year = thedate.year * -1;
          }
          return thedate;
        };
        this.parseDateToArray = function(txt) {
          return this.convertDateObjectToArray(this.parseDateToObject(txt));
        };
        this.parseDateToString = function(txt) {
          return this.convertDateObjectToString(this.parseDateToObject(txt));
        };
        this.parse = function(txt) {
          return this.parseDateToObject(txt);
        };
        this.setOrderMonthDay();
        this.resetDateParserMonths();
      };
      CSL2.DateParser = new CSL2.DateParser();
      CSL2.Engine = function(sys, style, lang, forceLang) {
        var attrs, langspec;
        this.processor_version = CSL2.PROCESSOR_VERSION;
        this.csl_version = "1.0";
        this.sys = sys;
        if (typeof Object.assign != "function") {
          Object.defineProperty(Object, "assign", {
            value: function assign(target) {
              "use strict";
              if (target == null) {
                throw new TypeError("Cannot convert undefined or null to object");
              }
              var to = Object(target);
              for (var index = 1; index < arguments.length; index++) {
                var nextSource = arguments[index];
                if (nextSource != null) {
                  for (var nextKey in nextSource) {
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                      to[nextKey] = nextSource[nextKey];
                    }
                  }
                }
              }
              return to;
            },
            writable: true,
            configurable: true
          });
        }
        if (sys.variableWrapper) {
          CSL2.VARIABLE_WRAPPER_PREPUNCT_REX = new RegExp("^([" + [" "].concat(CSL2.SWAPPING_PUNCTUATION).join("") + "]*)(.*)");
        }
        if (CSL2.retrieveStyleModule) {
          this.sys.retrieveStyleModule = CSL2.retrieveStyleModule;
        }
        if (CSL2.getAbbreviation) {
          this.sys.getAbbreviation = CSL2.getAbbreviation;
        }
        if (this.sys.stringCompare) {
          CSL2.stringCompare = this.sys.stringCompare;
        }
        this.sys.AbbreviationSegments = CSL2.AbbreviationSegments;
        this.transform = new CSL2.Transform(this);
        this.setParseNames = function(val) {
          this.opt["parse-names"] = val;
        };
        this.opt = new CSL2.Engine.Opt();
        this.tmp = new CSL2.Engine.Tmp();
        this.build = new CSL2.Engine.Build();
        this.fun = new CSL2.Engine.Fun(this);
        this.configure = new CSL2.Engine.Configure();
        this.citation_sort = new CSL2.Engine.CitationSort();
        this.bibliography_sort = new CSL2.Engine.BibliographySort();
        this.citation = new CSL2.Engine.Citation(this);
        this.bibliography = new CSL2.Engine.Bibliography();
        this.intext = new CSL2.Engine.InText();
        this.output = new CSL2.Output.Queue(this);
        this.dateput = new CSL2.Output.Queue(this);
        this.cslXml = CSL2.setupXml(style);
        for (var i in CSL2.SYS_OPTIONS) {
          var option = CSL2.SYS_OPTIONS[i];
          if (typeof this.sys[option] === "boolean") {
            this.opt.development_extensions[option] = this.sys[option];
          }
        }
        if (this.opt.development_extensions.uppercase_subtitles || this.opt.development_extensions.implicit_short_title) {
          this.opt.development_extensions.main_title_from_short_title = true;
        }
        if (this.opt.development_extensions.csl_reverse_lookup_support) {
          this.build.cslNodeId = 0;
          this.setCslNodeIds = function(myxml, nodename) {
            var children = this.cslXml.children(myxml);
            this.cslXml.setAttribute(myxml, "cslid", this.build.cslNodeId);
            this.opt.nodenames.push(nodename);
            this.build.cslNodeId += 1;
            for (var i2 = 0, ilen = this.cslXml.numberofnodes(children); i2 < ilen; i2 += 1) {
              nodename = this.cslXml.nodename(children[i2]);
              if (nodename) {
                this.setCslNodeIds(children[i2], nodename);
              }
            }
          };
          this.setCslNodeIds(this.cslXml.dataObj, "style");
        }
        this.cslXml.addMissingNameNodes(this.cslXml.dataObj);
        this.cslXml.addInstitutionNodes(this.cslXml.dataObj);
        this.cslXml.insertPublisherAndPlace(this.cslXml.dataObj);
        this.cslXml.flagDateMacros(this.cslXml.dataObj);
        attrs = this.cslXml.attributes(this.cslXml.dataObj);
        if (typeof attrs["@sort-separator"] === "undefined") {
          this.cslXml.setAttribute(this.cslXml.dataObj, "sort-separator", ", ");
        }
        this.opt["initialize-with-hyphen"] = true;
        this.setStyleAttributes();
        this.opt.xclass = this.cslXml.getAttributeValue(this.cslXml.dataObj, "class");
        this.opt["class"] = this.opt.xclass;
        this.opt.styleID = this.cslXml.getStyleId(this.cslXml.dataObj);
        this.opt.styleName = this.cslXml.getStyleId(this.cslXml.dataObj, true);
        if (this.opt.version.slice(0, 4) === "1.1m") {
          this.opt.development_extensions.consolidate_legal_items = true;
          this.opt.development_extensions.consolidate_container_items = true;
          this.opt.development_extensions.main_title_from_short_title = true;
          this.opt.development_extensions.expect_and_symbol_form = true;
          this.opt.development_extensions.require_explicit_legal_case_title_short = true;
          this.opt.development_extensions.force_jurisdiction = true;
          this.opt.development_extensions.force_title_abbrev_fallback = true;
        }
        if (lang) {
          lang = lang.replace("_", "-");
          lang = CSL2.normalizeLocaleStr(lang);
        }
        if (this.opt["default-locale"][0]) {
          this.opt["default-locale"][0] = this.opt["default-locale"][0].replace("_", "-");
          this.opt["default-locale"][0] = CSL2.normalizeLocaleStr(this.opt["default-locale"][0]);
        }
        if (lang && forceLang) {
          this.opt["default-locale"] = [lang];
        }
        if (lang && !forceLang && this.opt["default-locale"][0]) {
          lang = this.opt["default-locale"][0];
        }
        if (this.opt["default-locale"].length === 0) {
          if (!lang) {
            lang = "en-US";
          }
          this.opt["default-locale"].push("en-US");
        }
        if (!lang) {
          lang = this.opt["default-locale"][0];
        }
        langspec = CSL2.localeResolve(lang);
        this.opt.lang = langspec.best;
        this.opt["default-locale"][0] = langspec.best;
        this.locale = {};
        if (!this.opt["default-locale-sort"]) {
          this.opt["default-locale-sort"] = this.opt["default-locale"][0];
        }
        if ("dale|".localeCompare("daleb", this.opt["default-locale-sort"]) > -1) {
          this.opt.sort_sep = "@";
        } else {
          this.opt.sort_sep = "|";
        }
        this.localeConfigure(langspec);
        function makeRegExp(lst) {
          var lst = lst.slice();
          var ret = new RegExp("(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
          return ret;
        }
        this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp(this.locale[this.opt.lang].opts["skip-words"]);
        this.output.adjust = new CSL2.Output.Queue.adjust(this.getOpt("punctuation-in-quote"));
        this.registry = new CSL2.Registry(this);
        this.macros = {};
        this.build.area = "citation";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        this.build.area = "bibliography";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        this.build.area = "intext";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        if (this.opt.parallel.enable) {
          this.parallel = new CSL2.Parallel(this);
        }
        this.juris = {};
        this.configureTokenLists();
        this.disambiguate = new CSL2.Disambiguation(this);
        this.splice_delimiter = false;
        this.fun.dateparser = CSL2.DateParser;
        this.fun.flipflopper = new CSL2.Util.FlipFlopper(this);
        this.setCloseQuotesArray();
        this.fun.ordinalizer.init(this);
        this.fun.long_ordinalizer.init(this);
        this.fun.page_mangler = CSL2.Util.PageRangeMangler.getFunction(this, "page");
        this.fun.year_mangler = CSL2.Util.PageRangeMangler.getFunction(this, "year");
        this.setOutputFormat("html");
      };
      CSL2.Engine.prototype.setCloseQuotesArray = function() {
        var ret;
        ret = [];
        ret.push(this.getTerm("close-quote"));
        ret.push(this.getTerm("close-inner-quote"));
        ret.push('"');
        ret.push("'");
        this.opt.close_quotes_array = ret;
      };
      CSL2.makeBuilder = function(me, target) {
        var var_stack = [];
        var node_stack = [];
        function runStart(node) {
          node_stack.push(node);
          CSL2.XmlToToken.call(node, me, CSL2.START, target, var_stack);
        }
        function runEnd() {
          var node = node_stack.pop();
          CSL2.XmlToToken.call(node, me, CSL2.END, target, var_stack);
        }
        function runSingle(node) {
          CSL2.XmlToToken.call(node, me, CSL2.SINGLETON, target, var_stack);
        }
        function buildStyle(nodes, parent, node_stack2) {
          if (!node_stack2) {
            node_stack2 = [];
          }
          if (!nodes) {
            nodes = [];
          }
          if (typeof nodes.length === "undefined") {
            nodes = [nodes];
          }
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (me.cslXml.nodename(node) === null) {
              continue;
            }
            if (parent && me.cslXml.nodename(node) === "date") {
              CSL2.Util.fixDateNode.call(me, parent, i, node);
              node = me.cslXml.children(parent)[i];
            }
            if (me.cslXml.numberofnodes(me.cslXml.children(node))) {
              runStart(node);
              buildStyle(me.cslXml.children(node), node, node_stack2);
              runEnd();
            } else {
              runSingle(node);
            }
          }
        }
        return buildStyle;
      };
      CSL2.Engine.prototype.buildTokenLists = function(area_nodes, target) {
        if (!this.cslXml.getNodeValue(area_nodes)) {
          return;
        }
        var builder = CSL2.makeBuilder(this, target);
        var mynode;
        if (typeof area_nodes.length === "undefined") {
          mynode = area_nodes;
        } else {
          mynode = area_nodes[0];
        }
        builder(mynode);
      };
      CSL2.Engine.prototype.setStyleAttributes = function() {
        var dummy, attributes, attrname;
        var dummy = {};
        dummy.name = this.cslXml.nodename(this.cslXml.dataObj);
        attributes = this.cslXml.attributes(this.cslXml.dataObj);
        for (attrname in attributes) {
          if (attributes.hasOwnProperty(attrname)) {
            CSL2.Attributes[attrname].call(dummy, this, attributes[attrname]);
          }
        }
      };
      CSL2.Engine.prototype.getTerm = function(term, form, plural, gender, mode, forceDefaultLocale) {
        if (term && term.match(/[A-Z]/) && term === term.toUpperCase()) {
          CSL2.debug("Warning: term key is in uppercase form: " + term);
          term = term.toLowerCase();
        }
        var lang;
        if (forceDefaultLocale) {
          lang = this.opt["default-locale"][0];
        } else {
          lang = this.opt.lang;
        }
        var ret = CSL2.Engine.getField(CSL2.LOOSE, this.locale[lang].terms, term, form, plural, gender);
        if (!ret && term === "range-delimiter") {
          ret = "\u2013";
        }
        if (typeof ret === "undefined") {
          if (mode === CSL2.STRICT) {
            CSL2.error('Error in getTerm: term "' + term + '" does not exist.');
          } else if (mode === CSL2.TOLERANT) {
            ret = "";
          }
        }
        if (ret) {
          this.tmp.cite_renders_content = true;
        }
        return ret;
      };
      CSL2.Engine.prototype.getDate = function(form, forceDefaultLocale) {
        var lang;
        if (forceDefaultLocale) {
          lang = this.opt["default-locale"];
        } else {
          lang = this.opt.lang;
        }
        if (this.locale[lang].dates[form]) {
          return this.locale[lang].dates[form];
        } else {
          return false;
        }
      };
      CSL2.Engine.prototype.getOpt = function(arg) {
        if (typeof this.locale[this.opt.lang].opts[arg] !== "undefined") {
          return this.locale[this.opt.lang].opts[arg];
        } else {
          return false;
        }
      };
      CSL2.Engine.prototype.getVariable = function(Item, varname, form, plural) {
        return CSL2.Engine.getField(CSL2.LOOSE, Item, varname, form, plural);
      };
      CSL2.Engine.prototype.getDateNum = function(ItemField, partname) {
        if (typeof ItemField === "undefined") {
          return 0;
        } else {
          return ItemField[partname];
        }
      };
      CSL2.Engine.getField = function(mode, hash, term, form, plural, gender) {
        var ret, forms, f, pos, len, hashterm;
        ret = "";
        if (typeof hash[term] === "undefined") {
          if (mode === CSL2.STRICT) {
            CSL2.error('Error in getField: term "' + term + '" does not exist.');
          } else {
            return void 0;
          }
        }
        if (gender && hash[term][gender]) {
          hashterm = hash[term][gender];
        } else {
          hashterm = hash[term];
        }
        forms = [];
        if (form === "symbol") {
          forms = ["symbol", "short"];
        } else if (form === "verb-short") {
          forms = ["verb-short", "verb"];
        } else if (form !== "long") {
          forms = [form];
        }
        forms = forms.concat(["long"]);
        len = forms.length;
        for (pos = 0; pos < len; pos += 1) {
          f = forms[pos];
          if (typeof hashterm === "string" || typeof hashterm === "number") {
            ret = hashterm;
          } else if (typeof hashterm[f] !== "undefined") {
            if (typeof hashterm[f] === "string" || typeof hashterm[f] === "number") {
              ret = hashterm[f];
            } else {
              if (typeof plural === "number") {
                ret = hashterm[f][plural];
              } else {
                ret = hashterm[f][0];
              }
            }
            break;
          }
        }
        return ret;
      };
      CSL2.Engine.prototype.configureTokenLists = function() {
        var area, pos, len;
        len = CSL2.AREAS.length;
        for (pos = 0; pos < len; pos += 1) {
          area = CSL2.AREAS[pos];
          var tokens = this[area].tokens;
          this.configureTokenList(tokens);
        }
        this.version = CSL2.version;
        return this.state;
      };
      CSL2.Engine.prototype.configureTokenList = function(tokens) {
        var dateparts_master, token, dateparts, part, ppos, pppos, llen, lllen;
        dateparts_master = ["year", "month", "day"];
        llen = tokens.length - 1;
        for (ppos = llen; ppos > -1; ppos += -1) {
          token = tokens[ppos];
          if (token.name === "date" && CSL2.END === token.tokentype) {
            dateparts = [];
          }
          if (token.name === "date-part" && token.strings.name) {
            lllen = dateparts_master.length;
            for (pppos = 0; pppos < lllen; pppos += 1) {
              part = dateparts_master[pppos];
              if (part === token.strings.name) {
                dateparts.push(token.strings.name);
              }
            }
          }
          if (token.name === "date" && CSL2.START === token.tokentype) {
            dateparts.reverse();
            token.dateparts = dateparts;
          }
          token.next = ppos + 1;
          if (token.name && CSL2.Node[token.name].configure) {
            CSL2.Node[token.name].configure.call(token, this, ppos);
          }
        }
      };
      CSL2.Engine.prototype.refetchItems = function(ids) {
        var ret = [];
        for (var i = 0, ilen = ids.length; i < ilen; i += 1) {
          ret.push(this.refetchItem("" + ids[i]));
        }
        return ret;
      };
      CSL2.ITERATION = 0;
      CSL2.Engine.prototype.retrieveItem = function(id) {
        var Item, m, i;
        if (!this.tmp.loadedItemIDs[id]) {
          this.tmp.loadedItemIDs[id] = true;
        } else {
          return this.registry.refhash[id];
        }
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase && typeof this.opt.development_extensions.normalize_lang_keys_to_lowercase === "boolean") {
          for (var i = 0, ilen = this.opt["default-locale"].length; i < ilen; i += 1) {
            this.opt["default-locale"][i] = this.opt["default-locale"][i].toLowerCase();
          }
          for (var i = 0, ilen = this.opt["locale-translit"].length; i < ilen; i += 1) {
            this.opt["locale-translit"][i] = this.opt["locale-translit"][i].toLowerCase();
          }
          for (var i = 0, ilen = this.opt["locale-translat"].length; i < ilen; i += 1) {
            this.opt["locale-translat"][i] = this.opt["locale-translat"][i].toLowerCase();
          }
          this.opt.development_extensions.normalize_lang_keys_to_lowercase = 100;
        }
        CSL2.ITERATION += 1;
        Item = JSON.parse(JSON.stringify(this.sys.retrieveItem("" + id)));
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          if (Item.multi) {
            if (Item.multi._keys) {
              for (var field in Item.multi._keys) {
                for (var key in Item.multi._keys[field]) {
                  if (key !== key.toLowerCase()) {
                    Item.multi._keys[field][key.toLowerCase()] = Item.multi._keys[field][key];
                    delete Item.multi._keys[field][key];
                  }
                }
              }
            }
            if (Item.multi.main) {
              for (var field in Item.multi.main) {
                Item.multi.main[field] = Item.multi.main[field].toLowerCase();
              }
            }
          }
          for (var i = 0, ilen = CSL2.NAME_VARIABLES.length; i > ilen; i += 1) {
            var ctype = CSL2.NAME_VARIABLES[i];
            if (Item[ctype] && Item[ctype].multi) {
              for (var j = 0, jlen = Item[ctype].length; j < jlen; j += 1) {
                var creator = Item[ctype][j];
                if (creator.multi) {
                  if (creator.multi._key) {
                    for (var key in creator.multi._key) {
                      if (key !== key.toLowerCase()) {
                        creator.multi._key[key.toLowerCase()] = creator.multi._key[key];
                        delete creator.multi._key[key];
                      }
                    }
                  }
                  if (creator.multi.main) {
                    creator.multi.main = creator.multi.main.toLowerCase();
                  }
                }
              }
            }
          }
        }
        if (Item.language && Item.language.match(/[><]/)) {
          var m = Item.language.match(/(.*?)([<>])(.*)/);
          if (m[2] === "<") {
            Item["language-name"] = m[1];
            Item["language-name-original"] = m[3];
          } else {
            Item["language-name"] = m[3];
            Item["language-name-original"] = m[1];
          }
          if (this.opt.multi_layout) {
            if (Item["language-name-original"]) {
              Item.language = Item["language-name-original"];
            }
          } else {
            if (Item["language-name"]) {
              Item.language = Item["language-name"];
            }
          }
        }
        if (Item.page) {
          Item["page-first"] = Item.page;
          var num = "" + Item.page;
          var m = num.split(/\s*(?:&|, |-|\u2013)\s*/);
          if (m[0].slice(-1) !== "\\") {
            Item["page-first"] = m[0];
          }
        }
        if (this.opt.development_extensions.field_hack && Item.note) {
          CSL2.parseNoteFieldHacks(Item, false, this.opt.development_extensions.allow_field_hack_date_override);
        }
        for (var key in Item) {
          if (CSL2.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
            var dateobj = Item[key];
            if (dateobj) {
              if (this.opt.development_extensions.raw_date_parsing) {
                if (dateobj.raw && (!dateobj["date-parts"] || dateobj["date-parts"].length === 0)) {
                  dateobj = this.fun.dateparser.parseDateToObject(dateobj.raw);
                }
              }
              Item[key] = this.dateParseArray(dateobj);
            }
          }
        }
        if (this.opt.development_extensions.consolidate_legal_items) {
          if (Item.type && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "title", "jurisdiction", "genre", "volume", "container-title"];
            var legislation_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname]) {
                legislation_id.push(Item[varname]);
              }
            }
            elements = ["original-date", "issued"];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname] && Item[varname].year) {
                var value = Item[varname].year;
                legislation_id.push(value);
                break;
              }
            }
            Item.legislation_id = legislation_id.join("::");
          }
        }
        if (this.bibliography.opt.track_container_items) {
          if (this.bibliography.opt.track_container_items.indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "container-title", "publisher", "edition"];
            var container_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname]) {
                container_id.push(Item[varname]);
              }
            }
            Item.container_id = container_id.join("::");
          }
        }
        if (this.opt.development_extensions.force_jurisdiction) {
          if (typeof Item.authority === "string") {
            Item.authority = [
              {
                literal: Item.authority,
                multi: {
                  _key: {}
                }
              }
            ];
            if (Item.multi && Item.multi._keys && Item.multi._keys.authority) {
              Item.authority[0].multi._key = {};
              for (var key in Item.multi._keys.authority) {
                Item.authority[0].multi._key[key] = {
                  literal: Item.multi._keys.authority[key]
                };
              }
            }
          }
        }
        if (!Item["title-short"]) {
          Item["title-short"] = Item.shortTitle;
        }
        if (this.opt.development_extensions.main_title_from_short_title) {
          var narrowSpaceLocale = this.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr";
          CSL2.extractTitleAndSubtitle.call(this, Item, narrowSpaceLocale);
        }
        var isLegalType = ["bill", "legal_case", "legislation", "gazette", "regulation"].indexOf(Item.type) > -1;
        if (this.opt.development_extensions.force_jurisdiction && isLegalType) {
          if (!Item.jurisdiction) {
            Item.jurisdiction = "us";
          }
        }
        var normalizedKey;
        if (!isLegalType && Item.title && this.sys.getAbbreviation) {
          var noHints = false;
          if (!Item.jurisdiction) {
            noHints = true;
          }
          if (this.sys.normalizeAbbrevsKey) {
            normalizedKey = this.sys.normalizeAbbrevsKey("title", Item.title);
          } else {
            normalizedKey = Item.title;
          }
          var jurisdiction2 = this.transform.loadAbbreviation(Item.jurisdiction, "title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction2].title) {
            if (this.transform.abbrevs[jurisdiction2].title[normalizedKey]) {
              Item["title-short"] = this.transform.abbrevs[jurisdiction2].title[normalizedKey];
            }
          }
        }
        if (!Item["container-title-short"]) {
          Item["container-title-short"] = Item.journalAbbreviation;
        }
        if (Item["container-title"] && this.sys.getAbbreviation) {
          if (this.sys.normalizeAbbrevsKey) {
            normalizedKey = this.sys.normalizeAbbrevsKey(Item["container-title"]);
          } else {
            normalizedKey = Item["container-title"];
          }
          var jurisdiction2 = this.transform.loadAbbreviation(Item.jurisdiction, "container-title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction2]["container-title"]) {
            if (this.transform.abbrevs[jurisdiction2]["container-title"][normalizedKey]) {
              Item["container-title-short"] = this.transform.abbrevs[jurisdiction2]["container-title"][normalizedKey];
            }
          }
        }
        if (Item.jurisdiction) {
          Item.country = Item.jurisdiction.split(":")[0];
        }
        if (this.registry.refhash[id]) {
          if (JSON.stringify(this.registry.refhash[id]) != JSON.stringify(Item)) {
            for (var key in this.registry.refhash[id]) {
              delete this.registry.refhash[id][key];
            }
            this.tmp.taintedItemIDs[Item.id] = true;
            Object.assign(this.registry.refhash[id], Item);
          }
        } else {
          this.registry.refhash[id] = Item;
        }
        return this.registry.refhash[id];
      };
      CSL2.Engine.prototype.refetchItem = function(id) {
        return this.registry.refhash[id];
      };
      CSL2.Engine.prototype.setOpt = function(token, name, value) {
        if (token.name === "style" || token.name === "cslstyle") {
          this.opt.inheritedAttributes[name] = value;
          this.citation.opt.inheritedAttributes[name] = value;
          this.bibliography.opt.inheritedAttributes[name] = value;
        } else if (["citation", "bibliography"].indexOf(token.name) > -1) {
          this[token.name].opt.inheritedAttributes[name] = value;
        } else {
          token.strings[name] = value;
        }
      };
      CSL2.Engine.prototype.inheritOpt = function(token, attrname, parentname, defaultValue) {
        if (typeof token.strings[attrname] !== "undefined") {
          return token.strings[attrname];
        } else {
          var parentValue = this[this.tmp.root].opt.inheritedAttributes[parentname ? parentname : attrname];
          if (typeof parentValue !== "undefined") {
            return parentValue;
          } else {
            return defaultValue;
          }
        }
      };
      CSL2.Engine.prototype.remapSectionVariable = function(inputList) {
        for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
          var Item = inputList[i][0];
          var item = inputList[i][1];
          if (["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
            if (item.locator) {
              item.locator = item.locator.trim();
              var m = item.locator.match(CSL2.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
              if (!m) {
                if (item.label) {
                  item.locator = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[item.label] + " " + item.locator;
                } else {
                  item.locator = "p. " + item.locator;
                }
              }
            }
            var sectionMasterLabel = null;
            if (Item.section) {
              Item.section = Item.section.trim();
              var m = Item.section.match(CSL2.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
              if (!m) {
                Item.section = "sec. " + Item.section;
                sectionMasterLabel = "sec.";
              } else {
                sectionMasterLabel = m[0].trim();
              }
            }
            if (Item.section) {
              if (!item.locator) {
                item.locator = Item.section;
              } else {
                var m = item.locator.match(/^([^ ]*)\s*(.*)/);
                var space = " ";
                if (m) {
                  if (m[1] === "p." && sectionMasterLabel !== "p.") {
                    item.locator = m[2];
                  }
                  if (["[", "(", ".", ",", ";", ":", "?"].indexOf(item.locator.slice(0, 1)) > -1) {
                    space = "";
                  }
                } else {
                  space = "";
                }
                item.locator = Item.section + space + item.locator;
              }
            }
            item.label = "";
          }
        }
      };
      CSL2.Engine.prototype.setNumberLabels = function(Item) {
        if (Item.number && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1 && this.opt.development_extensions.consolidate_legal_items && !this.tmp.shadow_numbers["number"]) {
          this.tmp.shadow_numbers["number"] = {};
          this.tmp.shadow_numbers["number"].values = [];
          this.tmp.shadow_numbers["number"].plural = 0;
          this.tmp.shadow_numbers["number"].numeric = false;
          this.tmp.shadow_numbers["number"].label = false;
          var value = "" + Item.number;
          value = value.split("\\").join("");
          var firstword = value.split(/\s+/)[0];
          var firstlabel = CSL2.STATUTE_SUBDIV_STRINGS[firstword];
          if (firstlabel) {
            var splt = value.split(CSL2.STATUTE_SUBDIV_PLAIN_REGEX);
            if (splt.length > 1) {
              var lst = [];
              for (var j = 1, jlen = splt.length; j < jlen; j += 1) {
                lst.push(splt[j].replace(/\s*$/, "").replace(/^\s*/, ""));
              }
              value = lst.join(" ");
            } else {
              value = splt[0];
            }
            this.tmp.shadow_numbers["number"].label = firstlabel;
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = false;
          } else {
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = true;
          }
        }
      };
      CSL2.substituteOne = function(template) {
        return function(state, list) {
          if (!list) {
            return "";
          } else {
            return template.replace("%%STRING%%", list);
          }
        };
      };
      CSL2.substituteTwo = function(template) {
        return function(param) {
          var template2 = template.replace("%%PARAM%%", param);
          return function(state, list) {
            if (!list) {
              return "";
            } else {
              return template2.replace("%%STRING%%", list);
            }
          };
        };
      };
      CSL2.Mode = function(mode) {
        var decorations, params, param, func, val, args;
        decorations = {};
        params = CSL2.Output.Formats[mode];
        for (param in params) {
          if (true) {
            if (param.slice(0, 1) !== "@") {
              decorations[param] = params[param];
              continue;
            }
            func = false;
            val = params[param];
            args = param.split("/");
            if (typeof val === "string" && val.indexOf("%%STRING%%") > -1) {
              if (val.indexOf("%%PARAM%%") > -1) {
                func = CSL2.substituteTwo(val);
              } else {
                func = CSL2.substituteOne(val);
              }
            } else if (typeof val === "boolean" && !val) {
              func = CSL2.Output.Formatters.passthrough;
            } else if (typeof val === "function") {
              func = val;
            } else {
              CSL2.error("Bad " + mode + " config entry for " + param + ": " + val);
            }
            if (args.length === 1) {
              decorations[args[0]] = func;
            } else if (args.length === 2) {
              if (!decorations[args[0]]) {
                decorations[args[0]] = {};
              }
              decorations[args[0]][args[1]] = func;
            }
          }
        }
        return decorations;
      };
      CSL2.setDecorations = function(state, attributes) {
        var ret, key, pos;
        ret = [];
        for (pos in CSL2.FORMAT_KEY_SEQUENCE) {
          if (true) {
            var key = CSL2.FORMAT_KEY_SEQUENCE[pos];
            if (attributes[key]) {
              ret.push([key, attributes[key]]);
              delete attributes[key];
            }
          }
        }
        return ret;
      };
      CSL2.Doppeler = function(rexStr, stringMangler) {
        var matchRex = new RegExp("(" + rexStr + ")", "g");
        var splitRex = new RegExp(rexStr, "g");
        this.split = function(str) {
          if (stringMangler) {
            str = stringMangler(str);
          }
          var match = str.match(matchRex);
          if (!match) {
            return {
              tags: [],
              strings: [str]
            };
          }
          var split = str.split(splitRex);
          for (var i = match.length - 1; i > -1; i--) {
            if (typeof match[i] === "number") {
              match[i] = "";
            }
            var tag = match[i];
            if (tag === "'" && split[i + 1].length > 0) {
              split[i + 1] = match[i] + split[i + 1];
              match[i] = "";
            }
          }
          return {
            tags: match,
            strings: split,
            origStrings: split.slice()
          };
        };
        this.join = function(obj) {
          var lst = obj.strings.slice(-1);
          for (var i = obj.tags.length - 1; i > -1; i--) {
            lst.push(obj.tags[i]);
            lst.push(obj.strings[i]);
          }
          lst.reverse();
          return lst.join("");
        };
      };
      CSL2.Engine.prototype.normalDecorIsOrphan = function(blob, params) {
        if (params[1] === "normal") {
          var use_param = false;
          var all_the_decor;
          if (this.tmp.area === "citation") {
            all_the_decor = [this.citation.opt.layout_decorations].concat(blob.alldecor);
          } else {
            all_the_decor = blob.alldecor;
          }
          for (var k = all_the_decor.length - 1; k > -1; k += -1) {
            for (var n = all_the_decor[k].length - 1; n > -1; n += -1) {
              if (all_the_decor[k][n][0] === params[0]) {
                if (all_the_decor[k][n][1] !== "normal") {
                  use_param = true;
                }
              }
            }
          }
          if (!use_param) {
            return true;
          }
        }
        return false;
      };
      CSL2.Engine.prototype.getCitationLabel = function(Item) {
        var label2 = "";
        var params = this.getTrigraphParams();
        var config = params[0];
        var myname = this.getTerm("reference", "short", 0);
        if (typeof myname === "undefined") {
          myname = "reference";
        }
        myname = myname.replace(".", "");
        myname = myname.slice(0, 1).toUpperCase() + myname.slice(1);
        for (var i = 0, ilen = CSL2.NAME_VARIABLES.length; i < ilen; i += 1) {
          var n = CSL2.NAME_VARIABLES[i];
          if (Item[n]) {
            var names2 = Item[n];
            if (names2.length > params.length) {
              config = params[params.length - 1];
            } else {
              config = params[names2.length - 1];
            }
            for (var j = 0, jlen = names2.length; j < jlen; j += 1) {
              if (j === config.authors.length) {
                break;
              }
              var res = this.nameOutput.getName(names2[j], "locale-translit", true);
              var name = res.name;
              if (name && name.family) {
                myname = name.family;
                myname = myname.replace(/^([ \'\u2019a-z]+\s+)/, "");
              } else if (name && name.literal) {
                myname = name.literal;
              }
              var m = myname.toLowerCase().match(/^(a\s+|the\s+|an\s+)/);
              if (m) {
                myname = myname.slice(m[1].length);
              }
              myname = myname.replace(CSL2.ROMANESQUE_NOT_REGEXP, "");
              if (!myname) {
                break;
              }
              myname = myname.slice(0, config.authors[j]);
              if (myname.length > 1) {
                myname = myname.slice(0, 1).toUpperCase() + myname.slice(1).toLowerCase();
              } else if (myname.length === 1) {
                myname = myname.toUpperCase();
              }
              label2 += myname;
            }
            break;
          }
        }
        if (!label2) {
          if (Item.title) {
            var skipWords = this.locale[this.opt.lang].opts["skip-words"];
            var lst = Item.title.split(/\s+/);
            for (var i = lst.length - 1; i > -1; i--) {
              if (skipWords.indexOf(lst[i]) > -1) {
                lst = lst.slice(0, i).concat(lst.slice(i + 1));
              }
            }
            var str = lst.join("");
            str = str.slice(0, params[0].authors[0]);
            if (str.length > 1) {
              str = str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();
            } else if (str.length === 1) {
              str = str.toUpperCase();
            }
            label2 = str;
          }
        }
        var year = "0000";
        if (Item.issued) {
          if (Item.issued.year) {
            year = "" + Item.issued.year;
          }
        }
        year = year.slice(config.year * -1);
        label2 = label2 + year;
        return label2;
      };
      CSL2.Engine.prototype.getTrigraphParams = function() {
        var params = [];
        var ilst = this.opt.trigraph.split(":");
        if (!this.opt.trigraph || this.opt.trigraph.slice(0, 1) !== "A") {
          CSL2.error("Bad trigraph definition: " + this.opt.trigraph);
        }
        for (var i = 0, ilen = ilst.length; i < ilen; i += 1) {
          var str = ilst[i];
          var config = { authors: [], year: 0 };
          for (var j = 0, jlen = str.length; j < jlen; j += 1) {
            switch (str.slice(j, j + 1)) {
              case "A":
                config.authors.push(1);
                break;
              case "a":
                config.authors[config.authors.length - 1] += 1;
                break;
              case "0":
                config.year += 1;
                break;
              default:
                CSL2.error("Invalid character in trigraph definition: " + this.opt.trigraph);
            }
          }
          params.push(config);
        }
        return params;
      };
      CSL2.Engine.prototype.setOutputFormat = function(mode) {
        this.opt.mode = mode;
        this.fun.decorate = CSL2.Mode(mode);
        if (!this.output[mode]) {
          this.output[mode] = {};
          this.output[mode].tmp = {};
        }
      };
      CSL2.Engine.prototype.getSortFunc = function() {
        return function(a, b) {
          a = a.split("-");
          b = b.split("-");
          if (a.length < b.length) {
            return 1;
          } else if (a.length > b.length) {
            return -1;
          } else {
            a = a.slice(-1)[0];
            b = b.slice(-1)[0];
            if (a.length < b.length) {
              return 1;
            } else if (a.length > b.length) {
              return -1;
            } else {
              return 0;
            }
          }
        };
      };
      CSL2.Engine.prototype.setLangTagsForCslSort = function(tags) {
        var i, ilen;
        if (tags) {
          this.opt["locale-sort"] = [];
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-sort"].push(tags[i]);
          }
        }
        this.opt["locale-sort"].sort(this.getSortFunc());
      };
      CSL2.Engine.prototype.setLangTagsForCslTransliteration = function(tags) {
        var i, ilen;
        this.opt["locale-translit"] = [];
        if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-translit"].push(tags[i]);
          }
        }
        this.opt["locale-translit"].sort(this.getSortFunc());
      };
      CSL2.Engine.prototype.setLangTagsForCslTranslation = function(tags) {
        var i, ilen;
        this.opt["locale-translat"] = [];
        if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-translat"].push(tags[i]);
          }
        }
        this.opt["locale-translat"].sort(this.getSortFunc());
      };
      CSL2.Engine.prototype.setLangPrefsForCites = function(obj, conv) {
        var opt = this.opt["cite-lang-prefs"];
        if (!conv) {
          conv = function(key) {
            return key.toLowerCase();
          };
        }
        var segments = ["Persons", "Institutions", "Titles", "Journals", "Publishers", "Places"];
        for (var i = 0, ilen = segments.length; i < ilen; i += 1) {
          var clientSegment = conv(segments[i]);
          var citeprocSegment = segments[i].toLowerCase();
          if (!obj[clientSegment]) {
            continue;
          }
          var supplements = [];
          while (obj[clientSegment].length > 1) {
            supplements.push(obj[clientSegment].pop());
          }
          var sortval = { orig: 1, translit: 2, translat: 3 };
          if (supplements.length === 2 && sortval[supplements[0]] < sortval[supplements[1]]) {
            supplements.reverse();
          }
          while (supplements.length) {
            obj[clientSegment].push(supplements.pop());
          }
          var lst = opt[citeprocSegment];
          while (lst.length) {
            lst.pop();
          }
          for (var j = 0, jlen = obj[clientSegment].length; j < jlen; j += 1) {
            lst.push(obj[clientSegment][j]);
          }
        }
      };
      CSL2.Engine.prototype.setLangPrefsForCiteAffixes = function(affixList) {
        if (affixList && affixList.length === 48) {
          var affixes = this.opt.citeAffixes;
          var count = 0;
          var settings = ["persons", "institutions", "titles", "journals", "publishers", "places"];
          var forms = ["translit", "orig", "translit", "translat"];
          var value;
          for (var i = 0, ilen = settings.length; i < ilen; i += 1) {
            for (var j = 0, jlen = forms.length; j < jlen; j += 1) {
              value = "";
              if (count % 8 === 4) {
                if (!affixes[settings[i]]["locale-" + forms[j]].prefix && !affixes[settings[i]]["locale-" + forms[j]].suffix) {
                  value = affixList[count] ? affixList[count] : "";
                  affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                  value = affixList[count] ? affixList[count + 1] : "";
                  affixes[settings[i]]["locale-" + forms[j]].suffix = value;
                }
              } else {
                value = affixList[count] ? affixList[count] : "";
                affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                value = affixList[count] ? affixList[count + 1] : "";
                affixes[settings[i]]["locale-" + forms[j]].suffix = value;
              }
              count += 2;
            }
          }
          this.opt.citeAffixes = affixes;
        }
      };
      CSL2.Engine.prototype.setAutoVietnameseNamesOption = function(arg) {
        if (arg) {
          this.opt["auto-vietnamese-names"] = true;
        } else {
          this.opt["auto-vietnamese-names"] = false;
        }
      };
      CSL2.Engine.prototype.setAbbreviations = function(arg) {
        if (this.sys.setAbbreviations) {
          this.sys.setAbbreviations(arg);
        }
      };
      CSL2.Engine.prototype.setSuppressTrailingPunctuation = function(arg) {
        this.citation.opt.suppressTrailingPunctuation = !!arg;
      };
      CSL2.Output = {};
      CSL2.Output.Queue = function(state) {
        this.levelname = ["top"];
        this.state = state;
        this.queue = [];
        this.empty = new CSL2.Token("empty");
        var tokenstore = {};
        tokenstore.empty = this.empty;
        this.formats = new CSL2.Stack(tokenstore);
        this.current = new CSL2.Stack(this.queue);
      };
      CSL2.Output.Queue.prototype.pop = function() {
        var drip = this.current.value();
        if (drip.length) {
          return drip.pop();
        } else {
          return drip.blobs.pop();
        }
      };
      CSL2.Output.Queue.prototype.getToken = function(name) {
        var ret = this.formats.value()[name];
        return ret;
      };
      CSL2.Output.Queue.prototype.mergeTokenStrings = function(base, modifier) {
        var base_token, modifier_token, ret, key;
        base_token = this.formats.value()[base];
        modifier_token = this.formats.value()[modifier];
        ret = base_token;
        if (modifier_token) {
          if (!base_token) {
            base_token = new CSL2.Token(base, CSL2.SINGLETON);
            base_token.decorations = [];
          }
          ret = new CSL2.Token(base, CSL2.SINGLETON);
          var key = "";
          for (var key in base_token.strings) {
            if (base_token.strings.hasOwnProperty(key)) {
              ret.strings[key] = base_token.strings[key];
            }
          }
          for (var key in modifier_token.strings) {
            if (modifier_token.strings.hasOwnProperty(key)) {
              ret.strings[key] = modifier_token.strings[key];
            }
          }
          ret.decorations = base_token.decorations.concat(modifier_token.decorations);
        }
        return ret;
      };
      CSL2.Output.Queue.prototype.addToken = function(name, modifier, token) {
        var newtok, attr;
        newtok = new CSL2.Token("output");
        if (typeof token === "string") {
          token = this.formats.value()[token];
        }
        if (token && token.strings) {
          for (attr in token.strings) {
            if (token.strings.hasOwnProperty(attr)) {
              newtok.strings[attr] = token.strings[attr];
            }
          }
          newtok.decorations = token.decorations;
        }
        if (typeof modifier === "string") {
          newtok.strings.delimiter = modifier;
        }
        this.formats.value()[name] = newtok;
      };
      CSL2.Output.Queue.prototype.pushFormats = function(tokenstore) {
        if (!tokenstore) {
          tokenstore = {};
        }
        tokenstore.empty = this.empty;
        this.formats.push(tokenstore);
      };
      CSL2.Output.Queue.prototype.popFormats = function() {
        this.formats.pop();
      };
      CSL2.Output.Queue.prototype.startTag = function(name, token) {
        var tokenstore = {};
        if (this.state.tmp["doing-macro-with-date"] && this.state.tmp.extension) {
          token = this.empty;
          name = "empty";
        }
        tokenstore[name] = token;
        this.pushFormats(tokenstore);
        this.openLevel(name);
      };
      CSL2.Output.Queue.prototype.endTag = function(name) {
        this.closeLevel(name);
        this.popFormats();
      };
      CSL2.Output.Queue.prototype.openLevel = function(token) {
        var blob, curr;
        if (typeof token === "object") {
          blob = new CSL2.Blob(void 0, token);
        } else if (typeof token === "undefined") {
          blob = new CSL2.Blob(void 0, this.formats.value().empty, "empty");
        } else {
          if (!this.formats.value() || !this.formats.value()[token]) {
            CSL2.error('CSL processor error: call to nonexistent format token "' + token + '"');
          }
          blob = new CSL2.Blob(void 0, this.formats.value()[token], token);
        }
        curr = this.current.value();
        if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.prefix = this.checkNestedBrace.update(blob.strings.prefix);
        }
        curr.push(blob);
        this.current.push(blob);
      };
      CSL2.Output.Queue.prototype.closeLevel = function(name) {
        if (name && name !== this.current.value().levelname) {
          CSL2.error("Level mismatch error:  wanted " + name + " but found " + this.current.value().levelname);
        }
        var blob = this.current.pop();
        if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.suffix = this.checkNestedBrace.update(blob.strings.suffix);
        }
      };
      CSL2.Output.Queue.prototype.append = function(str, tokname, notSerious, ignorePredecessor, noStripPeriods) {
        var token, blob, curr;
        var useblob = true;
        if (notSerious) {
          ignorePredecessor = true;
        }
        if (this.state.tmp["doing-macro-with-date"] && !notSerious) {
          if (tokname !== "macro-with-date") {
            return false;
          }
          if (tokname === "macro-with-date") {
            tokname = "empty";
          }
        }
        if (typeof str === "undefined") {
          return false;
        }
        if (typeof str === "number") {
          str = "" + str;
        }
        if (!notSerious && this.state.tmp.element_trace && this.state.tmp.element_trace.value() === "suppress-me") {
          return false;
        }
        blob = false;
        if (!tokname) {
          token = this.formats.value().empty;
        } else if (tokname === "literal") {
          token = true;
          useblob = false;
        } else if (typeof tokname === "string") {
          token = this.formats.value()[tokname];
        } else {
          token = tokname;
        }
        if (!token) {
          CSL2.error("CSL processor error: unknown format token name: " + tokname);
        }
        if (token.strings && typeof token.strings.delimiter === "undefined") {
          token.strings.delimiter = "";
        }
        if (typeof str === "string" && str.length) {
          str = str.replace(/ ([:;?!\u00bb])/g, "\u202F$1").replace(/\u00ab /g, "\xAB\u202F");
          this.last_char_rendered = str.slice(-1);
          str = str.replace(/\s+'/g, " '");
          if (!notSerious) {
            str = str.replace(/^'/g, " '");
          }
          if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
          }
        }
        blob = new CSL2.Blob(str, token);
        curr = this.current.value();
        if (typeof curr === "undefined" && this.current.mystack.length === 0) {
          this.current.mystack.push([]);
          curr = this.current.value();
        }
        if (typeof blob.blobs === "string") {
          if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
          }
        }
        if (typeof str === "string") {
          if (typeof blob.blobs === "string") {
            if (blob.blobs.slice(0, 1) !== " ") {
              var blobPrefix = "";
              var blobBlobs = blob.blobs;
              while (CSL2.TERMINAL_PUNCTUATION.indexOf(blobBlobs.slice(0, 1)) > -1) {
                blobPrefix = blobPrefix + blobBlobs.slice(0, 1);
                blobBlobs = blobBlobs.slice(1);
              }
              if (blobBlobs && blobPrefix) {
                blob.strings.prefix = blob.strings.prefix + blobPrefix;
                blob.blobs = blobBlobs;
              }
            }
          }
          if (blob.strings["text-case"]) {
            blob.blobs = CSL2.Output.Formatters[blob.strings["text-case"]](this.state, str);
          }
          if (this.state.tmp.strip_periods && !noStripPeriods) {
            blob.blobs = blob.blobs.replace(/\.([^a-z]|$)/g, "$1");
          }
          for (var i = blob.decorations.length - 1; i > -1; i += -1) {
            if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
              blob.punctuation_in_quote = this.state.getOpt("punctuation-in-quote");
            }
            if (!blob.blobs.match(CSL2.ROMANESQUE_REGEXP)) {
              if (blob.decorations[i][0] === "@font-style") {
                blob.decorations = blob.decorations.slice(0, i).concat(blob.decorations.slice(i + 1));
              }
            }
          }
          curr.push(blob);
          this.state.fun.flipflopper.processTags(blob);
        } else if (useblob) {
          curr.push(blob);
        } else {
          curr.push(str);
        }
        return true;
      };
      CSL2.Output.Queue.prototype.string = function(state, myblobs, blob) {
        var i, ilen, j, jlen, b;
        var txt_esc = CSL2.getSafeEscape(this.state);
        var blobs = myblobs.slice();
        var ret = [];
        if (blobs.length === 0) {
          return ret;
        }
        var blob_delimiter = "";
        if (blob) {
          blob_delimiter = blob.strings.delimiter;
        } else {
          state.tmp.count_offset_characters = false;
          state.tmp.offset_characters = 0;
        }
        if (blob && blob.new_locale) {
          blob.old_locale = state.opt.lang;
          state.opt.lang = blob.new_locale;
        }
        var blobjr, use_suffix, use_prefix, params;
        for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          blobjr = blobs[i];
          if (blobjr.strings.first_blob) {
            state.tmp.count_offset_characters = blobjr.strings.first_blob;
          }
          if (typeof blobjr.blobs === "string") {
            if (typeof blobjr.num === "number") {
              ret.push(blobjr);
            } else if (blobjr.blobs) {
              if (blobjr.particle) {
                blobjr.blobs = blobjr.particle + blobjr.blobs;
                blobjr.particle = "";
              }
              b = txt_esc(blobjr.blobs);
              var blen = b.length;
              if (!state.tmp.suppress_decorations) {
                for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                  params = blobjr.decorations[j];
                  if (params[0] === "@showid") {
                    continue;
                  }
                  if (state.normalDecorIsOrphan(blobjr, params)) {
                    continue;
                  }
                  b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                }
              }
              if (b && b.length) {
                b = txt_esc(blobjr.strings.prefix) + b + txt_esc(blobjr.strings.suffix);
                if (state.opt.development_extensions.csl_reverse_lookup_support && !state.tmp.suppress_decorations) {
                  for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                    params = blobjr.decorations[j];
                    if (params[0] === "@showid") {
                      b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                    }
                  }
                }
                ret.push(b);
                if (state.tmp.count_offset_characters) {
                  state.tmp.offset_characters += blen + blobjr.strings.suffix.length + blobjr.strings.prefix.length;
                }
              }
            }
          } else if (blobjr.blobs.length) {
            var addtoret = state.output.string(state, blobjr.blobs, blobjr);
            if (blob) {
              if (addtoret !== "string" && addtoret.length > 1 && blobjr.strings.delimiter) {
                var numberSeen = false;
                for (var j = 0, jlen = addtoret.length; j < jlen; j++) {
                  if (typeof addtoret[j] !== "string") {
                    numberSeen = true;
                  } else if (numberSeen) {
                    addtoret[j] = blobjr.strings.delimiter + addtoret[j];
                  }
                }
              }
            }
            ret = ret.concat(addtoret);
          }
          if (blobjr.strings.first_blob && state.registry.registry[blobjr.strings.first_blob]) {
            state.registry.registry[blobjr.strings.first_blob].offset = state.tmp.offset_characters;
            state.tmp.count_offset_characters = false;
          }
        }
        for (i = 0, ilen = ret.length - 1; i < ilen; i += 1) {
          if (typeof ret[i].num === "number" && typeof ret[i + 1].num === "number" && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
            ret[i].strings.suffix = ret[i].strings.suffix + (blob_delimiter ? blob_delimiter : "");
            ret[i + 1].successor_prefix = "";
            ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
          }
        }
        var span_split = 0;
        for (var i = 0, ilen = ret.length; i < ilen; i += 1) {
          if (typeof ret[i] === "string") {
            span_split = parseInt(i, 10) + 1;
            if (i < ret.length - 1 && typeof ret[i + 1] === "object") {
              if (blob_delimiter && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
                ret[i] += txt_esc(blob_delimiter);
              }
              ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
            }
          }
        }
        if (blob && (blob.decorations.length || blob.strings.suffix)) {
          span_split = ret.length;
        } else if (blob && blob.strings.prefix) {
          for (var i = 0, ilen = ret.length; i < ilen; i++) {
            if (typeof ret[i].num !== "undefined") {
              span_split = i;
              if (i === 0) {
                ret[i].strings.prefix = blob.strings.prefix + ret[i].strings.prefix;
              }
              break;
            }
          }
        }
        var blobs_start = state.output.renderBlobs(ret.slice(0, span_split), blob_delimiter, false, blob);
        if (blobs_start && blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
          if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
              params = blob.decorations[i];
              if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) > -1) {
                continue;
              }
              if (state.normalDecorIsOrphan(blobjr, params)) {
                continue;
              }
              if (!params[0])
                continue;
              if (typeof blobs_start === "string") {
                blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
              }
            }
          }
          b = blobs_start;
          use_suffix = blob.strings.suffix;
          if (b && b.length) {
            use_prefix = blob.strings.prefix;
            b = txt_esc(use_prefix) + b + txt_esc(use_suffix);
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += use_prefix.length + use_suffix.length;
            }
          }
          blobs_start = b;
          if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
              params = blob.decorations[i];
              if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) === -1) {
                continue;
              }
              if (typeof blobs_start === "string") {
                blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
              }
            }
          }
        }
        var blobs_end = ret.slice(span_split, ret.length);
        if (!blobs_end.length && blobs_start) {
          ret = [blobs_start];
        } else if (blobs_end.length && !blobs_start) {
          ret = blobs_end;
        } else if (blobs_start && blobs_end.length) {
          ret = [blobs_start].concat(blobs_end);
        }
        if (typeof blob === "undefined") {
          this.queue = [];
          this.current.mystack = [];
          this.current.mystack.push(this.queue);
          if (state.tmp.suppress_decorations) {
            ret = state.output.renderBlobs(ret, void 0, false);
          }
        } else if (typeof blob === "boolean") {
          ret = state.output.renderBlobs(ret, void 0, true);
        }
        if (blob && blob.new_locale) {
          state.opt.lang = blob.old_locale;
        }
        return ret;
      };
      CSL2.Output.Queue.prototype.clearlevel = function() {
        var blob, pos, len;
        blob = this.current.value();
        len = blob.blobs.length;
        for (pos = 0; pos < len; pos += 1) {
          blob.blobs.pop();
        }
      };
      CSL2.Output.Queue.prototype.renderBlobs = function(blobs, delim, in_cite, parent) {
        var state, ret, ret_last_char, use_delim, blob, pos, len, ppos, llen, str, params, txt_esc;
        txt_esc = CSL2.getSafeEscape(this.state);
        if (!delim) {
          delim = "";
        }
        state = this.state;
        ret = "";
        ret_last_char = [];
        use_delim = "";
        len = blobs.length;
        if (this.state.tmp.area === "citation" && !this.state.tmp.just_looking && len === 1 && typeof blobs[0] === "object" && parent) {
          blobs[0].strings.prefix = parent.strings.prefix + blobs[0].strings.prefix;
          blobs[0].strings.suffix = blobs[0].strings.suffix + parent.strings.suffix;
          blobs[0].decorations = blobs[0].decorations.concat(parent.decorations);
          blobs[0].params = parent.params;
          return blobs[0];
        }
        var start = true;
        for (pos = 0; pos < len; pos += 1) {
          if (blobs[pos].checkNext) {
            blobs[pos].checkNext(blobs[pos + 1], start);
            start = false;
          } else if (blobs[pos + 1] && blobs[pos + 1].splice_prefix) {
            start = false;
          } else {
            start = true;
          }
        }
        var doit = true;
        for (pos = blobs.length - 1; pos > 0; pos += -1) {
          if (blobs[pos].checkLast) {
            if (doit && blobs[pos].checkLast(blobs[pos - 1])) {
              doit = false;
            }
          } else {
            doit = true;
          }
        }
        len = blobs.length;
        for (pos = 0; pos < len; pos += 1) {
          blob = blobs[pos];
          if (ret) {
            use_delim = delim;
          }
          if (typeof blob === "string") {
            ret += txt_esc(use_delim);
            ret += blob;
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += use_delim.length;
            }
          } else if (in_cite) {
            if (ret) {
              ret = [ret, blob];
            } else {
              ret = [blob];
            }
          } else if (blob.status !== CSL2.SUPPRESS) {
            if (blob.particle) {
              str = blob.particle + blob.num;
            } else {
              str = blob.formatter.format(blob.num, blob.gender);
            }
            var strlen = str.replace(/<[^>]*>/g, "").length;
            this.append(str, "empty", true);
            var str_blob = this.pop();
            var count_offset_characters = state.tmp.count_offset_characters;
            str = this.string(state, [str_blob], false);
            state.tmp.count_offset_characters = count_offset_characters;
            if (blob.strings["text-case"]) {
              str = CSL2.Output.Formatters[blob.strings["text-case"]](this.state, str);
            }
            if (str && this.state.tmp.strip_periods) {
              str = str.replace(/\.([^a-z]|$)/g, "$1");
            }
            if (!state.tmp.suppress_decorations) {
              llen = blob.decorations.length;
              for (ppos = 0; ppos < llen; ppos += 1) {
                params = blob.decorations[ppos];
                if (state.normalDecorIsOrphan(blob, params)) {
                  continue;
                }
                str = state.fun.decorate[params[0]][params[1]].call(blob, state, str, params[2]);
              }
            }
            str = txt_esc(blob.strings.prefix) + str + txt_esc(blob.strings.suffix);
            var addme = "";
            if (blob.status === CSL2.END) {
              addme = txt_esc(blob.range_prefix);
            } else if (blob.status === CSL2.SUCCESSOR) {
              addme = txt_esc(blob.successor_prefix);
            } else if (blob.status === CSL2.START) {
              if (pos > 0 && !blob.suppress_splice_prefix) {
                addme = txt_esc(blob.splice_prefix);
              } else {
                addme = "";
              }
            } else if (blob.status === CSL2.SEEN) {
              addme = txt_esc(blob.splice_prefix);
            }
            ret += addme;
            ret += str;
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += addme.length + blob.strings.prefix.length + strlen + blob.strings.suffix.length;
            }
          }
        }
        return ret;
      };
      CSL2.Output.Queue.purgeEmptyBlobs = function(parent) {
        if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
          return;
        }
        for (var i = parent.blobs.length - 1; i > -1; i--) {
          CSL2.Output.Queue.purgeEmptyBlobs(parent.blobs[i]);
          var child = parent.blobs[i];
          if (!child || !child.blobs || !child.blobs.length) {
            var buf = [];
            while (parent.blobs.length - 1 > i) {
              buf.push(parent.blobs.pop());
            }
            parent.blobs.pop();
            while (buf.length) {
              parent.blobs.push(buf.pop());
            }
          }
        }
      };
      CSL2.Output.Queue.adjust = function(punctInQuote) {
        var NO_SWAP_IN = {
          ";": true,
          ":": true
        };
        var NO_SWAP_OUT = {
          ".": true,
          "!": true,
          "?": true
        };
        var LtoR_MAP = {
          "!": {
            ".": "!",
            "?": "!?",
            ":": "!",
            ",": "!,",
            ";": "!;"
          },
          "?": {
            "!": "?!",
            ".": "?",
            ":": "?",
            ",": "?,",
            ";": "?;"
          },
          ".": {
            "!": ".!",
            "?": ".?",
            ":": ".:",
            ",": ".,",
            ";": ".;"
          },
          ":": {
            "!": "!",
            "?": "?",
            ".": ":",
            ",": ":,",
            ";": ":;"
          },
          ",": {
            "!": ",!",
            "?": ",?",
            ":": ",:",
            ".": ",.",
            ";": ",;"
          },
          ";": {
            "!": "!",
            "?": "?",
            ":": ";",
            ",": ";,",
            ".": ";"
          }
        };
        var SWAP_IN = {};
        var SWAP_OUT = {};
        var PUNCT = {};
        var PUNCT_OR_SPACE = {};
        for (var key in LtoR_MAP) {
          PUNCT[key] = true;
          PUNCT_OR_SPACE[key] = true;
          if (!NO_SWAP_IN[key]) {
            SWAP_IN[key] = true;
          }
          if (!NO_SWAP_OUT[key]) {
            SWAP_OUT[key] = true;
          }
        }
        PUNCT_OR_SPACE[" "] = true;
        PUNCT_OR_SPACE["\xA0"] = true;
        var RtoL_MAP = {};
        for (var key in LtoR_MAP) {
          for (var subkey in LtoR_MAP[key]) {
            if (!RtoL_MAP[subkey]) {
              RtoL_MAP[subkey] = {};
            }
            RtoL_MAP[subkey][key] = LtoR_MAP[key][subkey];
          }
        }
        function blobIsNumber(blob) {
          return typeof blob.num === "number" || blob.blobs && blob.blobs.length === 1 && typeof blob.blobs[0].num === "number";
        }
        function blobEndsInNumber(blob) {
          if (typeof blob.num === "number") {
            return true;
          }
          if (!blob.blobs || typeof blob.blobs !== "object") {
            return false;
          }
          if (blobEndsInNumber(blob.blobs[blob.blobs.length - 1])) {
            return true;
          }
        }
        function blobHasDecorations(blob, includeQuotes) {
          var ret = false;
          var decorlist = ["@font-style", "@font-variant", "@font-weight", "@text-decoration", "@vertical-align"];
          if (includeQuotes) {
            decorlist.push("@quotes");
          }
          if (blob.decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
              if (decorlist.indexOf(blob.decorations[i][0]) > -1) {
                ret = true;
                break;
              }
            }
          }
          return ret;
        }
        function blobHasDescendantQuotes(blob) {
          if (blob.decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
              if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
                return true;
              }
            }
          }
          if (typeof blob.blobs !== "object") {
            return false;
          }
          return blobHasDescendantQuotes(blob.blobs[blob.blobs.length - 1]);
        }
        function blobHasDescendantMergingPunctuation(parentChar, blob) {
          var childChar = blob.strings.suffix.slice(-1);
          if (!childChar && typeof blob.blobs === "string") {
            childChar = blob.blobs.slice(-1);
          }
          var mergedChars = RtoL_MAP[parentChar][childChar];
          if (mergedChars && mergedChars.length === 1) {
            return true;
          }
          if (typeof blob.blobs !== "object") {
            return false;
          }
          if (blobHasDescendantMergingPunctuation(parentChar, blob.blobs[blob.blobs.length - 1])) {
            return true;
          }
          return false;
        }
        function matchLastChar(blob, chr) {
          if (!PUNCT[chr]) {
            return false;
          }
          if (typeof blob.blobs === "string") {
            if (blob.blobs.slice(-1) === chr) {
              return true;
            } else {
              return false;
            }
          } else {
            var child = blob.blobs[blob.blobs.length - 1];
            if (child) {
              var childChar = child.strings.suffix.slice(-1);
              if (!childChar) {
                return matchLastChar(child, chr);
              } else if (child.strings.suffix.slice(-1) == chr) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }
        }
        function mergeChars(First, first, Second, second, merge_right) {
          var FirstStrings = first === "blobs" ? First : First.strings;
          var SecondStrings = second === "blobs" ? Second : Second.strings;
          var firstChar = FirstStrings[first].slice(-1);
          var secondChar = SecondStrings[second].slice(0, 1);
          function cullRight() {
            SecondStrings[second] = SecondStrings[second].slice(1);
          }
          function cullLeft() {
            FirstStrings[first] = FirstStrings[first].slice(0, -1);
          }
          function addRight(chr) {
            SecondStrings[second] = chr + SecondStrings[second];
          }
          function addLeft(chr) {
            FirstStrings[first] += chr;
          }
          var cull = merge_right ? cullLeft : cullRight;
          function matchOnRight() {
            return RtoL_MAP[secondChar];
          }
          function matchOnLeft() {
            return LtoR_MAP[firstChar];
          }
          var match = merge_right ? matchOnLeft : matchOnRight;
          function mergeToRight() {
            var chr = LtoR_MAP[firstChar][secondChar];
            if (typeof chr === "string") {
              cullLeft();
              cullRight();
              addRight(chr);
            } else {
              addRight(firstChar);
              cullLeft();
            }
          }
          function mergeToLeft() {
            var chr = RtoL_MAP[secondChar][firstChar];
            if (typeof chr === "string") {
              cullLeft();
              cullRight();
              addLeft(chr);
            } else {
              addLeft(secondChar);
              cullRight();
            }
          }
          var merge = merge_right ? mergeToRight : mergeToLeft;
          var isDuplicate = firstChar === secondChar;
          if (isDuplicate) {
            cull();
          } else {
            if (match()) {
              merge();
            }
          }
        }
        function upward(parent) {
          if (parent.blobs && typeof parent.blobs == "string") {
            if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
              parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
          } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var parentDecorations = blobHasDecorations(parent, true);
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            this.upward(parent.blobs[i]);
            var parentStrings = parent.strings;
            var childStrings = parent.blobs[i].strings;
            if (i === 0) {
              if (parentStrings.prefix.slice(-1) === " " && childStrings.prefix.slice(0, 1) === " ") {
                childStrings.prefix = childStrings.prefix.slice(1);
              }
              var childChar = childStrings.prefix.slice(0, 1);
              if (!parentDecorations && PUNCT_OR_SPACE[childChar] && !parentStrings.prefix) {
                parentStrings.prefix += childChar;
                childStrings.prefix = childStrings.prefix.slice(1);
              }
            }
            if (i === parent.blobs.length - 1) {
              var childChar = childStrings.suffix.slice(-1);
              if (!parentDecorations && [" "].indexOf(childChar) > -1) {
                if (parentStrings.suffix.slice(0, 1) !== childChar) {
                  parentStrings.suffix = childChar + parentStrings.suffix;
                }
                childStrings.suffix = childStrings.suffix.slice(0, -1);
              }
            }
            if (parentStrings.delimiter && i > 0) {
              if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(-1)] && parentStrings.delimiter.slice(-1) === childStrings.prefix.slice(0, 1)) {
                childStrings.prefix = childStrings.prefix.slice(1);
              }
            }
          }
        }
        function leftward(parent) {
          if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            this.leftward(parent.blobs[i]);
            if (i < parent.blobs.length - 1 && !parent.strings.delimiter) {
              var child = parent.blobs[i];
              var childChar = child.strings.suffix.slice(-1);
              var sibling = parent.blobs[i + 1];
              var siblingChar = sibling.strings.prefix.slice(0, 1);
              var hasDecorations = blobHasDecorations(child) || blobHasDecorations(sibling);
              var hasNumber = typeof childChar === "number" || typeof siblingChar === "number";
              if (!hasDecorations && !hasNumber && PUNCT[siblingChar] && !hasNumber) {
                var suffixAndPrefixMatch = siblingChar === child.strings.suffix.slice(-1);
                var suffixAndFieldMatch = !child.strings.suffix && typeof child.blobs === "string" && child.blobs.slice(-1) === siblingChar;
                if (!suffixAndPrefixMatch && !suffixAndFieldMatch) {
                  mergeChars(child, "suffix", sibling, "prefix");
                } else {
                  sibling.strings.prefix = sibling.strings.prefix.slice(1);
                }
              }
            }
          }
        }
        function downward(parent) {
          if (parent.blobs && typeof parent.blobs == "string") {
            if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
              parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
          } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var parentStrings = parent.strings;
          var someChildrenAreNumbers = false;
          for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
            if (blobIsNumber(parent.blobs[i])) {
              someChildrenAreNumbers = true;
              break;
            }
          }
          if (true) {
            if (parentStrings.delimiter && PUNCT[parentStrings.delimiter.slice(0, 1)]) {
              var delimChar = parentStrings.delimiter.slice(0, 1);
              for (var i = parent.blobs.length - 2; i > -1; i--) {
                var childStrings = parent.blobs[i].strings;
                if (childStrings.suffix.slice(-1) !== delimChar) {
                  childStrings.suffix += delimChar;
                }
              }
              parentStrings.delimiter = parentStrings.delimiter.slice(1);
            }
          }
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            var child = parent.blobs[i];
            var childStrings = parent.blobs[i].strings;
            var childDecorations = blobHasDecorations(child, true);
            var childIsNumber = blobIsNumber(child);
            if (i === parent.blobs.length - 1) {
              if (true) {
                var parentChar = parentStrings.suffix.slice(0, 1);
                var allowMigration = false;
                if (PUNCT[parentChar]) {
                  allowMigration = blobHasDescendantMergingPunctuation(parentChar, child);
                  if (!allowMigration && punctInQuote) {
                    allowMigration = blobHasDescendantQuotes(child);
                  }
                }
                if (allowMigration) {
                  if (PUNCT[parentChar]) {
                    if (!blobEndsInNumber(child)) {
                      if (typeof child.blobs === "string") {
                        mergeChars(child, "blobs", parent, "suffix");
                      } else {
                        mergeChars(child, "suffix", parent, "suffix");
                      }
                      if (parentStrings.suffix.slice(0, 1) === ".") {
                        childStrings.suffix += parentStrings.suffix.slice(0, 1);
                        parentStrings.suffix = parentStrings.suffix.slice(1);
                      }
                    }
                  }
                }
                if (childStrings.suffix.slice(-1) === "\xA0" && parentStrings.suffix.slice(0, 1) === " ") {
                  parentStrings.suffix = parentStrings.suffix.slice(1);
                }
                if (PUNCT_OR_SPACE[childStrings.suffix.slice(0, 1)]) {
                  if (typeof child.blobs === "string" && child.blobs.slice(-1) === childStrings.suffix.slice(0, 1)) {
                    childStrings.suffix = childStrings.suffix.slice(1);
                  }
                  if (childStrings.suffix.slice(-1) === parentStrings.suffix.slice(0, 1)) {
                    parentStrings.suffix = parentStrings.suffix.slice(0, -1);
                  }
                }
              }
              if (matchLastChar(parent, parent.strings.suffix.slice(0, 1))) {
                parent.strings.suffix = parent.strings.suffix.slice(1);
              }
            } else if (parentStrings.delimiter) {
              if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(0, 1)] && parentStrings.delimiter.slice(0, 1) === childStrings.suffix.slice(-1)) {
                parent.blobs[i].strings.suffix = parent.blobs[i].strings.suffix.slice(0, -1);
              }
            } else {
              var siblingStrings = parent.blobs[i + 1].strings;
              if (!blobIsNumber(child) && !childDecorations && PUNCT_OR_SPACE[childStrings.suffix.slice(-1)] && childStrings.suffix.slice(-1) === siblingStrings.prefix.slice(0, 1)) {
                siblingStrings.prefix = siblingStrings.prefix.slice(1);
              }
            }
            if (!childIsNumber && !childDecorations && PUNCT[childStrings.suffix.slice(0, 1)] && typeof child.blobs === "string") {
              mergeChars(child, "blobs", child, "suffix");
            }
            this.downward(parent.blobs[i]);
          }
        }
        function swapToTheLeft(child) {
          var childChar = child.strings.suffix.slice(0, 1);
          if (typeof child.blobs === "string") {
            while (SWAP_IN[childChar]) {
              mergeChars(child, "blobs", child, "suffix");
              childChar = child.strings.suffix.slice(0, 1);
            }
          } else {
            while (SWAP_IN[childChar]) {
              mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix");
              childChar = child.strings.suffix.slice(0, 1);
            }
          }
        }
        function swapToTheRight(child) {
          if (typeof child.blobs === "string") {
            var childChar = child.blobs.slice(-1);
            while (SWAP_OUT[childChar]) {
              mergeChars(child, "blobs", child, "suffix", true);
              childChar = child.blobs.slice(-1);
            }
          } else {
            var childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
            while (SWAP_OUT[childChar]) {
              mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix", true);
              childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
            }
          }
        }
        function fix(parent) {
          if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var lastChar;
          for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
            var child = parent.blobs[i];
            var quoteSwap = false;
            for (var j = 0, jlen = child.decorations.length; j < jlen; j++) {
              var decoration = child.decorations[j];
              if (decoration[0] === "@quotes" && decoration[1] !== "false") {
                quoteSwap = true;
              }
            }
            if (quoteSwap) {
              if (punctInQuote) {
                swapToTheLeft(child);
              } else {
                swapToTheRight(child);
              }
            }
            lastChar = this.fix(parent.blobs[i]);
            if (child.blobs && typeof child.blobs === "string") {
              lastChar = child.blobs.slice(-1);
            }
          }
          return lastChar;
        }
        this.upward = upward;
        this.leftward = leftward;
        this.downward = downward;
        this.fix = fix;
      };
      CSL2.Engine.Opt = function() {
        this.parallel = {
          enable: false
        }, this.has_disambiguate = false;
        this.mode = "html";
        this.dates = {};
        this.jurisdictions_seen = {};
        this.suppressedJurisdictions = {};
        this.inheritedAttributes = {};
        this["locale-sort"] = [];
        this["locale-translit"] = [];
        this["locale-translat"] = [];
        this.citeAffixes = {
          persons: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          institutions: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          titles: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          journals: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          publishers: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          places: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          }
        };
        this["default-locale"] = [];
        this.update_mode = CSL2.NONE;
        this.bib_mode = CSL2.NONE;
        this.sort_citations = false;
        this["et-al-min"] = 0;
        this["et-al-use-first"] = 1;
        this["et-al-use-last"] = false;
        this["et-al-subsequent-min"] = false;
        this["et-al-subsequent-use-first"] = false;
        this["demote-non-dropping-particle"] = "display-and-sort";
        this["parse-names"] = true;
        this.citation_number_slug = false;
        this.trigraph = "Aaaa00:AaAa00:AaAA00:AAAA00";
        this.nodenames = [];
        this.gender = {};
        this["cite-lang-prefs"] = {
          persons: ["orig"],
          institutions: ["orig"],
          titles: ["orig"],
          journals: ["orig"],
          publishers: ["orig"],
          places: ["orig"],
          number: ["orig"]
        };
        this.has_layout_locale = false;
        this.disable_duplicate_year_suppression = [];
        this.use_context_condition = false;
        this.jurisdiction_fallbacks = {};
        this.development_extensions = {};
        this.development_extensions.field_hack = true;
        this.development_extensions.allow_field_hack_date_override = true;
        this.development_extensions.locator_date_and_revision = true;
        this.development_extensions.locator_label_parse = true;
        this.development_extensions.raw_date_parsing = true;
        this.development_extensions.clean_up_csl_flaws = true;
        this.development_extensions.consolidate_legal_items = false;
        this.development_extensions.csl_reverse_lookup_support = false;
        this.development_extensions.wrap_url_and_doi = false;
        this.development_extensions.thin_non_breaking_space_html_hack = false;
        this.development_extensions.apply_citation_wrapper = false;
        this.development_extensions.main_title_from_short_title = false;
        this.development_extensions.uppercase_subtitles = false;
        this.development_extensions.normalize_lang_keys_to_lowercase = false;
        this.development_extensions.strict_text_case_locales = false;
        this.development_extensions.expect_and_symbol_form = false;
        this.development_extensions.require_explicit_legal_case_title_short = false;
        this.development_extensions.spoof_institutional_affiliations = false;
        this.development_extensions.force_jurisdiction = false;
        this.development_extensions.parse_names = true;
        this.development_extensions.hanging_indent_legacy_number = false;
        this.development_extensions.throw_on_empty = false;
        this.development_extensions.strict_inputs = true;
        this.development_extensions.prioritize_disambiguate_condition = false;
        this.development_extensions.force_short_title_casing_alignment = true;
        this.development_extensions.implicit_short_title = false;
        this.development_extensions.force_title_abbrev_fallback = false;
        this.development_extensions.split_container_title = false;
        this.development_extensions.legacy_institution_name_ordering = false;
        this.development_extensions.etal_min_etal_usefirst_hack = false;
      };
      CSL2.Engine.Tmp = function() {
        this.names_max = new CSL2.Stack();
        this.names_base = new CSL2.Stack();
        this.givens_base = new CSL2.Stack();
        this.value = [];
        this.namepart_decorations = {};
        this.namepart_type = false;
        this.area = "citation";
        this.root = "citation";
        this.extension = "";
        this.can_substitute = new CSL2.Stack(0, CSL2.LITERAL);
        this.element_rendered_ok = false;
        this.element_trace = new CSL2.Stack("style");
        this.nameset_counter = 0;
        this.group_context = new CSL2.Stack({
          term_intended: false,
          variable_attempt: false,
          variable_success: false,
          output_tip: void 0,
          label_form: void 0,
          parallel_first: void 0,
          parallel_last: void 0,
          parallel_delimiter_override: void 0,
          condition: false,
          force_suppress: false,
          done_vars: []
        });
        this.term_predecessor = false;
        this.in_cite_predecessor = false;
        this.jump = new CSL2.Stack(0, CSL2.LITERAL);
        this.decorations = new CSL2.Stack();
        this.tokenstore_stack = new CSL2.Stack();
        this.last_suffix_used = "";
        this.last_names_used = [];
        this.last_years_used = [];
        this.years_used = [];
        this.names_used = [];
        this.taintedItemIDs = {};
        this.taintedCitationIDs = {};
        this.initialize_with = new CSL2.Stack();
        this.disambig_request = false;
        this["name-as-sort-order"] = false;
        this.suppress_decorations = false;
        this.disambig_settings = new CSL2.AmbigConfig();
        this.bib_sort_keys = [];
        this.prefix = new CSL2.Stack("", CSL2.LITERAL);
        this.suffix = new CSL2.Stack("", CSL2.LITERAL);
        this.delimiter = new CSL2.Stack("", CSL2.LITERAL);
        this.cite_locales = [];
        this.cite_affixes = {
          citation: false,
          bibliography: false,
          citation_sort: false,
          bibliography_sort: false
        };
        this.strip_periods = 0;
        this.shadow_numbers = {};
        this.authority_stop_last = 0;
        this.loadedItemIDs = {};
        this.condition_counter = 0;
        this.condition_lang_val_arr = [];
        this.condition_lang_counter_arr = [];
      };
      CSL2.Engine.Fun = function(state) {
        this.match = new CSL2.Util.Match();
        this.suffixator = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
        this.romanizer = new CSL2.Util.Romanizer();
        this.ordinalizer = new CSL2.Util.Ordinalizer(state);
        this.long_ordinalizer = new CSL2.Util.LongOrdinalizer();
      };
      CSL2.Engine.Build = function() {
        this["alternate-term"] = false;
        this.in_bibliography = false;
        this.in_style = false;
        this.skip = false;
        this.postponed_macro = false;
        this.layout_flag = false;
        this.name = false;
        this.names_variables = [[]];
        this.name_label = [{}];
        this.form = false;
        this.term = false;
        this.macro = {};
        this.macro_stack = [];
        this.text = false;
        this.lang = false;
        this.area = "citation";
        this.root = "citation";
        this.extension = "";
        this.substitute_level = new CSL2.Stack(0, CSL2.LITERAL);
        this.names_level = 0;
        this.render_nesting_level = 0;
        this.render_seen = false;
        this.bibliography_key_pos = 0;
      };
      CSL2.Engine.Configure = function() {
        this.tests = [];
        this.fail = [];
        this.succeed = [];
      };
      CSL2.Engine.Citation = function(state) {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.srt = new CSL2.Registry.Comparifier(state, "citation_sort");
        this.opt.collapse = [];
        this.opt["disambiguate-add-names"] = false;
        this.opt["disambiguate-add-givenname"] = false;
        this.opt["disambiguate-add-year-suffix"] = false;
        this.opt["givenname-disambiguation-rule"] = "by-cite";
        this.opt["near-note-distance"] = 5;
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "citation";
      };
      CSL2.Engine.Bibliography = function() {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.opt.collapse = [];
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt["line-spacing"] = 1;
        this.opt["entry-spacing"] = 1;
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "bibliography";
      };
      CSL2.Engine.BibliographySort = function() {
        this.tokens = [];
        this.opt = {};
        this.opt.sort_directions = [];
        this.opt.topdecor = [];
        this.opt.citation_number_sort_direction = CSL2.ASCENDING;
        this.opt.citation_number_secondary = false;
        this.tmp = {};
        this.keys = [];
        this.root = "bibliography";
      };
      CSL2.Engine.CitationSort = function() {
        this.tokens = [];
        this.opt = {};
        this.opt.sort_directions = [];
        this.keys = [];
        this.opt.topdecor = [];
        this.root = "citation";
      };
      CSL2.Engine.InText = function() {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.opt.collapse = [];
        this.opt["disambiguate-add-names"] = false;
        this.opt["disambiguate-add-givenname"] = false;
        this.opt["disambiguate-add-year-suffix"] = false;
        this.opt["givenname-disambiguation-rule"] = "by-cite";
        this.opt["near-note-distance"] = 5;
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "intext";
      };
      CSL2.Engine.prototype.previewCitationCluster = function(citation, citationsPre, citationsPost, newMode) {
        var oldMode = this.opt.mode;
        this.setOutputFormat(newMode);
        if (citation.citationID) {
          delete citation.citationID;
        }
        var ret = this.processCitationCluster(citation, citationsPre, citationsPost, CSL2.PREVIEW);
        this.setOutputFormat(oldMode);
        return ret[1];
      };
      CSL2.Engine.prototype.appendCitationCluster = function(citation) {
        var citationsPre = [];
        var len = this.registry.citationreg.citationByIndex.length;
        for (var pos = 0; pos < len; pos += 1) {
          var c = this.registry.citationreg.citationByIndex[pos];
          citationsPre.push(["" + c.citationID, c.properties.noteIndex]);
        }
        return this.processCitationCluster(citation, citationsPre, [])[1];
      };
      CSL2.Engine.prototype.processCitationCluster = function(citation, citationsPre, citationsPost, flag) {
        var c, preCitation, postCitation, i, ilen, j, jlen, k, klen, n, nlen, key, Item, item, noteCitations, textCitations, m, citationsInNote;
        this.debug = false;
        this.tmp.loadedItemIDs = {};
        this.tmp.citation_errors = [];
        this.registry.return_data = { "bibchange": false };
        this.setCitationId(citation);
        var oldCitationList;
        var oldItemList;
        var oldAmbigs;
        if (flag === CSL2.PREVIEW) {
          if (this.debug) {
            CSL2.debug("****** start state save *********");
          }
          oldCitationList = this.registry.citationreg.citationByIndex.slice();
          oldItemList = this.registry.reflist.slice();
          var newCitationList = citationsPre.concat(citationsPost);
          var newItemIds = {};
          var newItemIdsList = [];
          for (var i = 0, ilen = newCitationList.length; i < ilen; i += 1) {
            c = this.registry.citationreg.citationById[newCitationList[i][0]];
            for (j = 0, jlen = c.citationItems.length; j < jlen; j += 1) {
              newItemIds[c.citationItems[j].id] = true;
              newItemIdsList.push("" + c.citationItems[j].id);
            }
          }
          for (j = 0, jlen = citation.citationItems.length; j < jlen; j += 1) {
            newItemIds[citation.citationItems[j].id] = true;
            newItemIdsList.push("" + citation.citationItems[j].id);
          }
          oldAmbigs = {};
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            if (!newItemIds[oldItemList[i].id]) {
              var oldAkey = this.registry.registry[oldItemList[i].id].ambig;
              var ids = this.registry.ambigcites[oldAkey];
              if (ids) {
                for (j = 0, jlen = ids.length; j < jlen; j += 1) {
                  oldAmbigs[ids[j]] = CSL2.cloneAmbigConfig(this.registry.registry[ids[j]].disambig);
                }
              }
            }
          }
          if (this.debug) {
            CSL2.debug("****** end state save *********");
          }
        }
        this.tmp.taintedCitationIDs = {};
        var sortedItems = [];
        var rerunAkeys = {};
        for (var i = 0, ilen = citation.citationItems.length; i < ilen; i += 1) {
          item = {};
          for (var key in citation.citationItems[i]) {
            item[key] = citation.citationItems[i][key];
          }
          Item = this.retrieveItem("" + item.id);
          if (Item.id) {
            this.transform.loadAbbreviation("default", "hereinafter", Item.id, Item.language);
          }
          item = CSL2.parseLocator.call(this, item);
          if (this.opt.development_extensions.consolidate_legal_items) {
            this.remapSectionVariable([[Item, item]]);
          }
          if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
              var m = CSL2.LOCATOR_LABELS_REGEXP.exec(item.locator);
              if (m) {
                var tryLabel = CSL2.LOCATOR_LABELS_MAP[m[2]];
                if (this.getTerm(tryLabel)) {
                  item.label = tryLabel;
                  item.locator = m[3];
                }
              }
            }
          }
          var newitem = [Item, item];
          sortedItems.push(newitem);
          citation.citationItems[i].item = Item;
        }
        citation.sortedItems = sortedItems;
        var citationByIndex = [];
        var citationById = {};
        var lastNotePos;
        for (i = 0, ilen = citationsPre.length; i < ilen; i += 1) {
          preCitation = citationsPre[i];
          if (this.opt.development_extensions.strict_inputs) {
            if (citationById[preCitation[0]]) {
              CSL2.error("Previously referenced citationID " + preCitation[0] + " encountered in citationsPre");
            }
            if (preCitation[1]) {
              if (lastNotePos > preCitation[1]) {
                CSL2.debug("Note index sequence is not sane at citationsPre[" + i + "]");
              }
              lastNotePos = preCitation[1];
            }
          }
          this.registry.citationreg.citationById[preCitation[0]].properties.noteIndex = preCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[preCitation[0]]);
          citationById[preCitation[0]] = this.registry.citationreg.citationById[preCitation[0]];
        }
        if (!citation.properties) {
          citation.properties = {
            noteIndex: 0
          };
        }
        if (this.opt.development_extensions.strict_inputs) {
          if (citationById[citation.citationID]) {
            CSL2.error("Citation with previously referenced citationID " + citation.citationID);
          }
          if (citation.properties.noteIndex) {
            if (lastNotePos > citation.properties.noteIndex) {
              CSL2.debug("Note index sequence is not sane for citation " + citation.citationID);
            }
            lastNotePos = citation.properties.noteIndex;
          }
        }
        citationByIndex.push(citation);
        citationById[citation.citationID] = citation;
        for (i = 0, ilen = citationsPost.length; i < ilen; i += 1) {
          postCitation = citationsPost[i];
          if (this.opt.development_extensions.strict_inputs) {
            if (citationById[postCitation[0]]) {
              CSL2.error("Previously referenced citationID " + postCitation[0] + " encountered in citationsPost");
            }
            if (postCitation[1]) {
              if (lastNotePos > postCitation[1]) {
                CSL2.debug("Note index sequence is not sane at postCitation[" + i + "]");
              }
              lastNotePos = postCitation[1];
            }
          }
          this.registry.citationreg.citationById[postCitation[0]].properties.noteIndex = postCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[postCitation[0]]);
          citationById[postCitation[0]] = this.registry.citationreg.citationById[postCitation[0]];
        }
        this.registry.citationreg.citationByIndex = citationByIndex;
        this.registry.citationreg.citationById = citationById;
        this.registry.citationreg.citationsByItemId = {};
        if (this.opt.update_mode === CSL2.POSITION) {
          textCitations = [];
          noteCitations = [];
          citationsInNote = {};
        }
        var update_items = [];
        for (var i = 0, ilen = citationByIndex.length; i < ilen; i += 1) {
          citationByIndex[i].properties.index = i;
          for (j = 0, jlen = citationByIndex[i].sortedItems.length; j < jlen; j += 1) {
            item = citationByIndex[i].sortedItems[j];
            if (!this.registry.citationreg.citationsByItemId[item[1].id]) {
              this.registry.citationreg.citationsByItemId[item[1].id] = [];
              update_items.push("" + item[1].id);
            }
            if (this.registry.citationreg.citationsByItemId[item[1].id].indexOf(citationByIndex[i]) === -1) {
              this.registry.citationreg.citationsByItemId[item[1].id].push(citationByIndex[i]);
            }
          }
          if (this.opt.update_mode === CSL2.POSITION) {
            if (citationByIndex[i].properties.noteIndex) {
              noteCitations.push(citationByIndex[i]);
            } else {
              citationByIndex[i].properties.noteIndex = 0;
              textCitations.push(citationByIndex[i]);
            }
          }
        }
        if (flag !== CSL2.ASSUME_ALL_ITEMS_REGISTERED) {
          if (this.debug) {
            CSL2.debug("****** start update items *********");
          }
          this.updateItems(update_items, null, null, true);
          if (this.debug) {
            CSL2.debug("****** endo update items *********");
          }
        }
        if (!this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
            sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
          }
          if (this.opt.grouped_sort && !citation.properties.unsorted) {
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              var sortkeys = sortedItems[i][1].sortkeys;
              this.tmp.authorstring_request = true;
              var mydisambig = this.registry.registry[sortedItems[i][0].id].disambig;
              this.tmp.authorstring_request = true;
              CSL2.getAmbiguousCite.call(this, sortedItems[i][0], mydisambig);
              var authorstring = this.registry.authorstrings[sortedItems[i][0].id];
              this.tmp.authorstring_request = false;
              sortedItems[i][1].sortkeys = [authorstring].concat(sortkeys);
            }
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
            var lastauthor = false;
            var thiskey = false;
            var thisauthor = false;
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              if (sortedItems[i][1].sortkeys[0] !== lastauthor) {
                thisauthor = sortedItems[i][1].sortkeys[0];
                thiskey = sortedItems[i][1].sortkeys[1];
              }
              sortedItems[i][1].sortkeys[0] = "" + thiskey + i;
              lastauthor = thisauthor;
            }
          }
          if (!citation.properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
        }
        if (this.opt.parallel.enable) {
          this.parallel.StartCitation(citation.sortedItems);
        }
        var citations;
        if (this.opt.update_mode === CSL2.POSITION) {
          for (var i = 0; i < 2; i += 1) {
            var first_ref = {};
            var last_ref = {};
            var first_container_ref = {};
            citations = [textCitations, noteCitations][i];
            for (j = 0, jlen = citations.length; j < jlen; j += 1) {
              var onecitation = citations[j];
              if (!citations[j].properties.noteIndex) {
                citations[j].properties.noteIndex = 0;
              }
              citations[j].properties.noteIndex = parseInt(citations[j].properties.noteIndex, 10);
              if (j > 0 && onecitation.properties.noteIndex && citations[j - 1].properties.noteIndex > onecitation.properties.noteIndex) {
                citationsInNote = {};
                first_ref = {};
                last_ref = {};
                first_container_ref = {};
              }
              for (k = 0, klen = onecitation.sortedItems.length; k < klen; k += 1) {
                if (onecitation.sortedItems[k][1].parallel && onecitation.sortedItems[k][1].parallel !== "first") {
                  continue;
                }
                if (!citationsInNote[onecitation.properties.noteIndex]) {
                  citationsInNote[onecitation.properties.noteIndex] = 1;
                } else {
                  citationsInNote[onecitation.properties.noteIndex] += 1;
                }
              }
              for (k = 0, klen = citations[j].sortedItems.length; k < klen; k += 1) {
                item = citations[j].sortedItems[k];
                var item_id = item[0].id;
                var first_id = item[0].legislation_id ? item[0].legislation_id : item[0].id;
                var last_id = item[0].legislation_id ? item[0].legislation_id : item[0].container_id ? item[0].container_id : item[0].id;
                var myxloc = item[1]["locator-extra"];
                var mylocator = item[1].locator;
                var mylabel = item[1].label;
                var incitationid;
                var incitationxloc;
                if (k > 0) {
                  if (onecitation.sortedItems[k - 1][0].legislation_id) {
                    incitationid = onecitation.sortedItems[k - 1][0].legislation_id;
                  } else {
                    incitationid = onecitation.sortedItems[k - 1][1].id;
                    incitationxloc = onecitation.sortedItems[k - 1][1]["locator-extra"];
                    for (var l = k - 2; l > -1; l--) {
                      if (onecitation.sortedItems[l][1].parallel === "first") {
                        incitationid = onecitation.sortedItems[l][1].id;
                        incitationxloc = onecitation.sortedItems[l][1]["locator-extra"];
                      }
                    }
                  }
                }
                if (flag === CSL2.PREVIEW) {
                  if (onecitation.citationID != citation.citationID) {
                    if (typeof first_ref[item[1].id] === "undefined") {
                      first_ref[first_id] = onecitation.properties.noteIndex;
                      last_ref[last_id] = onecitation.properties.noteIndex;
                    } else {
                      last_ref[last_id] = onecitation.properties.noteIndex;
                    }
                    continue;
                  }
                }
                var oldvalue = {};
                oldvalue.position = item[1].position;
                oldvalue["first-reference-note-number"] = item[1]["first-reference-note-number"];
                oldvalue["first-container-reference-note-number"] = item[1]["first-container-reference-note-number"];
                oldvalue["near-note"] = item[1]["near-note"];
                item[1]["first-reference-note-number"] = 0;
                item[1]["first-container-reference-note-number"] = 0;
                item[1]["near-note"] = false;
                if (this.registry.citationreg.citationsByItemId[item_id]) {
                  if (this.opt.xclass === "note" && this.opt.has_disambiguate) {
                    var oldCount = this.registry.registry[item[0].id]["citation-count"];
                    var newCount = this.registry.citationreg.citationsByItemId[item_id].length;
                    this.registry.registry[item[0].id]["citation-count"] = this.registry.citationreg.citationsByItemId[item_id].length;
                    if (typeof oldCount === "number") {
                      var oldCountCheck = oldCount < 2;
                      var newCountCheck = newCount < 2;
                      if (oldCountCheck !== newCountCheck) {
                        for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                          this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                        }
                      }
                    } else {
                      for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                        rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                        this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                      }
                    }
                  }
                }
                var oldlastid;
                var oldlastxloc;
                if (typeof last_ref[last_id] === "undefined" && onecitation.properties.mode !== "author-only") {
                  first_ref[first_id] = onecitation.properties.noteIndex;
                  last_ref[last_id] = onecitation.properties.noteIndex;
                  first_container_ref[last_id] = onecitation.properties.noteIndex;
                  item[1].position = CSL2.POSITION_FIRST;
                } else {
                  var ibidme = false;
                  var suprame = false;
                  var prevCitation = null;
                  if (j > 0) {
                    var prevCitation = citations[j - 1];
                  }
                  var thisCitation = citations[j];
                  if (j > 0) {
                    var old_last_id_offset = 1;
                    if (prevCitation.properties.mode === "author-only" && j > 1) {
                      old_last_id_offset = 2;
                    }
                    var adjusted_offset = j - old_last_id_offset;
                    if (citations[adjusted_offset].sortedItems.length) {
                      oldlastid = citations[adjusted_offset].sortedItems.slice(-1)[0][1].id;
                      oldlastxloc = citations[j - old_last_id_offset].sortedItems.slice(-1)[0][1]["locator-extra"];
                    }
                    if (prevCitation.sortedItems.length) {
                      if (prevCitation.sortedItems[0].slice(-1)[0].legislation_id) {
                        oldlastid = prevCitation.sortedItems[0].slice(-1)[0].legislation_id;
                      }
                    }
                  }
                  if (j > 0 && k === 0 && prevCitation.properties.noteIndex !== thisCitation.properties.noteIndex) {
                    var useme = false;
                    var oldid = prevCitation.sortedItems[0][0].id;
                    if (prevCitation.sortedItems[0][0].legislation_id) {
                      oldid = prevCitation.sortedItems[0][0].legislation_id;
                    }
                    if (oldid == first_id && prevCitation.properties.noteIndex >= thisCitation.properties.noteIndex - 1) {
                      var prevxloc = prevCitation.sortedItems[0][1]["locator-extra"];
                      var thisxloc = thisCitation.sortedItems[0][1]["locator-extra"];
                      if ((citationsInNote[prevCitation.properties.noteIndex] === 1 || prevCitation.properties.noteIndex === 0) && prevxloc === thisxloc) {
                        useme = true;
                      }
                    }
                    if (useme) {
                      ibidme = true;
                    } else {
                      suprame = true;
                    }
                  } else if (k > 0 && incitationid == first_id && incitationxloc == myxloc) {
                    ibidme = true;
                  } else if (k === 0 && j > 0 && prevCitation.properties.noteIndex == thisCitation.properties.noteIndex && prevCitation.sortedItems.length && oldlastid == first_id && oldlastxloc == myxloc) {
                    ibidme = true;
                  } else {
                    suprame = true;
                  }
                  var prev, prev_locator, prev_label, curr_locator, curr_label;
                  if (ibidme) {
                    if (k > 0) {
                      prev = onecitation.sortedItems[k - 1][1];
                    } else {
                      prev = citations[j - 1].sortedItems[0][1];
                    }
                    if (prev.locator) {
                      if (prev.label) {
                        prev_label = prev.label;
                      } else {
                        prev_label = "";
                      }
                      prev_locator = "" + prev.locator + prev_label;
                    } else {
                      prev_locator = prev.locator;
                    }
                    if (mylocator) {
                      if (mylabel) {
                        curr_label = mylabel;
                      } else {
                        curr_label = "";
                      }
                      curr_locator = "" + mylocator + curr_label;
                    } else {
                      curr_locator = mylocator;
                    }
                  }
                  if (ibidme && prev_locator && !curr_locator) {
                    ibidme = false;
                    suprame = true;
                  }
                  if (ibidme) {
                    if (!prev_locator && curr_locator) {
                      item[1].position = CSL2.POSITION_IBID_WITH_LOCATOR;
                    } else if (!prev_locator && !curr_locator) {
                      item[1].position = CSL2.POSITION_IBID;
                    } else if (prev_locator && curr_locator === prev_locator) {
                      item[1].position = CSL2.POSITION_IBID;
                    } else if (prev_locator && curr_locator && curr_locator !== prev_locator) {
                      item[1].position = CSL2.POSITION_IBID_WITH_LOCATOR;
                    } else {
                      ibidme = false;
                      suprame = true;
                    }
                  }
                  if (suprame) {
                    item[1].position = CSL2.POSITION_CONTAINER_SUBSEQUENT;
                    if (typeof first_ref[first_id] === "undefined") {
                      first_ref[first_id] = onecitation.properties.noteIndex;
                    } else {
                      item[1].position = CSL2.POSITION_SUBSEQUENT;
                    }
                  }
                  if (suprame || ibidme) {
                    if (onecitation.properties.mode === "author-only") {
                      item[1].position = CSL2.POSITION_FIRST;
                    }
                    if (first_container_ref[last_id] != onecitation.properties.noteIndex) {
                      item[1]["first-container-reference-note-number"] = first_container_ref[last_id];
                      if (this.registry.registry[item[0].id]) {
                        this.registry.registry[item[0].id]["first-container-reference-note-number"] = first_container_ref[last_id];
                      }
                    }
                    if (first_ref[first_id] != onecitation.properties.noteIndex) {
                      item[1]["first-reference-note-number"] = first_ref[first_id];
                      if (this.registry.registry[item[0].id]) {
                        this.registry.registry[item[0].id]["first-reference-note-number"] = first_ref[first_id];
                      }
                    }
                  }
                }
                if (onecitation.properties.noteIndex) {
                  var note_distance = parseInt(onecitation.properties.noteIndex, 10) - parseInt(last_ref[last_id], 10);
                  if (item[1].position !== CSL2.POSITION_FIRST && note_distance <= this.citation.opt["near-note-distance"]) {
                    item[1]["near-note"] = true;
                  }
                  last_ref[last_id] = onecitation.properties.noteIndex;
                } else if (item[1].position !== CSL2.POSITION_FIRST) {
                  item[1]["near-note"] = true;
                }
                if (onecitation.citationID != citation.citationID) {
                  for (n = 0, nlen = CSL2.POSITION_TEST_VARS.length; n < nlen; n += 1) {
                    var param = CSL2.POSITION_TEST_VARS[n];
                    if (item[1][param] !== oldvalue[param]) {
                      if (this.registry.registry[item[0].id]) {
                        if (param === "first-reference-note-number") {
                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                          this.tmp.taintedItemIDs[item[0].id] = true;
                        }
                      }
                      this.tmp.taintedCitationIDs[onecitation.citationID] = true;
                    }
                  }
                }
                if (this.sys.variableWrapper) {
                  item[1].index = onecitation.properties.index;
                  item[1].noteIndex = onecitation.properties.noteIndex;
                }
              }
            }
          }
        }
        if (this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          if (!citation.properties.unsorted) {
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
            }
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
        }
        for (var key in this.tmp.taintedItemIDs) {
          if (this.tmp.taintedItemIDs.hasOwnProperty(key)) {
            citations = this.registry.citationreg.citationsByItemId[key];
            if (citations) {
              for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
                this.tmp.taintedCitationIDs[citations[i].citationID] = true;
              }
            }
          }
        }
        var ret = [];
        if (flag === CSL2.PREVIEW) {
          if (this.debug) {
            CSL2.debug("****** start run processor *********");
          }
          try {
            ret = this.process_CitationCluster.call(this, citation.sortedItems, citation);
          } catch (e) {
            CSL2.error("Error running CSL processor for preview: " + e);
          }
          if (this.debug) {
            CSL2.debug("****** end run processor *********");
            CSL2.debug("****** start state restore *********");
          }
          this.registry.citationreg.citationByIndex = oldCitationList;
          this.registry.citationreg.citationById = {};
          for (var i = 0, ilen = oldCitationList.length; i < ilen; i += 1) {
            this.registry.citationreg.citationById[oldCitationList[i].citationID] = oldCitationList[i];
          }
          if (this.debug) {
            CSL2.debug("****** start final update *********");
          }
          var oldItemIds = [];
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            oldItemIds.push("" + oldItemList[i].id);
          }
          this.updateItems(oldItemIds, null, null, true);
          if (this.debug) {
            CSL2.debug("****** end final update *********");
          }
          for (var key in oldAmbigs) {
            if (oldAmbigs.hasOwnProperty(key)) {
              this.registry.registry[key].disambig = oldAmbigs[key];
            }
          }
          if (this.debug) {
            CSL2.debug("****** end state restore *********");
          }
        } else {
          for (var rerunAkey in rerunAkeys) {
            this.disambiguate.run(rerunAkey, citation);
          }
          var obj;
          for (var key in this.tmp.taintedCitationIDs) {
            if (key == citation.citationID) {
              continue;
            }
            var mycitation = this.registry.citationreg.citationById[key];
            if (!mycitation.properties.unsorted) {
              for (var i = 0, ilen = mycitation.sortedItems.length; i < ilen; i += 1) {
                mycitation.sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, mycitation.sortedItems[i][0], "citation_sort");
              }
              mycitation.sortedItems.sort(this.citation.srt.compareCompositeKeys);
            }
            this.tmp.citation_pos = mycitation.properties.index;
            this.tmp.citation_note_index = mycitation.properties.noteIndex;
            this.tmp.citation_id = "" + mycitation.citationID;
            obj = [];
            obj.push(mycitation.properties.index);
            obj.push(this.process_CitationCluster.call(this, mycitation.sortedItems, mycitation));
            obj.push(mycitation.citationID);
            ret.push(obj);
          }
          this.tmp.taintedItemIDs = {};
          this.tmp.taintedCitationIDs = {};
          this.tmp.citation_pos = citation.properties.index;
          this.tmp.citation_note_index = citation.properties.noteIndex;
          this.tmp.citation_id = "" + citation.citationID;
          obj = [];
          obj.push(citationsPre.length);
          obj.push(this.process_CitationCluster.call(this, sortedItems, citation));
          obj.push(citation.citationID);
          ret.push(obj);
          ret.sort(function(a, b) {
            if (a[0] > b[0]) {
              return 1;
            } else if (a[0] < b[0]) {
              return -1;
            } else {
              return 0;
            }
          });
        }
        this.registry.return_data.citation_errors = this.tmp.citation_errors.slice();
        return [this.registry.return_data, ret];
      };
      CSL2.Engine.prototype.process_CitationCluster = function(sortedItems, citation) {
        var str = "";
        if (citation && citation.properties && citation.properties.mode === "composite") {
          citation.properties.mode = "author-only";
          var firstChunk = CSL2.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "suppress-author";
          var secondChunk = "";
          if (citation.properties.infix) {
            this.output.append(citation.properties.infix);
            secondChunk = this.output.string(this, this.output.queue);
            if (typeof secondChunk === "object") {
              secondChunk = secondChunk.join("");
            }
          }
          var thirdChunk = CSL2.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "composite";
          if (firstChunk && secondChunk && CSL2.SWAPPING_PUNCTUATION.concat(["\u2019", "'"]).indexOf(secondChunk[0]) > -1) {
            firstChunk += secondChunk;
            secondChunk = false;
          }
          str = [firstChunk, secondChunk, thirdChunk].filter(function(obj) {
            return obj;
          }).join(" ");
        } else {
          str = CSL2.getCitationCluster.call(this, sortedItems, citation);
        }
        return str;
      };
      CSL2.Engine.prototype.makeCitationCluster = function(rawList) {
        var inputList, newitem, str, pos, len, item, Item;
        inputList = [];
        len = rawList.length;
        for (pos = 0; pos < len; pos += 1) {
          item = {};
          for (var key in rawList[pos]) {
            item[key] = rawList[pos][key];
          }
          Item = this.retrieveItem("" + item.id);
          if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
              var m = CSL2.LOCATOR_LABELS_REGEXP.exec(item.locator);
              if (m) {
                var tryLabel = CSL2.LOCATOR_LABELS_MAP[m[2]];
                if (this.getTerm(tryLabel)) {
                  item.label = tryLabel;
                  item.locator = m[3];
                }
              }
            }
          }
          if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, "");
          }
          newitem = [Item, item];
          inputList.push(newitem);
        }
        if (this.opt.development_extensions.consolidate_legal_items) {
          this.remapSectionVariable(inputList);
        }
        if (inputList && inputList.length > 1 && this.citation_sort.tokens.length > 0) {
          len = inputList.length;
          for (pos = 0; pos < len; pos += 1) {
            inputList[pos][1].sortkeys = CSL2.getSortKeys.call(this, inputList[pos][0], "citation_sort");
          }
          inputList.sort(this.citation.srt.compareCompositeKeys);
        }
        this.tmp.citation_errors = [];
        var str = CSL2.getCitationCluster.call(this, inputList);
        return str;
      };
      CSL2.getAmbiguousCite = function(Item, disambig, visualForm, item) {
        var ret;
        var flags = this.tmp.group_context.tip;
        var oldTermSiblingLayer = {
          term_intended: flags.term_intended,
          variable_attempt: flags.variable_attempt,
          variable_success: flags.variable_success,
          output_tip: flags.output_tip,
          label_form: flags.label_form,
          non_parallel: flags.non_parallel,
          parallel_last: flags.parallel_last,
          parallel_first: flags.parallel_first,
          parallel_last_override: flags.parallel_last_override,
          parallel_delimiter_override: flags.parallel_delimiter_override,
          parallel_delimiter_override_on_suppress: flags.parallel_delimiter_override_on_suppress,
          condition: flags.condition,
          force_suppress: flags.force_suppress,
          done_vars: flags.done_vars.slice()
        };
        if (disambig) {
          this.tmp.disambig_request = disambig;
        } else {
          this.tmp.disambig_request = false;
        }
        var itemSupp = {
          position: CSL2.POSITION_SUBSEQUENT,
          "near-note": true
        };
        if (item) {
          itemSupp.locator = item.locator;
          itemSupp.label = item.label;
        }
        if (this.registry.registry[Item.id] && this.registry.citationreg.citationsByItemId && this.registry.citationreg.citationsByItemId[Item.id] && this.registry.citationreg.citationsByItemId[Item.id].length && visualForm) {
          if (this.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            itemSupp["first-reference-note-number"] = this.registry.registry[Item.id]["first-reference-note-number"];
          }
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        var origSuppressDecorations = this.tmp.suppress_decorations;
        this.tmp.suppress_decorations = true;
        this.tmp.just_looking = true;
        CSL2.getCite.call(this, Item, itemSupp, null, false);
        for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
          CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
        }
        if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j]);
            this.output.adjust.fix(this.output.queue[j]);
          }
        }
        var ret = this.output.string(this, this.output.queue);
        this.tmp.just_looking = false;
        this.tmp.suppress_decorations = origSuppressDecorations;
        this.tmp.group_context.replace(oldTermSiblingLayer);
        return ret;
      };
      CSL2.getSpliceDelimiter = function(last_locator, last_collapsed, pos) {
        if (this.citation.opt["after-collapse-delimiter"] !== void 0) {
          if (last_locator) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (last_collapsed && !this.tmp.have_collapsed) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (!last_collapsed && !this.tmp.have_collapsed && this.citation.opt.collapse !== "year-suffix") {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else {
            this.tmp.splice_delimiter = this.citation.opt.layout_delimiter;
          }
        } else if (this.tmp.use_cite_group_delimiter) {
          this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
        } else {
          if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL2.NUMERIC) {
            this.tmp.splice_delimiter = ", ";
          } else if (this.tmp.cite_locales[pos - 1]) {
            var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
            if (alt_affixes && alt_affixes.delimiter) {
              this.tmp.splice_delimiter = alt_affixes.delimiter;
            }
          } else if (!this.tmp.splice_delimiter) {
            this.tmp.splice_delimiter = "";
          }
        }
        return this.tmp.splice_delimiter;
      };
      CSL2.getCitationCluster = function(inputList, citation) {
        var result, objects, myparams, len, pos, item, last_collapsed, params, empties, composite, compie, myblobs, Item, llen, ppos, obj, preceding_item, txt_esc, error_object, citationID, authorOnly, suppressAuthor;
        var citation_prefix = "";
        this.output.checkNestedBrace = new CSL2.checkNestedBrace(this);
        if (citation) {
          citationID = citation.citationID;
          authorOnly = citation.properties.mode === "author-only" ? !!citation.properties.mode : false;
          if (this.opt.xclass !== "note") {
            suppressAuthor = citation.properties.mode === "suppress-author" ? !!citation.properties.mode : false;
          }
          if (citation.properties.prefix) {
            citation_prefix = CSL2.checkPrefixSpaceAppend(this, citation.properties.prefix);
          }
        }
        inputList = inputList ? inputList : [];
        this.tmp.last_primary_names_string = false;
        txt_esc = CSL2.getSafeEscape(this);
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        result = "";
        objects = [];
        this.tmp.last_suffix_used = "";
        this.tmp.last_names_used = [];
        this.tmp.last_years_used = [];
        this.tmp.backref_index = [];
        this.tmp.cite_locales = [];
        if (!this.tmp.just_looking) {
          this.tmp.abbrev_trimmer = {
            QUASHES: {}
          };
        }
        var use_layout_prefix = this.output.checkNestedBrace.update(this.citation.opt.layout_prefix + citation_prefix);
        var suppressTrailingPunctuation = false;
        if (this.citation.opt.suppressTrailingPunctuation) {
          suppressTrailingPunctuation = true;
        }
        if (citationID) {
          if (this.registry.citationreg.citationById[citationID].properties["suppress-trailing-punctuation"]) {
            suppressTrailingPunctuation = true;
          }
        }
        if (this.opt.xclass === "note") {
          var parasets = [];
          var lastTitle = false;
          var lastPosition = false;
          var lastID = false;
          var lst = [];
          for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
            var type2 = inputList[i][0].type;
            var title2 = inputList[i][0].title;
            var position = inputList[i][1].position;
            var id = inputList[i][0].id;
            if (title2 && type2 === "legal_case" && id !== lastID && position) {
              if (title2 !== lastTitle || parasets.length === 0) {
                lst = [];
                parasets.push(lst);
              }
              lst.push(inputList[i][1]);
            }
            lastTitle = title2;
            lastPosition = position;
            lastID = id;
          }
          for (i = 0, ilen = parasets.length; i < ilen; i += 1) {
            lst = parasets[i];
            if (lst.length < 2) {
              continue;
            }
            var locatorInLastPosition = lst.slice(-1)[0].locator;
            if (locatorInLastPosition) {
              for (var j = 0, jlen = lst.length - 1; j < jlen; j += 1) {
                if (lst[j].locator) {
                  locatorInLastPosition = false;
                }
              }
            }
            if (locatorInLastPosition) {
              lst[0].locator = locatorInLastPosition;
              delete lst.slice(-1)[0].locator;
              lst[0].label = lst.slice(-1)[0].label;
              if (lst.slice(-1)[0].label) {
                delete lst.slice(-1)[0].label;
              }
            }
          }
        }
        myparams = [];
        len = inputList.length;
        if (inputList[0] && inputList[0][1]) {
          if (authorOnly) {
            delete inputList[0][1]["suppress-author"];
            inputList[0][1]["author-only"] = true;
          } else if (suppressAuthor) {
            delete inputList[0][1]["author-only"];
            inputList[0][1]["suppress-author"] = true;
          }
        }
        if (this.opt.parallel.enable) {
          this.parallel.StartCitation(inputList);
        }
        for (pos = 0; pos < len; pos += 1) {
          this.tmp.cite_index = pos;
          Item = inputList[pos][0];
          item = inputList[pos][1];
          item = CSL2.parseLocator.call(this, item);
          last_collapsed = this.tmp.have_collapsed;
          var last_locator = false;
          if (pos > 0 && inputList[pos - 1][1]) {
            last_locator = !!inputList[pos - 1][1].locator;
          }
          params = {};
          this.tmp.shadow_numbers = {};
          if (!this.tmp.just_looking && this.opt.hasPlaceholderTerm) {
            var output = this.output;
            this.output = new CSL2.Output.Queue(this);
            this.output.adjust = new CSL2.Output.Queue.adjust();
            CSL2.getAmbiguousCite.call(this, Item, null, false, item);
            this.output = output;
          }
          this.tmp.in_cite_predecessor = false;
          if (pos > 0) {
            CSL2.getCite.call(this, Item, item, "" + inputList[pos - 1][0].id, true);
          } else {
            this.tmp.term_predecessor = false;
            CSL2.getCite.call(this, Item, item, null, true);
          }
          if (!this.tmp.cite_renders_content) {
            error_object = {
              citationID: "" + this.tmp.citation_id,
              index: this.tmp.citation_pos,
              noteIndex: this.tmp.citation_note_index,
              itemID: "" + Item.id,
              citationItems_pos: pos,
              error_code: CSL2.ERROR_NO_RENDERED_FORM
            };
            this.tmp.citation_errors.push(error_object);
          }
          params.splice_delimiter = CSL2.getSpliceDelimiter.call(this, last_locator, last_collapsed, pos);
          if (item && item["author-only"]) {
            this.tmp.suppress_decorations = true;
          }
          if (pos > 0) {
            preceding_item = inputList[pos - 1][1];
            var precedingEndsInPeriodOrComma = preceding_item.suffix && [";", ".", ","].indexOf(preceding_item.suffix.slice(-1)) > -1;
            var currentStartsWithPeriodOrComma = !preceding_item.suffix && item.prefix && [";", ".", ","].indexOf(item.prefix.slice(0, 1)) > -1;
            if (precedingEndsInPeriodOrComma || currentStartsWithPeriodOrComma) {
              var spaceidx = params.splice_delimiter.indexOf(" ");
              if (spaceidx > -1 && !currentStartsWithPeriodOrComma) {
                params.splice_delimiter = params.splice_delimiter.slice(spaceidx);
              } else {
                params.splice_delimiter = "";
              }
            }
          }
          params.suppress_decorations = this.tmp.suppress_decorations;
          params.have_collapsed = this.tmp.have_collapsed;
          myparams.push(params);
          if (item["author-only"]) {
            break;
          }
        }
        empties = 0;
        myblobs = this.output.queue.slice();
        var citation_suffix = "";
        if (citation) {
          citation_suffix = CSL2.checkSuffixSpacePrepend(this, citation.properties.suffix);
        }
        var suffix = this.citation.opt.layout_suffix;
        var last_locale = this.tmp.cite_locales[this.tmp.cite_locales.length - 1];
        if (last_locale && this.tmp.cite_affixes[this.tmp.area][last_locale] && this.tmp.cite_affixes[this.tmp.area][last_locale].suffix) {
          suffix = this.tmp.cite_affixes[this.tmp.area][last_locale].suffix;
        }
        if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(suffix.slice(0, 1)) > -1) {
          suffix = suffix.slice(0, 1);
        }
        suffix = this.output.checkNestedBrace.update(citation_suffix + suffix);
        for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
          CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
        }
        if (!this.tmp.suppress_decorations && this.output.queue.length) {
          if (!(this.opt.development_extensions.apply_citation_wrapper && this.sys.wrapCitationEntry && !this.tmp.just_looking && this.tmp.area === "citation")) {
            if (!suppressTrailingPunctuation) {
              this.output.queue[this.output.queue.length - 1].strings.suffix = suffix;
            }
            this.output.queue[0].strings.prefix = use_layout_prefix;
          }
        }
        if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j]);
            this.tmp.last_chr = this.output.adjust.fix(this.output.queue[j]);
          }
        }
        for (pos = 0, len = myblobs.length; pos < len; pos += 1) {
          var buffer = [];
          this.output.queue = [myblobs[pos]];
          this.tmp.suppress_decorations = myparams[pos].suppress_decorations;
          this.tmp.splice_delimiter = myparams[pos].splice_delimiter;
          if (myblobs[pos].parallel_delimiter) {
            this.tmp.splice_delimiter = myblobs[pos].parallel_delimiter;
          }
          this.tmp.have_collapsed = myparams[pos].have_collapsed;
          composite = this.output.string(this, this.output.queue);
          this.tmp.suppress_decorations = false;
          if (typeof composite === "string") {
            this.tmp.suppress_decorations = false;
            if (!composite) {
              if (this.opt.development_extensions.throw_on_empty) {
                CSL2.error("Citation would render no content");
              } else {
                composite = "[NO_PRINTED_FORM]";
              }
            }
            return composite;
          }
          if (typeof composite === "object" && composite.length === 0 && !item["suppress-author"]) {
            if (pos === 0) {
              var errStr = "[CSL STYLE ERROR: reference with no printed form.]";
              var preStr = pos === 0 ? txt_esc(this.citation.opt.layout_prefix) : "";
              var sufStr = pos === myblobs.length - 1 ? txt_esc(this.citation.opt.layout_suffix) : "";
              composite.push(preStr + errStr + sufStr);
            } else if (pos === myblobs.length - 1) {
              var tmpobj = objects[objects.length - 1];
              if (typeof tmpobj === "string") {
                objects[objects.length - 1] += txt_esc(this.citation.opt.layout_suffix);
              } else if (typeof tmpobj === "object") {
                tmpobj.strings.suffix += txt_esc(this.citation.opt.layout_suffix);
              }
            }
          }
          if (buffer.length && typeof composite[0] === "string") {
            composite.reverse();
            var tmpstr = composite.pop();
            if (tmpstr && tmpstr.slice(0, 1) === ",") {
              buffer.push(tmpstr);
            } else if (typeof buffer.slice(-1)[0] == "string" && buffer.slice(-1)[0].slice(-1) === ",") {
              buffer.push(" " + tmpstr);
            } else if (tmpstr) {
              buffer.push(txt_esc(this.tmp.splice_delimiter) + tmpstr);
            }
          } else {
            composite.reverse();
            compie = composite.pop();
            if (typeof compie !== "undefined") {
              if (buffer.length && typeof buffer[buffer.length - 1] === "string") {
                buffer[buffer.length - 1] += compie.successor_prefix;
              }
              buffer.push(compie);
            }
          }
          llen = composite.length;
          for (ppos = 0; ppos < llen; ppos += 1) {
            obj = composite[ppos];
            if (typeof obj === "string") {
              buffer.push(txt_esc(this.tmp.splice_delimiter) + obj);
              continue;
            }
            compie = composite.pop();
            if (typeof compie !== "undefined") {
              buffer.push(compie);
            }
          }
          if (buffer.length === 0 && !inputList[pos][1]["suppress-author"]) {
            empties += 1;
          }
          if (buffer.length > 1 && typeof buffer[0] !== "string") {
            buffer = [this.output.renderBlobs(buffer)];
          }
          if (buffer.length) {
            if (typeof buffer[0] === "string") {
              if (pos > 0) {
                buffer[0] = txt_esc(this.tmp.splice_delimiter) + buffer[0];
              }
            } else {
              if (pos > 0) {
                buffer[0].splice_prefix = this.tmp.splice_delimiter;
              } else {
                buffer[0].splice_prefix = "";
              }
            }
          }
          objects = objects.concat(buffer);
        }
        result += this.output.renderBlobs(objects);
        if (result) {
          if (!this.tmp.suppress_decorations) {
            len = this.citation.opt.layout_decorations.length;
            for (pos = 0; pos < len; pos += 1) {
              params = this.citation.opt.layout_decorations[pos];
              if (params[1] === "normal") {
                continue;
              }
              if (!item || !item["author-only"]) {
                result = this.fun.decorate[params[0]][params[1]](this, result);
              }
            }
          }
        }
        this.tmp.suppress_decorations = false;
        if (!result) {
          if (this.opt.development_extensions.throw_on_empty) {
            CSL2.error("Citation would render no content");
          } else {
            result = "[NO_PRINTED_FORM]";
          }
        }
        return result;
      };
      CSL2.getCite = function(Item, item, prevItemID, blockShadowNumberReset) {
        var next, error_object;
        var areaOrig = this.tmp.area;
        if (item && item["author-only"] && this.intext && this.intext.tokens.length > 0) {
          this.tmp.area = "intext";
        }
        this.tmp.cite_renders_content = false;
        this.tmp.probably_rendered_something = false;
        this.tmp.prevItemID = prevItemID;
        CSL2.citeStart.call(this, Item, item, blockShadowNumberReset);
        next = 0;
        this.tmp.name_node = {};
        this.nameOutput = new CSL2.NameOutput(this, Item, item);
        while (next < this[this.tmp.area].tokens.length) {
          next = CSL2.tokenExec.call(this, this[this.tmp.area].tokens[next], Item, item);
        }
        CSL2.citeEnd.call(this, Item, item);
        if (!this.tmp.cite_renders_content && !this.tmp.just_looking) {
          if (this.tmp.area === "bibliography") {
            error_object = {
              index: this.tmp.bibliography_pos,
              itemID: "" + Item.id,
              error_code: CSL2.ERROR_NO_RENDERED_FORM
            };
            this.tmp.bibliography_errors.push(error_object);
          }
        }
        this.tmp.area = areaOrig;
        return "" + Item.id;
      };
      CSL2.citeStart = function(Item, item, blockShadowNumberReset) {
        this.tmp.lang_array = [];
        if (Item.language) {
          var m = Item.language.match(/^([a-zA-Z]+).*/);
          if (m) {
            this.tmp.lang_array.push(m[1].toLowerCase());
          }
        }
        this.tmp.lang_array.push(this.opt.lang);
        if (!blockShadowNumberReset) {
          this.tmp.shadow_numbers = {};
        }
        this.tmp.disambiguate_count = 0;
        this.tmp.disambiguate_maxMax = 0;
        this.tmp.same_author_as_previous_cite = false;
        if (!this.tmp.suppress_decorations) {
          this.tmp.subsequent_author_substitute_ok = true;
        } else {
          this.tmp.subsequent_author_substitute_ok = false;
        }
        this.tmp.lastchr = "";
        if (this.tmp.area === "citation" && this.citation.opt.collapse && this.citation.opt.collapse.length) {
          this.tmp.have_collapsed = true;
        } else {
          this.tmp.have_collapsed = false;
        }
        this.tmp.render_seen = false;
        if (this.tmp.disambig_request && !this.tmp.disambig_override) {
          this.tmp.disambig_settings = this.tmp.disambig_request;
        } else if (this.registry.registry[Item.id] && !this.tmp.disambig_override) {
          this.tmp.disambig_request = this.registry.registry[Item.id].disambig;
          this.tmp.disambig_settings = this.registry.registry[Item.id].disambig;
        } else {
          this.tmp.disambig_settings = new CSL2.AmbigConfig();
        }
        if (this.tmp.area !== "citation") {
          if (!this.registry.registry[Item.id]) {
            this.tmp.disambig_restore = new CSL2.AmbigConfig();
          } else {
            this.tmp.disambig_restore = CSL2.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
            if (this.tmp.area === "bibliography" && this.tmp.disambig_settings && this.tmp.disambig_override) {
              if (this.opt["disambiguate-add-names"]) {
                this.tmp.disambig_settings.names = this.registry.registry[Item.id].disambig.names.slice();
                if (this.tmp.disambig_request) {
                  this.tmp.disambig_request.names = this.registry.registry[Item.id].disambig.names.slice();
                }
              }
              if (this.opt["disambiguate-add-givenname"]) {
                this.tmp.disambig_request = this.tmp.disambig_settings;
                this.tmp.disambig_settings.givens = this.registry.registry[Item.id].disambig.givens.slice();
                this.tmp.disambig_request.givens = this.registry.registry[Item.id].disambig.givens.slice();
                for (var i = 0, ilen = this.tmp.disambig_settings.givens.length; i < ilen; i += 1) {
                  this.tmp.disambig_settings.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                }
                for (var i = 0, ilen = this.tmp.disambig_request.givens.length; i < ilen; i += 1) {
                  this.tmp.disambig_request.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                }
              }
            }
          }
        }
        this.tmp.names_used = [];
        this.tmp.nameset_counter = 0;
        this.tmp.years_used = [];
        this.tmp.names_max.clear();
        if (!this.tmp.just_looking) {
          if (!item || item.parallel === "first" || !item.parallel) {
            this.tmp.abbrev_trimmer = {
              QUASHES: {}
            };
          }
        }
        this.tmp.splice_delimiter = this[this.tmp.area].opt.layout_delimiter;
        this.bibliography_sort.keys = [];
        this.citation_sort.keys = [];
        this.tmp.has_done_year_suffix = false;
        this.tmp.last_cite_locale = false;
        if (!this.tmp.just_looking && item && !item.position && this.registry.registry[Item.id]) {
          this.tmp.disambig_restore = CSL2.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
        }
        this.tmp.first_name_string = false;
        this.tmp.authority_stop_last = 0;
      };
      CSL2.citeEnd = function(Item, item) {
        if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
          this.registry.registry[Item.id].disambig.names = this.tmp.disambig_restore.names.slice();
          this.registry.registry[Item.id].disambig.givens = this.tmp.disambig_restore.givens.slice();
          for (var i = 0, ilen = this.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
            this.registry.registry[Item.id].disambig.givens[i] = this.tmp.disambig_restore.givens[i].slice();
          }
        }
        this.tmp.disambig_restore = false;
        if (item && item.suffix) {
          this.tmp.last_suffix_used = item.suffix;
        } else {
          this.tmp.last_suffix_used = "";
        }
        this.tmp.last_years_used = this.tmp.years_used.slice();
        this.tmp.last_names_used = this.tmp.names_used.slice();
        this.tmp.cut_var = false;
        this.tmp.disambig_request = false;
        this.tmp.cite_locales.push(this.tmp.last_cite_locale);
        if (this.tmp.issued_date && this.tmp.renders_collection_number) {
          var buf = [];
          for (var i = this.tmp.issued_date.list.length - 1; i > this.tmp.issued_date.pos; i += -1) {
            buf.push(this.tmp.issued_date.list.pop());
          }
          this.tmp.issued_date.list.pop();
          for (i = buf.length - 1; i > -1; i += -1) {
            this.tmp.issued_date.list.push(buf.pop());
          }
        }
        this.tmp.issued_date = false;
        this.tmp.renders_collection_number = false;
      };
      CSL2.Engine.prototype.makeBibliography = function(bibsection) {
        var debug, ret, params, maxoffset, item, len, pos, tok, tokk, tokkk, entry_ids, entry_strings;
        debug = false;
        if (!bibsection && (this.bibliography.opt.exclude_types || this.bibliography.opt.exclude_with_fields)) {
          bibsection = {
            exclude: []
          };
          if (this.bibliography.opt.exclude_types) {
            for (var i in this.bibliography.opt.exclude_types) {
              var val = this.bibliography.opt.exclude_types[i];
              bibsection.exclude.push({
                field: "type",
                value: val
              });
            }
          }
          if (this.bibliography.opt.exclude_with_fields) {
            for (var i in this.bibliography.opt.exclude_with_fields) {
              var field = this.bibliography.opt.exclude_with_fields[i];
              bibsection.exclude.push({
                field,
                value: true
              });
            }
          }
        }
        if (!this.bibliography.tokens.length) {
          return false;
        }
        if (typeof bibsection === "string") {
          this.opt.citation_number_slug = bibsection;
          bibsection = false;
        }
        if (debug) {
          len = this.bibliography.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tok = this.bibliography.tokens[pos];
            CSL2.debug("bibtok: " + tok.name);
          }
          CSL2.debug("---");
          len = this.citation.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tokk = this.citation.tokens[pos];
            CSL2.debug("cittok: " + tok.name);
          }
          CSL2.debug("---");
          len = this.bibliography_sort.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tokkk = this.bibliography_sort.tokens[pos];
            CSL2.debug("bibsorttok: " + tok.name);
          }
        }
        ret = CSL2.getBibliographyEntries.call(this, bibsection);
        entry_ids = ret[0];
        entry_strings = ret[1];
        var done = ret[2];
        params = {
          "maxoffset": 0,
          "entryspacing": this.bibliography.opt["entry-spacing"],
          "linespacing": this.bibliography.opt["line-spacing"],
          "second-field-align": false,
          "entry_ids": entry_ids,
          "bibliography_errors": this.tmp.bibliography_errors.slice(),
          "done": done
        };
        if (this.bibliography.opt["second-field-align"]) {
          params["second-field-align"] = this.bibliography.opt["second-field-align"];
        }
        maxoffset = 0;
        len = this.registry.reflist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.registry.reflist[pos];
          if (item.offset > params.maxoffset) {
            params.maxoffset = item.offset;
          }
        }
        if (this.bibliography.opt.hangingindent) {
          params.hangingindent = this.bibliography.opt.hangingindent;
        }
        params.bibstart = this.fun.decorate.bibstart;
        params.bibend = this.fun.decorate.bibend;
        this.opt.citation_number_slug = false;
        return [params, entry_strings];
      };
      CSL2.getBibliographyEntries = function(bibsection) {
        var ret, input, include, anymatch, allmatch, bib_entry, res, item, spec, lllen, pppos, topblobs, entry_item_ids, debug, i, ilen, siblings, skips, sortedItems, eyetem, entry_item_data, j, jlen;
        ret = [];
        entry_item_data = [];
        this.tmp.area = "bibliography";
        this.tmp.root = "bibliography";
        this.tmp.last_rendered_name = false;
        this.tmp.bibliography_errors = [];
        this.tmp.bibliography_pos = 0;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          input = this.registry.getSortedIds();
        } else {
          input = this.refetchItems(this.registry.getSortedIds());
        }
        this.tmp.disambig_override = true;
        function eval_string(a, b) {
          if (a === b) {
            return true;
          }
          return false;
        }
        function eval_list(a, lst) {
          lllen = lst.length;
          for (pppos = 0; pppos < lllen; pppos += 1) {
            if (eval_string(a, lst[pppos])) {
              return true;
            }
          }
          return false;
        }
        function eval_spec(a, b) {
          if (typeof a === "boolean" || !a) {
            if (a) {
              return !!b;
            } else {
              return !b;
            }
          } else {
            if (typeof b === "string") {
              return eval_string(a, b);
            } else if (!b) {
              return false;
            } else {
              return eval_list(a, b);
            }
          }
        }
        skips = {};
        var page_item_count;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          page_item_count = 0;
          if (bibsection.page_start !== true) {
            for (i = 0, ilen = input.length; i < ilen; i += 1) {
              skips[input[i]] = true;
              if (bibsection.page_start == input[i]) {
                break;
              }
            }
          }
        }
        var processed_item_ids = [];
        var consolidatedIDs = {};
        this.tmp.container_item_count = {};
        input = input.filter((o) => {
          var ret2 = o;
          if (o.legislation_id) {
            if (consolidatedIDs[o.legislation_id]) {
              ret2 = false;
            } else {
              consolidatedIDs[o.legislation_id] = true;
            }
          } else if (o.container_id) {
            if (!this.tmp.container_item_count[o.container_id]) {
              this.tmp.container_item_count[o.container_id] = 0;
            }
            this.tmp.container_item_count[o.container_id]++;
            if (this.bibliography.opt.consolidate_containers.indexOf(o.type) > -1) {
              if (consolidatedIDs[o.container_id]) {
                ret2 = false;
              } else {
                consolidatedIDs[o.container_id] = true;
              }
            }
          }
          return ret2;
        });
        this.tmp.container_item_pos = {};
        for (i = 0, ilen = input.length; i < ilen; i += 1) {
          if (bibsection && bibsection.page_start && bibsection.page_length) {
            if (skips[input[i]]) {
              continue;
            }
            item = this.refetchItem(input[i]);
            if (page_item_count === bibsection.page_length) {
              break;
            }
          } else {
            item = input[i];
            if (skips[item.id]) {
              continue;
            }
          }
          if (bibsection) {
            include = true;
            if (bibsection.include) {
              include = false;
              for (j = 0, jlen = bibsection.include.length; j < jlen; j += 1) {
                spec = bibsection.include[j];
                if (eval_spec(spec.value, item[spec.field])) {
                  include = true;
                  break;
                }
              }
            } else if (bibsection.exclude) {
              anymatch = false;
              for (j = 0, jlen = bibsection.exclude.length; j < jlen; j += 1) {
                spec = bibsection.exclude[j];
                if (eval_spec(spec.value, item[spec.field])) {
                  anymatch = true;
                  break;
                }
              }
              if (anymatch) {
                include = false;
              }
            } else if (bibsection.select) {
              include = false;
              allmatch = true;
              for (j = 0, jlen = bibsection.select.length; j < jlen; j += 1) {
                spec = bibsection.select[j];
                if (!eval_spec(spec.value, item[spec.field])) {
                  allmatch = false;
                }
              }
              if (allmatch) {
                include = true;
              }
            }
            if (bibsection.quash) {
              allmatch = true;
              for (j = 0, jlen = bibsection.quash.length; j < jlen; j += 1) {
                spec = bibsection.quash[j];
                if (!eval_spec(spec.value, item[spec.field])) {
                  allmatch = false;
                }
              }
              if (allmatch) {
                include = false;
              }
            }
            if (!include) {
              continue;
            }
          }
          if (debug) {
            CSL2.debug("BIB: " + item.id);
          }
          if (item.container_id) {
            if (!this.tmp.container_item_pos[item.container_id]) {
              this.tmp.container_item_pos[item.container_id] = 0;
            }
            this.tmp.container_item_pos[item.container_id]++;
          }
          bib_entry = new CSL2.Token("group", CSL2.START);
          bib_entry.decorations = [["@bibliography", "entry"]].concat(this.bibliography.opt.layout_decorations);
          this.output.startTag("bib_entry", bib_entry);
          if (item.system_id && this.sys.embedBibliographyEntry) {
            this.output.current.value().item_id = item.system_id;
          } else {
            this.output.current.value().system_id = item.id;
          }
          entry_item_ids = [];
          if (this.registry.registry[item.id].master && !(bibsection && bibsection.page_start && bibsection.page_length)) {
            sortedItems = [[item, { id: item.id }]];
            siblings = this.registry.registry[item.id].siblings;
            for (var j = 0, jlen = siblings.length; j < jlen; j++) {
              sortedItems.push([this.refetchItem(siblings[j]), { id: siblings[j] }]);
            }
            this.parallel.StartCitation(sortedItems);
            if (this.registry.registry[item.id].parallel_delimiter_override) {
              this.output.queue[0].strings.delimiter = this.registry.registry[item.id].parallel_delimiter_override;
            } else {
              this.output.queue[0].strings.delimiter = ", ";
            }
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            for (j = 0, jlen = sortedItems.length; j < jlen; j += 1) {
              if (j < sortedItems.length - 1) {
                this.tmp.parallel_and_not_last = true;
              } else {
                delete this.tmp.parallel_and_not_last;
              }
              entry_item_ids.push("" + CSL2.getCite.call(this, sortedItems[j][0], sortedItems[j][1]));
              this.tmp.cite_index++;
              skips[sortedItems[j][0].id] = true;
            }
          } else if (!this.registry.registry[item.id].siblings) {
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            entry_item_ids.push("" + CSL2.getCite.call(this, item));
            if (bibsection && bibsection.page_start && bibsection.page_length) {
              page_item_count += 1;
            }
          }
          entry_item_data.push("");
          this.tmp.bibliography_pos += 1;
          processed_item_ids.push(entry_item_ids);
          this.output.endTag("bib_entry");
          if (this.output.queue[0].blobs.length && this.output.queue[0].blobs[0].blobs.length) {
            if (!this.output.queue[0].blobs[0].blobs[0].strings) {
              topblobs = this.output.queue[0].blobs;
            } else {
              topblobs = this.output.queue[0].blobs[0].blobs;
            }
            topblobs[0].strings.prefix = this.bibliography.opt.layout_prefix + topblobs[0].strings.prefix;
          }
          for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[j]);
          }
          for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j], true);
            this.output.adjust.fix(this.output.queue[j]);
          }
          res = this.output.string(this, this.output.queue)[0];
          if (!res && this.opt.update_mode === CSL2.NUMERIC) {
            var err = ret.length + 1 + ". [CSL STYLE ERROR: reference with no printed form.]";
            res = CSL2.Output.Formats[this.opt.mode]["@bibliography/entry"](this, err);
          }
          if (res) {
            ret.push(res);
          }
        }
        var done = false;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          var last_expected_id = input.slice(-1)[0];
          var last_seen_id = processed_item_ids.slice(-1)[0];
          if (!last_expected_id || !last_seen_id || last_expected_id == last_seen_id) {
            done = true;
          }
        }
        this.tmp.disambig_override = false;
        return [processed_item_ids, ret, done];
      };
      CSL2.Engine.prototype.setCitationId = function(citation, force) {
        var ret, id, direction;
        ret = false;
        if (!citation.citationID || force) {
          id = Math.floor(Math.random() * 1e14);
          while (true) {
            direction = 0;
            if (!this.registry.citationreg.citationById[id]) {
              citation.citationID = "a" + id.toString(32);
              break;
            } else if (!direction && id < 5e13) {
              direction = 1;
            } else {
              direction = -1;
            }
            if (direction === 1) {
              id += 1;
            } else {
              id += -1;
            }
          }
          ret = "" + id;
        }
        this.registry.citationreg.citationById[citation.citationID] = citation;
        return ret;
      };
      CSL2.Engine.prototype.rebuildProcessorState = function(citations, mode, uncitedItemIDs) {
        if (!citations) {
          citations = [];
        }
        if (!mode) {
          mode = "html";
        }
        var doneIDs = {};
        var itemIDs = [];
        for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
          for (var j = 0, jlen = citations[i].citationItems.length; j < jlen; j += 1) {
            var itemID = "" + citations[i].citationItems[j].id;
            if (!doneIDs[itemID]) {
              itemIDs.push(itemID);
            }
            doneIDs[itemID] = true;
          }
        }
        this.updateItems(itemIDs);
        var pre = [];
        var post = [];
        var ret = [];
        var oldMode = this.opt.mode;
        this.setOutputFormat(mode);
        for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
          var res = this.processCitationCluster(citations[i], pre, post, CSL2.ASSUME_ALL_ITEMS_REGISTERED);
          pre.push([citations[i].citationID, citations[i].properties.noteIndex]);
          for (var j = 0, jlen = res[1].length; j < jlen; j += 1) {
            var index = res[1][j][0];
            ret[index] = [
              pre[index][0],
              pre[index][1],
              res[1][j][1]
            ];
          }
        }
        this.updateUncitedItems(uncitedItemIDs);
        this.setOutputFormat(oldMode);
        return ret;
      };
      CSL2.Engine.prototype.restoreProcessorState = function(citations) {
        var i, ilen, j, jlen, item, Item, newitem, citationList, itemList, sortedItems;
        citationList = [];
        itemList = [];
        if (!citations) {
          citations = [];
        }
        var indexNumbers = [];
        var citationIds = {};
        for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          if (citationIds[citations[i].citationID]) {
            this.setCitationId(citations[i], true);
          }
          citationIds[citations[i].citationID] = true;
          indexNumbers.push(citations[i].properties.index);
        }
        var oldCitations = citations.slice();
        oldCitations.sort(function(a, b) {
          if (a.properties.index < b.properties.index) {
            return -1;
          } else if (a.properties.index > b.properties.index) {
            return 1;
          } else {
            return 0;
          }
        });
        for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          oldCitations[i].properties.index = i;
        }
        for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          sortedItems = [];
          for (j = 0, jlen = oldCitations[i].citationItems.length; j < jlen; j += 1) {
            item = oldCitations[i].citationItems[j];
            if (typeof item.sortkeys === "undefined") {
              item.sortkeys = [];
            }
            Item = this.retrieveItem("" + item.id);
            newitem = [Item, item];
            sortedItems.push(newitem);
            oldCitations[i].citationItems[j].item = Item;
            itemList.push("" + item.id);
          }
          if (!oldCitations[i].properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
          oldCitations[i].sortedItems = sortedItems;
          this.registry.citationreg.citationById[oldCitations[i].citationID] = oldCitations[i];
        }
        this.updateItems(itemList);
        for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          citationList.push(["" + citations[i].citationID, citations[i].properties.noteIndex]);
        }
        var ret = [];
        if (citations && citations.length) {
          ret = this.processCitationCluster(citations[0], [], citationList.slice(1));
        } else {
          this.registry = new CSL2.Registry(this);
          this.tmp = new CSL2.Engine.Tmp();
          this.disambiguate = new CSL2.Disambiguation(this);
        }
        return ret;
      };
      CSL2.Engine.prototype.updateItems = function(idList, nosort, rerun_ambigs, implicitUpdate) {
        var debug = false;
        var oldArea = this.tmp.area;
        var oldRoot = this.tmp.root;
        var oldExtension = this.tmp.extension;
        if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        this.tmp.extension = "";
        if (!implicitUpdate) {
          this.tmp.loadedItemIDs = {};
        }
        if (debug) {
          CSL2.debug("--> init <--");
        }
        this.registry.init(idList);
        if (rerun_ambigs) {
          for (var ambig in this.registry.ambigcites) {
            this.registry.ambigsTouched[ambig] = true;
          }
        }
        this.registry.dodeletes(this.registry.myhash);
        this.registry.doinserts(this.registry.mylist);
        this.registry.dorefreshes();
        this.registry.rebuildlist(nosort);
        this.registry.setsortkeys();
        this.registry.setdisambigs();
        this.registry.sorttokens(nosort);
        this.registry.renumber();
        this.tmp.extension = oldExtension;
        this.tmp.area = oldArea;
        this.tmp.root = oldRoot;
        return this.registry.getSortedIds();
      };
      CSL2.Engine.prototype.updateUncitedItems = function(idList, nosort) {
        var idHash;
        var oldArea = this.tmp.area;
        var oldRoot = this.tmp.root;
        var oldExtension = this.tmp.extension;
        if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        this.tmp.extension = "";
        this.tmp.loadedItemIDs = {};
        if (!idList) {
          idList = [];
        }
        if (typeof idList == "object") {
          if (typeof idList.length == "undefined") {
            idHash = idList;
            idList = [];
            for (var key in idHash) {
              idList.push(key);
            }
          } else if (typeof idList.length == "number") {
            idHash = {};
            for (var i = 0, ilen = idList.length; i < ilen; i += 1) {
              idHash[idList[i]] = true;
            }
          }
        }
        this.registry.init(idList, true);
        this.registry.dopurge(idHash);
        this.registry.doinserts(this.registry.mylist);
        this.registry.dorefreshes();
        this.registry.rebuildlist(nosort);
        this.registry.setsortkeys();
        this.registry.setdisambigs();
        this.registry.sorttokens(nosort);
        this.registry.renumber();
        this.tmp.extension = oldExtension;
        this.tmp.area = oldArea;
        this.tmp.root = oldRoot;
        return this.registry.getSortedIds();
      };
      CSL2.localeResolve = function(langstr, defaultLocale) {
        var ret, langlst;
        if (!defaultLocale) {
          defaultLocale = "en-US";
        }
        if (!langstr) {
          langstr = defaultLocale;
        }
        ret = {};
        langlst = langstr.split(/[\-_]/);
        ret.base = CSL2.LANG_BASES[langlst[0]];
        if (typeof ret.base === "undefined") {
          return { base: defaultLocale, best: langstr, bare: langlst[0] };
        }
        if (langlst.length === 1) {
          ret.generic = true;
        }
        if (langlst.length === 1 || langlst[1] === "x") {
          ret.best = ret.base.replace("_", "-");
        } else {
          ret.best = langlst.slice(0, 2).join("-");
        }
        ret.base = ret.base.replace("_", "-");
        ret.bare = langlst[0];
        return ret;
      };
      CSL2.Engine.prototype.localeConfigure = function(langspec, beShy) {
        var localexml;
        if (beShy && this.locale[langspec.best]) {
          return;
        }
        if (langspec.best === "en-US") {
          localexml = CSL2.setupXml(this.sys.retrieveLocale("en-US"));
          this.localeSet(localexml, "en-US", langspec.best);
        } else if (langspec.best !== "en-US") {
          if (langspec.base !== langspec.best) {
            localexml = CSL2.setupXml(this.sys.retrieveLocale(langspec.base));
            this.localeSet(localexml, langspec.base, langspec.best);
          }
          localexml = CSL2.setupXml(this.sys.retrieveLocale(langspec.best));
          this.localeSet(localexml, langspec.best, langspec.best);
        }
        this.localeSet(this.cslXml, "", langspec.best);
        this.localeSet(this.cslXml, langspec.bare, langspec.best);
        if (langspec.base !== langspec.best) {
          this.localeSet(this.cslXml, langspec.base, langspec.best);
        }
        this.localeSet(this.cslXml, langspec.best, langspec.best);
        if (typeof this.locale[langspec.best].terms["page-range-delimiter"] === "undefined") {
          if (["fr", "pt"].indexOf(langspec.best.slice(0, 2).toLowerCase()) > -1) {
            this.locale[langspec.best].terms["page-range-delimiter"] = "-";
          } else {
            this.locale[langspec.best].terms["page-range-delimiter"] = "\u2013";
          }
        }
        if (typeof this.locale[langspec.best].terms["year-range-delimiter"] === "undefined") {
          this.locale[langspec.best].terms["year-range-delimiter"] = "\u2013";
        }
        if (typeof this.locale[langspec.best].terms["citation-range-delimiter"] === "undefined") {
          this.locale[langspec.best].terms["citation-range-delimiter"] = "\u2013";
        }
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          var localeLists = ["default-locale", "locale-sort", "locale-translit", "locale-translat"];
          for (var i = 0, ilen = localeLists.length; i < ilen; i += 1) {
            for (var j = 0, jlen = this.opt[localeLists[i]].length; j < jlen; j += 1) {
              this.opt[localeLists[i]][j] = this.opt[localeLists[i]][j].toLowerCase();
            }
          }
          this.opt.lang = this.opt.lang.toLowerCase();
        }
      };
      CSL2.Engine.prototype.localeSet = function(myxml, lang_in, lang_out) {
        var blob, locale, nodes, attributes, pos, term, form, termname, styleopts, date2, attrname, len, genderform, target, i, ilen;
        lang_in = lang_in.replace("_", "-");
        lang_out = lang_out.replace("_", "-");
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          lang_in = lang_in.toLowerCase();
          lang_out = lang_out.toLowerCase();
        }
        if (!this.locale[lang_out]) {
          this.locale[lang_out] = {};
          this.locale[lang_out].terms = {};
          this.locale[lang_out].opts = {};
          this.locale[lang_out].opts["skip-words"] = CSL2.SKIP_WORDS;
          if (!this.locale[lang_out].opts["leading-noise-words"]) {
            this.locale[lang_out].opts["leading-noise-words"] = [];
          }
          this.locale[lang_out].dates = {};
          this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
          this.locale[lang_out]["noun-genders"] = {};
        }
        locale = myxml.makeXml();
        if (myxml.nodeNameIs(myxml.dataObj, "locale")) {
          locale = myxml.dataObj;
        } else {
          nodes = myxml.getNodesByName(myxml.dataObj, "locale");
          var foundLocale = false;
          for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            blob = nodes[pos];
            if (!foundLocale && myxml.getAttributeValue(blob, "lang", "xml") === lang_in) {
              locale = blob;
              foundLocale = true;
            } else {
              var lang = myxml.getAttributeValue(blob, "lang", "xml");
              var style_options = myxml.getNodesByName(blob, "style-options");
              if (lang && style_options && style_options.length) {
                var jurispref = myxml.getAttributeValue(style_options[0], "jurisdiction-preference");
                if (jurispref) {
                  if (!this.locale[lang]) {
                    this.locale[lang] = {
                      opts: {}
                    };
                  }
                  this.locale[lang].opts["jurisdiction-preference"] = jurispref.split(/\s+/);
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "type");
        for (i = 0, ilen = myxml.numberofnodes(nodes); i < ilen; i += 1) {
          var typenode = nodes[i];
          var type2 = myxml.getAttributeValue(typenode, "name");
          var gender = myxml.getAttributeValue(typenode, "gender");
          this.opt.gender[type2] = gender;
        }
        var hasCslOrdinals101 = myxml.getNodesByName(locale, "term", "ordinal").length;
        if (hasCslOrdinals101) {
          for (var key in this.locale[lang_out].ord.keys) {
            delete this.locale[lang_out].terms[key];
          }
          this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
        }
        nodes = myxml.getNodesByName(locale, "term");
        var ordinals101 = { "last-digit": {}, "last-two-digits": {}, "whole-number": {} };
        var ordinals101_toggle = false;
        var genderized_terms = {};
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          term = nodes[pos];
          termname = myxml.getAttributeValue(term, "name");
          if (termname === "sub verbo") {
            termname = "sub-verbo";
          }
          if (termname.slice(0, 7) === "ordinal") {
            if (termname === "ordinal") {
              ordinals101_toggle = true;
            } else {
              var match = myxml.getAttributeValue(term, "match");
              var termstub = termname.slice(8);
              var genderform = myxml.getAttributeValue(term, "gender-form");
              if (!genderform) {
                genderform = "neuter";
              }
              if (!match) {
                match = "last-two-digits";
                if (termstub.slice(0, 1) === "0") {
                  match = "last-digit";
                }
              }
              if (termstub.slice(0, 1) === "0") {
                termstub = termstub.slice(1);
              }
              if (!ordinals101[match][termstub]) {
                ordinals101[match][termstub] = {};
              }
              ordinals101[match][termstub][genderform] = termname;
            }
            this.locale[lang_out].ord.keys[termname] = true;
          }
          if (typeof this.locale[lang_out].terms[termname] === "undefined") {
            this.locale[lang_out].terms[termname] = {};
          }
          form = "long";
          genderform = false;
          if (myxml.getAttributeValue(term, "form")) {
            form = myxml.getAttributeValue(term, "form");
          }
          if (myxml.getAttributeValue(term, "gender-form")) {
            genderform = myxml.getAttributeValue(term, "gender-form");
          }
          if (myxml.getAttributeValue(term, "gender")) {
            this.locale[lang_out]["noun-genders"][termname] = myxml.getAttributeValue(term, "gender");
          }
          if (genderform) {
            this.locale[lang_out].terms[termname][genderform] = {};
            this.locale[lang_out].terms[termname][genderform][form] = [];
            target = this.locale[lang_out].terms[termname][genderform];
            genderized_terms[termname] = true;
          } else {
            this.locale[lang_out].terms[termname][form] = [];
            target = this.locale[lang_out].terms[termname];
          }
          if (myxml.numberofnodes(myxml.getNodesByName(term, "multiple"))) {
            target[form][0] = myxml.getNodeValue(term, "single");
            if (target[form][0].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
            target[form][1] = myxml.getNodeValue(term, "multiple");
            if (target[form][1].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
          } else {
            target[form] = myxml.getNodeValue(term);
            if (target[form].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
          }
        }
        if (!this.locale[lang_out].terms.supplement) {
          this.locale[lang_out].terms.supplement = {};
        }
        if (!this.locale[lang_out].terms.supplement["long"]) {
          this.locale[lang_out].terms.supplement["long"] = ["supplement", "supplements"];
        }
        if (ordinals101_toggle) {
          for (var ikey in genderized_terms) {
            var gender_segments = {};
            var form_segments = 0;
            for (var jkey in this.locale[lang_out].terms[ikey]) {
              if (["masculine", "feminine"].indexOf(jkey) > -1) {
                gender_segments[jkey] = this.locale[lang_out].terms[ikey][jkey];
              } else {
                form_segments += 1;
              }
            }
            if (!form_segments) {
              if (gender_segments.feminine) {
                for (var jkey in gender_segments.feminine) {
                  this.locale[lang_out].terms[ikey][jkey] = gender_segments.feminine[jkey];
                }
              } else if (gender_segments.masculine) {
                for (var jkey in gender_segments.masculine) {
                  this.locale[lang_out].terms[ikey][jkey] = gender_segments.masculine[jkey];
                }
              }
            }
          }
          this.locale[lang_out].ord["1.0.1"] = ordinals101;
        }
        for (termname in this.locale[lang_out].terms) {
          for (i = 0, ilen = 2; i < ilen; i += 1) {
            genderform = CSL2.GENDERS[i];
            if (this.locale[lang_out].terms[termname][genderform]) {
              for (form in this.locale[lang_out].terms[termname]) {
                if (!this.locale[lang_out].terms[termname][genderform][form]) {
                  this.locale[lang_out].terms[termname][genderform][form] = this.locale[lang_out].terms[termname][form];
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "style-options");
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
            styleopts = nodes[pos];
            attributes = myxml.attributes(styleopts);
            for (attrname in attributes) {
              if (attributes.hasOwnProperty(attrname)) {
                if (attrname === "@punctuation-in-quote" || attrname === "@limit-day-ordinals-to-day-1") {
                  if (attributes[attrname] === "true") {
                    this.locale[lang_out].opts[attrname.slice(1)] = true;
                  } else {
                    this.locale[lang_out].opts[attrname.slice(1)] = false;
                  }
                } else if (attrname === "@jurisdiction-preference") {
                  var jurisdiction_preference = attributes[attrname].split(/\s+/);
                  this.locale[lang_out].opts[attrname.slice(1)] = jurisdiction_preference;
                } else if (attrname === "@skip-words") {
                  var skip_words = attributes[attrname].split(/\s*,\s*/);
                  this.locale[lang_out].opts[attrname.slice(1)] = skip_words;
                } else if (attrname === "@leading-noise-words") {
                  var val = attributes[attrname].split(/\s*,\s*/);
                  this.locale[lang_out].opts["leading-noise-words"] = val;
                } else if (attrname === "@name-as-sort-order") {
                  this.locale[lang_out].opts["name-as-sort-order"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-as-sort-order"][lst[i]] = true;
                  }
                } else if (attrname === "@name-as-reverse-order") {
                  this.locale[lang_out].opts["name-as-reverse-order"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-as-reverse-order"][lst[i]] = true;
                  }
                } else if (attrname === "@name-never-short") {
                  this.locale[lang_out].opts["name-never-short"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-never-short"][lst[i]] = true;
                  }
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "date");
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
            var date2 = nodes[pos];
            this.locale[lang_out].dates[myxml.getAttributeValue(date2, "form")] = date2;
          }
        }
        CSL2.SET_COURT_CLASSES(this, lang_out, myxml, locale);
      };
      CSL2.getLocaleNames = function(myxml, preferredLocale) {
        var stylexml = CSL2.setupXml(myxml);
        function extendLocaleList(localeList, locale) {
          var forms = ["base", "best"];
          if (locale) {
            var normalizedLocale = CSL2.localeResolve(locale);
            for (var i2 = 0, ilen2 = forms.length; i2 < ilen2; i2++) {
              if (normalizedLocale[forms[i2]] && localeList.indexOf(normalizedLocale[forms[i2]]) === -1) {
                localeList.push(normalizedLocale[forms[i2]]);
              }
            }
          }
        }
        var localeIDs = ["en-US"];
        function sniffLocaleOnOneNodeName(nodeName) {
          var nodes = stylexml.getNodesByName(stylexml.dataObj, nodeName);
          for (var i2 = 0, ilen2 = nodes.length; i2 < ilen2; i2++) {
            var nodeLocales = stylexml.getAttributeValue(nodes[i2], "locale");
            if (nodeLocales) {
              nodeLocales = nodeLocales.split(/ +/);
              for (var j = 0, jlen = nodeLocales.length; j < jlen; j++) {
                this.extendLocaleList(localeIDs, nodeLocales[j]);
              }
            }
          }
        }
        extendLocaleList(localeIDs, preferredLocale);
        var styleNode = stylexml.getNodesByName(stylexml.dataObj, "style")[0];
        var defaultLocale = stylexml.getAttributeValue(styleNode, "default-locale");
        extendLocaleList(localeIDs, defaultLocale);
        var nodeNames = ["layout", "if", "else-if", "condition"];
        for (var i = 0, ilen = nodeNames.length; i < ilen; i++) {
          sniffLocaleOnOneNodeName(stylexml, localeIDs, nodeNames[i]);
        }
        return localeIDs;
      };
      CSL2.Node = {};
      CSL2.Node.bibliography = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            state.build.area = "bibliography";
            state.build.root = "bibliography";
            state.build.extension = "";
            var func = function(state2) {
              state2.tmp.area = "bibliography";
              state2.tmp.root = "bibliography";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node.choose = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL2.START) {
            func = function(state2) {
              state2.tmp.jump.push(void 0, CSL2.LITERAL);
            };
          }
          if (this.tokentype === CSL2.END) {
            func = function(state2) {
              state2.tmp.jump.pop();
            };
          }
          this.execs.push(func);
          target.push(this);
        },
        configure: function(state, pos) {
          if (this.tokentype === CSL2.END) {
            state.configure.fail.push(pos);
            state.configure.succeed.push(pos);
          } else {
            state.configure.fail.pop();
            state.configure.succeed.pop();
          }
        }
      };
      CSL2.Node.citation = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            state.build.area = "citation";
            state.build.root = "citation";
            state.build.extension = "";
            var func = function(state2) {
              state2.tmp.area = "citation";
              state2.tmp.root = "citation";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            state.opt.grouped_sort = state.opt.xclass === "in-text" && (state.citation.opt.collapse && state.citation.opt.collapse.length) || state.citation.opt.cite_group_delimiter && state.citation.opt.cite_group_delimiter.length && state.opt.update_mode !== CSL2.POSITION && state.opt.update_mode !== CSL2.NUMERIC;
            if (state.opt.grouped_sort && state.citation_sort.opt.sort_directions.length) {
              var firstkey = state.citation_sort.opt.sort_directions[0].slice();
              state.citation_sort.opt.sort_directions = [firstkey].concat(state.citation_sort.opt.sort_directions);
            }
            state.citation.srt = new CSL2.Registry.Comparifier(state, "citation_sort");
          }
          target.push(this);
        }
      };
      CSL2.Node["#comment"] = {
        build: function() {
        }
      };
      CSL2.Node.date = {
        build: function(state, target) {
          var func, date_obj, len, pos, part, dpx, parts, mypos, start, end;
          if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
            state.dateput.string(state, state.dateput.queue);
            state.tmp.date_token = CSL2.Util.cloneToken(this);
            state.tmp.date_token.strings.prefix = "";
            state.tmp.date_token.strings.suffix = "";
            state.dateput.openLevel(this);
            state.build.date_parts = [];
            state.build.date_variables = this.variables;
            if (!state.build.extension) {
              CSL2.Util.substituteStart.call(this, state, target);
            }
            if (state.build.extension) {
              func = CSL2.dateMacroAsSortKey;
            } else {
              func = function(state2, Item, item) {
                var dp;
                state2.tmp.element_rendered_ok = false;
                state2.tmp.donesies = [];
                state2.tmp.dateparts = [];
                dp = [];
                if (this.variables.length && !(state2.tmp.just_looking && this.variables[0] === "accessed")) {
                  date_obj = Item[this.variables[0]];
                  if (typeof date_obj === "undefined") {
                    date_obj = { "date-parts": [[0]] };
                    if (state2.opt.development_extensions.locator_date_and_revision) {
                      if (item && this.variables[0] === "locator-date" && item["locator-date"]) {
                        date_obj = item["locator-date"];
                      }
                    }
                  }
                  state2.tmp.date_object = date_obj;
                  len = this.dateparts.length;
                  for (pos = 0; pos < len; pos += 1) {
                    part = this.dateparts[pos];
                    if (typeof state2.tmp.date_object[part + "_end"] !== "undefined") {
                      dp.push(part);
                    } else if (part === "month" && typeof state2.tmp.date_object.season_end !== "undefined") {
                      dp.push(part);
                    }
                  }
                  dpx = [];
                  parts = ["year", "month", "day"];
                  len = parts.length;
                  for (pos = 0; pos < len; pos += 1) {
                    if (dp.indexOf(parts[pos]) > -1) {
                      dpx.push(parts[pos]);
                    }
                  }
                  dp = dpx.slice();
                  mypos = 2;
                  len = dp.length;
                  for (pos = 0; pos < len; pos += 1) {
                    part = dp[pos];
                    start = state2.tmp.date_object[part];
                    end = state2.tmp.date_object[part + "_end"];
                    if (start !== end) {
                      mypos = pos;
                      break;
                    }
                  }
                  state2.tmp.date_collapse_at = dp.slice(mypos);
                } else {
                  state2.tmp.date_object = false;
                }
              };
            }
            this.execs.push(func);
            func = function(state2, Item) {
              if (!Item[this.variables[0]]) {
                return;
              }
              state2.output.startTag("date", this);
              if (this.variables[0] === "issued" && (Item.type === "legal_case" || Item.type === "legislation") && state2.opt.disable_duplicate_year_suppression.indexOf(Item.country) === -1 && !state2.tmp.extension && "" + Item["collection-number"] === "" + state2.tmp.date_object.year && this.dateparts.length === 1 && this.dateparts[0] === "year") {
                for (var key in state2.tmp.date_object) {
                  if (state2.tmp.date_object.hasOwnProperty(key)) {
                    if (key.slice(0, 4) === "year") {
                      state2.tmp.issued_date = {};
                      var lst = state2.output.current.mystack.slice(-2)[0].blobs;
                      state2.tmp.issued_date.list = lst;
                      state2.tmp.issued_date.pos = lst.length - 1;
                    }
                  }
                }
              }
            };
            this.execs.push(func);
          }
          if (!state.build.extension && (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON)) {
            func = function(state2, Item) {
              if (!Item[this.variables[0]]) {
                return;
              }
              state2.output.endTag();
            };
            this.execs.push(func);
          }
          target.push(this);
          if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
            if (!state.build.extension) {
              CSL2.Util.substituteEnd.call(this, state, target);
            }
          }
        }
      };
      CSL2.Node["date-part"] = {
        build: function(state, target) {
          var func, pos, len, first_date, value, value_end, real, have_collapsed, invoked, precondition, known_year, bc, ad, bc_end, ad_end, ready, curr, dcurr, number2, num, formatter, item;
          if (!this.strings.form) {
            this.strings.form = "long";
          }
          state.build.date_parts.push(this.strings.name);
          var date_variable = state.build.date_variables[0];
          function formatAndStrip(myform, gender, val) {
            if (!val) {
              return val;
            }
            val = "" + CSL2.Util.Dates[this.strings.name][myform](state, val, gender, this.default_locale);
            if (this.strings.name === "month") {
              if (state.tmp.strip_periods) {
                val = val.replace(/\./g, "");
              } else {
                for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                  if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                    val = val.replace(/\./g, "");
                    break;
                  }
                }
              }
            }
            return val;
          }
          func = function(state2, Item) {
            if (!state2.tmp.date_object) {
              return;
            } else {
              state2.tmp.probably_rendered_something = true;
            }
            var last_string_output = "";
            first_date = true;
            value = "";
            value_end = "";
            state2.tmp.donesies.push(this.strings.name);
            if (state2.tmp.date_object.literal && this.strings.name === "year") {
              last_string_output = state2.tmp.date_object.literal;
              state2.output.append(state2.tmp.date_object.literal, this);
            }
            if (state2.tmp.date_object) {
              value = state2.tmp.date_object[this.strings.name];
              value_end = state2.tmp.date_object[this.strings.name + "_end"];
            }
            if (this.strings.name === "year" && value === 0 && !state2.tmp.suppress_decorations) {
              value = false;
            }
            real = !state2.tmp.suppress_decorations;
            have_collapsed = state2.tmp.have_collapsed;
            invoked = state2[state2.tmp.area].opt.collapse === "year-suffix" || state2[state2.tmp.area].opt.collapse === "year-suffix-ranged";
            precondition = state2.opt["disambiguate-add-year-suffix"];
            if (real && precondition && invoked) {
              state2.tmp.years_used.push(value);
              known_year = state2.tmp.last_years_used.length >= state2.tmp.years_used.length;
              if (known_year && have_collapsed) {
                if (state2.tmp.last_years_used[state2.tmp.years_used.length - 1] === value) {
                  value = false;
                }
              }
            }
            if (typeof value !== "undefined") {
              bc = false;
              ad = false;
              bc_end = false;
              ad_end = false;
              if (this.strings.name === "year") {
                if (parseInt(value, 10) < 500 && parseInt(value, 10) > 0) {
                  ad = state2.getTerm("ad");
                }
                if (parseInt(value, 10) < 0) {
                  bc = state2.getTerm("bc");
                  value = parseInt(value, 10) * -1;
                }
                if (value_end) {
                  if (parseInt(value_end, 10) < 500 && parseInt(value_end, 10) > 0) {
                    ad_end = state2.getTerm("ad");
                  }
                  if (parseInt(value_end, 10) < 0) {
                    bc_end = state2.getTerm("bc");
                    value_end = parseInt(value_end, 10) * -1;
                  }
                }
              }
              var monthnameid = "" + state2.tmp.date_object.month;
              while (monthnameid.length < 2) {
                monthnameid = "0" + monthnameid;
              }
              monthnameid = "month-" + monthnameid;
              var gender = state2.locale[state2.opt.lang]["noun-genders"][monthnameid];
              if (this.strings.form) {
                var myform = this.strings.form;
                var myform_end = this.strings.form;
                if (this.strings.name === "day") {
                  if (myform === "ordinal" && state2.locale[state2.opt.lang].opts["limit-day-ordinals-to-day-1"]) {
                    if (value != 1) {
                      myform = "numeric";
                    }
                    if (value_end != 1) {
                      myform_end = "numeric";
                    }
                  }
                }
                value = formatAndStrip.call(this, myform, gender, value);
                value_end = formatAndStrip.call(this, myform_end, gender, value_end);
              }
              state2.output.openLevel("empty");
              if (state2.tmp.date_collapse_at.length) {
                ready = true;
                len = state2.tmp.date_collapse_at.length;
                for (pos = 0; pos < len; pos += 1) {
                  item = state2.tmp.date_collapse_at[pos];
                  if (state2.tmp.donesies.indexOf(item) === -1) {
                    ready = false;
                    break;
                  }
                }
                if (ready) {
                  if ("" + value_end !== "0") {
                    if (state2.dateput.queue.length === 0) {
                      first_date = true;
                    }
                    if (state2.opt["year-range-format"] && state2.opt["year-range-format"] !== "expanded" && !state2.tmp.date_object.day && !state2.tmp.date_object.month && !state2.tmp.date_object.season && this.strings.name === "year" && value && value_end) {
                      value_end = state2.fun.year_mangler(value + "-" + value_end, true);
                      var range_delimiter = state2.getTerm("year-range-delimiter");
                      value_end = value_end.slice(value_end.indexOf(range_delimiter) + 1);
                    }
                    last_string_output = value_end;
                    state2.dateput.append(value_end, this);
                    if (first_date) {
                      state2.dateput.current.value().blobs[0].strings.prefix = "";
                    }
                  }
                  last_string_output = value;
                  state2.output.append(value, this);
                  curr = state2.output.current.value();
                  curr.blobs[curr.blobs.length - 1].strings.suffix = "";
                  if (this.strings["range-delimiter"]) {
                    state2.output.append(this.strings["range-delimiter"]);
                  } else {
                    state2.output.append(state2.getTerm("year-range-delimiter"), "empty");
                  }
                  state2.dateput.closeLevel();
                  dcurr = state2.dateput.current.value();
                  curr.blobs = curr.blobs.concat(dcurr);
                  state2.dateput.string(state2, state2.dateput.queue);
                  state2.dateput.openLevel(state2.tmp.date_token);
                  state2.tmp.date_collapse_at = [];
                } else {
                  last_string_output = value;
                  state2.output.append(value, this);
                  if (state2.tmp.date_collapse_at.indexOf(this.strings.name) > -1) {
                    if ("" + value_end !== "0") {
                      if (state2.dateput.queue.length === 0) {
                        first_date = true;
                      }
                      state2.dateput.openLevel("empty");
                      last_string_output = value_end;
                      state2.dateput.append(value_end, this);
                      if (first_date) {
                        state2.dateput.current.value().blobs[0].strings.prefix = "";
                      }
                      if (bc) {
                        last_string_output = bc;
                        state2.dateput.append(bc);
                      }
                      if (ad) {
                        last_string_output = ad;
                        state2.dateput.append(ad);
                      }
                      state2.dateput.closeLevel();
                    }
                  }
                }
              } else {
                last_string_output = value;
                state2.output.append(value, this);
              }
              if (bc) {
                last_string_output = bc;
                state2.output.append(bc);
              }
              if (ad) {
                last_string_output = ad;
                state2.output.append(ad);
              }
              state2.output.closeLevel();
            } else if (this.strings.name === "month") {
              if (state2.tmp.date_object.season) {
                value = "" + state2.tmp.date_object.season;
                if (value && value.match(/^[1-4]$/)) {
                  state2.tmp.group_context.tip.variable_success = true;
                  last_string_output = "winter";
                  state2.output.append(state2.getTerm("season-0" + value), this);
                } else if (value) {
                  last_string_output = value;
                  state2.output.append(value, this);
                }
              }
            }
            state2.tmp.value = [];
            if (Item[date_variable] && (value || state2.tmp.have_collapsed) && !state2.opt.has_year_suffix && this.strings.name === "year" && !state2.tmp.just_looking) {
              if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.has_done_year_suffix) {
                state2.tmp.has_done_year_suffix = true;
                last_string_output = "x";
                num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                number2 = new CSL2.NumericBlob(state2, false, num, this, Item.id);
                this.successor_prefix = state2[state2.build.area].opt.layout_delimiter;
                this.splice_prefix = state2[state2.build.area].opt.layout_delimiter;
                formatter = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
                number2.setFormatter(formatter);
                if (state2[state2.tmp.area].opt.collapse === "year-suffix-ranged") {
                  number2.range_prefix = state2.getTerm("citation-range-delimiter");
                }
                if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                  number2.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
                } else if (state2[state2.tmp.area].opt["year-suffix-delimiter"]) {
                  number2.successor_prefix = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                } else {
                  number2.successor_prefix = state2[state2.tmp.area].opt.layout_delimiter;
                }
                number2.UGLY_DELIMITER_SUPPRESS_HACK = true;
                state2.output.append(number2, "literal");
              }
            }
            if (last_string_output && !state2.tmp.group_context.tip.condition) {
              state2.tmp.just_did_number = last_string_output.match(/[0-9]$/);
              if (state2.output.current.tip.strings.suffix) {
                state2.tmp.just_did_number = false;
              }
            }
          };
          this.execs.push(func);
          target.push(this);
        }
      };
      CSL2.Node["else-if"] = {
        build: function(state, target) {
          CSL2.Conditions.TopNode.call(this, state, target);
          target.push(this);
        },
        configure: function(state, pos) {
          CSL2.Conditions.Configure.call(this, state, pos);
        }
      };
      CSL2.Node["else"] = {
        build: function(state, target) {
          target.push(this);
        },
        configure: function(state, pos) {
          if (this.tokentype === CSL2.START) {
            state.configure.fail[state.configure.fail.length - 1] = pos;
          }
        }
      };
      CSL2.Node["et-al"] = {
        build: function(state, target) {
          if (state.build.area === "citation" || state.build.area === "bibliography") {
            var func = function(state2) {
              state2.tmp.etal_node = this;
              if (typeof this.strings.term === "string") {
                state2.tmp.etal_term = this.strings.term;
              }
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node.group = {
        build: function(state, target, realGroup) {
          var func, execs;
          this.realGroup = realGroup;
          if (this.tokentype === CSL2.START) {
            CSL2.Util.substituteStart.call(this, state, target);
            if (state.build.substitute_level.value()) {
              state.build.substitute_level.replace(state.build.substitute_level.value() + 1);
            }
            if (!this.juris) {
              target.push(this);
            }
            func = function(state2) {
              state2.output.startTag("group", this);
              if (this.strings.label_form_override) {
                if (!state2.tmp.group_context.tip.label_form) {
                  state2.tmp.group_context.tip.label_form = this.strings.label_form_override;
                }
              }
              if (this.strings.label_capitalize_if_first_override) {
                if (!state2.tmp.group_context.tip.label_capitalize_if_first) {
                  state2.tmp.group_context.tip.label_capitalize_if_first = this.strings.label_capitalize_if_first_override;
                }
              }
              if (this.realGroup) {
                if (state2.tmp.group_context.tip.condition) {
                  CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.prefix, null, this);
                }
                var condition = false;
                var force_suppress = false;
                if (state2.tmp.group_context.mystack.length) {
                  state2.output.current.value().parent = state2.tmp.group_context.tip.output_tip;
                }
                var label_form = state2.tmp.group_context.tip.label_form;
                if (!label_form) {
                  label_form = this.strings.label_form_override;
                }
                var label_capitalize_if_first = state2.tmp.group_context.tip.label_capitalize_if_first;
                if (!label_capitalize_if_first) {
                  label_capitalize_if_first = this.strings.label_capitalize_if_first;
                }
                if (state2.tmp.group_context.tip.condition) {
                  condition = state2.tmp.group_context.tip.condition;
                  force_suppress = state2.tmp.group_context.tip.force_suppress;
                } else if (this.strings.reject) {
                  condition = {
                    test: this.strings.reject,
                    not: true
                  };
                } else if (this.strings.require) {
                  condition = {
                    test: this.strings.require,
                    not: false
                  };
                }
                var context = {
                  old_term_predecessor: state2.tmp.term_predecessor,
                  term_intended: false,
                  variable_attempt: false,
                  variable_success: false,
                  variable_success_parent: state2.tmp.group_context.tip.variable_success,
                  output_tip: state2.output.current.tip,
                  label_form,
                  label_static: state2.tmp.group_context.tip.label_static,
                  label_capitalize_if_first,
                  parallel_delimiter_override: this.strings.set_parallel_delimiter_override,
                  parallel_delimiter_override_on_suppress: this.strings.set_parallel_delimiter_override_on_suppress,
                  condition,
                  force_suppress,
                  done_vars: state2.tmp.group_context.tip.done_vars.slice()
                };
                if (this.non_parallel) {
                  var non_parallel = state2.tmp.group_context.tip.non_parallel;
                  if (!non_parallel) {
                    non_parallel = {};
                  }
                  Object.assign(non_parallel, this.non_parallel);
                  context.non_parallel = non_parallel;
                }
                if (this.parallel_first) {
                  var parallel_first = state2.tmp.group_context.tip.parallel_first;
                  if (!parallel_first) {
                    parallel_first = {};
                  }
                  Object.assign(parallel_first, this.parallel_first);
                  context.parallel_first = parallel_first;
                }
                if (this.parallel_last) {
                  var parallel_last = state2.tmp.group_context.tip.parallel_last;
                  if (!parallel_last) {
                    parallel_last = {};
                  }
                  Object.assign(parallel_last, this.parallel_last);
                  context.parallel_last = parallel_last;
                }
                if (state2.tmp.abbrev_trimmer && state2.tmp.abbrev_trimmer.LAST_TO_FIRST && context.parallel_last) {
                  if (!context.parallel_first) {
                    context.parallel_first = {};
                  }
                  for (var varname in state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                    if (context.parallel_last[varname]) {
                      context.parallel_first[varname] = true;
                      delete context.parallel_last[varname];
                    }
                  }
                }
                state2.tmp.group_context.push(context);
                if (state2.tmp.abbrev_trimmer && this.parallel_last_to_first) {
                  if (!state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                    state2.tmp.abbrev_trimmer.LAST_TO_FIRST = {};
                  }
                  for (var varname in this.parallel_last_to_first) {
                    state2.tmp.abbrev_trimmer.LAST_TO_FIRST[varname] = true;
                  }
                }
              }
            };
            execs = [];
            execs.push(func);
            this.execs = execs.concat(this.execs);
            if (this.strings["has-publisher-and-publisher-place"]) {
              state.build["publisher-special"] = true;
              if (this.strings["subgroup-delimiter"]) {
                func = function(state2, Item) {
                  if (Item.publisher && Item["publisher-place"]) {
                    var publisher_lst = Item.publisher.split(/;\s*/);
                    var publisher_place_lst = Item["publisher-place"].split(/;\s*/);
                    if (publisher_lst.length > 1 && publisher_lst.length === publisher_place_lst.length) {
                      state2.publisherOutput = new CSL2.PublisherOutput(state2, this);
                      state2.publisherOutput["publisher-list"] = publisher_lst;
                      state2.publisherOutput["publisher-place-list"] = publisher_place_lst;
                    }
                  }
                };
                this.execs.push(func);
              }
            }
            if (this.juris) {
              var choose_start = new CSL2.Token("choose", CSL2.START);
              CSL2.Node.choose.build.call(choose_start, state, target);
              var if_start = new CSL2.Token("if", CSL2.START);
              func = function(macroName) {
                return function(Item, item) {
                  return CSL2.INIT_JURISDICTION_MACROS(state, Item, item, macroName);
                };
              }(this.juris);
              if_start.tests ? {} : if_start.tests = [];
              if_start.tests.push(func);
              if_start.test = state.fun.match.any(if_start, state, if_start.tests);
              target.push(if_start);
              var text_node = new CSL2.Token("text", CSL2.SINGLETON);
              func = function(state2, Item, item) {
                var itemItem = Item;
                if (item && item["best-jurisdiction"] && this.juris === "juris-locator") {
                  itemItem = item;
                }
                var next = 0;
                if (state2.juris[itemItem["best-jurisdiction"]][this.juris]) {
                  while (next < state2.juris[itemItem["best-jurisdiction"]][this.juris].length) {
                    next = CSL2.tokenExec.call(state2, state2.juris[itemItem["best-jurisdiction"]][this.juris][next], Item, item);
                  }
                }
              };
              text_node.juris = this.juris;
              text_node.execs.push(func);
              target.push(text_node);
              var if_end = new CSL2.Token("if", CSL2.END);
              CSL2.Node["if"].build.call(if_end, state, target);
              var else_start = new CSL2.Token("else", CSL2.START);
              CSL2.Node["else"].build.call(else_start, state, target);
            }
          }
          if (this.tokentype === CSL2.END) {
            if (state.build["publisher-special"]) {
              state.build["publisher-special"] = false;
              func = function(state2) {
                if (state2.publisherOutput) {
                  state2.publisherOutput.render();
                  state2.publisherOutput = false;
                }
              };
              this.execs.push(func);
            }
            func = function(state2, Item, item) {
              if (!state2.tmp.group_context.tip.condition) {
                if (state2.output.current.tip.strings.suffix) {
                  state2.tmp.just_did_number = false;
                }
              }
              state2.output.endTag();
              if (this.realGroup) {
                var flags = state2.tmp.group_context.pop();
                if (flags.parallel_delimiter_override) {
                  state2.tmp.group_context.tip.parallel_delimiter_override = flags.parallel_delimiter_override;
                  if (!state2.tmp.just_looking && state2.registry.registry[Item.id].master) {
                    state2.registry.registry[Item.id].parallel_delimiter_override = flags.parallel_delimiter_override;
                  }
                }
                if (flags.parallel_delimiter_override_on_suppress) {
                  state2.tmp.group_context.tip.parallel_delimiter_override_on_suppress = flags.parallel_delimiter_override_on_suppress;
                }
                if (state2.tmp.area === "bibliography_sort") {
                  var citationNumberIdx = flags.done_vars.indexOf("citation-number");
                  if (this.strings.sort_direction && citationNumberIdx > -1 && state2.tmp.group_context.length() == 1) {
                    if (this.strings.sort_direction === CSL2.DESCENDING) {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.DESCENDING;
                    } else {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.ASCENDING;
                    }
                    flags.done_vars = flags.done_vars.slice(0, citationNumberIdx).concat(flags.done_vars.slice(citationNumberIdx + 1));
                  }
                }
                if (flags.condition) {
                  flags.force_suppress = CSL2.EVALUATE_GROUP_CONDITION(state2, flags);
                }
                if (state2.tmp.group_context.tip.condition) {
                  state2.tmp.group_context.tip.force_suppress = flags.force_suppress;
                }
                if (!flags.force_suppress && (flags.variable_success || flags.term_intended && !flags.variable_attempt)) {
                  if (!this.isJurisLocatorLabel) {
                    state2.tmp.group_context.tip.variable_success = true;
                  }
                  var blobs = state2.output.current.value().blobs;
                  var pos = state2.output.current.value().blobs.length - 1;
                  if (!state2.tmp.just_looking && (flags.non_parallel || flags.parallel_last || flags.parallel_first || flags.parallel_delimiter_override || flags.parallel_delimiter_override_on_suppress)) {
                    var hasRepeat = state2.parallel.checkRepeats(flags);
                    if (hasRepeat) {
                      if (blobs) {
                        blobs.pop();
                      }
                    }
                    if (state2.tmp.cite_index > 0 && (hasRepeat || !flags.parallel_first && !flags.parallel_last && !flags.non_parallel)) {
                      var info = state2.tmp.suppress_repeats[state2.tmp.cite_index - 1];
                      if (hasRepeat && flags.parallel_delimiter_override_on_suppress && (info.SIBLING || info.ORPHAN)) {
                        state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override_on_suppress;
                      } else if (flags.parallel_delimiter_override && info.SIBLING) {
                        state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override;
                      }
                    }
                  }
                } else {
                  state2.tmp.term_predecessor = flags.old_term_predecessor;
                  state2.tmp.group_context.tip.variable_attempt = flags.variable_attempt;
                  if (flags.force_suppress && !state2.tmp.group_context.tip.condition) {
                    state2.tmp.group_context.tip.variable_attempt = true;
                    state2.tmp.group_context.tip.variable_success = flags.variable_success_parent;
                  }
                  if (flags.force_suppress) {
                    for (var i = 0, ilen = flags.done_vars.length; i < ilen; i++) {
                      var doneVar = flags.done_vars[i];
                      for (var j = 0, jlen = state2.tmp.done_vars.length; j < jlen; j++) {
                        if (state2.tmp.done_vars[j] === doneVar) {
                          state2.tmp.done_vars = state2.tmp.done_vars.slice(0, j).concat(state2.tmp.done_vars.slice(j + 1));
                        }
                      }
                    }
                  }
                  if (state2.output.current.value().blobs) {
                    state2.output.current.value().blobs.pop();
                  }
                }
              }
            };
            this.execs.push(func);
            if (this.juris) {
              var else_end = new CSL2.Token("else", CSL2.END);
              CSL2.Node["else"].build.call(else_end, state, target);
              var choose_end = new CSL2.Token("choose", CSL2.END);
              CSL2.Node.choose.build.call(choose_end, state, target);
            }
          }
          if (this.tokentype === CSL2.END) {
            if (!this.juris) {
              target.push(this);
            }
            if (state.build.substitute_level.value()) {
              state.build.substitute_level.replace(state.build.substitute_level.value() - 1);
            }
            CSL2.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL2.Node["if"] = {
        build: function(state, target) {
          CSL2.Conditions.TopNode.call(this, state, target);
          target.push(this);
        },
        configure: function(state, pos) {
          CSL2.Conditions.Configure.call(this, state, pos);
        }
      };
      CSL2.Node["conditions"] = {
        build: function(state) {
          if (this.tokentype === CSL2.START) {
            state.tmp.conditions.addMatch(this.match);
          }
          if (this.tokentype === CSL2.END) {
            state.tmp.conditions.matchCombine();
          }
        }
      };
      CSL2.Node["condition"] = {
        build: function(state) {
          if (this.tokentype === CSL2.SINGLETON) {
            var test = state.fun.match[this.match](this, state, this.tests);
            state.tmp.conditions.addTest(test);
          }
        }
      };
      CSL2.Conditions = {};
      CSL2.Conditions.TopNode = function(state) {
        var func;
        if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
          if (this.locale) {
            state.opt.lang = this.locale;
          }
          if (!this.tests || !this.tests.length) {
            state.tmp.conditions = new CSL2.Conditions.Engine(state, this);
          } else {
            this.test = state.fun.match[this.match](this, state, this.tests);
          }
          if (state.build.substitute_level.value() === 0) {
            func = function(state2) {
              state2.tmp.condition_counter++;
            };
            this.execs.push(func);
          }
        }
        if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
          if (state.build.substitute_level.value() === 0) {
            func = function(state2) {
              state2.tmp.condition_counter--;
              if (state2.tmp.condition_lang_counter_arr.length > 0) {
                var counter = state2.tmp.condition_lang_counter_arr.slice(-1)[0];
                if (counter === state2.tmp.condition_counter) {
                  state2.opt.lang = state2.tmp.condition_lang_val_arr.pop();
                  state2.tmp.condition_lang_counter_arr.pop();
                }
              }
              if (this.locale_default) {
                state2.output.current.value().old_locale = this.locale_default;
                state2.output.closeLevel("empty");
                state2.opt.lang = this.locale_default;
              }
            };
            this.execs.push(func);
          }
          func = function(state2) {
            var next = this[state2.tmp.jump.value()];
            return next;
          };
          this.execs.push(func);
          if (this.locale_default) {
            state.opt.lang = this.locale_default;
          }
        }
      };
      CSL2.Conditions.Configure = function(state, pos) {
        if (this.tokentype === CSL2.START) {
          this.fail = state.configure.fail.slice(-1)[0];
          this.succeed = this.next;
          state.configure.fail[state.configure.fail.length - 1] = pos;
        } else if (this.tokentype === CSL2.SINGLETON) {
          this.fail = this.next;
          this.succeed = state.configure.succeed.slice(-1)[0];
          state.configure.fail[state.configure.fail.length - 1] = pos;
        } else {
          this.succeed = state.configure.succeed.slice(-1)[0];
          this.fail = this.next;
        }
      };
      CSL2.Conditions.Engine = function(state, token) {
        this.token = token;
        this.state = state;
      };
      CSL2.Conditions.Engine.prototype.addTest = function(test) {
        this.token.tests ? {} : this.token.tests = [];
        this.token.tests.push(test);
      };
      CSL2.Conditions.Engine.prototype.addMatch = function(match) {
        this.token.match = match;
      };
      CSL2.Conditions.Engine.prototype.matchCombine = function() {
        this.token.test = this.state.fun.match[this.token.match](this.token, this.state, this.token.tests);
      };
      CSL2.Node.info = {
        build: function(state) {
          if (this.tokentype === CSL2.START) {
            state.build.skip = "info";
          } else {
            state.build.skip = false;
          }
        }
      };
      CSL2.Node.institution = {
        build: function(state, target) {
          if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
            var func = function(state2) {
              if (typeof this.strings.delimiter === "string") {
                state2.tmp.institution_delimiter = this.strings.delimiter;
              } else {
                state2.tmp.institution_delimiter = state2.tmp.name_delimiter;
              }
              if (state2.inheritOpt(this, "and") === "text") {
                this.and_term = state2.getTerm("and", "long", 0);
              } else if (state2.inheritOpt(this, "and") === "symbol") {
                if (state2.opt.development_extensions.expect_and_symbol_form) {
                  this.and_term = state2.getTerm("and", "symbol", 0);
                } else {
                  this.and_term = "&";
                }
              } else if (state2.inheritOpt(this, "and") === "none") {
                this.and_term = state2.tmp.institution_delimiter;
              }
              if (typeof this.and_term === "undefined" && state2.tmp.and_term) {
                this.and_term = state2.tmp.and_term;
              }
              if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                this.and_prefix_single = " ";
                this.and_prefix_multiple = ", ";
                if (typeof state2.tmp.institution_delimiter === "string") {
                  this.and_prefix_multiple = state2.tmp.institution_delimiter;
                }
                this.and_suffix = " ";
              } else {
                this.and_prefix_single = "";
                this.and_prefix_multiple = "";
                this.and_suffix = "";
              }
              if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
                this.and_prefix_single = state2.tmp.institution_delimiter;
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              }
              this.and = {};
              if (typeof this.and_term !== "undefined") {
                state2.output.append(this.and_term, "empty", true);
                this.and.single = state2.output.pop();
                this.and.single.strings.prefix = this.and_prefix_single;
                this.and.single.strings.suffix = this.and_suffix;
                state2.output.append(this.and_term, "empty", true);
                this.and.multiple = state2.output.pop();
                this.and.multiple.strings.prefix = this.and_prefix_multiple;
                this.and.multiple.strings.suffix = this.and_suffix;
              } else if (this.strings.delimiter !== "undefined") {
                this.and.single = new CSL2.Blob(state2.tmp.institution_delimiter);
                this.and.single.strings.prefix = "";
                this.and.single.strings.suffix = "";
                this.and.multiple = new CSL2.Blob(state2.tmp.institution_delimiter);
                this.and.multiple.strings.prefix = "";
                this.and.multiple.strings.suffix = "";
              }
              state2.nameOutput.institution = this;
            };
            this.execs.push(func);
          }
          target.push(this);
        },
        configure: function(state) {
          if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
            state.build.has_institution = true;
          }
        }
      };
      CSL2.Node["institution-part"] = {
        build: function(state, target) {
          var func;
          if (this.strings.name === "long") {
            if (this.strings["if-short"]) {
              func = function(state2) {
                state2.nameOutput.institutionpart["long-with-short"] = this;
              };
            } else {
              func = function(state2) {
                state2.nameOutput.institutionpart["long"] = this;
              };
            }
          } else if (this.strings.name === "short") {
            func = function(state2) {
              state2.nameOutput.institutionpart["short"] = this;
            };
          }
          this.execs.push(func);
          target.push(this);
        }
      };
      CSL2.Node.key = {
        build: function(state, target) {
          target = state[state.build.root + "_sort"].tokens;
          var func;
          var debug = false;
          var start_key = new CSL2.Token("key", CSL2.START);
          state.tmp.root = state.build.root;
          start_key.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
          start_key.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
          start_key.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
          func = function(state2) {
            state2.tmp.done_vars = [];
          };
          start_key.execs.push(func);
          func = function(state2) {
            state2.output.openLevel("empty");
          };
          start_key.execs.push(func);
          var sort_direction = [];
          if (this.strings.sort_direction === CSL2.DESCENDING) {
            sort_direction.push(1);
            sort_direction.push(-1);
          } else {
            sort_direction.push(-1);
            sort_direction.push(1);
          }
          state[state.build.area].opt.sort_directions.push(sort_direction);
          if (CSL2.DATE_VARIABLES.indexOf(this.variables[0]) > -1) {
            state.build.date_key = true;
          }
          func = function(state2) {
            state2.tmp.sort_key_flag = true;
            if (state2.inheritOpt(this, "et-al-min")) {
              state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
            }
            if (state2.inheritOpt(this, "et-al-use-first")) {
              state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
            }
            if (typeof state2.inheritOpt(this, "et-al-use-last") === "boolean") {
              state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
            }
          };
          start_key.execs.push(func);
          target.push(start_key);
          if (this.variables.length) {
            var variable = this.variables[0];
            if (CSL2.NAME_VARIABLES.indexOf(variable) > -1) {
              var names_start_token = new CSL2.Token("names", CSL2.START);
              names_start_token.tokentype = CSL2.START;
              names_start_token.variables = this.variables;
              CSL2.Node.names.build.call(names_start_token, state, target);
              var name_token = new CSL2.Token("name", CSL2.SINGLETON);
              name_token.tokentype = CSL2.SINGLETON;
              name_token.strings["name-as-sort-order"] = "all";
              name_token.strings["sort-separator"] = " ";
              name_token.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
              name_token.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
              name_token.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
              CSL2.Node.name.build.call(name_token, state, target);
              var institution_token = new CSL2.Token("institution", CSL2.SINGLETON);
              institution_token.tokentype = CSL2.SINGLETON;
              CSL2.Node.institution.build.call(institution_token, state, target);
              var names_end_token = new CSL2.Token("names", CSL2.END);
              names_end_token.tokentype = CSL2.END;
              CSL2.Node.names.build.call(names_end_token, state, target);
            } else {
              var single_text = new CSL2.Token("text", CSL2.SINGLETON);
              single_text.strings.sort_direction = this.strings.sort_direction;
              single_text.dateparts = this.dateparts;
              if (CSL2.NUMERIC_VARIABLES.indexOf(variable) > -1) {
                if (variable === "citation-number") {
                  func = function(state2, Item) {
                    if (state2.tmp.area === "bibliography_sort") {
                      if (this.strings.sort_direction === CSL2.DESCENDING) {
                        state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.DESCENDING;
                      } else {
                        state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.ASCENDING;
                      }
                    }
                    if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                      var num = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                    } else {
                      var num = state2.registry.registry[Item.id].seq;
                    }
                    if (num) {
                      num = CSL2.Util.padding("" + num);
                    }
                    state2.output.append(num, this);
                  };
                } else {
                  func = function(state2, Item) {
                    var num = false;
                    num = Item[variable];
                    if (num) {
                      num = CSL2.Util.padding(num);
                    }
                    state2.output.append(num, this);
                  };
                }
              } else if (variable === "citation-label") {
                func = function(state2, Item) {
                  var trigraph = state2.getCitationLabel(Item);
                  state2.output.append(trigraph, this);
                };
              } else if (CSL2.DATE_VARIABLES.indexOf(variable) > -1) {
                func = CSL2.dateAsSortKey;
                single_text.variables = this.variables;
              } else if (variable === "title") {
                var abbrevfam = "title";
                var abbrfall = false;
                var altvar = false;
                var transfall = true;
                func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
              } else if (variable === "court-class") {
                func = function(state2, Item, item) {
                  CSL2.INIT_JURISDICTION_MACROS(state2, Item, item, "juris-main");
                  var cls = CSL2.GET_COURT_CLASS(state2, Item, true);
                  state2.output.append(cls, "empty");
                };
              } else {
                func = function(state2, Item) {
                  var varval = Item[variable];
                  state2.output.append(varval, "empty");
                };
              }
              single_text.execs.push(func);
              target.push(single_text);
            }
          } else {
            var token = new CSL2.Token("text", CSL2.SINGLETON);
            token.strings.sort_direction = this.strings.sort_direction;
            token.postponed_macro = this.postponed_macro;
            CSL2.expandMacro.call(state, token, target);
          }
          var end_key = new CSL2.Token("key", CSL2.END);
          func = function(state2) {
            var keystring = state2.output.string(state2, state2.output.queue);
            if (state2.sys.normalizeUnicode) {
              keystring = state2.sys.normalizeUnicode(keystring);
            }
            keystring = keystring ? keystring.split(" ").join(state2.opt.sort_sep) + state2.opt.sort_sep : "";
            if (debug) {
              CSL2.debug("keystring: " + keystring + " " + typeof keystring);
            }
            if (keystring === "") {
              keystring = void 0;
            }
            if (typeof keystring !== "string") {
              keystring = void 0;
            }
            state2[state2[state2.tmp.area].root + "_sort"].keys.push(keystring);
            state2.tmp.value = [];
          };
          end_key.execs.push(func);
          if (state.build.date_key) {
            if (state.build.area === "citation" && state.build.extension === "_sort") {
              state[state.build.area].opt.sort_directions.push([-1, 1]);
              func = function(state2, Item) {
                var year_suffix = state2.registry.registry[Item.id].disambig.year_suffix;
                if (!year_suffix) {
                  year_suffix = 0;
                }
                var key = CSL2.Util.padding("" + year_suffix);
                state2[state2.tmp.area].keys.push(key);
              };
              end_key.execs.push(func);
            }
            state.build.date_key = false;
          }
          func = function(state2) {
            state2.tmp["et-al-min"] = void 0;
            state2.tmp["et-al-use-first"] = void 0;
            state2.tmp["et-al-use-last"] = void 0;
            state2.tmp.sort_key_flag = false;
          };
          end_key.execs.push(func);
          target.push(end_key);
        }
      };
      CSL2.Node.label = {
        build: function(state, target) {
          if (this.strings.term) {
            var func = function(state2, Item, item) {
              var termtxt = CSL2.evaluateLabel(this, state2, Item, item);
              if (item && this.strings.term === "locator") {
                item.section_form_override = this.strings.form;
              }
              if (termtxt) {
                state2.tmp.group_context.tip.term_intended = true;
              }
              CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, termtxt, null, this);
              if (termtxt.indexOf("%s") === -1) {
                if (this.strings.capitalize_if_first) {
                  if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                    termtxt = CSL2.Output.Formatters["capitalize-first"](state2, termtxt);
                  }
                }
                state2.output.append(termtxt, this);
              }
            };
            this.execs.push(func);
          } else {
            if (!this.strings.form) {
              this.strings.form = "long";
            }
            var namevars = state.build.names_variables[state.build.names_variables.length - 1];
            var namelabels = state.build.name_label[state.build.name_label.length - 1];
            for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
              if (!namelabels[namevars[i]]) {
                namelabels[namevars[i]] = {};
              }
            }
            if (!state.build.name_flag) {
              for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                namelabels[namevars[i]].before = this;
              }
            } else {
              for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                namelabels[namevars[i]].after = this;
              }
            }
          }
          target.push(this);
        }
      };
      CSL2.Node.layout = {
        build: function(state, target) {
          var func, prefix_token, suffix_token, tok;
          function setSuffix() {
            if (state.build.area === "bibliography") {
              suffix_token = new CSL2.Token("text", CSL2.SINGLETON);
              func = function(state2) {
                if (!state2.tmp.parallel_and_not_last) {
                  var suffix;
                  if (state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale]) {
                    suffix = state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale].suffix;
                  } else {
                    suffix = state2.bibliography.opt.layout_suffix;
                  }
                  var topblob = state2.output.current.value();
                  if (state2.opt.using_display) {
                    topblob.blobs[topblob.blobs.length - 1].strings.suffix = suffix;
                  } else {
                    topblob.strings.suffix = suffix;
                  }
                }
                if (state2.bibliography.opt["second-field-align"]) {
                  state2.output.endTag("bib_other");
                }
              };
              suffix_token.execs.push(func);
              target.push(suffix_token);
            }
          }
          if (this.tokentype === CSL2.START) {
            if (this.locale_raw) {
              state.build.current_default_locale = this.locale_raw;
            } else {
              state.build.current_default_locale = state.opt["default-locale"];
            }
            func = function(state2, Item, item) {
              if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
                var cite_entry = new CSL2.Token("group", CSL2.START);
                cite_entry.decorations = [["@cite", "entry"]];
                state2.output.startTag("cite_entry", cite_entry);
                state2.output.current.value().item_id = Item.system_id;
                if (item) {
                  state2.output.current.value().locator_txt = item.locator_txt;
                  state2.output.current.value().suffix_txt = item.suffix_txt;
                }
              }
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.START && !state.tmp.cite_affixes[state.build.area]) {
            func = function(state2, Item, item) {
              state2.tmp.done_vars = [];
              if (item && item["author-only"]) {
                state2.tmp.done_vars.push("locator");
              }
              if (state2.opt.suppressedJurisdictions[Item["country"]] && Item["country"] && ["treaty", "patent"].indexOf(Item.type) === -1) {
                state2.tmp.done_vars.push("country");
              }
              if (!state2.tmp.just_looking && state2.registry.registry[Item.id] && state2.registry.registry[Item.id].parallel) {
                state2.tmp.done_vars.push("first-reference-note-number");
              }
              if (!state2.tmp.just_looking && state2.tmp.abbrev_trimmer && Item.jurisdiction) {
                for (var field in state2.tmp.abbrev_trimmer.QUASHES[Item.jurisdiction]) {
                  state2.tmp.done_vars.push(field);
                }
              }
              state2.tmp.rendered_name = false;
            };
            this.execs.push(func);
            func = function(state2) {
              state2.tmp.sort_key_flag = false;
            };
            this.execs.push(func);
            func = function(state2) {
              state2.tmp.nameset_counter = 0;
            };
            this.execs.push(func);
            func = function(state2, Item) {
              var tok2 = new CSL2.Token();
              state2.output.openLevel(tok2);
            };
            this.execs.push(func);
            target.push(this);
            if (state.build.area === "citation") {
              prefix_token = new CSL2.Token("text", CSL2.SINGLETON);
              func = function(state2, Item, item) {
                if (item && item.prefix) {
                  var prefix = CSL2.checkPrefixSpaceAppend(state2, item.prefix);
                  if (!state2.tmp.just_looking) {
                    prefix = state2.output.checkNestedBrace.update(prefix);
                  }
                  var ignorePredecessor = CSL2.checkIgnorePredecessor(state2, prefix);
                  state2.output.append(prefix, this, false, ignorePredecessor);
                }
              };
              prefix_token.execs.push(func);
              target.push(prefix_token);
            }
          }
          var my_tok;
          if (this.locale_raw) {
            my_tok = new CSL2.Token("dummy", CSL2.START);
            my_tok.locale = this.locale_raw;
            my_tok.strings.delimiter = this.strings.delimiter;
            my_tok.strings.suffix = this.strings.suffix;
            if (!state.tmp.cite_affixes[state.build.area]) {
              state.tmp.cite_affixes[state.build.area] = {};
            }
          }
          if (this.tokentype === CSL2.START) {
            state.build.layout_flag = true;
            if (!this.locale_raw) {
              state[state.tmp.area].opt.topdecor = [this.decorations];
              state[state.tmp.area + "_sort"].opt.topdecor = [this.decorations];
              state[state.build.area].opt.layout_prefix = this.strings.prefix;
              state[state.build.area].opt.layout_suffix = this.strings.suffix;
              state[state.build.area].opt.layout_delimiter = this.strings.delimiter;
              state[state.build.area].opt.layout_decorations = this.decorations;
              if (state.tmp.cite_affixes[state.build.area]) {
                tok = new CSL2.Token("else", CSL2.START);
                CSL2.Node["else"].build.call(tok, state, target);
              }
            }
            if (this.locale_raw) {
              if (!state.build.layout_locale_flag) {
                var choose_tok = new CSL2.Token("choose", CSL2.START);
                CSL2.Node.choose.build.call(choose_tok, state, target);
                my_tok.name = "if";
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["if"].build.call(my_tok, state, target);
              } else {
                my_tok.name = "else-if";
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["else-if"].build.call(my_tok, state, target);
              }
              state.tmp.cite_affixes[state.build.area][my_tok.locale] = {};
              state.tmp.cite_affixes[state.build.area][my_tok.locale].delimiter = this.strings.delimiter;
              state.tmp.cite_affixes[state.build.area][my_tok.locale].suffix = this.strings.suffix;
            }
          }
          if (this.tokentype === CSL2.END) {
            if (this.locale_raw) {
              setSuffix();
              if (!state.build.layout_locale_flag) {
                my_tok.name = "if";
                my_tok.tokentype = CSL2.END;
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["if"].build.call(my_tok, state, target);
                state.build.layout_locale_flag = true;
              } else {
                my_tok.name = "else-if";
                my_tok.tokentype = CSL2.END;
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["else-if"].build.call(my_tok, state, target);
              }
            }
            if (!this.locale_raw) {
              setSuffix();
              if (state.tmp.cite_affixes[state.build.area]) {
                if (state.build.layout_locale_flag) {
                  tok = new CSL2.Token("else", CSL2.END);
                  CSL2.Node["else"].build.call(tok, state, target);
                  tok = new CSL2.Token("choose", CSL2.END);
                  CSL2.Node.choose.build.call(tok, state, target);
                }
              }
              state.build_layout_locale_flag = true;
              if (state.build.area === "citation") {
                suffix_token = new CSL2.Token("text", CSL2.SINGLETON);
                func = function(state2, Item, item) {
                  var sp;
                  if (item && item.suffix) {
                    var suffix = CSL2.checkSuffixSpacePrepend(state2, item.suffix);
                    if (!state2.tmp.just_looking) {
                      suffix = state2.output.checkNestedBrace.update(suffix);
                    }
                    state2.output.append(suffix, this);
                  }
                };
                suffix_token.execs.push(func);
                target.push(suffix_token);
              }
              func = function(state2) {
                state2.output.closeLevel();
              };
              this.execs.push(func);
              func = function(state2, Item) {
                if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
                  state2.output.endTag();
                }
              };
              this.execs.push(func);
              target.push(this);
              state.build.layout_flag = false;
              state.build.layout_locale_flag = false;
            }
          }
        }
      };
      CSL2.Node.macro = {
        build: function() {
        }
      };
      CSL2.Node.alternative = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            var choose_tok = new CSL2.Token("choose", CSL2.START);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
            var if_tok = new CSL2.Token("if", CSL2.START);
            CSL2.Attributes["@alternative-node-internal"].call(if_tok, state);
            CSL2.Node["if"].build.call(if_tok, state, target);
            var func = function(state2, Item) {
              state2.tmp.oldItem = Item;
              state2.tmp.oldLang = state2.opt.lang;
              state2.tmp.abort_alternative = true;
              if (Item["language-name"] && Item["language-name-original"]) {
                var newItem = JSON.parse(JSON.stringify(Item));
                newItem.language = newItem["language-name"];
                var langspec = CSL2.localeResolve(newItem.language, state2.opt["default-locale"][0]);
                if (state2.opt.multi_layout) {
                  for (var i in state2.opt.multi_layout) {
                    var locale_list = state2.opt.multi_layout[i];
                    var gotlang = false;
                    for (var j in locale_list) {
                      var tryspec = locale_list[j];
                      if (langspec.best === tryspec.best || langspec.base === tryspec.base || langspec.bare === tryspec.bare) {
                        gotlang = locale_list[0].best;
                        break;
                      }
                    }
                    if (!gotlang) {
                      gotlang = state2.opt["default-locale"][0];
                    }
                    state2.opt.lang = gotlang;
                  }
                }
                for (var key in newItem) {
                  if (["id", "type", "language", "multi"].indexOf(key) === -1 && key.slice(0, 4) !== "alt-") {
                    if (newItem.multi && newItem.multi._keys[key]) {
                      var deleteme = true;
                      for (var lang in newItem.multi._keys[key]) {
                        if (langspec.bare === lang.replace(/^([a-zA-Z]+).*/, "$1")) {
                          deleteme = false;
                          break;
                        }
                      }
                      if (deleteme) {
                        delete newItem[key];
                      }
                    } else {
                      delete newItem[key];
                    }
                  }
                }
                for (var key in newItem) {
                  if (key.slice(0, 4) === "alt-") {
                    newItem[key.slice(4)] = newItem[key];
                    state2.tmp.abort_alternative = false;
                  } else {
                    if (newItem.multi && newItem.multi._keys) {
                      if (!newItem["alt-" + key] && newItem.multi._keys[key]) {
                        if (newItem.multi._keys[key][langspec.best]) {
                          newItem[key] = newItem.multi._keys[key][langspec.best];
                          state2.tmp.abort_alternative = false;
                        } else if (newItem.multi._keys[key][langspec.base]) {
                          newItem[key] = newItem.multi._keys[key][langspec.base];
                          state2.tmp.abort_alternative = false;
                        } else if (newItem.multi._keys[key][langspec.bare]) {
                          newItem[key] = newItem.multi._keys[key][langspec.bare];
                          state2.tmp.abort_alternative = false;
                        }
                      }
                    }
                  }
                }
              }
              state2.output.openLevel(this);
              state2.registry.refhash[Item.id] = newItem;
              state2.nameOutput = new CSL2.NameOutput(state2, newItem);
            };
            this.execs.push(func);
            target.push(this);
            var choose_tok = new CSL2.Token("choose", CSL2.START);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
            var if_tok = new CSL2.Token("if", CSL2.START);
            CSL2.Attributes["@alternative-node-internal"].call(if_tok, state);
            var func = function(state2) {
              state2.tmp.abort_alternative = true;
            };
            if_tok.execs.push(func);
            CSL2.Node["if"].build.call(if_tok, state, target);
          } else if (this.tokentype === CSL2.END) {
            var if_tok = new CSL2.Token("if", CSL2.END);
            CSL2.Node["if"].build.call(if_tok, state, target);
            var choose_tok = new CSL2.Token("choose", CSL2.END);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
            var func = function(state2, Item) {
              state2.output.closeLevel();
              state2.registry.refhash[Item.id] = state2.tmp.oldItem;
              state2.opt.lang = state2.tmp.oldLang;
              state2.nameOutput = new CSL2.NameOutput(state2, state2.tmp.oldItem);
              state2.tmp.abort_alternative = false;
            };
            this.execs.push(func);
            target.push(this);
            var if_tok = new CSL2.Token("if", CSL2.END);
            CSL2.Node["if"].build.call(if_tok, state, target);
            var choose_tok = new CSL2.Token("choose", CSL2.END);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
          }
        }
      };
      CSL2.Node["alternative-text"] = {
        build: function(state, target) {
          if (this.tokentype === CSL2.SINGLETON) {
            var func = function(state2, Item) {
              var Item = state2.refetchItem(Item.id);
              CSL2.getCite.call(state2, Item);
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.NameOutput = function(state, Item, item) {
        this.debug = false;
        if (this.debug) {
          print("(1)");
        }
        this.state = state;
        this.Item = Item;
        this.item = item;
        this.nameset_base = 0;
        this.etal_spec = {};
        this._first_creator_variable = false;
        this._please_chop = false;
      };
      CSL2.NameOutput.prototype.init = function(names2) {
        this.requireMatch = names2.requireMatch;
        if (this.state.tmp.term_predecessor) {
          this.state.tmp.subsequent_author_substitute_ok = false;
        }
        if (this.nameset_offset) {
          this.nameset_base = this.nameset_base + this.nameset_offset;
        }
        this.nameset_offset = 0;
        this.names = names2;
        this.variables = names2.variables;
        this.state.tmp.value = [];
        this.state.tmp.rendered_name = [];
        this.state.tmp.label_blob = false;
        this.state.tmp.etal_node = false;
        this.state.tmp.etal_term = false;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
            this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
          }
        }
        this["et-al"] = void 0;
        this["with"] = void 0;
        this.name = void 0;
        this.institutionpart = {};
        this.state.tmp.group_context.tip.variable_attempt = true;
        this.labelVariable = this.variables[0];
        if (!this.state.tmp.value.length) {
          return;
        }
        var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
        if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
              this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
            }
          }
          this.state.tmp.common_term_match_fail = true;
          this.variables = [];
        }
      };
      CSL2.NameOutput.prototype.reinit = function(names2, labelVariable) {
        this.requireMatch = names2.requireMatch;
        this.labelVariable = labelVariable;
        if (this.state.tmp.can_substitute.value()) {
          this.nameset_offset = 0;
          this.variables = names2.variables;
          var oldval = this.state.tmp.value.slice();
          this.state.tmp.value = [];
          for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
              this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
            }
          }
          if (this.state.tmp.value.length) {
            this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
          }
          this.state.tmp.value = oldval;
        }
        var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
        if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
              this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
            }
          }
          this.variables = [];
        }
      };
      CSL2.NameOutput.prototype.outputNames = function() {
        var i, ilen;
        var variables = this.variables;
        if (this.institution.and) {
          if (!this.institution.and.single.blobs || !this.institution.and.single.blobs.length) {
            this.institution.and.single.blobs = this.name.and.single.blobs;
          }
          if (!this.institution.and.multiple.blobs || !this.institution.and.multiple.blobs.length) {
            this.institution.and.multiple.blobs = this.name.and.multiple.blobs;
          }
        }
        this.variable_offset = {};
        if (this.family) {
          this.family_decor = CSL2.Util.cloneToken(this.family);
          this.family_decor.strings.prefix = "";
          this.family_decor.strings.suffix = "";
          for (i = 0, ilen = this.family.execs.length; i < ilen; i += 1) {
            this.family.execs[i].call(this.family_decor, this.state, this.Item);
          }
        } else {
          this.family_decor = false;
        }
        if (this.given) {
          this.given_decor = CSL2.Util.cloneToken(this.given);
          this.given_decor.strings.prefix = "";
          this.given_decor.strings.suffix = "";
          for (i = 0, ilen = this.given.execs.length; i < ilen; i += 1) {
            this.given.execs[i].call(this.given_decor, this.state, this.Item);
          }
        } else {
          this.given_decor = false;
        }
        if (this.debug) {
          print("(2)");
        }
        this.getEtAlConfig();
        if (this.debug) {
          print("(3)");
        }
        this.divideAndTransliterateNames();
        if (this.debug) {
          print("(4)");
        }
        this.truncatePersonalNameLists();
        if (this.debug) {
          print("(5)");
        }
        if (this.debug) {
          print("(6)");
        }
        this.disambigNames();
        this.constrainNames();
        if (this.debug) {
          print("(7)");
        }
        if (this.name.strings.form === "count") {
          if (this.state.tmp.extension || this.names_count != 0) {
            this.state.output.append(this.names_count, "empty");
            this.state.tmp.group_context.tip.variable_success = true;
          }
          return;
        }
        if (this.debug) {
          print("(8)");
        }
        this.setEtAlParameters();
        if (this.debug) {
          print("(9)");
        }
        this.setCommonTerm(this.requireMatch);
        if (this.debug) {
          print("(10)");
        }
        this.renderAllNames();
        if (this.debug) {
          print("(11)");
        }
        var blob_list = [];
        for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          var institution_sets = [];
          var institutions = false;
          var varblob = null;
          if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
            varblob = this._join([this.freeters[v]], "");
          } else {
            if (this.debug) {
              print("(11a)");
            }
            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              institution_sets.push(this.joinPersonsAndInstitutions([this.persons[v][j], this.institutions[v][j]]));
            }
            if (this.debug) {
              print("(11b)");
            }
            if (this.institutions[v].length) {
              var pos = this.nameset_base + this.variable_offset[v];
              if (this.freeters[v].length) {
                pos += 1;
              }
              institutions = this.joinInstitutionSets(institution_sets, pos);
            }
            if (this.debug) {
              print("(11c)");
            }
            var varblob = this.joinFreetersAndInstitutionSets([this.freeters[v], institutions]);
            if (this.debug) {
              print("(11d)");
            }
          }
          if (varblob) {
            if (!this.state.tmp.extension) {
              varblob = this._applyLabels(varblob, v);
            }
            blob_list.push(varblob);
          }
          if (this.debug) {
            print("(11e)");
          }
          if (this.common_term) {
            break;
          }
        }
        if (this.debug) {
          print("(12)");
        }
        this.state.output.openLevel("empty");
        this.state.output.current.value().strings.delimiter = this.state.inheritOpt(this.names, "delimiter", "names-delimiter");
        if (this.debug) {
          print("(13)");
        }
        for (i = 0, ilen = blob_list.length; i < ilen; i += 1) {
          this.state.output.append(blob_list[i], "literal", true);
        }
        if (!this.state.tmp.just_looking && blob_list.length > 0) {
          this.state.tmp.probably_rendered_something = true;
        }
        if (this.debug) {
          print("(14)");
        }
        this.state.output.closeLevel("empty");
        if (this.debug) {
          print("(15)");
        }
        var blob = this.state.output.pop();
        this.state.tmp.name_node.top = blob;
        if (this.debug) {
          print("(16)");
        }
        var namesToken = CSL2.Util.cloneToken(this.names);
        if (this.state.tmp.group_context.tip.condition) {
          CSL2.UPDATE_GROUP_CONTEXT_CONDITION(this.state, this.names.strings.prefix, null, this.names);
        }
        this.state.output.append(blob, namesToken);
        if (this.state.tmp.term_predecessor_name) {
          this.state.tmp.term_predecessor = true;
        }
        if (this.debug) {
          print("(17)");
        }
        if (this.debug) {
          print("(18)");
        }
        if (variables[0] !== "authority") {
          var name_node_string = [];
          var nameobjs = this.Item[variables[0]];
          if (nameobjs) {
            for (var i = 0, ilen = nameobjs.length; i < ilen; i += 1) {
              var substring = CSL2.Util.Names.getRawName(nameobjs[i]);
              if (substring) {
                name_node_string.push(substring);
              }
            }
          }
          name_node_string = name_node_string.join(", ");
          if (name_node_string) {
            this.state.tmp.name_node.string = name_node_string;
          }
        }
        if (this.state.tmp.name_node.string && !this.state.tmp.first_name_string) {
          this.state.tmp.first_name_string = this.state.tmp.name_node.string;
        }
        if (this.Item.type === "classic") {
          if (this.state.tmp.first_name_string) {
            var author_title = [];
            author_title.push(this.state.tmp.first_name_string);
            if (this.Item.title) {
              author_title.push(this.Item.title);
            }
            author_title = author_title.join(", ");
            if (author_title && this.state.sys.getAbbreviation) {
              if (this.state.sys.normalizeAbbrevsKey) {
                author_title = this.state.sys.normalizeAbbrevsKey("classic", author_title);
              }
              this.state.transform.loadAbbreviation("default", "classic", author_title, this.Item.language);
              if (this.state.transform.abbrevs["default"].classic[author_title]) {
                this.state.tmp.done_vars.push("title");
                this.state.output.append(this.state.transform.abbrevs["default"].classic[author_title], "empty", true);
                blob = this.state.output.pop();
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.top.blobs.push(blob);
              }
            }
          }
        }
        this._collapseAuthor();
        this.variables = [];
        this.state.tmp.authority_stop_last = 0;
        if (this.debug) {
          print("(19)");
        }
      };
      CSL2.NameOutput.prototype._applyLabels = function(blob, v) {
        var txt;
        if (!this.label || !this.label[this.labelVariable]) {
          return blob;
        }
        var plural = 0;
        var num = this.freeters_count[v] + this.institutions_count[v];
        if (num > 1) {
          plural = 1;
        } else {
          for (var i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
            num += this.persons_count[v][i];
          }
          if (num > 1) {
            plural = 1;
          }
        }
        if (this.label[this.labelVariable].before) {
          if (typeof this.label[this.labelVariable].before.strings.plural === "number") {
            plural = this.label[this.labelVariable].before.strings.plural;
          }
          txt = this._buildLabel(v, plural, "before", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(txt, this.label[this.labelVariable].before, true);
          this.state.output.append(blob, "literal", true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
        } else if (this.label[this.labelVariable].after) {
          if (typeof this.label[this.labelVariable].after.strings.plural === "number") {
            plural = this.label[this.labelVariable].after.strings.plural;
          }
          txt = this._buildLabel(v, plural, "after", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(blob, "literal", true);
          this.state.output.append(txt, this.label[this.labelVariable].after, true);
          this.state.tmp.label_blob = this.state.output.pop();
          this.state.output.append(this.state.tmp.label_blob, "literal", true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
        }
        return blob;
      };
      CSL2.NameOutput.prototype._buildLabel = function(term, plural, position, v) {
        if (this.common_term) {
          term = this.common_term;
        }
        var ret = false;
        var node = this.label[v][position];
        if (node) {
          ret = CSL2.castLabel(this.state, node, term, plural, CSL2.TOLERANT);
        }
        return ret;
      };
      CSL2.NameOutput.prototype._collapseAuthor = function() {
        var myqueue, mystr, oldchars;
        if (this.state.tmp.name_node.top.blobs.length === 0) {
          return;
        }
        if (this.nameset_base === 0 && this.Item[this.variables[0]] && !this._first_creator_variable) {
          this._first_creator_variable = this.variables[0];
        }
        if (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter.length) {
          if (this.state.tmp.authorstring_request) {
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
              mystr = this.state.output.string(this.state, myqueue, false);
            }
            this.state.tmp.offset_characters = oldchars;
            this.state.registry.authorstrings[this.Item.id] = mystr;
          } else if (!this.state.tmp.just_looking && !this.state.tmp.suppress_decorations && (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter)) {
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
              mystr = this.state.output.string(this.state, myqueue, false);
            }
            if (mystr === this.state.tmp.last_primary_names_string) {
              if (this.item["suppress-author"] || this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length) {
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.children = [];
                this.state.tmp.offset_characters = oldchars;
              }
              if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                this.state.tmp.use_cite_group_delimiter = true;
              }
            } else {
              this.state.tmp.last_primary_names_string = mystr;
              if (this.variables.indexOf(this._first_creator_variable) > -1 && this.item && this.item["suppress-author"] && this.Item.type !== "legal_case") {
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.children = [];
                this.state.tmp.offset_characters = oldchars;
                this.state.tmp.term_predecessor = false;
              }
              this.state.tmp.have_collapsed = false;
              if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                this.state.tmp.use_cite_group_delimiter = false;
              }
            }
          }
        }
      };
      CSL2.NameOutput.prototype.isPerson = function(value) {
        if (value.literal || !value.given && value.family && value.isInstitution) {
          return false;
        } else {
          return true;
        }
      };
      CSL2.NameOutput.prototype.truncatePersonalNameLists = function() {
        var v, i, ilen, j, jlen, chopvar, values;
        this.freeters_count = {};
        this.persons_count = {};
        this.institutions_count = {};
        for (v in this.freeters) {
          if (this.freeters.hasOwnProperty(v)) {
            this.freeters_count[v] = this.freeters[v].length;
            this.freeters[v] = this._truncateNameList(this.freeters, v);
          }
        }
        for (v in this.persons) {
          if (this.persons.hasOwnProperty(v)) {
            this.institutions_count[v] = this.institutions[v].length;
            this._truncateNameList(this.institutions, v);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.persons_count[v] = [];
            for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              this.persons_count[v][j] = this.persons[v][j].length;
              this.persons[v][j] = this._truncateNameList(this.persons, v, j);
            }
          }
        }
        if (this.state.opt.development_extensions.etal_min_etal_usefirst_hack && this.etal_min === 1 && this.etal_use_first === 1 && !(this.state.tmp.extension || this.state.tmp.just_looking)) {
          chopvar = v;
        } else {
          chopvar = false;
        }
        if (chopvar || this._please_chop) {
          for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            v = this.variables[i];
            if (this.freeters[v].length) {
              if (this._please_chop === v) {
                this.freeters[v] = this.freeters[v].slice(1);
                this.freeters_count[v] += -1;
                this._please_chop = false;
              } else if (chopvar && !this._please_chop) {
                this.freeters[v] = this.freeters[v].slice(0, 1);
                this.freeters_count[v] = 1;
                this.institutions[v] = [];
                this.persons[v] = [];
                this._please_chop = chopvar;
              }
            }
            for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
              if (this.persons[v][j].length) {
                if (this._please_chop === v) {
                  this.persons[v][j] = this.persons[v][j].slice(1);
                  this.persons_count[v][j] += -1;
                  this._please_chop = false;
                  break;
                } else if (chopvar && !this._please_chop) {
                  this.freeters[v] = this.persons[v][j].slice(0, 1);
                  this.freeters_count[v] = 1;
                  this.institutions[v] = [];
                  this.persons[v] = [];
                  values = [];
                  this._please_chop = chopvar;
                  break;
                }
              }
            }
            if (this.institutions[v].length) {
              if (this._please_chop === v) {
                this.institutions[v] = this.institutions[v].slice(1);
                this.institutions_count[v] += -1;
                this._please_chop = false;
              } else if (chopvar && !this._please_chop) {
                this.institutions[v] = this.institutions[v].slice(0, 1);
                this.institutions_count[v] = 1;
                values = [];
                this._please_chop = chopvar;
              }
            }
          }
        }
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.institutions[v].length) {
            this.nameset_offset += 1;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
            if (this.persons[v][j].length) {
              this.nameset_offset += 1;
            }
          }
        }
      };
      CSL2.NameOutput.prototype._truncateNameList = function(container, variable, index) {
        var lst;
        if (typeof index === "undefined") {
          lst = container[variable];
        } else {
          lst = container[variable][index];
        }
        if (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names && lst.length > 50 && lst.length > this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names + 2) {
          var limit = this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names;
          lst = lst.slice(0, limit + 1).concat(lst.slice(-1));
        }
        return lst;
      };
      CSL2.NameOutput.prototype.divideAndTransliterateNames = function() {
        var i, ilen, j, jlen;
        var Item = this.Item;
        var variables = this.variables;
        this.varnames = variables.slice();
        this.freeters = {};
        this.persons = {};
        this.institutions = {};
        for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          this.variable_offset[v] = this.nameset_offset;
          var values = this._normalizeVariableValue(Item, v);
          if (this.name.strings["suppress-min"] && values.length >= this.name.strings["suppress-min"]) {
            values = [];
          }
          if (this.name.strings["suppress-max"] && values.length <= this.name.strings["suppress-max"]) {
            values = [];
          }
          this._getFreeters(v, values);
          this._getPersonsAndInstitutions(v, values);
          if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
            if (this.name.strings["suppress-min"] === 0) {
              this.freeters[v] = [];
              for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                this.persons[v][j] = [];
              }
            } else if (this.institution.strings["suppress-min"] === 0) {
              this.institutions[v] = [];
              this.freeters[v] = this.freeters[v].concat(this.persons[v]);
              for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                for (var k = 0, klen = this.persons[v][j].length; k < klen; k += 1) {
                  this.freeters[v].push(this.persons[v][j][k]);
                }
              }
              this.persons[v] = [];
            }
          }
        }
      };
      CSL2.NameOutput.prototype._normalizeVariableValue = function(Item, variable) {
        var names2;
        if (typeof Item[variable] === "string" || typeof Item[variable] === "number") {
          CSL2.debug('name variable "' + variable + '" is string or number, not array. Attempting to fix.');
          names2 = [{ literal: Item[variable] + "" }];
        } else if (!Item[variable]) {
          names2 = [];
        } else if (typeof Item[variable].length !== "number") {
          CSL2.debug('name variable "' + variable + '" is object, not array. Attempting to fix.');
          Item[variable] = [Item[variable]];
          names2 = Item[variable].slice();
        } else {
          names2 = Item[variable].slice();
        }
        return names2;
      };
      CSL2.NameOutput.prototype._getFreeters = function(v, values) {
        this.freeters[v] = [];
        if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
          for (var i = values.length - 1; i > -1; i--) {
            if (this.isPerson(values[i])) {
              var value = this._checkNickname(values.pop());
              if (value) {
                this.freeters[v].push(value);
              }
            } else {
              break;
            }
          }
        } else {
          for (var i = values.length - 1; i > -1; i--) {
            var value = values.pop();
            if (this.isPerson(value)) {
              var value = this._checkNickname(value);
            }
            this.freeters[v].push(value);
          }
        }
        this.freeters[v].reverse();
        if (this.freeters[v].length) {
          this.nameset_offset += 1;
        }
      };
      CSL2.NameOutput.prototype._getPersonsAndInstitutions = function(v, values) {
        this.persons[v] = [];
        this.institutions[v] = [];
        if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
          return;
        }
        var persons = [];
        var has_affiliates = false;
        var first = true;
        for (var i = values.length - 1; i > -1; i += -1) {
          if (this.isPerson(values[i])) {
            var value = this._checkNickname(values[i]);
            if (value) {
              persons.push(value);
            }
          } else {
            has_affiliates = true;
            this.institutions[v].push(values[i]);
            if (!first) {
              persons.reverse();
              this.persons[v].push(persons);
              persons = [];
            }
            first = false;
          }
        }
        if (has_affiliates) {
          persons.reverse();
          this.persons[v].push(persons);
          this.persons[v].reverse();
          this.institutions[v].reverse();
        }
      };
      CSL2.NameOutput.prototype._clearValues = function(values) {
        for (var i = values.length - 1; i > -1; i += -1) {
          values.pop();
        }
      };
      CSL2.NameOutput.prototype._checkNickname = function(name) {
        if (["interview", "personal_communication"].indexOf(this.Item.type) > -1) {
          var author2 = "";
          author2 = CSL2.Util.Names.getRawName(name);
          if (author2 && this.state.sys.getAbbreviation && !(this.item && this.item["suppress-author"])) {
            var normalizedKey = author2;
            if (this.state.sys.normalizeAbbrevsKey) {
              normalizedKey = this.state.sys.normalizeAbbrevsKey("author", author2);
            }
            this.state.transform.loadAbbreviation("default", "nickname", normalizedKey, this.Item.language);
            var myLocalName = this.state.transform.abbrevs["default"].nickname[normalizedKey];
            if (myLocalName) {
              if (myLocalName === "!here>>>") {
                name = false;
              } else {
                name = { family: myLocalName, given: "" };
              }
            }
          }
        }
        return name;
      };
      CSL2.NameOutput.prototype._purgeEmptyBlobs = function(blobs) {
        for (var i = blobs.length - 1; i > -1; i += -1) {
          if (!blobs[i] || blobs[i].length === 0 || !blobs[i].blobs.length) {
            blobs = blobs.slice(0, i).concat(blobs.slice(i + 1));
          }
        }
        return blobs;
      };
      CSL2.NameOutput.prototype.joinPersons = function(blobs, pos, j, tokenname) {
        var ret;
        blobs = this._purgeEmptyBlobs(blobs);
        if (!tokenname) {
          tokenname = "name";
        }
        if (typeof j === "undefined") {
          if (this.etal_spec[pos].freeters === 1) {
            ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].freeters === 2) {
            ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
          } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
        } else {
          if (this.etal_spec[pos].persons[j] === 1) {
            ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].persons[j] === 2) {
            ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
          } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
        }
        return ret;
      };
      CSL2.NameOutput.prototype.joinInstitutionSets = function(blobs, pos) {
        var ret;
        blobs = this._purgeEmptyBlobs(blobs);
        if (this.etal_spec[pos].institutions === 1) {
          ret = this._joinEtAl(blobs, "institution");
        } else if (this.etal_spec[pos].institutions === 2) {
          ret = this._joinEllipsis(blobs, "institution");
        } else {
          ret = this._joinAnd(blobs);
        }
        return ret;
      };
      CSL2.NameOutput.prototype.joinPersonsAndInstitutions = function(blobs) {
        blobs = this._purgeEmptyBlobs(blobs);
        var ret = this._join(blobs, this.state.tmp.name_delimiter);
        ret.isInstitution = true;
        return ret;
      };
      CSL2.NameOutput.prototype.joinFreetersAndInstitutionSets = function(blobs) {
        blobs = this._purgeEmptyBlobs(blobs);
        var ret = this._join(blobs, "[never here]", this["with"].single, this["with"].multiple);
        return ret;
      };
      CSL2.NameOutput.prototype._getAfterInvertedName = function(blobs, delimiter, finalJoin) {
        if (finalJoin && blobs.length > 1) {
          if (this.state.inheritOpt(this.name, "delimiter-precedes-last") === "after-inverted-name") {
            var prevBlob = blobs[blobs.length - 2];
            if (prevBlob.blobs.length > 0 && prevBlob.blobs[0].isInverted) {
              finalJoin.strings.prefix = delimiter;
            }
          }
        }
        return finalJoin;
      };
      CSL2.NameOutput.prototype._getAndJoin = function(blobs, delimiter) {
        var finalJoin = false;
        if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
            singleOrMultiple = "multiple";
          }
          if (blobs[blobs.length - 1].isInstitution) {
            finalJoin = this.institution.and[singleOrMultiple];
          } else {
            finalJoin = this.name.and[singleOrMultiple];
          }
          finalJoin = JSON.parse(JSON.stringify(finalJoin));
          finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
        }
        return finalJoin;
      };
      CSL2.NameOutput.prototype._joinEtAl = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var blob = this._join(blobs, delimiter);
        this.state.output.openLevel(this._getToken("name"));
        this.state.output.current.value().strings.delimiter = "";
        this.state.output.append(blob, "literal", true);
        if (blobs.length > 1) {
          this.state.output.append(this["et-al"].multiple, "literal", true);
        } else if (blobs.length === 1) {
          this.state.output.append(this["et-al"].single, "literal", true);
        }
        this.state.output.closeLevel();
        return this.state.output.pop();
      };
      CSL2.NameOutput.prototype._joinEllipsis = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var finalJoin = false;
        if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
            singleOrMultiple = "multiple";
          }
          finalJoin = JSON.parse(JSON.stringify(this.name.ellipsis[singleOrMultiple]));
          finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
        }
        return this._join(blobs, delimiter, finalJoin);
      };
      CSL2.NameOutput.prototype._joinAnd = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var finalJoin = this._getAndJoin(blobs, delimiter);
        return this._join(blobs, delimiter, finalJoin);
      };
      CSL2.NameOutput.prototype._join = function(blobs, delimiter, finalJoin) {
        var i, ilen;
        if (!blobs) {
          return false;
        }
        blobs = this._purgeEmptyBlobs(blobs);
        if (!blobs.length) {
          return false;
        }
        if (blobs.length > 1) {
          if (blobs.length === 2) {
            if (!finalJoin) {
              blobs[0].strings.suffix += delimiter;
            } else {
              blobs = [blobs[0], finalJoin, blobs[1]];
            }
          } else {
            var offset;
            if (finalJoin) {
              offset = 1;
            } else {
              offset = 0;
            }
            var blob = blobs.pop();
            for (var i = 0, ilen = blobs.length - offset; i < ilen; i++) {
              blobs[i].strings.suffix += delimiter;
            }
            blobs.push(finalJoin);
            blobs.push(blob);
          }
        }
        this.state.output.openLevel();
        for (i = 0, ilen = blobs.length; i < ilen; i += 1) {
          this.state.output.append(blobs[i], false, true);
        }
        this.state.output.closeLevel();
        return this.state.output.pop();
      };
      CSL2.NameOutput.prototype._getToken = function(tokenname) {
        var token = this[tokenname];
        if (tokenname === "institution") {
          var newtoken = new CSL2.Token();
          return newtoken;
        }
        return token;
      };
      CSL2.NameOutput.prototype.checkCommonAuthor = function(requireMatch) {
        if (!requireMatch) {
          return false;
        }
        var common_term = false;
        if (this.variables.length === 2) {
          var variables = this.variables;
          var varnames = variables.slice();
          varnames.sort();
          common_term = varnames.join("");
        }
        if (!common_term) {
          return false;
        }
        var has_term = false;
        if (this.state.locale[this.state.opt.lang].terms[common_term]) {
          has_term = true;
        }
        if (!has_term) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
          return false;
        }
        var firstSet = this.Item[this.variables[0]];
        var secondSet = this.Item[this.variables[1]];
        var perfectMatch = this._compareNamesets(firstSet, secondSet);
        if (perfectMatch === true) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
        }
        return !perfectMatch;
      };
      CSL2.NameOutput.prototype.setCommonTerm = function() {
        var variables = this.variables;
        var varnames = variables.slice();
        varnames.sort();
        this.common_term = varnames.join("");
        if (!this.common_term) {
          return;
        }
        var has_term = false;
        if (this.label && this.label[this.variables[0]]) {
          if (this.label[this.variables[0]].before) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].before.strings.form, 0);
          } else if (this.label[this.variables[0]].after) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].after.strings.form, 0);
          }
        }
        if (!this.state.locale[this.state.opt.lang].terms[this.common_term] || !has_term || this.variables.length < 2) {
          this.common_term = false;
          return;
        }
        var freeters_offset = 0;
        for (var i = 0, ilen = this.variables.length - 1; i < ilen; i += 1) {
          var v = this.variables[i];
          var vv = this.variables[i + 1];
          if (this.freeters[v].length || this.freeters[vv].length) {
            if (this.etal_spec[v].freeters !== this.etal_spec[vv].freeters || !this._compareNamesets(this.freeters[v], this.freeters[vv])) {
              this.common_term = false;
              return;
            }
            freeters_offset += 1;
          }
          if (this.persons[v].length !== this.persons[vv].length) {
            this.common_term = false;
            return;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.etal_spec[v].persons[j] !== this.etal_spec[vv].persons[j] || !this._compareNamesets(this.persons[v][j], this.persons[vv][j])) {
              this.common_term = false;
              return;
            }
          }
        }
      };
      CSL2.NameOutput.prototype._compareNamesets = function(base_nameset, nameset) {
        if (!base_nameset || !nameset || base_nameset.length !== nameset.length) {
          return false;
        }
        for (var i = 0, ilen = nameset.length; i < ilen; i += 1) {
          for (var j = 0, jlen = CSL2.NAME_PARTS.length; j < jlen; j += 1) {
            var part = CSL2.NAME_PARTS[j];
            if (!base_nameset[i] || base_nameset[i][part] != nameset[i][part]) {
              return false;
            }
          }
        }
        return true;
      };
      CSL2.NameOutput.prototype.constrainNames = function() {
        this.names_count = 0;
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this.state.tmp.names_max.push(this.freeters[v].length, "literal");
            this._imposeNameConstraints(this.freeters, this.freeters_count, v, pos);
            this.names_count += this.freeters[v].length;
          }
          if (this.institutions[v].length) {
            this.state.tmp.names_max.push(this.institutions[v].length, "literal");
            this._imposeNameConstraints(this.institutions, this.institutions_count, v, pos);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.names_count += this.institutions[v].length;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.persons[v][j].length) {
              this.state.tmp.names_max.push(this.persons[v][j].length, "literal");
              this._imposeNameConstraints(this.persons[v], this.persons_count[v], j, pos);
              this.names_count += this.persons[v][j].length;
            }
          }
        }
      };
      CSL2.NameOutput.prototype._imposeNameConstraints = function(lst, count, key, pos) {
        var display_names = lst[key];
        var discretionary_names_length = this.state.tmp["et-al-min"];
        if (this.state.tmp.suppress_decorations) {
          if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos]) {
            discretionary_names_length = this.state.tmp.disambig_request.names[pos];
          } else if (count[key] >= this.etal_min) {
            discretionary_names_length = this.etal_use_first;
          }
        } else {
          if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos] > this.etal_use_first) {
            if (count[key] < this.etal_min) {
              discretionary_names_length = count[key];
            } else {
              discretionary_names_length = this.state.tmp.disambig_request.names[pos];
            }
          } else if (count[key] >= this.etal_min) {
            discretionary_names_length = this.etal_use_first;
          }
          if (this.etal_use_last && discretionary_names_length > this.etal_min - 2) {
            discretionary_names_length = this.etal_min - 2;
          }
        }
        var sane = this.etal_min >= this.etal_use_first;
        var overlength = count[key] > discretionary_names_length;
        if (discretionary_names_length > count[key]) {
          discretionary_names_length = display_names.length;
        }
        if (sane && overlength) {
          if (this.etal_use_last) {
            lst[key] = display_names.slice(0, discretionary_names_length).concat(display_names.slice(-1));
          } else {
            lst[key] = display_names.slice(0, discretionary_names_length);
          }
        }
        this.state.tmp.disambig_settings.names[pos] = lst[key].length;
        this.state.disambiguate.padBase(this.state.tmp.disambig_settings);
      };
      CSL2.NameOutput.prototype.disambigNames = function() {
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this._runDisambigNames(this.freeters[v], pos);
          }
          if (this.institutions[v].length) {
            if (typeof this.state.tmp.disambig_settings.givens[pos] === "undefined") {
              this.state.tmp.disambig_settings.givens[pos] = [];
            }
            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              if (typeof this.state.tmp.disambig_settings.givens[pos][j] === "undefined") {
                this.state.tmp.disambig_settings.givens[pos].push(2);
              }
            }
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.persons[v][j].length) {
              this._runDisambigNames(this.persons[v][j], pos);
            }
          }
        }
      };
      CSL2.NameOutput.prototype._runDisambigNames = function(lst, pos) {
        var chk, myform, myinitials, param, i, ilen, paramx;
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          if (!lst[i].given && !lst[i].family) {
            continue;
          }
          myinitials = this.state.inheritOpt(this.name, "initialize-with");
          this.state.registry.namereg.addname("" + this.Item.id, lst[i], i);
          chk = this.state.tmp.disambig_settings.givens[pos];
          if (typeof chk === "undefined") {
            for (var j = 0, jlen = pos + 1; j < jlen; j += 1) {
              if (!this.state.tmp.disambig_settings.givens[j]) {
                this.state.tmp.disambig_settings.givens[j] = [];
              }
            }
          }
          chk = this.state.tmp.disambig_settings.givens[pos][i];
          if (typeof chk === "undefined") {
            myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
            param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
            this.state.tmp.disambig_settings.givens[pos].push(param);
          }
          myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
          paramx = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
          if (this.state.tmp.disambig_request) {
            var val = this.state.tmp.disambig_settings.givens[pos][i];
            if (val === 1 && this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && (typeof this.state.inheritOpt(this.name, "initialize-with") === "undefined" || typeof lst[i].given === "undefined")) {
              val = 2;
            }
            param = val;
            if (this.state.opt["disambiguate-add-givenname"] && lst[i].given) {
              param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, param, this.state.inheritOpt(this.name, "form", "name-form", "long"), this.state.inheritOpt(this.name, "initialize-with"));
            }
          } else {
            param = paramx;
          }
          if (!this.state.tmp.just_looking && this.item && this.item.position === CSL2.POSITION_FIRST) {
            if (paramx > param) {
              param = paramx;
            }
          }
          if (!this.state.tmp.sort_key_flag) {
            this.state.tmp.disambig_settings.givens[pos][i] = param;
            if (typeof myinitials === "string" && (typeof this.name.strings["initialize"] === "undefined" || this.name.strings["initialize"] === true)) {
              this.state.tmp.disambig_settings.use_initials = true;
            }
          }
        }
      };
      CSL2.NameOutput.prototype.getEtAlConfig = function() {
        var item = this.item;
        this["et-al"] = {};
        this.state.output.append(this.etal_term, this.etal_style, true);
        this["et-al"].single = this.state.output.pop();
        this["et-al"].single.strings.suffix = this.etal_suffix;
        this["et-al"].single.strings.prefix = this.etal_prefix_single;
        this.state.output.append(this.etal_term, this.etal_style, true);
        this["et-al"].multiple = this.state.output.pop();
        this["et-al"].multiple.strings.suffix = this.etal_suffix;
        this["et-al"].multiple.strings.prefix = this.etal_prefix_multiple;
        if (typeof item === "undefined") {
          item = {};
        }
        if (item.position) {
          if (this.state.inheritOpt(this.name, "et-al-subsequent-min")) {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-subsequent-min");
          } else {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.inheritOpt(this.name, "et-al-subsequent-use-first")) {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-subsequent-use-first");
          } else {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
        } else {
          if (this.state.tmp["et-al-min"]) {
            this.etal_min = this.state.tmp["et-al-min"];
          } else {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.tmp["et-al-use-first"]) {
            this.etal_use_first = this.state.tmp["et-al-use-first"];
          } else {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
          if (typeof this.state.tmp["et-al-use-last"] === "boolean") {
            this.etal_use_last = this.state.tmp["et-al-use-last"];
          } else {
            this.etal_use_last = this.state.inheritOpt(this.name, "et-al-use-last");
          }
        }
        if (!this.state.tmp["et-al-min"]) {
          this.state.tmp["et-al-min"] = this.etal_min;
        }
      };
      CSL2.NameOutput.prototype.setEtAlParameters = function() {
        var i, ilen, j, jlen;
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          if (typeof this.etal_spec[v] === "undefined") {
            this.etal_spec[v] = { freeters: 0, institutions: 0, persons: [] };
          }
          this.etal_spec[this.nameset_base + i] = this.etal_spec[v];
          if (this.freeters[v].length) {
            this._setEtAlParameter("freeters", v);
          }
          for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (typeof this.etal_spec[v][j] === "undefined") {
              this.etal_spec[v].persons[j] = 0;
            }
            this._setEtAlParameter("persons", v, j);
          }
          if (this.institutions[v].length) {
            this._setEtAlParameter("institutions", v);
          }
        }
      };
      CSL2.NameOutput.prototype._setEtAlParameter = function(type2, v, j) {
        var lst, count;
        if (type2 === "persons") {
          lst = this.persons[v][j];
          count = this.persons_count[v][j];
        } else {
          lst = this[type2][v];
          count = this[type2 + "_count"][v];
        }
        if (lst.length < count && !this.state.tmp.sort_key_flag) {
          if (this.etal_use_last) {
            if (type2 === "persons") {
              this.etal_spec[v].persons[j] = 2;
            } else {
              this.etal_spec[v][type2] = 2;
            }
          } else {
            if (type2 === "persons") {
              this.etal_spec[v].persons[j] = 1;
            } else {
              this.etal_spec[v][type2] = 1;
            }
          }
        } else {
          if (type2 === "persons") {
            this.etal_spec[v].persons[j] = 0;
          } else {
            this.etal_spec[v][type2] = 0;
          }
        }
      };
      CSL2.NameOutput.prototype.renderAllNames = function() {
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          if (this.freeters[v].length || this.institutions[v].length) {
            if (!this.state.tmp.group_context.tip.condition) {
              this.state.tmp.just_did_number = false;
            }
          }
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this.freeters[v] = this._renderNames(v, this.freeters[v], pos);
          }
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            this.persons[v][j] = this._renderNames(v, this.persons[v][j], pos, j);
          }
        }
        this.renderInstitutionNames();
      };
      CSL2.NameOutput.prototype.renderInstitutionNames = function() {
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            var institution2;
            var name = this.institutions[v][j];
            var j, jlen, localesets;
            if (this.state.tmp.extension) {
              localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
              localesets = this.state.opt["cite-lang-prefs"].institutions;
            } else {
              localesets = this.state.opt["cite-lang-prefs"].persons;
            }
            var slot = { primary: "locale-orig", secondary: false, tertiary: false };
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 < k) {
                  break;
                }
                if (localesets[k]) {
                  slot[slotnames[k]] = "locale-" + localesets[k];
                }
              }
            } else {
              slot.primary = "locale-translat";
            }
            if (this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            this.setRenderedName(name);
            var institution2 = this._renderInstitutionName(v, name, slot, j);
            this.institutions[v][j] = institution2;
          }
        }
      };
      CSL2.NameOutput.prototype._renderInstitutionName = function(v, name, slot, j) {
        var secondary, tertiary, long_style, short_style, institution2, institution_short, institution_long;
        var res = this.getName(name, slot.primary, true);
        var primary = res.name;
        var usedOrig = res.usedOrig;
        if (primary) {
          primary = this.fixupInstitution(primary, v, j);
        }
        secondary = false;
        if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, usedOrig);
          var secondary = res.name;
          usedOrig = res.usedOrig;
          if (secondary) {
            secondary = this.fixupInstitution(secondary, v, j);
          }
        }
        tertiary = false;
        if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, usedOrig);
          tertiary = res.name;
          if (tertiary) {
            tertiary = this.fixupInstitution(tertiary, v, j);
          }
        }
        var n = {
          l: {
            pri: false,
            sec: false,
            ter: false
          },
          s: {
            pri: false,
            sec: false,
            ter: false
          }
        };
        if (primary) {
          n.l.pri = primary["long"];
          n.s.pri = primary["short"].length ? primary["short"] : primary["long"];
        }
        if (secondary) {
          n.l.sec = secondary["long"];
          n.s.sec = secondary["short"].length ? secondary["short"] : secondary["long"];
        }
        if (tertiary) {
          n.l.ter = tertiary["long"];
          n.s.ter = tertiary["short"].length ? tertiary["short"] : tertiary["long"];
        }
        switch (this.institution.strings["institution-parts"]) {
          case "short":
            if (primary["short"].length) {
              short_style = this._getShortStyle();
              institution2 = [this._composeOneInstitutionPart([n.s.pri, n.s.sec, n.s.ter], slot, short_style, v)];
            } else {
              long_style = this._getLongStyle(primary, v, j);
              institution2 = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
            }
            break;
          case "short-long":
            long_style = this._getLongStyle(primary, v, j);
            short_style = this._getShortStyle();
            institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
            institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
            institution2 = [institution_short, institution_long];
            break;
          case "long-short":
            long_style = this._getLongStyle(primary, v, j);
            short_style = this._getShortStyle();
            institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
            institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
            institution2 = [institution_long, institution_short];
            break;
          default:
            long_style = this._getLongStyle(primary, v, j);
            institution2 = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
            break;
        }
        var blob = this._join(institution2, " ");
        if (blob) {
          blob.isInstitution = true;
        }
        this.state.tmp.name_node.children.push(blob);
        return blob;
      };
      CSL2.NameOutput.prototype._composeOneInstitutionPart = function(names2, slot, style) {
        var primary = false, secondary = false, tertiary = false, primary_tok, secondary_tok, tertiary_tok;
        if (names2[0]) {
          primary_tok = CSL2.Util.cloneToken(style);
          if (this.state.opt.citeAffixes[slot.primary]) {
            if (this.state.opt.citeAffixes.institutions[slot.primary].prefix === "<i>") {
              var hasItalic = false;
              for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                if (style.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                  hasItalic = true;
                }
              }
              if (!hasItalic) {
                primary_tok.decorations.push(["@font-style", "italic"]);
              }
            }
          }
          primary = this._renderOneInstitutionPart(names2[0], primary_tok);
        }
        if (names2[1]) {
          secondary = this._renderOneInstitutionPart(names2[1], style);
        }
        if (names2[2]) {
          tertiary = this._renderOneInstitutionPart(names2[2], style);
        }
        var institutionblob;
        if (secondary || tertiary) {
          this.state.output.openLevel("empty");
          this.state.output.append(primary);
          secondary_tok = CSL2.Util.cloneToken(style);
          if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.secondary].suffix;
            if (!secondary_tok.strings.prefix) {
              secondary_tok.strings.prefix = " ";
            }
          }
          var secondary_outer = new CSL2.Token();
          secondary_outer.decorations.push(["@font-style", "normal"]);
          secondary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(secondary_outer);
          this.state.output.append(secondary, secondary_tok);
          this.state.output.closeLevel();
          tertiary_tok = CSL2.Util.cloneToken(style);
          if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.tertiary].suffix;
            if (!tertiary_tok.strings.prefix) {
              tertiary_tok.strings.prefix = " ";
            }
          }
          var tertiary_outer = new CSL2.Token();
          tertiary_outer.decorations.push(["@font-style", "normal"]);
          tertiary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(tertiary_outer);
          this.state.output.append(tertiary, tertiary_tok);
          this.state.output.closeLevel();
          this.state.output.closeLevel();
          institutionblob = this.state.output.pop();
        } else {
          institutionblob = primary;
        }
        return institutionblob;
      };
      CSL2.NameOutput.prototype._renderOneInstitutionPart = function(blobs, style) {
        for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          if (blobs[i]) {
            var str = blobs[i];
            if (this.state.tmp.strip_periods) {
              str = str.replace(/\./g, "");
            } else {
              for (var j = 0, jlen = style.decorations.length; j < jlen; j += 1) {
                if (style.decorations[j][0] === "@strip-periods" && style.decorations[j][1] === "true") {
                  str = str.replace(/\./g, "");
                  break;
                }
              }
            }
            this.state.tmp.group_context.tip.variable_success = true;
            this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
            if (str === "!here>>>") {
              blobs[i] = false;
            } else {
              this.state.output.append(str, style, true);
              blobs[i] = this.state.output.pop();
            }
          }
        }
        if (typeof this.institution.strings["part-separator"] === "undefined") {
          this.institution.strings["part-separator"] = this.state.tmp.name_delimiter;
        }
        return this._join(blobs, this.institution.strings["part-separator"]);
      };
      CSL2.NameOutput.prototype._renderNames = function(v, values, pos, j) {
        var ret = false;
        if (values.length) {
          var names2 = [];
          for (var i = 0, ilen = values.length; i < ilen; i += 1) {
            var name = values[i];
            var ret, localesets;
            if (this.state.tmp.extension) {
              localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
              localesets = this.state.opt["cite-lang-prefs"].institutions;
            } else {
              localesets = this.state.opt["cite-lang-prefs"].persons;
            }
            var slot = { primary: "locale-orig", secondary: false, tertiary: false };
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 < k) {
                  break;
                }
                slot[slotnames[k]] = "locale-" + localesets[k];
              }
            } else {
              slot.primary = "locale-translat";
            }
            if (this.state.tmp.sort_key_flag || this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            this.setRenderedName(name);
            if (!name.literal && !name.isInstitution) {
              var nameBlob = this._renderPersonalName(v, name, slot, pos, i, j);
              var nameToken = CSL2.Util.cloneToken(this.name);
              this.state.output.append(nameBlob, nameToken, true);
              names2.push(this.state.output.pop());
            } else {
              names2.push(this._renderInstitutionName(v, name, slot, j));
            }
          }
          ret = this.joinPersons(names2, pos, j);
        }
        return ret;
      };
      CSL2.NameOutput.prototype._renderPersonalName = function(v, name, slot, pos, i, j) {
        var res = this.getName(name, slot.primary, true);
        var primary = this._renderOnePersonalName(res.name, pos, i, j);
        var secondary = false;
        if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, res.usedOrig);
          if (res.name) {
            secondary = this._renderOnePersonalName(res.name, pos, i, j);
          }
        }
        var tertiary = false;
        if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, res.usedOrig);
          if (res.name) {
            tertiary = this._renderOnePersonalName(res.name, pos, i, j);
          }
        }
        var personblob;
        if (secondary || tertiary) {
          this.state.output.openLevel("empty");
          this.state.output.append(primary);
          var secondary_tok = new CSL2.Token();
          if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.secondary].suffix;
            if (!secondary_tok.strings.prefix) {
              secondary_tok.strings.prefix = " ";
            }
          }
          this.state.output.append(secondary, secondary_tok);
          var tertiary_tok = new CSL2.Token();
          if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.tertiary].suffix;
            if (!tertiary_tok.strings.prefix) {
              tertiary_tok.strings.prefix = " ";
            }
          }
          this.state.output.append(tertiary, tertiary_tok);
          this.state.output.closeLevel();
          personblob = this.state.output.pop();
        } else {
          personblob = primary;
        }
        return personblob;
      };
      CSL2.NameOutput.prototype._isRomanesque = function(name) {
        var ret = 2;
        if (!name.family.replace(/\"/g, "").match(CSL2.ROMANESQUE_REGEXP)) {
          ret = 0;
        }
        if (!ret && name.given && name.given.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP)) {
          ret = 1;
        }
        var top_locale;
        if (ret == 2) {
          if (name.multi && name.multi.main) {
            top_locale = name.multi.main.slice(0, 2);
          } else if (this.Item.language) {
            top_locale = this.Item.language.slice(0, 2);
          }
          if (["ja", "zh"].indexOf(top_locale) > -1) {
            ret = 1;
          }
        }
        return ret;
      };
      CSL2.NameOutput.prototype._renderOnePersonalName = function(value, pos, i, j) {
        var name = value;
        var dropping_particle = this._droppingParticle(name, pos, j);
        var family = this._familyName(name);
        var non_dropping_particle = this._nonDroppingParticle(name);
        var givenInfo = this._givenName(name, pos, i);
        var given = givenInfo.blob;
        var suffix = this._nameSuffix(name);
        if (given === false) {
          dropping_particle = false;
          suffix = false;
        }
        var sort_sep = this.state.inheritOpt(this.name, "sort-separator");
        if (!sort_sep) {
          sort_sep = "";
        }
        var suffix_sep;
        if (name["comma-suffix"]) {
          suffix_sep = ", ";
        } else {
          suffix_sep = " ";
        }
        var romanesque = this._isRomanesque(name);
        function hasJoiningPunctuation(blob2) {
          if (!blob2) {
            return false;
          } else if (typeof blob2.blobs === "string") {
            if (["\u2019", "'", "-", " "].indexOf(blob2.blobs.slice(-1)) > -1) {
              return true;
            } else {
              return false;
            }
          } else {
            return hasJoiningPunctuation(blob2.blobs[blob2.blobs.length - 1]);
          }
        }
        var has_hyphenated_non_dropping_particle = hasJoiningPunctuation(non_dropping_particle);
        var nbspace;
        if (["fr", "ru", "cs"].indexOf(this.state.opt["default-locale"][0].slice(0, 2)) > -1) {
          nbspace = "\xA0";
        } else {
          nbspace = " ";
        }
        var blob, merged, first, second;
        if (romanesque === 0) {
          blob = this._join([non_dropping_particle, family, given], "");
        } else if (romanesque === 1 || name["static-ordering"]) {
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([merged, given], " ");
        } else if (name["reverse-ordering"]) {
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([given, merged], " ");
        } else if (this.state.tmp.sort_key_flag) {
          if (this.state.opt["demote-non-dropping-particle"] === "never") {
            merged = this._join([non_dropping_particle, family], nbspace);
            merged = this._join([merged, dropping_particle], " ");
            merged = this._join([merged, given], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
          } else {
            second = this._join([given, dropping_particle, non_dropping_particle], " ");
            merged = this._join([family, second], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
          }
        } else if (this.state.inheritOpt(this.name, "name-as-sort-order") === "all" || this.state.inheritOpt(this.name, "name-as-sort-order") === "first" && i === 0 && (j === 0 || typeof j === "undefined")) {
          if (["Lord", "Lady"].indexOf(name.given) > -1) {
            sort_sep = ", ";
          }
          if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1) {
            second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
            second = this._join([second, non_dropping_particle], " ");
            if (second && this.given) {
              second.strings.prefix = this.given.strings.prefix;
              second.strings.suffix = this.given.strings.suffix;
            }
            if (family && this.family) {
              family.strings.prefix = this.family.strings.prefix;
              family.strings.suffix = this.family.strings.suffix;
            }
            merged = this._join([family, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
          } else {
            if (has_hyphenated_non_dropping_particle) {
              first = this._join([non_dropping_particle, family], "");
            } else {
              first = this._join([non_dropping_particle, family], nbspace);
            }
            if (first && this.family) {
              first.strings.prefix = this.family.strings.prefix;
              first.strings.suffix = this.family.strings.suffix;
            }
            second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
            if (second && this.given) {
              second.strings.prefix = this.given.strings.prefix;
              second.strings.suffix = this.given.strings.suffix;
            }
            merged = this._join([first, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
          }
          blob.isInverted = true;
        } else {
          if (name["dropping-particle"] && name.family && !name["non-dropping-particle"]) {
            var dp = name["dropping-particle"];
            var apostrophes = ["'", "\u02BC", "\u2019", "-"];
            if (apostrophes.indexOf(dp.slice(-1)) > -1 && dp.slice(0, -1) !== "de") {
              family = this._join([dropping_particle, family], "");
              dropping_particle = false;
            }
          }
          if (has_hyphenated_non_dropping_particle) {
            second = this._join([non_dropping_particle, family], "");
            second = this._join([dropping_particle, second], nbspace);
          } else {
            second = this._join([dropping_particle, non_dropping_particle, family], nbspace);
          }
          second = this._join([second, suffix], suffix_sep);
          if (second && this.family) {
            second.strings.prefix = this.family.strings.prefix;
            second.strings.suffix = this.family.strings.suffix;
          }
          if (given && this.given) {
            given.strings.prefix = this.given.strings.prefix;
            given.strings.suffix = this.given.strings.suffix;
          }
          if (second.strings.prefix) {
            name["comma-dropping-particle"] = "";
          }
          var space;
          if (this.state.inheritOpt(this.name, "initialize-with") && this.state.inheritOpt(this.name, "initialize-with").match(/[\u00a0\ufeff]/) && givenInfo.initializationLevel === 1) {
            space = nbspace;
          } else {
            space = " ";
          }
          blob = this._join([given, second], name["comma-dropping-particle"] + space);
        }
        this.state.tmp.group_context.tip.variable_success = true;
        this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
        this.state.tmp.term_predecessor = true;
        this.state.tmp.name_node.children.push(blob);
        return blob;
      };
      CSL2.NameOutput.prototype._normalizeNameInput = function(value) {
        var name = {
          literal: value.literal,
          family: value.family,
          isInstitution: value.isInstitution,
          given: value.given,
          suffix: value.suffix,
          "comma-suffix": value["comma-suffix"],
          "non-dropping-particle": value["non-dropping-particle"],
          "dropping-particle": value["dropping-particle"],
          "static-ordering": value["static-ordering"],
          "static-particles": value["static-particles"],
          "reverse-ordering": value["reverse-ordering"],
          "full-form-always": value["full-form-always"],
          "parse-names": value["parse-names"],
          "comma-dropping-particle": "",
          block_initialize: value.block_initialize,
          multi: value.multi
        };
        this._parseName(name);
        return name;
      };
      CSL2.NameOutput.prototype._stripPeriods = function(tokname, str) {
        var decor_tok = this[tokname + "_decor"];
        if (str) {
          if (this.state.tmp.strip_periods) {
            str = str.replace(/\./g, "");
          } else if (decor_tok) {
            for (var i = 0, ilen = decor_tok.decorations.length; i < ilen; i += 1) {
              if (decor_tok.decorations[i][0] === "@strip-periods" && decor_tok.decorations[i][1] === "true") {
                str = str.replace(/\./g, "");
                break;
              }
            }
          }
        }
        return str;
      };
      CSL2.NameOutput.prototype._nonDroppingParticle = function(name) {
        var ndp = name["non-dropping-particle"];
        if (ndp && this.state.tmp.sort_key_flag) {
          ndp = ndp.replace(/[\'\u2019]/, "");
        }
        var str = this._stripPeriods("family", ndp);
        if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL2.NameOutput.prototype._droppingParticle = function(name, pos, j) {
        var dp = name["dropping-particle"];
        if (dp && this.state.tmp.sort_key_flag) {
          dp = dp.replace(/[\'\u2019]/, "");
        }
        var str = this._stripPeriods("given", dp);
        if (name["dropping-particle"] && name["dropping-particle"].match(/^et.?al[^a-z]$/)) {
          if (this.state.inheritOpt(this.name, "et-al-use-last")) {
            if (typeof j === "undefined") {
              this.etal_spec[pos].freeters = 2;
            } else {
              this.etal_spec[pos].persons = 2;
            }
          } else {
            if (typeof j === "undefined") {
              this.etal_spec[pos].freeters = 1;
            } else {
              this.etal_spec[pos].persons = 1;
            }
          }
          name["comma-dropping-particle"] = "";
        } else if (this.state.output.append(str, this.given_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL2.NameOutput.prototype._familyName = function(name) {
        var str = this._stripPeriods("family", name.family);
        if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL2.NameOutput.prototype._givenName = function(name, pos, i) {
        var ret;
        var formIsShort = this.state.inheritOpt(this.name, "form", "name-form", "long") !== "long";
        var initializeIsTurnedOn = this.state.inheritOpt(this.name, "initialize") !== false;
        var hasInitializeWith = typeof this.state.inheritOpt(this.name, "initialize-with") === "string" && !name.block_initialize;
        var defaultLevel;
        var useLevel;
        if (name["full-form-always"]) {
          useLevel = 2;
        } else {
          if (formIsShort) {
            defaultLevel = 0;
          } else if (hasInitializeWith) {
            defaultLevel = 1;
          } else {
            defaultLevel = 2;
          }
          var requestedLevel = this.state.tmp.disambig_settings.givens[pos][i];
          if (requestedLevel > defaultLevel) {
            useLevel = requestedLevel;
          } else {
            useLevel = defaultLevel;
          }
        }
        var gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
        if (gdropt && gdropt.slice(-14) === "-with-initials") {
          hasInitializeWith = true;
        }
        if (name.family && useLevel === 1) {
          if (hasInitializeWith) {
            var initialize_with = this.state.inheritOpt(this.name, "initialize-with", false, "");
            name.given = CSL2.Util.Names.initializeWith(this.state, name.given, initialize_with, !initializeIsTurnedOn);
          } else {
            name.given = CSL2.Util.Names.unInitialize(this.state, name.given);
          }
        } else if (useLevel === 0) {
          return {
            blob: false
          };
        } else if (useLevel === 2) {
          name.given = CSL2.Util.Names.unInitialize(this.state, name.given);
        }
        var str = this._stripPeriods("given", name.given);
        var rendered = this.state.output.append(str, this.given_decor, true);
        if (rendered) {
          ret = this.state.output.pop();
          return {
            blob: ret,
            initializationLevel: useLevel
          };
        }
        return {
          blob: false
        };
      };
      CSL2.NameOutput.prototype._nameSuffix = function(name) {
        var str = name.suffix, ret;
        if (str && typeof this.state.inheritOpt(this.name, "initialize-with") === "string") {
          str = CSL2.Util.Names.initializeWith(this.state, str, this.state.inheritOpt(this.name, "initialize-with"), true);
        }
        str = this._stripPeriods("family", str);
        var toSuffix = "";
        if (str && str.slice(-1) === ".") {
          str = str.slice(0, -1);
          toSuffix = ".";
        }
        var rendered = this.state.output.append(str, "empty", true);
        if (rendered) {
          ret = this.state.output.pop();
          ret.strings.suffix = toSuffix + ret.strings.suffix;
          return ret;
        }
        return false;
      };
      CSL2.NameOutput.prototype._getLongStyle = function(name) {
        var long_style;
        if (name["short"].length) {
          if (this.institutionpart["long-with-short"]) {
            long_style = this.institutionpart["long-with-short"];
          } else {
            long_style = this.institutionpart["long"];
          }
        } else {
          long_style = this.institutionpart["long"];
        }
        if (!long_style) {
          long_style = new CSL2.Token();
        }
        return long_style;
      };
      CSL2.NameOutput.prototype._getShortStyle = function() {
        var short_style;
        if (this.institutionpart["short"]) {
          short_style = this.institutionpart["short"];
        } else {
          short_style = new CSL2.Token();
        }
        return short_style;
      };
      CSL2.NameOutput.prototype._parseName = function(name) {
        if (!name["parse-names"] && typeof name["parse-names"] !== "undefined") {
          return name;
        }
        if (name.family && !name.given && name.isInstitution) {
          name.literal = name.family;
          name.family = void 0;
          name.isInstitution = void 0;
        }
        var noparse;
        if (name.family && (name.family.slice(0, 1) === '"' && name.family.slice(-1) === '"') || !name["parse-names"] && typeof name["parse-names"] !== "undefined") {
          name.family = name.family.slice(1, -1);
          noparse = true;
          name["parse-names"] = 0;
        } else {
          noparse = false;
        }
        if (this.state.opt.development_extensions.parse_names) {
          if (!name["non-dropping-particle"] && name.family && !noparse && name.given) {
            if (!name["static-particles"]) {
              CSL2.parseParticles(name, true);
            }
          }
        }
      };
      CSL2.NameOutput.prototype.getName = function(name, slotLocaleset, fallback, stopOrig) {
        if (stopOrig && slotLocaleset === "locale-orig") {
          return { name: false, usedOrig: stopOrig };
        }
        if (!name.family) {
          name.family = "";
        }
        if (!name.given) {
          name.given = "";
        }
        var name_params = {};
        name_params["static-ordering"] = this.getStaticOrder(name);
        var foundTag = true;
        var langTag;
        if (slotLocaleset !== "locale-orig") {
          foundTag = false;
          if (name.multi) {
            var langTags = this.state.opt[slotLocaleset];
            for (var i = 0, ilen = langTags.length; i < ilen; i += 1) {
              langTag = langTags[i];
              if (name.multi._key[langTag]) {
                foundTag = true;
                var isInstitution = name.isInstitution;
                name = name.multi._key[langTag];
                name.isInstitution = isInstitution;
                name_params = this.getNameParams(langTag);
                name_params.transliterated = true;
                break;
              }
            }
          }
        }
        if (!foundTag) {
          langTag = false;
          if (name.multi && name.multi.main) {
            langTag = name.multi.main;
          } else if (this.Item.language) {
            langTag = this.Item.language;
          }
          if (langTag) {
            name_params = this.getNameParams(langTag);
          }
        }
        if (!fallback && !foundTag) {
          return { name: false, usedOrig: stopOrig };
        }
        if (!name.family) {
          name.family = "";
        }
        if (!name.given) {
          name.given = "";
        }
        if (name.literal) {
          delete name.family;
          delete name.given;
        }
        name = {
          family: name.family,
          given: name.given,
          "non-dropping-particle": name["non-dropping-particle"],
          "dropping-particle": name["dropping-particle"],
          suffix: name.suffix,
          "static-ordering": name_params["static-ordering"],
          "static-particles": name["static-particles"],
          "reverse-ordering": name_params["reverse-ordering"],
          "full-form-always": name_params["full-form-always"],
          "parse-names": name["parse-names"],
          "comma-suffix": name["comma-suffix"],
          "comma-dropping-particle": name["comma-dropping-particle"],
          transliterated: name_params.transliterated,
          block_initialize: name_params["block-initialize"],
          literal: name.literal,
          isInstitution: name.isInstitution,
          multi: name.multi
        };
        if (!name.literal && (!name.given && name.family && name.isInstitution)) {
          name.literal = name.family;
        }
        if (name.literal) {
          delete name.family;
          delete name.given;
        }
        name = this._normalizeNameInput(name);
        var usedOrig;
        if (stopOrig) {
          usedOrig = stopOrig;
        } else {
          usedOrig = !foundTag;
        }
        return { name, usedOrig };
      };
      CSL2.NameOutput.prototype.getNameParams = function(langTag) {
        var ret = {};
        var langspec = CSL2.localeResolve(this.Item.language, this.state.opt["default-locale"][0]);
        var try_locale = this.state.locale[langspec.best] ? langspec.best : this.state.opt["default-locale"][0];
        var name_as_sort_order = this.state.locale[try_locale].opts["name-as-sort-order"];
        var name_as_reverse_order = this.state.locale[try_locale].opts["name-as-reverse-order"];
        var name_never_short = this.state.locale[try_locale].opts["name-never-short"];
        var field_lang_bare = langTag.split("-")[0];
        if (name_as_sort_order && name_as_sort_order[field_lang_bare]) {
          ret["static-ordering"] = true;
          ret["reverse-ordering"] = false;
        }
        if (name_as_reverse_order && name_as_reverse_order[field_lang_bare]) {
          ret["reverse-ordering"] = true;
          ret["static-ordering"] = false;
        }
        if (name_never_short && name_never_short[field_lang_bare]) {
          ret["full-form-always"] = true;
        }
        if (ret["static-ordering"]) {
          ret["block-initialize"] = true;
        }
        return ret;
      };
      CSL2.NameOutput.prototype.setRenderedName = function(name) {
        if (this.state.tmp.area === "bibliography") {
          var strname = "";
          for (var j = 0, jlen = CSL2.NAME_PARTS.length; j < jlen; j += 1) {
            if (name[CSL2.NAME_PARTS[j]]) {
              strname += name[CSL2.NAME_PARTS[j]];
            }
          }
          this.state.tmp.rendered_name.push(strname);
        }
      };
      CSL2.NameOutput.prototype.fixupInstitution = function(name, varname, listpos) {
        if (!name.literal && name.family) {
          name.literal = name.family;
          delete name.family;
        }
        var longNameStr = name.literal;
        var shortNameStr = longNameStr;
        var ret = {
          "long": longNameStr.split(/\s*\|\s*/),
          "short": shortNameStr.split(/\s*\|\s*/)
        };
        if (this.state.sys.getAbbreviation) {
          if (this.institution.strings.form === "short") {
            let jurisdiction2 = this.Item.jurisdiction;
            jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-entire", longNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction2]["institution-entire"][longNameStr]) {
              longNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-entire"][longNameStr];
            } else {
              jurisdiction2 = this.Item.jurisdiction;
              jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", longNameStr, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][longNameStr]) {
                longNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-part"][longNameStr];
              }
            }
            longNameStr = this._quashChecks(jurisdiction2, longNameStr);
          }
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            let jurisdiction2 = this.Item.jurisdiction;
            jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", shortNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][shortNameStr]) {
              shortNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-part"][shortNameStr];
            }
            shortNameStr = this._quashChecks(jurisdiction2, shortNameStr);
            if (["short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
              if (shortNameStr === longNameStr) {
                shortNameStr = "";
              }
            }
          }
          ret["long"] = longNameStr.split(/\s*\|\s*/);
          ret["short"] = shortNameStr.split(/\s*\|\s*/);
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            for (var j = ret["short"].length - 1; j > -1; j--) {
              let jurisdiction2 = this.Item.jurisdiction;
              var abbrevKey = ret["short"][j];
              jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", abbrevKey, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][abbrevKey]) {
                ret["short"][j] = this.state.transform.abbrevs[jurisdiction2]["institution-part"][abbrevKey];
              }
              if (ret["short"][j].indexOf("|") > -1) {
                let retShort = ret["short"];
                let splitShort = retShort[j].split(/\s*\|\s*/);
                ret["short"] = retShort.slice(0, j).concat(splitShort).concat(retShort.slice(j + 1));
              }
            }
          }
          if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
            ret["short"].reverse();
          }
          ret["short"] = this._trimInstitution(ret["short"]);
          if (this.institution.strings["reverse-order"]) {
            ret["short"].reverse();
          }
          if (!this.state.tmp.just_looking) {
            if (this.Item.jurisdiction) {
              let jurisdiction2 = this.Item.jurisdiction;
              var trimmer = this.state.tmp.abbrev_trimmer;
              if (trimmer && trimmer[jurisdiction2] && trimmer[jurisdiction2][varname]) {
                for (var i = 0, ilen = ret["short"].length; i < ilen; i++) {
                  var frag = ret["short"][i];
                  ret["short"][i] = frag.replace(trimmer[jurisdiction2][varname], "").trim();
                }
              }
            }
          }
        }
        if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
          ret["long"].reverse();
        }
        ret["long"] = this._trimInstitution(ret["long"]);
        if (this.institution.strings["reverse-order"]) {
          ret["long"].reverse();
        }
        return ret;
      };
      CSL2.NameOutput.prototype.getStaticOrder = function(name, refresh) {
        var static_ordering_val = false;
        if (!refresh && name["static-ordering"]) {
          static_ordering_val = true;
        } else if (this._isRomanesque(name) === 0) {
          static_ordering_val = true;
        } else if ((!name.multi || !name.multi.main) && this.Item.language && ["vi", "hu"].indexOf(this.Item.language) > -1) {
          static_ordering_val = true;
        } else if (name.multi && name.multi.main && ["vi", "hu"].indexOf(name.multi.main.slice(0, 2)) > -1) {
          static_ordering_val = true;
        } else {
          if (this.state.opt["auto-vietnamese-names"] && (CSL2.VIETNAMESE_NAMES.exec(name.family + " " + name.given) && CSL2.VIETNAMESE_SPECIALS.exec(name.family + name.given))) {
            static_ordering_val = true;
          }
        }
        return static_ordering_val;
      };
      CSL2.NameOutput.prototype._quashChecks = function(jurisdiction2, str) {
        var str = this.state.transform.quashCheck(jurisdiction2, str);
        var lst = str.split(/>>[0-9]{4}>>/);
        var m = str.match(/>>([0-9]{4})>>/);
        str = lst.pop();
        var date2 = this.Item["original-date"] ? this.Item["original-date"] : this.Item["issued"];
        if (date2) {
          date2 = parseInt(date2.year, 10);
          date2 = isNaN(date2) ? false : date2;
        }
        if (date2) {
          if (lst.length > 0) {
            for (var k = m.length - 1; k > 0; k--) {
              if (date2 >= parseInt(m[k], 10)) {
                break;
              }
              str = lst.pop();
            }
          }
          str = str.replace(/\s*\|\s*/g, "|");
        }
        return str;
      };
      CSL2.NameOutput.prototype._trimInstitution = function(subunits) {
        var use_first = false;
        var stop_last = false;
        var use_last = false;
        var stop_first = false;
        var s = subunits.slice();
        if (this.institution) {
          if (typeof this.institution.strings["use-first"] !== "undefined") {
            use_first = this.institution.strings["use-first"];
          }
          if (typeof this.institution.strings["use-last"] !== "undefined") {
            use_last = this.institution.strings["use-last"];
          }
          if (typeof this.institution.strings["stop-first"] !== "undefined") {
            stop_first = this.institution.strings["stop-first"];
          }
          if (typeof this.institution.strings["stop-last"] !== "undefined") {
            stop_last = this.institution.strings["stop-last"];
          }
          if (use_first) {
            if (stop_last) {
              s = s.slice(0, stop_last * -1);
            }
            s = s.slice(0, use_first);
          }
          if (use_last) {
            var ss = subunits.slice();
            if (use_first) {
              stop_first = use_first;
            } else {
              s = [];
            }
            if (stop_first) {
              ss = ss.slice(stop_first);
            }
            ss = ss.slice(use_last * -1);
            s = s.concat(ss);
          }
          subunits = s;
        }
        return subunits;
      };
      CSL2.PublisherOutput = function(state, group_tok) {
        this.state = state;
        this.group_tok = group_tok;
        this.varlist = [];
      };
      CSL2.PublisherOutput.prototype.render = function() {
        this.clearVars();
        this.composeAndBlob();
        this.composeElements();
        this.composePublishers();
        this.joinPublishers();
      };
      CSL2.PublisherOutput.prototype.composeAndBlob = function() {
        this.and_blob = {};
        var and_term = false;
        if (this.group_tok.strings.and === "text") {
          and_term = this.state.getTerm("and");
        } else if (this.group_tok.strings.and === "symbol") {
          and_term = "&";
        }
        var tok = new CSL2.Token();
        tok.strings.suffix = " ";
        tok.strings.prefix = " ";
        this.state.output.append(and_term, tok, true);
        var no_delim = this.state.output.pop();
        tok.strings.prefix = this.group_tok.strings["subgroup-delimiter"];
        this.state.output.append(and_term, tok, true);
        var with_delim = this.state.output.pop();
        this.and_blob.single = false;
        this.and_blob.multiple = false;
        if (and_term) {
          if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "always") {
            this.and_blob.single = with_delim;
          } else if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "never") {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = no_delim;
          } else {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = with_delim;
          }
        }
      };
      CSL2.PublisherOutput.prototype.composeElements = function() {
        for (var i = 0, ilen = 2; i < ilen; i += 1) {
          var varname = ["publisher", "publisher-place"][i];
          for (var j = 0, jlen = this["publisher-list"].length; j < jlen; j += 1) {
            var str = this[varname + "-list"][j];
            var tok = this[varname + "-token"];
            this.state.output.append(str, tok, true);
            this[varname + "-list"][j] = this.state.output.pop();
          }
        }
      };
      CSL2.PublisherOutput.prototype.composePublishers = function() {
        var blobs;
        for (var i = 0, ilen = this["publisher-list"].length; i < ilen; i += 1) {
          blobs = [this[this.varlist[0] + "-list"][i], this[this.varlist[1] + "-list"][i]];
          this["publisher-list"][i] = this._join(blobs, this.group_tok.strings.delimiter);
        }
      };
      CSL2.PublisherOutput.prototype.joinPublishers = function() {
        var blobs = this["publisher-list"];
        var publishers = this._join(blobs, this.group_tok.strings["subgroup-delimiter"], this.and_blob.single, this.and_blob.multiple, this.group_tok);
        this.state.output.append(publishers, "literal");
      };
      CSL2.PublisherOutput.prototype._join = CSL2.NameOutput.prototype._join;
      CSL2.PublisherOutput.prototype._getToken = CSL2.NameOutput.prototype._getToken;
      CSL2.PublisherOutput.prototype.clearVars = function() {
        this.state.tmp["publisher-list"] = false;
        this.state.tmp["publisher-place-list"] = false;
        this.state.tmp["publisher-group-token"] = false;
        this.state.tmp["publisher-token"] = false;
        this.state.tmp["publisher-place-token"] = false;
      };
      CSL2.evaluateLabel = function(node, state, Item, item) {
        var myterm;
        if (node.strings.term === "locator") {
          if (item && item.label) {
            if (item.label === "sub verbo") {
              myterm = "sub-verbo";
            } else {
              myterm = item.label;
            }
          }
          if (!myterm) {
            myterm = "page";
          }
        } else {
          myterm = node.strings.term;
        }
        var plural = node.strings.plural;
        if (typeof plural !== "number") {
          var theItem = item && node.strings.term === "locator" ? item : Item;
          if (theItem[node.strings.term]) {
            state.processNumber(false, theItem, node.strings.term, Item.type);
            plural = state.tmp.shadow_numbers[node.strings.term].plural;
            if (!state.tmp.shadow_numbers[node.strings.term].labelForm && !state.tmp.shadow_numbers[node.strings.term].labelDecorations) {
              if (node.strings.form) {
                state.tmp.shadow_numbers[node.strings.term].labelForm = node.strings.form;
              } else if (state.tmp.group_context.tip.label_form) {
                state.tmp.shadow_numbers[node.strings.term].labelForm = state.tmp.group_context.tip.label_form;
              }
              state.tmp.shadow_numbers[node.strings.term].labelCapitalizeIfFirst = node.strings.capitalize_if_first;
              state.tmp.shadow_numbers[node.strings.term].labelDecorations = node.decorations.slice();
            }
            if (["locator", "number", "page"].indexOf(node.strings.term) > -1 && state.tmp.shadow_numbers[node.strings.term].label) {
              myterm = state.tmp.shadow_numbers[node.strings.term].label;
            }
            if (node.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
              node.decorations.reverse();
              node.decorations.push(["@showid", "true", node.cslid]);
              node.decorations.reverse();
            }
          }
        }
        return CSL2.castLabel(state, node, myterm, plural, CSL2.TOLERANT);
      };
      CSL2.castLabel = function(state, node, term, plural, mode) {
        var label_form = node.strings.form;
        var label_capitalize_if_first = node.strings.capitalize_if_first;
        if (state.tmp.group_context.tip.label_form) {
          if (label_form === "static") {
            state.tmp.group_context.tip.label_static = true;
          } else {
            label_form = state.tmp.group_context.tip.label_form;
          }
        }
        if (state.tmp.group_context.tip.label_capitalize_if_first) {
          label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
        }
        var ret = state.getTerm(term, label_form, plural, false, mode, node.default_locale);
        if (label_capitalize_if_first) {
          ret = CSL2.Output.Formatters["capitalize-first"](state, ret);
        }
        if (state.tmp.strip_periods) {
          ret = ret.replace(/\./g, "");
        } else {
          for (var i = 0, ilen = node.decorations.length; i < ilen; i += 1) {
            if (node.decorations[i][0] === "@strip-periods" && node.decorations[i][1] === "true") {
              ret = ret.replace(/\./g, "");
              break;
            }
          }
        }
        return ret;
      };
      CSL2.Node.name = {
        build: function(state, target) {
          var func;
          if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
            var oldTmpRoot;
            if (typeof state.tmp.root === "undefined") {
              oldTmpRoot = void 0;
              state.tmp.root = "citation";
            } else {
              oldTmpRoot = state.tmp.root;
            }
            if (state.inheritOpt(this, "et-al-subsequent-min") && state.inheritOpt(this, "et-al-subsequent-min") !== state.inheritOpt(this, "et-al-min")) {
              state.opt.update_mode = CSL2.POSITION;
            }
            if (state.inheritOpt(this, "et-al-subsequent-use-first") && state.inheritOpt(this, "et-al-subsequent-use-first") !== state.inheritOpt(this, "et-al-use-first")) {
              state.opt.update_mode = CSL2.POSITION;
            }
            state.tmp.root = oldTmpRoot;
            func = function(state2) {
              state2.tmp.etal_term = "et-al";
              state2.tmp.name_delimiter = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
              state2.tmp["delimiter-precedes-et-al"] = state2.inheritOpt(this, "delimiter-precedes-et-al");
              if (state2.inheritOpt(this, "and") === "text") {
                this.and_term = state2.getTerm("and", "long", 0);
              } else if (state2.inheritOpt(this, "and") === "symbol") {
                if (state2.opt.development_extensions.expect_and_symbol_form) {
                  this.and_term = state2.getTerm("and", "symbol", 0);
                } else {
                  this.and_term = "&";
                }
              }
              state2.tmp.and_term = this.and_term;
              if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                this.and_prefix_single = " ";
                this.and_prefix_multiple = ", ";
                if (typeof state2.tmp.name_delimiter === "string") {
                  this.and_prefix_multiple = state2.tmp.name_delimiter;
                }
                this.and_suffix = " ";
              } else {
                this.and_prefix_single = "";
                this.and_prefix_multiple = "";
                this.and_suffix = "";
              }
              if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
                this.and_prefix_single = state2.tmp.name_delimiter;
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "after-inverted-name") {
                if (this.and_prefix_single) {
                  this.and_prefix_single = state2.tmp.name_delimiter;
                }
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              }
              this.and = {};
              if (state2.inheritOpt(this, "and")) {
                state2.output.append(this.and_term, "empty", true);
                this.and.single = state2.output.pop();
                this.and.single.strings.prefix = this.and_prefix_single;
                this.and.single.strings.suffix = this.and_suffix;
                state2.output.append(this.and_term, "empty", true);
                this.and.multiple = state2.output.pop();
                this.and.multiple.strings.prefix = this.and_prefix_multiple;
                this.and.multiple.strings.suffix = this.and_suffix;
              } else if (state2.tmp.name_delimiter) {
                this.and.single = new CSL2.Blob(state2.tmp.name_delimiter);
                this.and.single.strings.prefix = "";
                this.and.single.strings.suffix = "";
                this.and.multiple = new CSL2.Blob(state2.tmp.name_delimiter);
                this.and.multiple.strings.prefix = "";
                this.and.multiple.strings.suffix = "";
              }
              this.ellipsis = {};
              if (state2.inheritOpt(this, "et-al-use-last")) {
                this.ellipsis_term = "\u2026";
                this.ellipsis_prefix_single = " ";
                this.ellipsis_prefix_multiple = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
                this.ellipsis_suffix = " ";
                this.ellipsis.single = new CSL2.Blob(this.ellipsis_term);
                this.ellipsis.single.strings.prefix = this.ellipsis_prefix_single;
                this.ellipsis.single.strings.suffix = this.ellipsis_suffix;
                this.ellipsis.multiple = new CSL2.Blob(this.ellipsis_term);
                this.ellipsis.multiple.strings.prefix = this.ellipsis_prefix_multiple;
                this.ellipsis.multiple.strings.suffix = this.ellipsis_suffix;
              }
              if (typeof state2.tmp["et-al-min"] === "undefined") {
                state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
              }
              if (typeof state2.tmp["et-al-use-first"] === "undefined") {
                state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
              }
              if (typeof state2.tmp["et-al-use-last"] === "undefined") {
                state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
              }
              state2.nameOutput.name = this;
            };
            state.build.name_flag = true;
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node["name-part"] = {
        build: function(state) {
          state.build[this.strings.name] = this;
        }
      };
      CSL2.Node.names = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
            CSL2.Util.substituteStart.call(this, state, target);
            state.build.substitute_level.push(1);
          }
          if (this.tokentype === CSL2.SINGLETON) {
            state.build.names_variables[state.build.names_variables.length - 1].concat(this.variables);
            for (var i in this.variables) {
              var variable = this.variables[i];
              var name_labels = state.build.name_label[state.build.name_label.length - 1];
              if (Object.keys(name_labels).length) {
                name_labels[variable] = name_labels[Object.keys(name_labels)[0]];
              }
            }
            func = function(state2) {
              state2.nameOutput.reinit(this, this.variables_real[0]);
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.START) {
            state.build.names_flag = true;
            state.build.name_flag = false;
            state.build.names_level += 1;
            state.build.names_variables.push(this.variables);
            state.build.name_label.push({});
            func = function(state2) {
              state2.tmp.can_substitute.push(true);
              state2.tmp.name_node = {};
              state2.tmp.name_node.children = [];
              state2.nameOutput.init(this);
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            for (var i = 0, ilen = 3; i < ilen; i += 1) {
              var key = ["family", "given", "et-al"][i];
              this[key] = state.build[key];
              if (state.build.names_level === 1) {
                state.build[key] = void 0;
              }
            }
            this.label = state.build.name_label[state.build.name_label.length - 1];
            state.build.names_level += -1;
            state.build.names_variables.pop();
            state.build.name_label.pop();
            func = function(state2) {
              if (state2.tmp.etal_node) {
                this.etal_style = state2.tmp.etal_node;
              } else {
                this.etal_style = "empty";
              }
              this.etal_term = state2.getTerm(state2.tmp.etal_term, "long", 0);
              this.etal_prefix_single = " ";
              this.etal_prefix_multiple = state2.tmp.name_delimiter;
              if (state2.tmp["delimiter-precedes-et-al"] === "always") {
                this.etal_prefix_single = state2.tmp.name_delimiter;
              } else if (state2.tmp["delimiter-precedes-et-al"] === "never") {
                this.etal_prefix_multiple = " ";
              } else if (state2.tmp["delimiter-precedes-et-al"] === "after-inverted-name") {
                this.etal_prefix_single = state2.tmp.name_delimiter;
                this.etal_prefix_multiple = " ";
              }
              this.etal_suffix = "";
              if (!CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.etal_term)) {
                if (this.etal_prefix_single === " ") {
                  this.etal_prefix_single = "";
                }
                if (this.etal_prefix_multiple === " ") {
                  this.etal_prefix_multiple = "";
                }
                if (this.etal_suffix === " ") {
                  this.etal_suffix = "";
                }
              }
              for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
                var key2 = ["family", "given"][i2];
                state2.nameOutput[key2] = this[key2];
              }
              state2.nameOutput["with"] = this["with"];
              var mywith = "with";
              var with_default_prefix = "";
              var with_suffix = "";
              if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(mywith)) {
                with_default_prefix = " ";
                with_suffix = " ";
              }
              var thewith = {};
              thewith.single = new CSL2.Blob(mywith);
              thewith.single.strings.suffix = with_suffix;
              thewith.multiple = new CSL2.Blob(mywith);
              thewith.multiple.strings.suffix = with_suffix;
              if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "always") {
                thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
                thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "contextual") {
                thewith.single.strings.prefix = with_default_prefix;
                thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "after-inverted-name") {
                thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
                thewith.multiple.strings.prefix = with_default_prefix;
              } else {
                thewith.single.strings.prefix = with_default_prefix;
                thewith.multiple.strings.prefix = with_default_prefix;
              }
              state2.nameOutput["with"] = thewith;
              state2.nameOutput.label = this.label;
              state2.nameOutput.etal_style = this.etal_style;
              state2.nameOutput.etal_term = this.etal_term;
              state2.nameOutput.etal_prefix_single = this.etal_prefix_single;
              state2.nameOutput.etal_prefix_multiple = this.etal_prefix_multiple;
              state2.nameOutput.etal_suffix = this.etal_suffix;
              state2.nameOutput.outputNames();
              state2.tmp["et-al-use-first"] = void 0;
              state2.tmp["et-al-min"] = void 0;
              state2.tmp["et-al-use-last"] = void 0;
            };
            this.execs.push(func);
            func = function(state2) {
              if (!state2.tmp.can_substitute.pop()) {
                state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
              }
              if (state2.tmp.can_substitute.mystack.length === 1) {
                state2.tmp.can_block_substitute = false;
              }
            };
            this.execs.push(func);
            state.build.name_flag = false;
          }
          target.push(this);
          if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
            state.build.substitute_level.pop();
            CSL2.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL2.Node.number = {
        build: function(state, target) {
          var func;
          CSL2.Util.substituteStart.call(this, state, target);
          if (this.strings.form === "roman") {
            this.formatter = state.fun.romanizer;
          } else if (this.strings.form === "ordinal") {
            this.formatter = state.fun.ordinalizer;
          } else if (this.strings.form === "long-ordinal") {
            this.formatter = state.fun.long_ordinalizer;
          }
          if (typeof this.successor_prefix === "undefined") {
            this.successor_prefix = state[state.build.area].opt.layout_delimiter;
          }
          if (typeof this.splice_prefix === "undefined") {
            this.splice_prefix = state[state.build.area].opt.layout_delimiter;
          }
          func = function(state2, Item, item) {
            if (this.variables.length === 0) {
              return;
            }
            var varname;
            varname = this.variables[0];
            if (typeof item === "undefined") {
              var item = {};
            }
            if (["locator", "locator-extra"].indexOf(varname) > -1) {
              if (state2.tmp.just_looking) {
                return;
              }
              if (!item[varname]) {
                return;
              }
            } else {
              if (!Item[varname]) {
                return;
              }
            }
            if (varname === "collection-number" && Item.type === "legal_case") {
              state2.tmp.renders_collection_number = true;
            }
            var node = this;
            if (state2.tmp.group_context.tip.force_suppress) {
              return false;
            }
            if (["locator", "locator-extra"].indexOf(varname) > -1) {
              state2.processNumber.call(state2, node, item, varname, Item.type);
            } else {
              if (!state2.tmp.group_context.tip.condition && Item[varname]) {
                state2.tmp.just_did_number = ("" + Item[varname]).match(/[0-9]$/);
              }
              state2.processNumber.call(state2, node, Item, varname, Item.type);
            }
            if (this.substring) {
              var val = Item[varname].slice(this.substring);
              state2.output.append(val, node);
            } else {
              CSL2.Util.outputNumericField(state2, varname, Item.id);
            }
            if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
              state2.tmp.done_vars.push(this.variables_real[0]);
              state2.tmp.group_context.tip.done_vars.push(this.variables_real[0]);
            }
          };
          this.execs.push(func);
          target.push(this);
          CSL2.Util.substituteEnd.call(this, state, target);
        }
      };
      CSL2.Node.sort = {
        build: function(state, target) {
          target = state[state.build.root + "_sort"].tokens;
          if (this.tokentype === CSL2.START) {
            if (state.build.area === "citation") {
              state.opt.sort_citations = true;
            }
            state.build.area = state.build.root + "_sort";
            state.build.extension = "_sort";
            var func = function(state2, Item) {
              if (state2.opt.has_layout_locale) {
                var langspec = CSL2.localeResolve(Item.language, state2.opt["default-locale"][0]);
                var sort_locales = state2[state2.tmp.area.slice(0, -5)].opt.sort_locales;
                var langForItem;
                for (var i = 0, ilen = sort_locales.length; i < ilen; i += 1) {
                  langForItem = sort_locales[i][langspec.bare];
                  if (!langForItem) {
                    langForItem = sort_locales[i][langspec.best];
                  }
                  if (langForItem) {
                    break;
                  }
                }
                if (!langForItem) {
                  langForItem = state2.opt["default-locale"][0];
                }
                state2.tmp.lang_sort_hold = state2.opt.lang;
                state2.opt.lang = langForItem;
              }
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            state.build.area = state.build.root;
            state.build.extension = "";
            var func = function(state2) {
              if (state2.opt.has_layout_locale) {
                state2.opt.lang = state2.tmp.lang_sort_hold;
                delete state2.tmp.lang_sort_hold;
              }
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node.substitute = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL2.START) {
            var choose_start = new CSL2.Token("choose", CSL2.START);
            CSL2.Node.choose.build.call(choose_start, state, target);
            var if_singleton = new CSL2.Token("if", CSL2.SINGLETON);
            func = function() {
              if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
                return true;
              }
              return false;
            };
            if_singleton.tests = [func];
            if_singleton.test = state.fun.match.any(if_singleton, state, if_singleton.tests);
            target.push(if_singleton);
            func = function(state2) {
              state2.tmp.can_block_substitute = true;
              if (state2.tmp.value.length && !state2.tmp.common_term_match_fail) {
                state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
              }
              state2.tmp.common_term_match_fail = false;
            };
            this.execs.push(func);
            target.push(this);
          }
          if (this.tokentype === CSL2.END) {
            target.push(this);
            var choose_end = new CSL2.Token("choose", CSL2.END);
            CSL2.Node.choose.build.call(choose_end, state, target);
          }
        }
      };
      CSL2.Node.text = {
        build: function(state, target) {
          var func, form, plural, id, num, number2, formatter, firstoutput, specialdelimiter, label2, suffix, term;
          if (this.postponed_macro) {
            var group_start = CSL2.Util.cloneToken(this);
            group_start.name = "group";
            group_start.tokentype = CSL2.START;
            CSL2.Node.group.build.call(group_start, state, target);
            CSL2.expandMacro.call(state, this, target);
            var group_end = CSL2.Util.cloneToken(this);
            group_end.name = "group";
            group_end.tokentype = CSL2.END;
            if (this.postponed_macro === "juris-locator-label") {
              group_end.isJurisLocatorLabel = true;
            }
            CSL2.Node.group.build.call(group_end, state, target);
          } else {
            CSL2.Util.substituteStart.call(this, state, target);
            if (!this.variables_real) {
              this.variables_real = [];
            }
            if (!this.variables) {
              this.variables = [];
            }
            form = "long";
            plural = 0;
            if (this.strings.form) {
              form = this.strings.form;
            }
            if (this.strings.plural) {
              plural = this.strings.plural;
            }
            if (this.variables_real[0] === "citation-number" || this.variables_real[0] === "year-suffix" || this.variables_real[0] === "citation-label") {
              if (this.variables_real[0] === "citation-number") {
                if (state.build.root === "citation") {
                  state.opt.update_mode = CSL2.NUMERIC;
                }
                if (state.build.root === "bibliography") {
                  state.opt.bib_mode = CSL2.NUMERIC;
                }
                if (state[state.tmp.area].opt.collapse === "citation-number") {
                  this.range_prefix = state.getTerm("citation-range-delimiter");
                }
                this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                this.splice_prefix = state[state.build.area].opt.layout_delimiter;
                func = function(state2, Item, item) {
                  id = "" + Item.id;
                  if (!state2.tmp.just_looking) {
                    if (state2.tmp.area.slice(-5) === "_sort" && this.variables[0] === "citation-number") {
                      if (state2.tmp.area === "bibliography_sort") {
                        state2.tmp.group_context.tip.done_vars.push("citation-number");
                      }
                      if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                        var num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                      } else {
                        var num2 = state2.registry.registry[Item.id].seq;
                      }
                      if (num2) {
                        num2 = CSL2.Util.padding("" + num2);
                      }
                      state2.output.append(num2, this);
                      return;
                    }
                    if (item && item["author-only"]) {
                      state2.tmp.element_trace.replace("suppress-me");
                    }
                    if (state2.tmp.area !== "bibliography_sort" && state2.bibliography_sort.tmp.citation_number_map && state2.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
                      num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[id].seq];
                    } else {
                      num2 = state2.registry.registry[id].seq;
                    }
                    if (state2.opt.citation_number_slug) {
                      state2.output.append(state2.opt.citation_number_slug, this);
                    } else {
                      number2 = new CSL2.NumericBlob(state2, false, num2, this, Item.id);
                      if (state2.tmp.in_cite_predecessor) {
                        number2.suppress_splice_prefix = true;
                      }
                      state2.output.append(number2, "literal");
                    }
                  }
                };
                this.execs.push(func);
              } else if (this.variables_real[0] === "year-suffix") {
                state.opt.has_year_suffix = true;
                if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                  this.range_prefix = state.getTerm("citation-range-delimiter");
                }
                this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                  this.successor_prefix = state[state.build.area].opt["year-suffix-delimiter"];
                }
                func = function(state2, Item) {
                  if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.just_looking) {
                    num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                    if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                      this.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
                    }
                    number2 = new CSL2.NumericBlob(state2, false, num, this, Item.id);
                    formatter = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
                    number2.setFormatter(formatter);
                    state2.output.append(number2, "literal");
                    firstoutput = false;
                    for (var i = 0, ilen = state2.tmp.group_context.mystack.length; i < ilen; i++) {
                      var flags = state2.tmp.group_context.mystack[i];
                      if (!flags.variable_success && (flags.variable_attempt || !flags.variable_attempt && !flags.term_intended)) {
                        firstoutput = true;
                        break;
                      }
                    }
                    specialdelimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                    if (firstoutput && specialdelimiter && !state2.tmp.sort_key_flag) {
                      state2.tmp.splice_delimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                    }
                  }
                };
                this.execs.push(func);
              } else if (this.variables_real[0] === "citation-label") {
                if (state.build.root === "bibliography") {
                  state.opt.bib_mode = CSL2.TRIGRAPH;
                }
                state.opt.has_year_suffix = true;
                func = function(state2, Item) {
                  label2 = Item["citation-label"];
                  if (!label2) {
                    label2 = state2.getCitationLabel(Item);
                  }
                  if (!state2.tmp.just_looking) {
                    suffix = "";
                    if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false) {
                      num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                      suffix = state2.fun.suffixator.format(num);
                    }
                    label2 += suffix;
                  }
                  state2.output.append(label2, this);
                };
                this.execs.push(func);
              }
            } else {
              if (this.strings.term) {
                func = function(state2, Item) {
                  var gender = state2.opt.gender[Item.type];
                  var term2 = this.strings.term;
                  term2 = state2.getTerm(term2, form, plural, gender, CSL2.TOLERANT, this.default_locale);
                  var myterm;
                  if (term2 !== "") {
                    state2.tmp.group_context.tip.term_intended = true;
                  }
                  CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, term2, null, this);
                  if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                    myterm = CSL2.Output.Formatters["capitalize-first"](state2, term2);
                  } else {
                    myterm = term2;
                  }
                  if (state2.tmp.strip_periods) {
                    myterm = myterm.replace(/\./g, "");
                  } else {
                    for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                      if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                        myterm = myterm.replace(/\./g, "");
                        break;
                      }
                    }
                  }
                  state2.output.append(myterm, this);
                  if (state2.tmp.can_block_substitute) {
                    state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
                  }
                };
                this.execs.push(func);
                state.build.term = false;
                state.build.form = false;
                state.build.plural = false;
              } else if (this.variables_real.length) {
                func = function(state2, Item) {
                  if (this.variables_real[0] !== "locator") {
                    state2.tmp.have_collapsed = false;
                  }
                  if (!state2.tmp.group_context.tip.condition && Item[this.variables[0]]) {
                    state2.tmp.just_did_number = false;
                  }
                  var val = Item[this.variables[0]];
                  if (val && !state2.tmp.group_context.tip.condition) {
                    if (("" + val).slice(-1).match(/[0-9]/)) {
                      state2.tmp.just_did_number = true;
                    } else {
                      state2.tmp.just_did_number = false;
                    }
                  }
                };
                this.execs.push(func);
                if (CSL2.MULTI_FIELDS.indexOf(this.variables_real[0]) > -1 || this.variables_real[0].indexOf("-main") > -1 || this.variables_real[0].indexOf("-sub") > -1 || ["language-name", "language-name-original"].indexOf(this.variables_real[0]) > -1) {
                  var abbrevfam = this.variables[0];
                  var abbrfall = false;
                  var altvar = false;
                  var transfall = false;
                  if (form === "short") {
                    if (this.variables_real[0].slice(-6) !== "-short") {
                      altvar = this.variables_real[0] + "-short";
                    }
                  } else {
                    abbrevfam = false;
                  }
                  if (state.build.extension) {
                    transfall = true;
                  } else {
                    transfall = true;
                    abbrfall = true;
                  }
                  func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
                } else {
                  if (CSL2.CITE_FIELDS.indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item, item) {
                      if (item && item[this.variables[0]]) {
                        state2.processNumber(this, item, this.variables[0], Item.type);
                        CSL2.Util.outputNumericField(state2, this.variables[0], Item.id);
                        if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
                          state2.tmp.done_vars.push(this.variables_real[0]);
                        }
                      }
                    };
                  } else if (["page", "page-first", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume"].indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item) {
                      state2.processNumber(this, Item, this.variables[0], Item.type);
                      CSL2.Util.outputNumericField(state2, this.variables[0], Item.id);
                    };
                  } else if (["URL", "DOI"].indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item) {
                      var value;
                      if (this.variables[0]) {
                        value = state2.getVariable(Item, this.variables[0], form);
                        if (value) {
                          if (this.variables[0] === "URL" && form === "short") {
                            value = value.replace(/(.*\.[^\/]+)\/.*/, "$1");
                            if (value.match(/\/\/www\./)) {
                              value = value.replace(/https?:\/\//, "");
                            }
                          }
                          if (state2.opt.development_extensions.wrap_url_and_doi) {
                            if (!this.decorations.length || this.decorations[0][0] !== "@" + this.variables[0]) {
                              var clonetoken = CSL2.Util.cloneToken(this);
                              var groupblob = new CSL2.Blob(null, null, "url-wrapper");
                              groupblob.decorations.push(["@DOI", "true"]);
                              if (this.variables_real[0] === "DOI") {
                                var prefix;
                                if (this.strings.prefix && this.strings.prefix.match(/^.*https:\/\/doi\.org\/$/)) {
                                  value = value.replace(/^https?:\/\/doi\.org\//, "");
                                  if (value.match(/^https?:\/\//)) {
                                    prefix = "";
                                  } else {
                                    prefix = "https://doi.org/";
                                  }
                                  clonetoken.strings.prefix = this.strings.prefix.slice(0, clonetoken.strings.prefix.length - 16);
                                }
                                var prefixblob = new CSL2.Blob(prefix);
                                var valueblob = new CSL2.Blob(value);
                                groupblob.push(prefixblob);
                                groupblob.push(valueblob);
                                state2.output.append(groupblob, clonetoken, false, false, true);
                              } else {
                                var valueblob = new CSL2.Blob(value);
                                groupblob.push(valueblob);
                                state2.output.append(groupblob, clonetoken, false, false, true);
                              }
                            } else {
                              state2.output.append(value, this, false, false, true);
                            }
                          } else {
                            if (this.decorations.length) {
                              for (var i = this.decorations.length - 1; i > -1; i--) {
                                if (this.decorations[i][0] === "@" + this.variables[0]) {
                                  this.decorations = this.decorations.slice(0, i).concat(this.decorations.slice(i + 1));
                                }
                              }
                            }
                            state2.output.append(value, this, false, false, true);
                          }
                        }
                      }
                    };
                  } else if (this.variables_real[0] === "section") {
                    func = function(state2, Item) {
                      var value;
                      value = state2.getVariable(Item, this.variables[0], form);
                      if (value) {
                        state2.output.append(value, this);
                      }
                    };
                  } else if (this.variables_real[0] === "hereinafter") {
                    func = function(state2, Item) {
                      var value = state2.transform.abbrevs["default"]["hereinafter"][Item.id];
                      if (value) {
                        state2.output.append(value, this);
                        state2.tmp.group_context.tip.variable_success = true;
                      }
                    };
                  } else {
                    func = function(state2, Item) {
                      var value;
                      if (this.variables[0]) {
                        value = state2.getVariable(Item, this.variables[0], form);
                        if (value) {
                          value = "" + value;
                          value = value.split("\\").join("");
                          state2.output.append(value, this);
                        }
                      }
                    };
                  }
                }
                this.execs.push(func);
              } else if (this.strings.value) {
                func = function(state2) {
                  state2.tmp.group_context.tip.term_intended = true;
                  CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.value, true, this);
                  state2.output.append(this.strings.value, this);
                  if (state2.tmp.can_block_substitute) {
                    state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
                  }
                };
                this.execs.push(func);
              }
            }
            target.push(this);
            CSL2.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL2.Node.intext = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            state.build.area = "intext";
            state.build.root = "intext";
            state.build.extension = "";
            var func = function(state2, Item) {
              state2.tmp.area = "intext";
              state2.tmp.root = "intext";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            state.intext_sort = {
              opt: {
                sort_directions: state.citation_sort.opt.sort_directions
              }
            };
            state.intext.srt = state.citation.srt;
          }
          target.push(this);
        }
      };
      CSL2.Attributes = {};
      CSL2.Attributes["@disambiguate"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        if (arg === "true") {
          state.opt.has_disambiguate = true;
          var func = function(Item) {
            if (state.tmp.area === "bibliography") {
              if (state.tmp.disambiguate_count < state.registry.registry[Item.id].disambig.disambiguate) {
                state.tmp.disambiguate_count += 1;
                return true;
              }
            } else {
              state.tmp.disambiguate_maxMax += 1;
              if (state.tmp.disambig_settings.disambiguate && state.tmp.disambiguate_count < state.tmp.disambig_settings.disambiguate) {
                state.tmp.disambiguate_count += 1;
                return true;
              }
            }
            return false;
          };
          this.tests.push(func);
        } else if (arg === "check-ambiguity-and-backreference") {
          var func = function(Item) {
            if (state.registry.registry[Item.id].disambig.disambiguate && state.registry.registry[Item.id]["citation-count"] > 1) {
              return true;
            }
            return false;
          };
          this.tests.push(func);
        }
      };
      CSL2.Attributes["@is-numeric"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var variables = arg.split(/\s+/);
        var maketest = function(variable) {
          return function(Item, item) {
            var myitem = Item;
            if (item && ["locator", "locator-extra"].indexOf(variable) > -1) {
              myitem = item;
            }
            if (!myitem[variable]) {
              return false;
            }
            if (CSL2.NUMERIC_VARIABLES.indexOf(variable) > -1) {
              if (!state.tmp.shadow_numbers[variable]) {
                state.processNumber(false, myitem, variable, Item.type);
              }
              if (state.tmp.shadow_numbers[variable].numeric) {
                return true;
              }
            } else if (["title", "version"].indexOf(variable) > -1) {
              if (myitem[variable].slice(-1) === "" + parseInt(myitem[variable].slice(-1), 10)) {
                return true;
              }
            }
            return false;
          };
        };
        for (var i = 0; i < variables.length; i += 1) {
          this.tests.push(maketest(variables[i]));
        }
      };
      CSL2.Attributes["@is-uncertain-date"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var variables = arg.split(/\s+/);
        var maketest = function(myvariable) {
          return function(Item) {
            if (Item[myvariable] && Item[myvariable].circa) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = variables.length; i < ilen; i += 1) {
          this.tests.push(maketest(variables[i]));
        }
      };
      CSL2.Attributes["@locator"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.replace("sub verbo", "sub-verbo");
        trylabels = trylabels.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item, item) {
            var label2;
            state.processNumber(false, item, "locator");
            label2 = state.tmp.shadow_numbers.locator.label;
            if (label2 && trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL2.Attributes["@position"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryposition;
        state.opt.update_mode = CSL2.POSITION;
        var trypositions = arg.split(/\s+/);
        var testSubsequentNear = function(Item, item) {
          if (item && CSL2.POSITION_MAP[item.position] >= CSL2.POSITION_MAP[CSL2.POSITION_SUBSEQUENT] && item["near-note"]) {
            return true;
          }
          return false;
        };
        var testSubsequentNotNear = function(Item, item) {
          if (item && CSL2.POSITION_MAP[item.position] == CSL2.POSITION_MAP[CSL2.POSITION_SUBSEQUENT] && !item["near-note"]) {
            return true;
          }
          return false;
        };
        var maketest = function(tryposition2) {
          return function(Item, item) {
            if (state.tmp.area === "bibliography") {
              return false;
            }
            if (item && typeof item.position === "undefined") {
              item.position = 0;
            }
            if (item && typeof item.position === "number") {
              if (item.position === 0 && tryposition2 === 0) {
                return true;
              } else if (tryposition2 > 0 && CSL2.POSITION_MAP[item.position] >= CSL2.POSITION_MAP[tryposition2]) {
                return true;
              }
            } else if (tryposition2 === 0) {
              return true;
            }
            return false;
          };
        };
        for (var i = 0, ilen = trypositions.length; i < ilen; i += 1) {
          var tryposition = trypositions[i];
          if (tryposition === "first") {
            tryposition = CSL2.POSITION_FIRST;
          } else if (tryposition === "container-subsequent") {
            tryposition = CSL2.POSITION_CONTAINER_SUBSEQUENT;
          } else if (tryposition === "subsequent") {
            tryposition = CSL2.POSITION_SUBSEQUENT;
          } else if (tryposition === "ibid") {
            tryposition = CSL2.POSITION_IBID;
          } else if (tryposition === "ibid-with-locator") {
            tryposition = CSL2.POSITION_IBID_WITH_LOCATOR;
          }
          if (tryposition === "near-note") {
            this.tests.push(testSubsequentNear);
          } else if (tryposition === "far-note") {
            this.tests.push(testSubsequentNotNear);
          } else {
            this.tests.push(maketest(tryposition));
          }
        }
      };
      CSL2.Attributes["@type"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var types = arg.split(/\s+/);
        var maketest = function(mytype) {
          return function(Item) {
            var ret = Item.type === mytype;
            if (ret) {
              return true;
            } else {
              return false;
            }
          };
        };
        var tests = [];
        for (var i = 0, ilen = types.length; i < ilen; i += 1) {
          tests.push(maketest(types[i]));
        }
        this.tests.push(state.fun.match.any(this, state, tests));
      };
      CSL2.Attributes["@variable"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func;
        this.variables = arg.split(/\s+/);
        this.variables_real = this.variables.slice();
        if (this.name === "label" && this.variables[0]) {
          this.strings.term = this.variables[0];
        } else if (["names", "date", "text", "number"].indexOf(this.name) > -1) {
          func = function(state2, Item, item) {
            for (var i2 = this.variables.length - 1; i2 > -1; i2 += -1) {
              this.variables.pop();
            }
            for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
              if (state2.tmp.done_vars.indexOf(this.variables_real[i2]) === -1) {
                this.variables.push(this.variables_real[i2]);
              }
              if (state2.tmp.can_block_substitute) {
                state2.tmp.done_vars.push(this.variables_real[i2]);
              }
            }
          };
          this.execs.push(func);
          func = function(state2, Item, item) {
            var output = false;
            for (var i2 = 0, ilen2 = this.variables.length; i2 < ilen2; i2++) {
              var variable = this.variables[i2];
              if (["authority", "committee"].indexOf(variable) > -1 && typeof Item[variable] === "string" && this.name === "names") {
                var isValid = true;
                var rawNames = Item[variable].split(/\s*;\s*/);
                var rawMultiNames = {};
                if (Item.multi && Item.multi._keys[variable]) {
                  for (var langTag in Item.multi._keys[variable]) {
                    rawMultiNames[langTag] = Item.multi._keys[variable][langTag].split(/\s*;\s*/);
                    if (rawMultiNames[langTag].length !== rawNames.length) {
                      isValid = false;
                      break;
                    }
                  }
                }
                if (!isValid) {
                  rawNames = [Item[variable]];
                  rawMultiNames = Item.multi._keys[variable];
                }
                for (var j = 0, jlen = rawNames.length; j < jlen; j++) {
                  var creatorParent = {
                    literal: rawNames[j],
                    multi: {
                      _key: {}
                    }
                  };
                  for (var langTag in rawMultiNames) {
                    var creatorChild = {
                      literal: rawMultiNames[langTag][j]
                    };
                    creatorParent.multi._key[langTag] = creatorChild;
                  }
                  rawNames[j] = creatorParent;
                }
                Item[variable] = rawNames;
              }
              if (this.strings.form === "short" && !Item[variable]) {
                if (variable === "title") {
                  variable = "title-short";
                } else if (variable === "container-title") {
                  variable = "container-title-short";
                }
              }
              if (variable === "year-suffix") {
                output = true;
                break;
              } else if (CSL2.DATE_VARIABLES.indexOf(variable) > -1) {
                if (state2.opt.development_extensions.locator_date_and_revision && variable === "locator-date") {
                  output = true;
                  break;
                }
                if (Item[variable]) {
                  for (var key in Item[variable]) {
                    if (this.dateparts.indexOf(key) === -1 && key !== "literal") {
                      continue;
                    }
                    if (Item[variable][key]) {
                      output = true;
                      break;
                    }
                  }
                  if (output) {
                    break;
                  }
                }
              } else if (variable === "locator") {
                if (item && item.locator) {
                  output = true;
                }
                break;
              } else if (variable === "locator-extra") {
                if (item && item["locator-extra"]) {
                  output = true;
                }
                break;
              } else if (["citation-number", "citation-label"].indexOf(variable) > -1) {
                output = true;
                break;
              } else if (variable === "first-reference-note-number") {
                if (item && item["first-reference-note-number"]) {
                  output = true;
                }
                break;
              } else if (variable === "first-container-reference-note-number") {
                if (item && item["first-container-reference-note-number"]) {
                  output = true;
                }
                break;
              } else if (variable === "hereinafter") {
                if (state2.transform.abbrevs["default"].hereinafter[Item.id] && state2.sys.getAbbreviation && Item.id) {
                  output = true;
                }
                break;
              } else if (typeof Item[variable] === "object") {
                break;
              } else if (typeof Item[variable] === "string" && Item[variable]) {
                output = true;
                break;
              } else if (typeof Item[variable] === "number") {
                output = true;
                break;
              }
              if (output) {
                break;
              }
            }
            if (output) {
              for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
                var variable = this.variables_real[i2];
                if (variable !== "citation-number" || state2.tmp.area !== "bibliography") {
                  state2.tmp.cite_renders_content = true;
                }
                state2.tmp.group_context.tip.variable_success = true;
                if (state2.tmp.can_substitute.value() && state2.tmp.area === "bibliography" && typeof Item[variable] === "string") {
                  state2.tmp.name_node.top = state2.output.current.value();
                  state2.tmp.rendered_name.push(Item[variable]);
                }
              }
              state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
            } else {
              state2.tmp.group_context.tip.variable_attempt = true;
            }
          };
          this.execs.push(func);
        } else if (["if", "else-if", "condition"].indexOf(this.name) > -1) {
          var maketest = function(variable) {
            return function(Item, item) {
              var myitem = Item;
              if (item && ["locator", "locator-extra", "first-reference-note-number", "first-container-reference-note-number", "locator-date"].indexOf(variable) > -1) {
                myitem = item;
              }
              if (variable === "hereinafter" && state.sys.getAbbreviation && myitem.id) {
                if (state.transform.abbrevs["default"].hereinafter[myitem.id]) {
                  return true;
                }
              } else if (myitem[variable]) {
                if (typeof myitem[variable] === "number" || typeof myitem[variable] === "string") {
                  return true;
                } else if (typeof myitem[variable] === "object") {
                  for (var key in myitem[variable]) {
                    if (myitem[variable][key]) {
                      return true;
                    }
                  }
                }
              }
              return false;
            };
          };
          for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            this.tests.push(maketest(this.variables[i]));
          }
        }
      };
      CSL2.Attributes["@page"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.replace("sub verbo", "sub-verbo");
        trylabels = trylabels.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item) {
            var label2;
            state.processNumber(false, Item, "page", Item.type);
            if (!state.tmp.shadow_numbers.page.label) {
              label2 = "page";
            } else if (state.tmp.shadow_numbers.page.label === "sub verbo") {
              label2 = "sub-verbo";
            } else {
              label2 = state.tmp.shadow_numbers.page.label;
            }
            if (state.tmp.shadow_numbers.page.values.length > 0) {
              if (state.tmp.shadow_numbers.page.values[0].gotosleepability) {
                state.tmp.shadow_numbers.page.values[0].labelVisibility = false;
              }
            }
            if (trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL2.Attributes["@number"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item) {
            var label2;
            state.processNumber(false, Item, "number", Item.type);
            if (!state.tmp.shadow_numbers.number.label) {
              label2 = "number";
            } else {
              label2 = state.tmp.shadow_numbers.number.label;
            }
            if (trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL2.Attributes["@jurisdiction"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryjurisdictions = arg.split(/\s+/);
        var maketests = function(tryjurisdictions2) {
          return function(Item) {
            if (!Item.jurisdiction) {
              return false;
            }
            var jurisdiction2 = Item.jurisdiction;
            for (var i = 0, ilen = tryjurisdictions2.length; i < ilen; i++) {
              if (jurisdiction2 === tryjurisdictions2[i]) {
                return true;
              }
            }
            return false;
          };
        };
        this.tests.push(maketests(tryjurisdictions));
      };
      CSL2.Attributes["@country"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trycountries = arg.split(/\s+/);
        var maketests = function(trycountries2) {
          return function(Item) {
            if (!Item.country) {
              return false;
            }
            var country2 = Item.country;
            for (var i = 0, ilen = trycountries2.length; i < ilen; i++) {
              if (country2 === trycountries2[i]) {
                return true;
              }
            }
            return false;
          };
        };
        this.tests.push(maketests(trycountries));
      };
      CSL2.Attributes["@context"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function() {
          if (["bibliography", "citation"].indexOf(arg) > -1) {
            var area = state.tmp.area.slice(0, arg.length);
            if (area === arg) {
              return true;
            }
            return false;
          } else if (arg === "alternative") {
            return !!state.tmp.abort_alternative;
          }
        };
        this.tests.push(func);
      };
      CSL2.Attributes["@has-year-only"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || date2.month || date2.season) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL2.Attributes["@has-to-month-or-season"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || !date2.month && !date2.season || date2.day) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL2.Attributes["@has-day"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || !date2.day) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL2.Attributes["@is-plural"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function(Item) {
          var nameList = Item[arg];
          if (nameList && nameList.length) {
            var persons = 0;
            var institutions = 0;
            var last_is_person = false;
            for (var i = 0, ilen = nameList.length; i < ilen; i += 1) {
              if (state.opt.development_extensions.spoof_institutional_affiliations && (nameList[i].literal || nameList[i].isInstitution && nameList[i].family && !nameList[i].given)) {
                institutions += 1;
                last_is_person = false;
              } else {
                persons += 1;
                last_is_person = true;
              }
            }
            if (persons > 1) {
              return true;
            } else if (institutions > 1) {
              return true;
            } else if (institutions && last_is_person) {
              return true;
            }
          }
          return false;
        };
        this.tests.push(func);
      };
      CSL2.Attributes["@is-multiple"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function(Item) {
          var val = "" + Item[arg];
          var lst = val.split(/(?:,\s|\s(?:tot\sen\smet|līdz|oraz|and|bis|έως|και|och|až|do|en|et|in|ir|ja|og|sa|to|un|und|és|și|i|u|y|à|e|a|и|-|–)\s|—|\&)/);
          if (lst.length > 1) {
            return true;
          }
          return false;
        };
        this.tests.push(func);
      };
      CSL2.Attributes["@locale"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var ret, langspec, lang, lst, i, ilen;
        var locale_default = state.opt["default-locale"][0];
        if (this.name === "layout") {
          this.locale_raw = arg;
          if (this.tokentype === CSL2.START) {
            if (!state.opt.multi_layout) {
              state.opt.multi_layout = [];
            }
            var locale_data = [];
            var locales = arg.split(/\s+/);
            var sort_locale = {};
            var localeMaster = CSL2.localeResolve(locales[0], locale_default);
            locale_data.push(localeMaster);
            if (localeMaster.generic) {
              sort_locale[localeMaster.generic] = localeMaster.best;
            } else {
              sort_locale[localeMaster.best] = localeMaster.best;
            }
            for (var i = 1, ilen = locales.length; i < ilen; i += 1) {
              var localeServant = CSL2.localeResolve(locales[i], locale_default);
              locale_data.push(localeServant);
              if (localeServant.generic) {
                sort_locale[localeServant.generic] = localeMaster.best;
              } else {
                sort_locale[localeServant.best] = localeMaster.best;
              }
            }
            state[state.build.area].opt.sort_locales.push(sort_locale);
            state.opt.multi_layout.push(locale_data);
          }
          state.opt.has_layout_locale = true;
        } else {
          lst = arg.split(/\s+/);
          var locale_bares = [];
          for (i = 0, ilen = lst.length; i < ilen; i += 1) {
            lang = lst[i];
            langspec = CSL2.localeResolve(lang, locale_default);
            if (lst[i].length === 2) {
              locale_bares.push(langspec.bare);
            }
            state.localeConfigure(langspec, true);
            lst[i] = langspec;
          }
          var locale_list = lst.slice();
          var maketest = function(locale_list2, locale_default2, locale_bares2) {
            return function(Item) {
              var res;
              ret = [];
              res = false;
              var langspec2 = false;
              var lang2;
              if (!Item.language) {
                lang2 = locale_default2;
              } else {
                lang2 = Item.language;
              }
              langspec2 = CSL2.localeResolve(lang2, locale_default2);
              for (i = 0, ilen = locale_list2.length; i < ilen; i += 1) {
                if (langspec2.best === locale_list2[i].best) {
                  state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                  state.tmp.condition_lang_val_arr.push(state.opt.lang);
                  state.opt.lang = locale_list2[0].best;
                  res = true;
                  break;
                }
              }
              if (!res && locale_bares2.indexOf(langspec2.bare) > -1) {
                state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                state.tmp.condition_lang_val_arr.push(state.opt.lang);
                state.opt.lang = locale_list2[0].best;
                res = true;
              }
              return res;
            };
          };
          this.tests.push(maketest(locale_list, locale_default, locale_bares));
        }
      };
      CSL2.Attributes["@alternative-node-internal"] = function(state) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function() {
          return function() {
            return !state.tmp.abort_alternative;
          };
        };
        var me = this;
        this.tests.push(maketest(me));
      };
      CSL2.Attributes["@locale-internal"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var langspec, lang, lst, i, ilen;
        lst = arg.split(/\s+/);
        this.locale_bares = [];
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          lang = lst[i];
          langspec = CSL2.localeResolve(lang, state.opt["default-locale"][0]);
          if (lst[i].length === 2) {
            this.locale_bares.push(langspec.bare);
          }
          state.localeConfigure(langspec);
          lst[i] = langspec;
        }
        this.locale_default = state.opt["default-locale"][0];
        this.locale = lst[0].best;
        this.locale_list = lst.slice();
        var maketest = function(me2) {
          return function(Item) {
            var ret, res;
            ret = [];
            res = false;
            var langspec2 = false;
            if (Item.language) {
              lang = Item.language;
              langspec2 = CSL2.localeResolve(lang, state.opt["default-locale"][0]);
              if (langspec2.best === state.opt["default-locale"][0]) {
                langspec2 = false;
              }
            }
            if (langspec2) {
              for (i = 0, ilen = me2.locale_list.length; i < ilen; i += 1) {
                if (langspec2.best === me2.locale_list[i].best) {
                  state.opt.lang = me2.locale;
                  state.tmp.last_cite_locale = me2.locale;
                  state.output.openLevel("empty");
                  state.output.current.value().new_locale = me2.locale;
                  res = true;
                  break;
                }
              }
              if (!res && me2.locale_bares.indexOf(langspec2.bare) > -1) {
                state.opt.lang = me2.locale;
                state.tmp.last_cite_locale = me2.locale;
                state.output.openLevel("empty");
                state.output.current.value().new_locale = me2.locale;
                res = true;
              }
            }
            return res;
          };
        };
        var me = this;
        this.tests.push(maketest(me));
      };
      CSL2.Attributes["@court-class"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryclasses = arg.split(/\s+/);
        var maketest = function(tryclass) {
          return function(Item) {
            var cls = CSL2.GET_COURT_CLASS(state, Item);
            if (cls === tryclass) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = tryclasses.length; i < ilen; i++) {
          this.tests.push(maketest(tryclasses[i]));
        }
      };
      CSL2.Attributes["@container-multiple"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var retval = arg === "true" ? true : false;
        var maketest = function(retval2) {
          return function(Item) {
            if (!state.tmp.container_item_count[Item.container_id]) {
              return !retval2;
            } else if (state.tmp.container_item_count[Item.container_id] > 1) {
              return retval2;
            }
            return !retval2;
          };
        };
        this.tests.push(maketest(retval));
      };
      CSL2.Attributes["@container-subsequent"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var retval = arg === "true" ? true : false;
        var maketest = function(retval2) {
          return function(Item) {
            if (state.tmp.container_item_pos[Item.container_id] > 1) {
              return retval2;
            }
            return !retval2;
          };
        };
        this.tests.push(maketest(retval));
      };
      CSL2.Attributes["@has-subunit"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function(namevar) {
          return function(Item) {
            var subunit_count = 0;
            for (var i in Item[namevar]) {
              var name = Item[namevar][i];
              if (!name.given) {
                var institution2 = name.literal ? name.literal : name.family;
                var length = institution2.split("|").length;
                if (subunit_count === 0 || length < subunit_count) {
                  subunit_count = length;
                }
              }
            }
            return subunit_count > 1;
          };
        };
        this.tests.push(maketest(arg));
      };
      CSL2.Attributes["@cite-form"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function(citeForm) {
          return function(Item) {
            if (Item["cite-form"] === citeForm) {
              return true;
            }
            return false;
          };
        };
        this.tests.push(maketest(arg));
      };
      CSL2.Attributes["@disable-duplicate-year-suppression"] = function(state, arg) {
        state.opt.disable_duplicate_year_suppression = arg.split(/\s+/);
      };
      CSL2.Attributes["@consolidate-containers"] = function(state, arg) {
        CSL2.Attributes["@track-containers"](state, arg);
        var args = arg.split(/\s+/);
        state.bibliography.opt.consolidate_containers = args;
      };
      CSL2.Attributes["@track-containers"] = function(state, arg) {
        var args = arg.split(/\s+/);
        if (!state.bibliography.opt.track_container_items) {
          state.bibliography.opt.track_container_items = [];
        }
        if (!state.bibliography.opt.consolidate_containers) {
          state.bibliography.opt.consolidate_containers = [];
        }
        state.bibliography.opt.track_container_items = state.bibliography.opt.track_container_items.concat(args);
      };
      CSL2.Attributes["@parallel-first"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.parallel_first = {};
        for (var i in vars) {
          var v = vars[i];
          this.parallel_first[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL2.Attributes["@parallel-last"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.parallel_last = {};
        for (var i in vars) {
          var v = vars[i];
          this.parallel_last[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL2.Attributes["@parallel-last-to-first"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        this.parallel_last_to_first = {};
        for (var i = 0, ilen = vars.length; i < ilen; i++) {
          this.parallel_last_to_first[vars[i]] = true;
        }
      };
      CSL2.Attributes["@parallel-delimiter-override"] = function(state, arg) {
        state.opt.parallel.enable = true;
        this.strings.set_parallel_delimiter_override = arg;
      };
      CSL2.Attributes["@parallel-delimiter-override-on-suppress"] = function(state, arg) {
        state.opt.parallel.enable = true;
        this.strings.set_parallel_delimiter_override_on_suppress = arg;
      };
      CSL2.Attributes["@no-repeat"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.non_parallel = {};
        for (var i in vars) {
          var v = vars[i];
          this.non_parallel[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL2.Attributes["@require"] = function(state, arg) {
        state.opt.use_context_condition = true;
        this.strings.require = arg;
      };
      CSL2.Attributes["@reject"] = function(state, arg) {
        state.opt.use_context_condition = true;
        this.strings.reject = arg;
      };
      CSL2.Attributes["@require-comma-on-symbol"] = function(state, arg) {
        state.opt.require_comma_on_symbol = arg;
      };
      CSL2.Attributes["@gender"] = function(state, arg) {
        this.gender = arg;
      };
      CSL2.Attributes["@cslid"] = function(state, arg) {
        this.cslid = parseInt(arg, 10);
      };
      CSL2.Attributes["@capitalize-if-first"] = function(state, arg) {
        this.strings.capitalize_if_first_override = arg;
      };
      CSL2.Attributes["@label-capitalize-if-first"] = function(state, arg) {
        this.strings.label_capitalize_if_first_override = arg;
      };
      CSL2.Attributes["@label-form"] = function(state, arg) {
        this.strings.label_form_override = arg;
      };
      CSL2.Attributes["@part-separator"] = function(state, arg) {
        this.strings["part-separator"] = arg;
      };
      CSL2.Attributes["@leading-noise-words"] = function(state, arg) {
        this["leading-noise-words"] = arg;
      };
      CSL2.Attributes["@name-never-short"] = function(state, arg) {
        this["name-never-short"] = arg;
      };
      CSL2.Attributes["@class"] = function(state, arg) {
        state.opt["class"] = arg;
      };
      CSL2.Attributes["@version"] = function(state, arg) {
        state.opt.version = arg;
      };
      CSL2.Attributes["@value"] = function(state, arg) {
        this.strings.value = arg;
      };
      CSL2.Attributes["@name"] = function(state, arg) {
        this.strings.name = arg;
      };
      CSL2.Attributes["@form"] = function(state, arg) {
        this.strings.form = arg;
      };
      CSL2.Attributes["@date-parts"] = function(state, arg) {
        this.strings["date-parts"] = arg;
      };
      CSL2.Attributes["@range-delimiter"] = function(state, arg) {
        this.strings["range-delimiter"] = arg;
      };
      CSL2.Attributes["@macro"] = function(state, arg) {
        this.postponed_macro = arg;
      };
      CSL2.Attributes["@term"] = function(state, arg) {
        if (arg === "sub verbo") {
          this.strings.term = "sub-verbo";
        } else {
          this.strings.term = arg;
        }
      };
      CSL2.Attributes["@xmlns"] = function() {
      };
      CSL2.Attributes["@lang"] = function(state, arg) {
        if (arg) {
          state.build.lang = arg;
        }
      };
      CSL2.Attributes["@lingo"] = function() {
      };
      CSL2.Attributes["@macro-has-date"] = function() {
        this["macro-has-date"] = true;
      };
      CSL2.Attributes["@suffix"] = function(state, arg) {
        this.strings.suffix = arg;
      };
      CSL2.Attributes["@prefix"] = function(state, arg) {
        this.strings.prefix = arg;
      };
      CSL2.Attributes["@delimiter"] = function(state, arg) {
        this.strings.delimiter = arg;
      };
      CSL2.Attributes["@match"] = function(state, arg) {
        this.match = arg;
      };
      CSL2.Attributes["@names-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        this.strings["et-al-min"] = val;
      };
      CSL2.Attributes["@names-use-first"] = function(state, arg) {
        this.strings["et-al-use-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@names-use-last"] = function(state, arg) {
        if (arg === "true") {
          this.strings["et-al-use-last"] = true;
        } else {
          this.strings["et-al-use-last"] = false;
        }
      };
      CSL2.Attributes["@sort"] = function(state, arg) {
        if (arg === "descending") {
          this.strings.sort_direction = CSL2.DESCENDING;
        }
      };
      CSL2.Attributes["@plural"] = function(state, arg) {
        if (arg === "always" || arg === "true") {
          this.strings.plural = 1;
        } else if (arg === "never" || arg === "false") {
          this.strings.plural = 0;
        } else if (arg === "contextual") {
          this.strings.plural = false;
        }
      };
      CSL2.Attributes["@has-publisher-and-publisher-place"] = function() {
        this.strings["has-publisher-and-publisher-place"] = true;
      };
      CSL2.Attributes["@publisher-delimiter-precedes-last"] = function(state, arg) {
        this.strings["publisher-delimiter-precedes-last"] = arg;
      };
      CSL2.Attributes["@publisher-delimiter"] = function(state, arg) {
        this.strings["publisher-delimiter"] = arg;
      };
      CSL2.Attributes["@publisher-and"] = function(state, arg) {
        this.strings["publisher-and"] = arg;
      };
      CSL2.Attributes["@givenname-disambiguation-rule"] = function(state, arg) {
        if (CSL2.GIVENNAME_DISAMBIGUATION_RULES.indexOf(arg) > -1) {
          state.citation.opt["givenname-disambiguation-rule"] = arg;
        }
      };
      CSL2.Attributes["@collapse"] = function(state, arg) {
        if (arg) {
          state[this.name].opt.collapse = arg;
        }
      };
      CSL2.Attributes["@cite-group-delimiter"] = function(state, arg) {
        if (arg) {
          state[state.tmp.area].opt.cite_group_delimiter = arg;
        }
      };
      CSL2.Attributes["@names-delimiter"] = function(state, arg) {
        state.setOpt(this, "names-delimiter", arg);
      };
      CSL2.Attributes["@name-form"] = function(state, arg) {
        state.setOpt(this, "name-form", arg);
      };
      CSL2.Attributes["@subgroup-delimiter"] = function(state, arg) {
        this.strings["subgroup-delimiter"] = arg;
      };
      CSL2.Attributes["@subgroup-delimiter-precedes-last"] = function(state, arg) {
        this.strings["subgroup-delimiter-precedes-last"] = arg;
      };
      CSL2.Attributes["@name-delimiter"] = function(state, arg) {
        state.setOpt(this, "name-delimiter", arg);
      };
      CSL2.Attributes["@et-al-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        state.setOpt(this, "et-al-min", val);
      };
      CSL2.Attributes["@et-al-use-first"] = function(state, arg) {
        state.setOpt(this, "et-al-use-first", parseInt(arg, 10));
      };
      CSL2.Attributes["@et-al-use-last"] = function(state, arg) {
        if (arg === "true") {
          state.setOpt(this, "et-al-use-last", true);
        } else {
          state.setOpt(this, "et-al-use-last", false);
        }
      };
      CSL2.Attributes["@et-al-subsequent-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        state.setOpt(this, "et-al-subsequent-min", val);
      };
      CSL2.Attributes["@et-al-subsequent-use-first"] = function(state, arg) {
        state.setOpt(this, "et-al-subsequent-use-first", parseInt(arg, 10));
      };
      CSL2.Attributes["@suppress-min"] = function(state, arg) {
        this.strings["suppress-min"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@suppress-max"] = function(state, arg) {
        this.strings["suppress-max"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@and"] = function(state, arg) {
        state.setOpt(this, "and", arg);
      };
      CSL2.Attributes["@delimiter-precedes-last"] = function(state, arg) {
        state.setOpt(this, "delimiter-precedes-last", arg);
      };
      CSL2.Attributes["@delimiter-precedes-et-al"] = function(state, arg) {
        state.setOpt(this, "delimiter-precedes-et-al", arg);
      };
      CSL2.Attributes["@initialize-with"] = function(state, arg) {
        state.setOpt(this, "initialize-with", arg);
      };
      CSL2.Attributes["@initialize"] = function(state, arg) {
        if (arg === "false") {
          state.setOpt(this, "initialize", false);
        }
      };
      CSL2.Attributes["@name-as-reverse-order"] = function(state, arg) {
        this["name-as-reverse-order"] = arg;
      };
      CSL2.Attributes["@name-as-sort-order"] = function(state, arg) {
        if (this.name === "style-options") {
          this["name-as-sort-order"] = arg;
        } else {
          state.setOpt(this, "name-as-sort-order", arg);
        }
      };
      CSL2.Attributes["@sort-separator"] = function(state, arg) {
        state.setOpt(this, "sort-separator", arg);
      };
      CSL2.Attributes["@require-match"] = function(state, arg) {
        if (arg === "true") {
          this.requireMatch = true;
        }
      };
      CSL2.Attributes["@exclude-types"] = function(state, arg) {
        state.bibliography.opt.exclude_types = arg.split(/\s+/);
      };
      CSL2.Attributes["@exclude-with-fields"] = function(state, arg) {
        state.bibliography.opt.exclude_with_fields = arg.split(/\s+/);
      };
      CSL2.Attributes["@year-suffix-delimiter"] = function(state, arg) {
        state[this.name].opt["year-suffix-delimiter"] = arg;
      };
      CSL2.Attributes["@after-collapse-delimiter"] = function(state, arg) {
        state[this.name].opt["after-collapse-delimiter"] = arg;
      };
      CSL2.Attributes["@subsequent-author-substitute"] = function(state, arg) {
        state[this.name].opt["subsequent-author-substitute"] = arg;
      };
      CSL2.Attributes["@subsequent-author-substitute-rule"] = function(state, arg) {
        state[this.name].opt["subsequent-author-substitute-rule"] = arg;
      };
      CSL2.Attributes["@disambiguate-add-names"] = function(state, arg) {
        if (arg === "true") {
          state.opt["disambiguate-add-names"] = true;
        }
      };
      CSL2.Attributes["@disambiguate-add-givenname"] = function(state, arg) {
        if (arg === "true") {
          state.opt["disambiguate-add-givenname"] = true;
        }
      };
      CSL2.Attributes["@disambiguate-add-year-suffix"] = function(state, arg) {
        if (arg === "true" && state.opt.xclass !== "numeric") {
          state.opt["disambiguate-add-year-suffix"] = true;
        }
      };
      CSL2.Attributes["@second-field-align"] = function(state, arg) {
        if (arg === "flush" || arg === "margin") {
          state[this.name].opt["second-field-align"] = arg;
        }
      };
      CSL2.Attributes["@hanging-indent"] = function(state, arg) {
        if (arg === "true") {
          if (state.opt.development_extensions.hanging_indent_legacy_number) {
            state[this.name].opt.hangingindent = 2;
          } else {
            state[this.name].opt.hangingindent = true;
          }
        }
      };
      CSL2.Attributes["@line-spacing"] = function(state, arg) {
        if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["line-spacing"] = parseFloat(arg, 10);
        }
      };
      CSL2.Attributes["@entry-spacing"] = function(state, arg) {
        if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["entry-spacing"] = parseFloat(arg, 10);
        }
      };
      CSL2.Attributes["@near-note-distance"] = function(state, arg) {
        state[this.name].opt["near-note-distance"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@substring"] = function(state, arg) {
        this.substring = parseInt(arg, 10);
      };
      CSL2.Attributes["@text-case"] = function(state, arg) {
        var func = function(state2, Item) {
          if (arg === "normal") {
            this.text_case_normal = true;
          } else {
            this.strings["text-case"] = arg;
            if (arg === "title") {
              if (Item.jurisdiction) {
                this.strings["text-case"] = "passthrough";
              }
            }
          }
        };
        this.execs.push(func);
      };
      CSL2.Attributes["@page-range-format"] = function(state, arg) {
        state.opt["page-range-format"] = arg;
      };
      CSL2.Attributes["@year-range-format"] = function(state, arg) {
        state.opt["year-range-format"] = arg;
      };
      CSL2.Attributes["@default-locale"] = function(state, arg) {
        if (this.name === "style") {
          var lst, len, pos, m, ret;
          var m = arg.match(/-x-(sort|translit|translat)-/g);
          if (m) {
            for (pos = 0, len = m.length; pos < len; pos += 1) {
              m[pos] = m[pos].replace(/^-x-/, "").replace(/-$/, "");
            }
          }
          lst = arg.split(/-x-(?:sort|translit|translat)-/);
          ret = [lst[0]];
          for (pos = 1, len = lst.length; pos < len; pos += 1) {
            ret.push(m[pos - 1]);
            ret.push(lst[pos]);
          }
          lst = ret.slice();
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
            state.opt["locale-" + lst[pos]].push(lst[pos + 1].replace(/^\s*/g, "").replace(/\s*$/g, ""));
          }
          if (lst.length) {
            state.opt["default-locale"] = lst.slice(0, 1);
          } else {
            state.opt["default-locale"] = ["en"];
          }
        } else if (arg === "true") {
          this.default_locale = true;
        }
      };
      CSL2.Attributes["@default-locale-sort"] = function(state, arg) {
        state.opt["default-locale-sort"] = arg;
      };
      CSL2.Attributes["@demote-non-dropping-particle"] = function(state, arg) {
        state.opt["demote-non-dropping-particle"] = arg;
      };
      CSL2.Attributes["@initialize-with-hyphen"] = function(state, arg) {
        if (arg === "false") {
          state.opt["initialize-with-hyphen"] = false;
        }
      };
      CSL2.Attributes["@institution-parts"] = function(state, arg) {
        this.strings["institution-parts"] = arg;
      };
      CSL2.Attributes["@if-short"] = function(state, arg) {
        if (arg === "true") {
          this.strings["if-short"] = true;
        }
      };
      CSL2.Attributes["@substitute-use-first"] = function(state, arg) {
        this.strings["substitute-use-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@use-first"] = function(state, arg) {
        this.strings["use-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@use-last"] = function(state, arg) {
        this.strings["use-last"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@stop-first"] = function(state, arg) {
        this.strings["stop-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@stop-last"] = function(state, arg) {
        this.strings["stop-last"] = parseInt(arg, 10) * -1;
      };
      CSL2.Attributes["@reverse-order"] = function(state, arg) {
        if (arg === "true") {
          this.strings["reverse-order"] = true;
        }
      };
      CSL2.Attributes["@display"] = function(state, arg) {
        if (state.bibliography.tokens.length === 2) {
          state.opt.using_display = true;
        }
        this.strings.cls = arg;
      };
      CSL2.Stack = function(val, literal) {
        this.mystack = [];
        if (literal || val) {
          this.mystack.push(val);
        }
        this.tip = this.mystack[0];
      };
      CSL2.Stack.prototype.push = function(val, literal) {
        if (literal || val) {
          this.mystack.push(val);
        } else {
          this.mystack.push("");
        }
        this.tip = this.mystack[this.mystack.length - 1];
      };
      CSL2.Stack.prototype.clear = function() {
        this.mystack = [];
        this.tip = {};
      };
      CSL2.Stack.prototype.replace = function(val, literal) {
        if (this.mystack.length === 0) {
          CSL2.error("Internal CSL processor error: attempt to replace nonexistent stack item with " + val);
        }
        if (literal || val) {
          this.mystack[this.mystack.length - 1] = val;
        } else {
          this.mystack[this.mystack.length - 1] = "";
        }
        this.tip = this.mystack[this.mystack.length - 1];
      };
      CSL2.Stack.prototype.pop = function() {
        var ret = this.mystack.pop();
        if (this.mystack.length) {
          this.tip = this.mystack[this.mystack.length - 1];
        } else {
          this.tip = {};
        }
        return ret;
      };
      CSL2.Stack.prototype.value = function() {
        return this.mystack.slice(-1)[0];
      };
      CSL2.Stack.prototype.length = function() {
        return this.mystack.length;
      };
      CSL2.Parallel = function(state) {
        this.state = state;
      };
      CSL2.Parallel.prototype.StartCitation = function(sortedItems, out) {
        this.state.tmp.suppress_repeats = [];
        if (sortedItems.length < 2)
          return;
        var idxEnd = 0;
        var parallelMatchList = false;
        var siblingRanges = [];
        for (var i = 0, ilen = sortedItems.length - 1; i < ilen; i++) {
          var currItem = sortedItems[i][0];
          var nextItem = sortedItems[i + 1][0];
          var freshMatchList = false;
          var info = {};
          if (sortedItems[i][0].seeAlso && sortedItems[i][0].seeAlso.length > 0 && !parallelMatchList) {
            freshMatchList = true;
            parallelMatchList = [sortedItems[i][0].id].concat(sortedItems[i][0].seeAlso);
            var tempMatchList = parallelMatchList.slice();
            var remainder = sortedItems.slice(i);
            remainder[0][1].parallel = "first";
            for (var j = 0, jlen = remainder.length; j < jlen; j++) {
              var itemID = remainder[j][0].id;
              var ididx = tempMatchList.indexOf(itemID);
              idxEnd = false;
              if (ididx === -1) {
                idxEnd = i + j - 1;
              } else if (i + j === sortedItems.length - 1) {
                idxEnd = i + j;
              }
              if (idxEnd) {
                siblingRanges.push([i, idxEnd]);
                break;
              } else {
                tempMatchList = tempMatchList.slice(0, ididx).concat(tempMatchList.slice(ididx + 1));
              }
            }
          }
          if (i > 0 && freshMatchList) {
            this.state.tmp.suppress_repeats[i - 1].START = true;
            freshMatchList = false;
          }
          for (var varname in this.state.opt.track_repeat) {
            if (!currItem[varname] || !nextItem[varname]) {
              info[varname] = false;
            } else if (typeof nextItem[varname] === "string" || typeof nextItem[varname] === "number") {
              if (varname === "title" && currItem["title-short"] && nextItem["title-short"]) {
                var currVal = currItem["title-short"];
                var nextVal = nextItem["title-short"];
              } else {
                var currVal = currItem[varname];
                var nextVal = nextItem[varname];
              }
              if (currVal == nextVal) {
                info[varname] = true;
              } else {
                info[varname] = false;
              }
            } else if (typeof currItem[varname].length === "undefined") {
              info[varname] = false;
              var currYear = currItem[varname].year;
              var nextYear = nextItem[varname].year;
              if (currYear && nextYear) {
                if (currYear == nextYear) {
                  info[varname] = true;
                }
              }
            } else {
              var currVal = JSON.stringify(currItem[varname]);
              var nextVal = JSON.stringify(nextItem[varname]);
              if (currVal === nextVal) {
                info[varname] = true;
              } else {
                info[varname] = false;
              }
            }
          }
          if (!parallelMatchList) {
            info.ORPHAN = true;
          }
          if (idxEnd === i) {
            info.END = true;
            parallelMatchList = false;
          }
          this.state.tmp.suppress_repeats.push(info);
        }
        for (var j = 0, jlen = siblingRanges.length; j < jlen; j++) {
          var masterID = sortedItems[siblingRanges[j][0]][0].id;
          this.state.registry.registry[masterID].master = true;
          this.state.registry.registry[masterID].siblings = [];
          var start = siblingRanges[j][0];
          var end = siblingRanges[j][1];
          for (var k = start; k < end; k++) {
            this.state.tmp.suppress_repeats[k].SIBLING = true;
            var siblingID = sortedItems[k + 1][0].id;
            sortedItems[k + 1][1].parallel = "other";
            this.state.registry.registry[masterID].siblings.push(siblingID);
          }
        }
      };
      CSL2.Parallel.prototype.checkRepeats = function(params) {
        var idx = this.state.tmp.cite_index;
        if (this.state.tmp.suppress_repeats) {
          if (params.parallel_first && Object.keys(params.parallel_first).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.parallel_first) {
              if (!arr[idx][varname] || arr[idx].START) {
                ret = false;
              }
            }
            return ret;
          }
          if (params.parallel_last && Object.keys(params.parallel_last).length > 0) {
            var arr = this.state.tmp.suppress_repeats.concat([{}]);
            var ret = Object.keys(params.parallel_last).length > 0 ? true : false;
            for (var varname in params.parallel_last) {
              if (!arr[idx][varname] || arr[idx].END) {
                ret = false;
              }
            }
            return ret;
          }
          if (params.non_parallel && Object.keys(params.non_parallel).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.non_parallel) {
              if (!arr[idx][varname]) {
                ret = false;
              }
            }
            return ret;
          }
        }
        return false;
      };
      CSL2.Util = {};
      CSL2.Util.Match = function() {
        this.any = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (result) {
                return true;
              }
            }
            return false;
          };
        };
        this.none = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (result) {
                return false;
              }
            }
            return true;
          };
        };
        this.all = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (!result) {
                return false;
              }
            }
            return true;
          };
        };
        this[void 0] = this.all;
        this.nand = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (!result) {
                return true;
              }
            }
            return false;
          };
        };
      };
      CSL2.Transform = function(state) {
        this.abbrevs = {};
        this.abbrevs["default"] = new state.sys.AbbreviationSegments();
        function getCountryOrJurisdiction(variable, normalizedKey, quashCountry) {
          var value = "";
          if (state.sys.getHumanForm) {
            if (variable === "country") {
              value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
              value = value.split("|")[0];
            } else if (variable === "jurisdiction") {
              value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
              if (!quashCountry) {
                value = value.split("|").slice(1).join(", ");
              } else {
                value = "";
              }
            }
          }
          return value;
        }
        function abbreviate(state2, tok, Item, altvar, basevalue, family_var, use_field) {
          var value = "";
          var myabbrev_family = CSL2.FIELD_CATEGORY_REMAP[family_var];
          var preferredJurisdiction;
          if (!myabbrev_family) {
            return basevalue;
          }
          var variable = family_var;
          var normalizedKey = basevalue;
          if (state2.sys.normalizeAbbrevsKey) {
            normalizedKey = state2.sys.normalizeAbbrevsKey(family_var, basevalue);
          }
          var quashCountry = false;
          if (variable === "jurisdiction" && normalizedKey) {
            quashCountry = normalizedKey.indexOf(":") === -1;
          }
          if (["jurisdiction", "country"].indexOf(family_var) > -1 && basevalue === basevalue.toLowerCase()) {
            normalizedKey = basevalue.toUpperCase();
          }
          if (state2.sys.getAbbreviation) {
            if (["jurisdiction", "country", "language-name", "language-name-original"].indexOf(variable) > -1) {
              preferredJurisdiction = "default";
            } else if (Item.jurisdiction) {
              preferredJurisdiction = Item.jurisdiction;
            } else {
              preferredJurisdiction = "default";
            }
            var jurisdiction2 = state2.transform.loadAbbreviation(preferredJurisdiction, myabbrev_family, normalizedKey, Item.language);
            if (state2.transform.abbrevs[jurisdiction2][myabbrev_family] && normalizedKey) {
              var abbrev = state2.transform.abbrevs[jurisdiction2][myabbrev_family][normalizedKey];
              if (tok.strings.form === "short" && abbrev) {
                if (quashCountry) {
                  value = "";
                } else {
                  value = abbrev;
                }
              } else {
                value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
              }
            }
          }
          if (!value && (!state2.opt.development_extensions.require_explicit_legal_case_title_short || Item.type !== "legal_case") && altvar && Item[altvar] && use_field) {
            value = Item[altvar];
          }
          if (!value && !state2.sys.getAbbreviation && state2.sys.getHumanForm) {
            value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
          }
          if (!value && !quashCountry && (!state2.sys.getHumanForm || variable !== "jurisdiction")) {
            value = basevalue;
          }
          if (state2.opt.development_extensions.force_title_abbrev_fallback) {
            if (variable === "title" && value === basevalue && Item["title-short"]) {
              value = Item["title-short"];
            }
          }
          return value;
        }
        function getFieldLocale(Item, field) {
          var ret = state.opt["default-locale"][0].slice(0, 2);
          var localeRex;
          if (state.opt.development_extensions.strict_text_case_locales) {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*| .*)");
          } else {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*|.*)");
          }
          if (Item.language) {
            var m = ("" + Item.language).match(localeRex);
            if (m) {
              ret = m[1];
            } else {
              ret = "tlh";
            }
          }
          if (Item.multi && Item.multi && Item.multi.main && Item.multi.main[field]) {
            ret = Item.multi.main[field];
          }
          if (!state.opt.development_extensions.strict_text_case_locales || state.opt.development_extensions.normalize_lang_keys_to_lowercase) {
            ret = ret.toLowerCase();
          }
          return ret;
        }
        function getTextSubField(Item, field, locale_type, use_default, stopOrig, family_var) {
          var opt, o, ret, opts;
          var usedOrig = stopOrig;
          var usingOrig = false;
          if (!Item[field]) {
            return {
              name: "",
              usedOrig: stopOrig,
              token: CSL2.Util.cloneToken(this)
            };
          }
          var stickyLongForm = false;
          if (CSL2.VARIABLES_WITH_SHORT_FORM.indexOf(field) > -1 && family_var) {
            field = field + "-short";
            stickyLongForm = true;
          }
          var breakMe = false;
          var firstValue = null;
          var fieldsToTry = [];
          if (field.slice(-6) === "-short") {
            fieldsToTry.push(field);
            fieldsToTry.push(field.slice(0, -6));
          } else {
            fieldsToTry.push(field);
          }
          for (var h = 0, hlen = fieldsToTry.length; h < hlen; h++) {
            var variantMatch = false;
            var field = fieldsToTry[h];
            ret = { name: "", usedOrig: stopOrig, locale: getFieldLocale(Item, field) };
            opts = state.opt[locale_type] ? state.opt[locale_type].slice() : [];
            var hasVal = false;
            if (locale_type === "locale-orig") {
              if (!stopOrig) {
                ret.name = Item[field];
                ret.usedOrig = false;
              }
              hasVal = true;
              usingOrig = true;
            } else if (use_default && (typeof opts === "undefined" || opts.length === 0)) {
              ret.name = Item[field];
              ret.usedOrig = true;
              hasVal = true;
              usingOrig = true;
            }
            if (!hasVal) {
              for (var i = 0, ilen = opts.length; i < ilen; i += 1) {
                opt = opts[i];
                o = opt.split(/[\-_]/)[0];
                if (opt && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][opt]) {
                  ret.name = Item.multi._keys[field][opt];
                  ret.locale = opt;
                  hasVal = true;
                  variantMatch = true;
                  usingOrig = false;
                  break;
                } else if (o && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][o]) {
                  ret.name = Item.multi._keys[field][o];
                  ret.locale = o;
                  hasVal = true;
                  variantMatch = true;
                  usingOrig = false;
                  break;
                }
              }
              if (!ret.name && use_default) {
                ret = { name: Item[field], usedOrig: true, locale: getFieldLocale(Item, field) };
                usingOrig = true;
              }
            }
            ret.token = CSL2.Util.cloneToken(this);
            if (h === 0) {
              if (variantMatch) {
                ret.found_variant_ok = true;
              }
              firstValue = ret;
              if (!stickyLongForm && (typeof opts === "undefined" || opts.length === 0)) {
                breakMe = true;
              }
              if (variantMatch) {
                breakMe = true;
              }
            } else {
              if (!stickyLongForm && !variantMatch && firstValue) {
                ret = firstValue;
                field = fieldsToTry[0];
              } else if (variantMatch) {
                ret.found_variant_ok = true;
              }
            }
            if (["title", "container-title"].indexOf(field) > -1) {
              if (!usedOrig && (!ret.token.strings["text-case"] || ret.token.strings["text-case"] === "sentence" || ret.token.strings["text-case"] === "normal")) {
                var locale = state.opt.lang;
                var lang;
                if (usingOrig) {
                  lang = false;
                } else {
                  lang = ret.locale;
                }
                var seg = field.slice(0, -5);
                var sentenceCase = ret.token.strings["text-case"] === "sentence" ? true : false;
                ret.name = CSL2.titlecaseSentenceOrNormal(state, Item, seg, lang, sentenceCase);
                delete ret.token.strings["text-case"];
              }
            }
            if (breakMe) {
              break;
            }
          }
          return ret;
        }
        this.getTextSubField = getTextSubField;
        function loadAbbreviation(jurisdiction2, category, orig, lang) {
          if (!jurisdiction2) {
            jurisdiction2 = "default";
          }
          var country2 = jurisdiction2.split(":")[0];
          var domain = CSL2.getAbbrevsDomain(state, country2, lang);
          if (domain) {
            jurisdiction2 += "@" + domain;
          }
          if (!orig) {
            if (!state.transform.abbrevs[jurisdiction2]) {
              state.transform.abbrevs[jurisdiction2] = new state.sys.AbbreviationSegments();
            }
            if (!state.transform.abbrevs[jurisdiction2][category]) {
              state.transform.abbrevs[jurisdiction2][category] = {};
            }
            return jurisdiction2;
          }
          if (state.sys.getAbbreviation) {
            jurisdiction2 = state.sys.getAbbreviation(state.opt.styleID, state.transform.abbrevs, jurisdiction2, category, orig);
            if (!jurisdiction2) {
              jurisdiction2 = "default";
              if (domain) {
                jurisdiction2 += "@" + domain;
              }
            }
          }
          return jurisdiction2;
        }
        this.loadAbbreviation = loadAbbreviation;
        function publisherCheck(tok, Item, primary, family_var) {
          var varname = tok.variables[0];
          if (state.publisherOutput && primary) {
            if (["publisher", "publisher-place"].indexOf(varname) === -1) {
              return false;
            } else {
              state.publisherOutput[varname + "-token"] = tok;
              state.publisherOutput.varlist.push(varname);
              var lst = primary.split(/;\s*/);
              if (lst.length === state.publisherOutput[varname + "-list"].length) {
                state.publisherOutput[varname + "-list"] = lst;
              }
              for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                lst[i] = abbreviate(state, tok, Item, false, lst[i], family_var, true);
              }
              state.tmp[varname + "-token"] = tok;
              return true;
            }
          }
          return false;
        }
        function citeFormCheck(Item, value) {
          var m = value.match(/^#([0-9]+).*>>>/);
          if (m && m[1]) {
            Item["cite-form"] = m[1];
          }
        }
        function quashCheck(jurisdiction2, value) {
          var m = value.match(/^(?:#[0-9]+)*(?:!((?:[-_a-z]+(?:(?:.*)))(?:,(?:[-_a-z]+(?:(?:.*))))*))*>>>/);
          if (m) {
            value = value.slice(m[0].length);
            if (m[1]) {
              var fields = m[1].split(",");
              for (var i = 0, ilen = fields.length; i < ilen; i += 1) {
                var rawField = fields[i];
                var mm = rawField.match(/^([-_a-z]+)(?:\:(.*))*$/);
                var field = mm[1];
                var trimmer = state.tmp.abbrev_trimmer;
                if (mm[2]) {
                  if (trimmer && jurisdiction2) {
                    if (!trimmer[jurisdiction2]) {
                      trimmer[jurisdiction2] = {};
                    }
                    trimmer[jurisdiction2][field] = mm[2];
                  }
                } else if (state.tmp.done_vars.indexOf(field) === -1) {
                  if (trimmer && jurisdiction2) {
                    if (!trimmer.QUASHES[jurisdiction2]) {
                      trimmer.QUASHES[jurisdiction2] = {};
                    }
                    trimmer.QUASHES[jurisdiction2][field] = true;
                  }
                  state.tmp.done_vars.push(field);
                }
              }
            }
          }
          return value;
        }
        this.quashCheck = quashCheck;
        function getOutputFunction(variables, family_var, abbreviation_fallback, alternative_varname) {
          var localesets;
          var langPrefs = CSL2.LangPrefsMap[variables[0]];
          if (!langPrefs) {
            localesets = false;
          } else {
            localesets = state.opt["cite-lang-prefs"][langPrefs];
          }
          return function(state2, Item, item) {
            var primary, primary_locale, secondary, secondary_locale, tertiary, tertiary_locale, primary_tok;
            if (!variables[0] || !Item[variables[0]] && !Item[alternative_varname]) {
              return null;
            }
            if (!state2.tmp.just_looking && item && item["suppress-author"]) {
              if (!state2.tmp.probably_rendered_something && state2.tmp.can_substitute.length() > 1) {
                return null;
              }
            }
            var slot = { primary: false, secondary: false, tertiary: false };
            if (state2.tmp.area.slice(-5) === "_sort") {
              slot.primary = "locale-sort";
            } else {
              if (localesets && localesets.length === 1 && localesets[0] === "locale-orig") {
                slot.primary = "locale-orig";
                localesets = false;
              } else if (localesets && !state2.tmp.multi_layout) {
                var slotnames = ["primary", "secondary", "tertiary"];
                for (var i = 0, ilen = slotnames.length; i < ilen; i += 1) {
                  if (localesets.length - 1 < i) {
                    break;
                  }
                  if (localesets[i]) {
                    slot[slotnames[i]] = "locale-" + localesets[i];
                  }
                }
              } else {
                slot.primary = "locale-orig";
              }
            }
            if (variables[0] === "title-short" || state2.tmp.area !== "bibliography" && !(state2.tmp.area === "citation" && state2.opt.xclass === "note" && item && !item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            if (state2.tmp.multi_layout) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            if (state2.tmp["publisher-list"]) {
              if (variables[0] === "publisher") {
                state2.tmp["publisher-token"] = this;
              } else if (variables[0] === "publisher-place") {
                state2.tmp["publisher-place-token"] = this;
              }
              return null;
            }
            var oldLangArray = state2.tmp.lang_array.slice();
            var res = getTextSubField.call(this, Item, variables[0], slot.primary, true, null, family_var);
            primary = res.name;
            primary_locale = res.locale;
            var primary_tok = res.token;
            var primaryUsedOrig = res.usedOrig;
            if (family_var && !res.found_variant_ok) {
              primary = abbreviate(state2, primary_tok, Item, alternative_varname, primary, family_var, true);
              if (primary) {
                citeFormCheck(Item, primary);
                if (!state2.tmp.just_looking) {
                  primary = quashCheck(Item.jurisdiction, primary);
                }
              }
            }
            if (publisherCheck(this, Item, primary, family_var)) {
              state2.tmp.lang_array = oldLangArray;
              return null;
            }
            secondary = false;
            tertiary = false;
            var secondary_tok;
            var tertiary_tok;
            if (slot.secondary) {
              res = getTextSubField.call(this, Item, variables[0], slot.secondary, false, res.usedOrig, null, family_var);
              secondary = res.name;
              secondary_locale = res.locale;
              secondary_tok = res.token;
              if (family_var && !res.found_variant_ok) {
                if (secondary) {
                  secondary = abbreviate(state2, secondary_tok, Item, false, secondary, family_var, true);
                }
              }
            }
            if (slot.tertiary) {
              res = getTextSubField.call(this, Item, variables[0], slot.tertiary, false, res.usedOrig, null, family_var);
              tertiary = res.name;
              tertiary_locale = res.locale;
              tertiary_tok = res.token;
              if (family_var && !res.found_variant_ok) {
                if (tertiary) {
                  tertiary = abbreviate(state2, tertiary_tok, Item, false, tertiary, family_var, true);
                }
              }
            }
            var primaryPrefix;
            if (slot.primary === "locale-translit") {
              primaryPrefix = state2.opt.citeAffixes[langPrefs][slot.primary].prefix;
            }
            if (primaryPrefix === "<i>" && variables[0] === "title" && !primaryUsedOrig) {
              var hasItalic = false;
              for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                if (primary_tok.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                  hasItalic = true;
                }
              }
              if (!hasItalic) {
                primary_tok.decorations.push(["@font-style", "italic"]);
              }
            }
            if (primary_locale !== "en" && primary_tok.strings["text-case"] === "title") {
              primary_tok.strings["text-case"] = "passthrough";
            }
            if (variables[0] === "title") {
              primary = CSL2.demoteNoiseWords(state2, primary, this["leading-noise-words"]);
            }
            if (secondary || tertiary) {
              state2.output.openLevel("empty");
              primary_tok.strings.suffix = primary_tok.strings.suffix.replace(/[ .,]+$/, "");
              if (primary_locale) {
                state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
              }
              CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
              state2.output.append(primary, primary_tok);
              state2.tmp.probably_rendered_something = true;
              if (primary === secondary) {
                secondary = false;
              }
              if (secondary) {
                secondary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.secondary].prefix;
                secondary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.secondary].suffix;
                if (!secondary_tok.strings.prefix) {
                  secondary_tok.strings.prefix = " ";
                }
                for (var i = secondary_tok.decorations.length - 1; i > -1; i += -1) {
                  if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(secondary_tok.decorations[i].join("/")) > -1) {
                    secondary_tok.decorations = secondary_tok.decorations.slice(0, i).concat(secondary_tok.decorations.slice(i + 1));
                  }
                }
                if (secondary_locale !== "en" && secondary_tok.strings["text-case"] === "title") {
                  secondary_tok.strings["text-case"] = "passthrough";
                }
                if (secondary_locale) {
                  state2.tmp.lang_array = [secondary_locale].concat(oldLangArray);
                }
                var secondary_outer = new CSL2.Token();
                secondary_outer.decorations.push(["@font-style", "normal"]);
                secondary_outer.decorations.push(["@font-weight", "normal"]);
                state2.output.openLevel(secondary_outer);
                state2.output.append(secondary, secondary_tok);
                state2.output.closeLevel();
                var blob_obj = state2.output.current.value();
                var blobs_pos = state2.output.current.value().blobs.length - 1;
              }
              if (primary === tertiary) {
                tertiary = false;
              }
              if (tertiary) {
                tertiary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.tertiary].prefix;
                tertiary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.tertiary].suffix;
                if (!tertiary_tok.strings.prefix) {
                  tertiary_tok.strings.prefix = " ";
                }
                for (var i = tertiary_tok.decorations.length - 1; i > -1; i += -1) {
                  if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(tertiary_tok.decorations[i].join("/")) > -1) {
                    tertiary_tok.decorations = tertiary_tok.decorations.slice(0, i).concat(tertiary_tok.decorations.slice(i + 1));
                  }
                }
                if (tertiary_locale !== "en" && tertiary_tok.strings["text-case"] === "title") {
                  tertiary_tok.strings["text-case"] = "passthrough";
                }
                if (tertiary_locale) {
                  state2.tmp.lang_array = [tertiary_locale].concat(oldLangArray);
                }
                var tertiary_outer = new CSL2.Token();
                tertiary_outer.decorations.push(["@font-style", "normal"]);
                tertiary_outer.decorations.push(["@font-weight", "normal"]);
                state2.output.openLevel(tertiary_outer);
                state2.output.append(tertiary, tertiary_tok);
                state2.output.closeLevel();
                var blob_obj = state2.output.current.value();
                var blobs_pos = state2.output.current.value().blobs.length - 1;
              }
              state2.output.closeLevel();
            } else {
              if (primary_locale) {
                state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
              }
              CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
              state2.output.append(primary, primary_tok);
              state2.tmp.probably_rendered_something = true;
            }
            state2.tmp.lang_array = oldLangArray;
            if (state2.tmp.can_block_substitute) {
              state2.tmp.name_node.children.push(state2.output.current.value());
            }
            return null;
          };
        }
        this.getOutputFunction = getOutputFunction;
      };
      CSL2.Token = function(name, tokentype, conditional) {
        this.name = name;
        this.strings = {};
        this.strings.delimiter = void 0;
        this.strings.prefix = "";
        this.strings.suffix = "";
        this.decorations = [];
        this.variables = [];
        this.execs = [];
        this.tokentype = tokentype;
      };
      CSL2.Util.cloneToken = function(token) {
        var newtok, key, pos, len;
        if (typeof token === "string") {
          return token;
        }
        newtok = new CSL2.Token(token.name, token.tokentype);
        for (var key in token.strings) {
          if (token.strings.hasOwnProperty(key)) {
            newtok.strings[key] = token.strings[key];
          }
        }
        if (token.decorations) {
          newtok.decorations = [];
          for (pos = 0, len = token.decorations.length; pos < len; pos += 1) {
            newtok.decorations.push(token.decorations[pos].slice());
          }
        }
        if (token.variables) {
          newtok.variables = token.variables.slice();
        }
        if (token.execs) {
          newtok.execs = token.execs.slice();
          if (token.tests) {
            newtok.tests = token.tests.slice();
          }
        }
        return newtok;
      };
      CSL2.AmbigConfig = function() {
        this.maxvals = [];
        this.minval = 1;
        this.names = [];
        this.givens = [];
        this.year_suffix = false;
        this.disambiguate = 0;
      };
      CSL2.Blob = function(str, token, levelname) {
        var len, pos, key;
        this.levelname = levelname;
        if (token) {
          this.strings = { "prefix": "", "suffix": "" };
          for (var key in token.strings) {
            if (token.strings.hasOwnProperty(key)) {
              this.strings[key] = token.strings[key];
            }
          }
          this.decorations = [];
          if (token.decorations === void 0) {
            len = 0;
          } else {
            len = token.decorations.length;
          }
          for (pos = 0; pos < len; pos += 1) {
            this.decorations.push(token.decorations[pos].slice());
          }
        } else {
          this.strings = {};
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.strings.delimiter = "";
          this.decorations = [];
        }
        if (typeof str === "string") {
          this.blobs = str;
        } else if (str) {
          this.blobs = [str];
        } else {
          this.blobs = [];
        }
        this.alldecor = [this.decorations];
      };
      CSL2.Blob.prototype.push = function(blob) {
        if (typeof this.blobs === "string") {
          CSL2.error("Attempt to push blob onto string object");
        } else if (blob !== false) {
          blob.alldecor = blob.alldecor.concat(this.alldecor);
          this.blobs.push(blob);
        }
      };
      CSL2.NumericBlob = function(state, particle, num, mother_token, id) {
        this.id = id;
        this.alldecor = [];
        this.num = num;
        this.particle = particle;
        this.blobs = num.toString();
        this.status = CSL2.START;
        this.strings = {};
        if (mother_token) {
          if (mother_token.strings["text-case"]) {
            var textCase = mother_token.strings["text-case"];
            this.particle = CSL2.Output.Formatters[textCase](state, this.particle);
            this.blobs = CSL2.Output.Formatters[textCase](state, this.blobs);
          }
          this.gender = mother_token.gender;
          this.decorations = mother_token.decorations;
          this.strings.prefix = mother_token.strings.prefix;
          this.strings.suffix = mother_token.strings.suffix;
          this.strings["text-case"] = mother_token.strings["text-case"];
          this.successor_prefix = mother_token.successor_prefix;
          this.range_prefix = mother_token.range_prefix;
          this.splice_prefix = mother_token.splice_prefix;
          this.formatter = mother_token.formatter;
          if (!this.formatter) {
            this.formatter = new CSL2.Output.DefaultFormatter();
          }
          if (this.formatter) {
            this.type = this.formatter.format(1);
          }
        } else {
          this.decorations = [];
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.successor_prefix = "";
          this.range_prefix = "";
          this.splice_prefix = "";
          this.formatter = new CSL2.Output.DefaultFormatter();
        }
      };
      CSL2.NumericBlob.prototype.setFormatter = function(formatter) {
        this.formatter = formatter;
        this.type = this.formatter.format(1);
      };
      CSL2.Output.DefaultFormatter = function() {
      };
      CSL2.Output.DefaultFormatter.prototype.format = function(num) {
        return num.toString();
      };
      CSL2.NumericBlob.prototype.checkNext = function(next, start) {
        if (start) {
          this.status = CSL2.START;
          if (typeof next === "object") {
            if (next.num === this.num + 1) {
              next.status = CSL2.SUCCESSOR;
            } else {
              next.status = CSL2.SEEN;
            }
          }
        } else if (!next || !next.num || this.type !== next.type || next.num !== this.num + 1) {
          if (this.status === CSL2.SUCCESSOR_OF_SUCCESSOR) {
            this.status = CSL2.END;
          }
          if (typeof next === "object") {
            next.status = CSL2.SEEN;
          }
        } else {
          if (this.status === CSL2.START || this.status === CSL2.SEEN) {
            next.status = CSL2.SUCCESSOR;
          } else if (this.status === CSL2.SUCCESSOR || this.status === CSL2.SUCCESSOR_OF_SUCCESSOR) {
            if (this.range_prefix) {
              next.status = CSL2.SUCCESSOR_OF_SUCCESSOR;
              this.status = CSL2.SUPPRESS;
            } else {
              next.status = CSL2.SUCCESSOR;
            }
          }
        }
      };
      CSL2.NumericBlob.prototype.checkLast = function(last) {
        if (this.status === CSL2.SEEN || last.num !== this.num - 1 && this.status === CSL2.SUCCESSOR) {
          this.status = CSL2.SUCCESSOR;
          return true;
        }
        return false;
      };
      CSL2.Util.fixDateNode = function(parent, pos, node) {
        var form, variable, datexml, subnode, partname, attr, val, prefix, suffix, children, subchildren, display, cslid;
        var lingo = this.cslXml.getAttributeValue(node, "lingo");
        var default_locale = this.cslXml.getAttributeValue(node, "default-locale");
        this.build.date_key = true;
        form = this.cslXml.getAttributeValue(node, "form");
        var lingo;
        if (default_locale) {
          lingo = this.opt["default-locale"][0];
        } else {
          lingo = this.cslXml.getAttributeValue(node, "lingo");
        }
        if (!this.getDate(form, default_locale)) {
          return parent;
        }
        var dateparts = this.cslXml.getAttributeValue(node, "date-parts");
        variable = this.cslXml.getAttributeValue(node, "variable");
        prefix = this.cslXml.getAttributeValue(node, "prefix");
        suffix = this.cslXml.getAttributeValue(node, "suffix");
        display = this.cslXml.getAttributeValue(node, "display");
        cslid = this.cslXml.getAttributeValue(node, "cslid");
        datexml = this.cslXml.nodeCopy(this.getDate(form, default_locale));
        this.cslXml.setAttribute(datexml, "lingo", this.opt.lang);
        this.cslXml.setAttribute(datexml, "form", form);
        this.cslXml.setAttribute(datexml, "date-parts", dateparts);
        this.cslXml.setAttribute(datexml, "cslid", cslid);
        this.cslXml.setAttribute(datexml, "variable", variable);
        this.cslXml.setAttribute(datexml, "default-locale", default_locale);
        if (prefix) {
          this.cslXml.setAttribute(datexml, "prefix", prefix);
        }
        if (suffix) {
          this.cslXml.setAttribute(datexml, "suffix", suffix);
        }
        if (display) {
          this.cslXml.setAttribute(datexml, "display", display);
        }
        children = this.cslXml.children(datexml);
        for (var key in children) {
          subnode = children[key];
          if (this.cslXml.nodename(subnode) === "date-part") {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            if (default_locale) {
              this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, "@default-locale", "true");
            }
          }
        }
        children = this.cslXml.children(node);
        for (var key in children) {
          subnode = children[key];
          if (this.cslXml.nodename(subnode) === "date-part") {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            subchildren = this.cslXml.attributes(subnode);
            for (attr in subchildren) {
              if (attr === "@name") {
                continue;
              }
              if (lingo && lingo !== this.opt.lang) {
                if (["@suffix", "@prefix", "@form"].indexOf(attr) > -1) {
                  continue;
                }
              }
              val = subchildren[attr];
              this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, attr, val);
            }
          }
        }
        if (this.cslXml.getAttributeValue(node, "date-parts") === "year") {
          this.cslXml.deleteNodeByNameAttribute(datexml, "month");
          this.cslXml.deleteNodeByNameAttribute(datexml, "day");
        } else if (this.cslXml.getAttributeValue(node, "date-parts") === "year-month") {
          this.cslXml.deleteNodeByNameAttribute(datexml, "day");
        } else if (this.cslXml.getAttributeValue(node, "date-parts") === "month-day") {
          var childNodes = this.cslXml.children(datexml);
          for (var i = 1, ilen = this.cslXml.numberofnodes(childNodes); i < ilen; i++) {
            if (this.cslXml.getAttributeValue(childNodes[i], "name") === "year") {
              this.cslXml.setAttribute(childNodes[i - 1], "suffix", "");
              break;
            }
          }
          this.cslXml.deleteNodeByNameAttribute(datexml, "year");
        }
        return this.cslXml.insertChildNodeAfter(parent, node, pos, datexml);
      };
      CSL2.dateMacroAsSortKey = function(state, Item) {
        CSL2.dateAsSortKey.call(this, state, Item, true);
      };
      CSL2.dateAsSortKey = function(state, Item, isMacro) {
        var dp, elem, value, e, yr, prefix, i, ilen;
        var variable = this.variables[0];
        var macroFlag = "empty";
        if (isMacro && state.tmp.extension) {
          macroFlag = "macro-with-date";
        }
        dp = Item[variable];
        if (typeof dp === "undefined") {
          dp = { "date-parts": [[0]] };
        }
        if (typeof this.dateparts === "undefined") {
          this.dateparts = ["year", "month", "day"];
        }
        if (dp.raw) {
          dp = state.fun.dateparser.parseDateToArray(dp.raw);
        } else if (dp["date-parts"]) {
          dp = state.dateParseArray(dp);
        }
        if (typeof dp === "undefined") {
          dp = {};
        }
        if (dp.year) {
          for (i = 0, ilen = CSL2.DATE_PARTS_INTERNAL.length; i < ilen; i += 1) {
            elem = CSL2.DATE_PARTS_INTERNAL[i];
            value = 0;
            e = elem;
            if (e.slice(-4) === "_end") {
              e = e.slice(0, -4);
            }
            if (dp[elem] && this.dateparts.indexOf(e) > -1) {
              value = dp[elem];
            }
            if (elem.slice(0, 4) === "year") {
              yr = CSL2.Util.Dates[e].numeric(state, value);
              var prefix = "1";
              if (yr[0] === "-") {
                prefix = "0";
                yr = yr.slice(1);
                yr = 9999 - parseInt(yr, 10);
              }
              state.output.append(CSL2.Util.Dates[elem.slice(0, 4)].numeric(state, prefix + yr), macroFlag);
            } else {
              value = CSL2.Util.Dates[e]["numeric-leading-zeros"](state, value);
              if (!value) {
                value = "00";
              }
              state.output.append(value, macroFlag);
            }
          }
        }
      };
      CSL2.Engine.prototype.dateParseArray = function(date_obj) {
        var ret, field, dp, exts;
        ret = {};
        for (field in date_obj) {
          if (field === "date-parts") {
            dp = date_obj["date-parts"];
            if (dp.length > 1) {
              if (dp[0].length !== dp[1].length) {
                CSL2.error("CSL data error: element mismatch in date range input.");
              }
            }
            exts = ["", "_end"];
            for (var i = 0, ilen = dp.length; i < ilen; i += 1) {
              for (var j = 0, jlen = CSL2.DATE_PARTS.length; j < jlen; j += 1) {
                if (isNaN(parseInt(dp[i][j], 10))) {
                  ret[CSL2.DATE_PARTS[j] + exts[i]] = void 0;
                } else {
                  ret[CSL2.DATE_PARTS[j] + exts[i]] = parseInt(dp[i][j], 10);
                }
              }
            }
          } else if (date_obj.hasOwnProperty(field)) {
            if (field === "literal" && typeof date_obj.literal === "object" && typeof date_obj.literal.part === "string") {
              CSL2.debug("Warning: fixing up weird literal date value");
              ret.literal = date_obj.literal.part;
            } else {
              ret[field] = date_obj[field];
            }
          }
        }
        return ret;
      };
      CSL2.Util.Names = {};
      CSL2.Util.Names.compareNamesets = CSL2.NameOutput.prototype._compareNamesets;
      CSL2.Util.Names.unInitialize = function(state, name) {
        var i, ilen, namelist, punctlist, ret;
        if (!name) {
          return "";
        }
        namelist = name.split(/(?:\-|\s+)/);
        punctlist = name.match(/(\-|\s+)/g);
        ret = "";
        for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          ret += namelist[i];
          if (i < ilen - 1) {
            ret += punctlist[i];
          }
        }
        return ret;
      };
      CSL2.Util.Names.initializeWith = function(state, name, terminator, normalizeOnly) {
        var i, ilen, mm, lst, ret;
        if (!name) {
          return "";
        }
        if (!terminator) {
          terminator = "";
        }
        if (["Lord", "Lady"].indexOf(name) > -1 || !name.replace(/^(?:<[^>]+>)*/, "").match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) && !terminator.match("%s")) {
          return name;
        }
        if (state.opt["initialize-with-hyphen"] === false) {
          name = name.replace(/\-/g, " ");
        }
        name = name.replace(/\s*\-\s*/g, "-").replace(/\s+/g, " ");
        name = name.replace(/-([a-z])/g, "\u2013$1");
        for (var i = name.length - 2; i > -1; i += -1) {
          if (name.slice(i, i + 1) === "." && name.slice(i + 1, i + 2) !== " ") {
            name = name.slice(0, i) + ". " + name.slice(i + 1);
          }
        }
        var nameSplits = CSL2.Output.Formatters.nameDoppel.split(name);
        var namelist = [];
        namelist = [nameSplits.strings[0]];
        if (nameSplits.tags.length === 0) {
          var mmm = namelist[0].match(/[^\.]+$/);
          if (mmm && mmm[0].length === 1 && mmm[0] !== mmm[0].toLowerCase()) {
            namelist[0] += ".";
          }
        }
        for (i = 1, ilen = nameSplits.strings.length; i < ilen; i += 1) {
          namelist.push(nameSplits.tags[i - 1]);
          namelist.push(nameSplits.strings[i]);
        }
        if (normalizeOnly) {
          ret = this.doNormalize(state, namelist, terminator);
        } else {
          ret = this.doInitialize(state, namelist, terminator);
        }
        ret = ret.replace(/\u2013([a-z])/g, "-$1");
        return ret;
      };
      CSL2.Util.Names.notag = function(str) {
        return str.replace(/^(?:<[^>]+>)*/, "");
      };
      CSL2.Util.Names.mergetag = function(state, tagstr, newstr) {
        var m = tagstr.match(/(?:-*<[^>]+>-*)/g);
        if (!m) {
          return newstr;
        } else {
          tagstr = m.join("");
        }
        m = newstr.match(/^(.*[^\s])*(\s+)$/);
        if (m) {
          m[1] = m[1] ? m[1] : "";
          newstr = m[1] + tagstr + m[2];
        } else {
          newstr = newstr + tagstr;
        }
        return newstr;
      };
      CSL2.Util.Names.tagonly = function(state, str) {
        var m = str.match(/(?:<[^>]+>)+/);
        if (!m) {
          return str;
        } else {
          return m.join("");
        }
      };
      CSL2.Util.Names.doNormalize = function(state, namelist, terminator) {
        var i, ilen;
        terminator = terminator ? terminator : "";
        var isAbbrev = [];
        for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          if (this.notag(namelist[i]).length > 1 && this.notag(namelist[i]).slice(-1) === ".") {
            namelist[i] = namelist[i].replace(/^(.*)\.(.*)$/, "$1$2");
            isAbbrev.push(true);
          } else if (namelist[i].length === 1 && namelist[i].toUpperCase() === namelist[i]) {
            isAbbrev.push(true);
          } else {
            isAbbrev.push(false);
          }
        }
        for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          if (isAbbrev[i]) {
            if (i < namelist.length - 2) {
              namelist[i + 1] = this.tagonly(state, namelist[i + 1]);
              if (!isAbbrev[i + 2]) {
                namelist[i + 1] = this.tagonly(state, namelist[i + 1]) + " ";
              }
              if (namelist[i + 2].length > 1) {
                namelist[i + 1] = terminator.replace(/\ufeff$/, "") + namelist[i + 1];
              } else {
                namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
              }
            }
            if (i === namelist.length - 1) {
              namelist[i] = namelist[i] + terminator;
            }
          }
        }
        return namelist.join("").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
      };
      CSL2.Util.Names.doInitialize = function(state, namelist, terminator) {
        var i, ilen, m, j, jlen, lst, n;
        for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          n = namelist[i];
          if (!n) {
            continue;
          }
          m = n.match(CSL2.NAME_INITIAL_REGEXP);
          if (!m && (!n.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) && n.length > 1 && terminator.match("%s"))) {
            m = n.match(/(.)(.*)/);
          }
          if (m && m[2] && m[3]) {
            m[1] = m[1] + m[2];
            m[2] = "";
          }
          if (m && m[1].slice(0, 1) === m[1].slice(0, 1).toUpperCase()) {
            var extra = "";
            if (m[2]) {
              var s = "";
              lst = m[2].split("");
              for (j = 0, jlen = lst.length; j < jlen; j += 1) {
                var c = lst[j];
                if (c === c.toUpperCase()) {
                  s += c;
                } else {
                  break;
                }
              }
              if (s.length < m[2].length) {
                extra = CSL2.toLocaleLowerCase.call(state, s);
              }
            }
            namelist[i] = m[1] + extra;
            if (i < ilen - 1) {
              if (terminator.match("%s")) {
                namelist[i] = terminator.replace("%s", namelist[i]);
              } else {
                if (namelist[i + 1].indexOf("-") > -1) {
                  namelist[i + 1] = this.mergetag(state, namelist[i + 1].replace("-", ""), terminator) + "-";
                } else {
                  namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
                }
              }
            } else {
              if (terminator.match("%s")) {
                namelist[i] = terminator.replace("%s", namelist[i]);
              } else {
                namelist.push(terminator);
              }
            }
          } else if (n.match(CSL2.ROMANESQUE_REGEXP) && (!m || !m[3])) {
            namelist[i] = " " + n;
          }
        }
        var ret = namelist.join("");
        ret = ret.replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
        return ret;
      };
      CSL2.Util.Names.getRawName = function(name) {
        var ret = [];
        if (name.literal) {
          ret.push(name.literal);
        } else {
          if (name.given) {
            ret.push(name.given);
          }
          if (name.family) {
            ret.push(name.family);
          }
        }
        return ret.join(" ");
      };
      CSL2.Util.Dates = {};
      CSL2.Util.Dates.year = {};
      CSL2.Util.Dates.year["long"] = function(state, num) {
        if (!num) {
          if (typeof num === "boolean") {
            num = "";
          } else {
            num = 0;
          }
        }
        return num.toString();
      };
      CSL2.Util.Dates.year.imperial = function(state, num, end) {
        var year = "";
        if (!num) {
          if (typeof num === "boolean") {
            num = "";
          } else {
            num = 0;
          }
        }
        end = end ? "_end" : "";
        var month = state.tmp.date_object["month" + end];
        month = month ? "" + month : "1";
        while (month.length < 2) {
          month = "0" + month;
        }
        var day = state.tmp.date_object["day" + end];
        day = day ? "" + day : "1";
        while (day.length < 2) {
          day = "0" + day;
        }
        var date2 = parseInt(num + month + day, 10);
        var label2;
        var offset;
        if (date2 >= 18680908 && date2 < 19120730) {
          label2 = "\u660E\u6CBB";
          offset = 1867;
        } else if (date2 >= 19120730 && date2 < 19261225) {
          label2 = "\u5927\u6B63";
          offset = 1911;
        } else if (date2 >= 19261225 && date2 < 19890108) {
          label2 = "\u662D\u548C";
          offset = 1925;
        } else if (date2 >= 19890108) {
          label2 = "\u5E73\u6210";
          offset = 1988;
        }
        if (label2 && offset) {
          var normalizedKey = label2;
          if (state.sys.normalizeAbbrevsKey) {
            normalizedKey = state.sys.normalizeAbbrevsKey("number", label2);
          }
          if (!state.transform.abbrevs["default"]["number"][normalizedKey]) {
            state.transform.loadAbbreviation("default", "number", normalizedKey, null);
          }
          if (state.transform.abbrevs["default"]["number"][normalizedKey]) {
            label2 = state.transform.abbrevs["default"]["number"][normalizedKey];
          }
          year = label2 + (num - offset);
        }
        return year;
      };
      CSL2.Util.Dates.year["short"] = function(state, num) {
        num = num.toString();
        if (num && num.length === 4) {
          return num.substr(2);
        }
      };
      CSL2.Util.Dates.year.numeric = function(state, num) {
        var m, pre;
        num = "" + num;
        var m = num.match(/([0-9]*)$/);
        if (m) {
          pre = num.slice(0, m[1].length * -1);
          num = m[1];
        } else {
          pre = num;
          num = "";
        }
        while (num.length < 4) {
          num = "0" + num;
        }
        return pre + num;
      };
      CSL2.Util.Dates.normalizeMonth = function(num, useSeason) {
        var ret;
        if (!num) {
          num = 0;
        }
        num = "" + num;
        if (!num.match(/^[0-9]+$/)) {
          num = 0;
        }
        num = parseInt(num, 10);
        if (useSeason) {
          var res = { stub: "month-", num };
          if (res.num < 1 || res.num > 24) {
            res.num = 0;
          } else {
            while (res.num > 16) {
              res.num = res.num - 4;
            }
            if (res.num > 12) {
              res.stub = "season-";
              res.num = res.num - 12;
            }
          }
          ret = res;
        } else {
          if (num < 1 || num > 12) {
            num = 0;
          }
          ret = num;
        }
        return ret;
      };
      CSL2.Util.Dates.month = {};
      CSL2.Util.Dates.month.numeric = function(state, num) {
        var num = CSL2.Util.Dates.normalizeMonth(num);
        if (!num) {
          num = "";
        }
        return num;
      };
      CSL2.Util.Dates.month["numeric-leading-zeros"] = function(state, num) {
        var num = CSL2.Util.Dates.normalizeMonth(num);
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
        }
        return num;
      };
      CSL2.Util.Dates.month["long"] = function(state, num, gender, forceDefaultLocale) {
        var res = CSL2.Util.Dates.normalizeMonth(num, true);
        var num = res.num;
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "long", 0, 0, false, forceDefaultLocale);
        }
        return num;
      };
      CSL2.Util.Dates.month["short"] = function(state, num, gender, forceDefaultLocale) {
        var res = CSL2.Util.Dates.normalizeMonth(num, true);
        var num = res.num;
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "short", 0, 0, false, forceDefaultLocale);
        }
        return num;
      };
      CSL2.Util.Dates.day = {};
      CSL2.Util.Dates.day.numeric = function(state, num) {
        return num.toString();
      };
      CSL2.Util.Dates.day["long"] = CSL2.Util.Dates.day.numeric;
      CSL2.Util.Dates.day["numeric-leading-zeros"] = function(state, num) {
        if (!num) {
          num = 0;
        }
        num = num.toString();
        while (num.length < 2) {
          num = "0" + num;
        }
        return num.toString();
      };
      CSL2.Util.Dates.day.ordinal = function(state, num, gender) {
        return state.fun.ordinalizer.format(num, gender);
      };
      CSL2.Util.Sort = {};
      CSL2.Util.Sort.strip_prepositions = function(str) {
        var m;
        if (typeof str === "string") {
          m = str.match(/^(([aA]|[aA][nN]|[tT][hH][eE])\s+)/);
        }
        if (m) {
          str = str.substr(m[1].length);
        }
        return str;
      };
      CSL2.Util.substituteStart = function(state, target) {
        var element_trace, display, bib_first, func, choose_start, if_start, nodetypes;
        func = function(state2, Item, item) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
              state2.tmp.strip_periods += 1;
              break;
            }
          }
        };
        this.execs.push(func);
        if (this.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
          this.decorations.reverse();
          this.decorations.push(["@showid", "true", this.cslid]);
          this.decorations.reverse();
        }
        nodetypes = ["number", "date", "names"];
        if (this.name === "text" && !this.postponed_macro || nodetypes.indexOf(this.name) > -1) {
          element_trace = function(state2, Item, item) {
            if (state2.tmp.element_trace.value() === "author" || this.name === "names") {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (!state2.tmp.probably_rendered_something) {
                } else {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
              if (!state2.tmp.just_looking && item && item["suppress-author"]) {
                if (!state2.tmp.probably_rendered_something) {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
            } else if (this.name === "date") {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (state2.tmp.probably_rendered_something) {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
            } else {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (!state2.tmp.probably_rendered_something && state2.tmp.can_block_substitute) {
                } else {
                  state2.tmp.element_trace.push("suppress-me");
                }
              } else if (item && item["suppress-author"]) {
                state2.tmp.element_trace.push("do-not-suppress-me");
              }
            }
          };
          this.execs.push(element_trace);
        }
        display = this.strings.cls;
        this.strings.cls = false;
        if (state.build.render_nesting_level === 0) {
          if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first = new CSL2.Token("group", CSL2.START);
            bib_first.decorations = [["@display", "left-margin"]];
            func = function(state2, Item) {
              if (!state2.tmp.render_seen) {
                bib_first.strings.first_blob = Item.id;
                state2.output.startTag("bib_first", bib_first);
              }
            };
            bib_first.execs.push(func);
            target.push(bib_first);
          } else if (CSL2.DISPLAY_CLASSES.indexOf(display) > -1) {
            bib_first = new CSL2.Token("group", CSL2.START);
            bib_first.decorations = [["@display", display]];
            func = function(state2, Item) {
              bib_first.strings.first_blob = Item.id;
              state2.output.startTag("bib_first", bib_first);
            };
            bib_first.execs.push(func);
            target.push(bib_first);
          }
          state.build.cls = display;
        }
        state.build.render_nesting_level += 1;
        if (state.build.substitute_level.value() === 1) {
          choose_start = new CSL2.Token("choose", CSL2.START);
          CSL2.Node.choose.build.call(choose_start, state, target);
          if_start = new CSL2.Token("if", CSL2.START);
          func = function() {
            if (state.tmp.can_substitute.value()) {
              return true;
            }
            return false;
          };
          if_start.tests ? {} : if_start.tests = [];
          if_start.tests.push(func);
          if_start.test = state.fun.match.any(this, state, if_start.tests);
          target.push(if_start);
        }
        if (state.sys.variableWrapper && this.variables_real && this.variables_real.length) {
          func = function(state2, Item, item) {
            if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
              var variable_entry = new CSL2.Token("text", CSL2.START);
              variable_entry.decorations = [["@showid", "true"]];
              state2.output.startTag("variable_entry", variable_entry);
              var position = null;
              if (item) {
                position = item.position;
              }
              if (!position) {
                position = 0;
              }
              var positionMap = [
                "first",
                "container-subsequent",
                "subsequent",
                "ibid",
                "ibid-with-locator"
              ];
              var noteNumber = 0;
              if (item && item.noteIndex) {
                noteNumber = item.noteIndex;
              }
              var firstReferenceNoteNumber = 0;
              if (item && item["first-reference-note-number"]) {
                firstReferenceNoteNumber = item["first-reference-note-number"];
              }
              var firstContainerReferenceNoteNumber = 0;
              if (item && item["first-container-reference-note-number"]) {
                firstContainerReferenceNoteNumber = item["first-container-reference-note-number"];
              }
              var citationNumber = 0;
              if (item && item["citation-number"]) {
                citationNumber = item["citation-number"];
              }
              var index = 0;
              if (item && item.index) {
                index = item.index;
              }
              var params = {
                itemData: Item,
                variableNames: this.variables,
                context: state2.tmp.area,
                xclass: state2.opt.xclass,
                position: positionMap[position],
                "note-number": noteNumber,
                "first-reference-note-number": firstReferenceNoteNumber,
                "first-container-reference-note-number": firstContainerReferenceNoteNumber,
                "citation-number": citationNumber,
                "index": index,
                "mode": state2.opt.mode
              };
              state2.output.current.value().params = params;
            }
          };
          this.execs.push(func);
        }
      };
      CSL2.Util.substituteEnd = function(state, target) {
        var func, bib_first_end, bib_other, if_end, choose_end, author_substitute, str;
        if (state.sys.variableWrapper && (this.hasVariable || this.variables_real && this.variables_real.length)) {
          func = function(state2) {
            if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
              state2.output.endTag("variable_entry");
            }
          };
          this.execs.push(func);
        }
        func = function(state2) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
              state2.tmp.strip_periods += -1;
              break;
            }
          }
        };
        this.execs.push(func);
        state.build.render_nesting_level += -1;
        if (state.build.render_nesting_level === 0) {
          if (state.build.cls) {
            func = function(state2) {
              state2.output.endTag("bib_first");
            };
            this.execs.push(func);
            state.build.cls = false;
          } else if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first_end = new CSL2.Token("group", CSL2.END);
            func = function(state2) {
              if (!state2.tmp.render_seen) {
                state2.output.endTag("bib_first");
              }
            };
            bib_first_end.execs.push(func);
            target.push(bib_first_end);
            bib_other = new CSL2.Token("group", CSL2.START);
            bib_other.decorations = [["@display", "right-inline"]];
            func = function(state2) {
              if (!state2.tmp.render_seen) {
                state2.tmp.render_seen = true;
                state2.output.startTag("bib_other", bib_other);
              }
            };
            bib_other.execs.push(func);
            target.push(bib_other);
          }
        }
        if (state.build.substitute_level.value() === 1) {
          if_end = new CSL2.Token("if", CSL2.END);
          target.push(if_end);
          choose_end = new CSL2.Token("choose", CSL2.END);
          CSL2.Node.choose.build.call(choose_end, state, target);
        }
        if (this.name === "names" || this.name === "text" && this.variables_real !== "title") {
          author_substitute = new CSL2.Token("text", CSL2.SINGLETON);
          var substitution_name = this.name;
          func = function(state2, Item) {
            if (state2.tmp.area !== "bibliography") {
              return;
            }
            if (typeof state2.bibliography.opt["subsequent-author-substitute"] !== "string") {
              return;
            }
            if (this.variables_real && !Item[this.variables_real]) {
              return;
            }
            if (this.variables_real && substitution_name === "names") {
              return;
            }
            var subrule = state2.bibliography.opt["subsequent-author-substitute-rule"];
            var i, ilen;
            var printing = !state2.tmp.suppress_decorations;
            if (printing && state2.tmp.subsequent_author_substitute_ok) {
              if (state2.tmp.rendered_name) {
                if (subrule === "partial-each" || subrule === "partial-first") {
                  var dosub = true;
                  var rendered_name = [];
                  for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                    var name = state2.tmp.rendered_name[i];
                    if (dosub && state2.tmp.last_rendered_name && state2.tmp.last_rendered_name.length > i - 1 && name && !name.localeCompare(state2.tmp.last_rendered_name[i])) {
                      str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                      state2.tmp.name_node.children[i].blobs = [str];
                      if (subrule === "partial-first") {
                        dosub = false;
                      }
                    } else {
                      dosub = false;
                    }
                    rendered_name.push(name);
                  }
                  state2.tmp.last_rendered_name = rendered_name;
                } else if (subrule === "complete-each") {
                  var rendered_name = state2.tmp.rendered_name.join(",");
                  if (rendered_name) {
                    if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                      for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                        str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                        state2.tmp.name_node.children[i].blobs = [str];
                      }
                    }
                    state2.tmp.last_rendered_name = rendered_name;
                  }
                } else {
                  var rendered_name = state2.tmp.rendered_name.join(",");
                  if (rendered_name) {
                    if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                      str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                      if (state2.tmp.label_blob) {
                        state2.tmp.name_node.top.blobs = [str, state2.tmp.label_blob];
                      } else if (state2.tmp.name_node.top.blobs.length) {
                        state2.tmp.name_node.top.blobs[0].blobs = [str];
                      } else {
                        state2.tmp.name_node.top.blobs = [str];
                      }
                      state2.tmp.substituted_variable = substitution_name;
                    }
                    state2.tmp.last_rendered_name = rendered_name;
                  }
                }
                state2.tmp.subsequent_author_substitute_ok = false;
              }
            }
          };
          this.execs.push(func);
        }
        if (this.name === "text" && !this.postponed_macro || ["number", "date", "names"].indexOf(this.name) > -1) {
          func = function(state2, Item) {
            if (state2.tmp.element_trace.mystack.length > 1) {
              state2.tmp.element_trace.pop();
            }
          };
          this.execs.push(func);
        }
      };
      CSL2.Util.padding = function(num) {
        var m = num.match(/\s*(-{0,1}[0-9]+)/);
        if (m) {
          num = parseInt(m[1], 10);
          if (num < 0) {
            num = 1e20 + num;
          }
          num = "" + num;
          while (num.length < 20) {
            num = "0" + num;
          }
        }
        return num;
      };
      CSL2.Util.LongOrdinalizer = function() {
      };
      CSL2.Util.LongOrdinalizer.prototype.init = function(state) {
        this.state = state;
      };
      CSL2.Util.LongOrdinalizer.prototype.format = function(num, gender) {
        if (num < 10) {
          num = "0" + num;
        }
        var ret = CSL2.Engine.getField(CSL2.LOOSE, this.state.locale[this.state.opt.lang].terms, "long-ordinal-" + num, "long", 0, gender);
        if (!ret) {
          ret = this.state.fun.ordinalizer.format(num, gender);
        }
        this.state.tmp.cite_renders_content = true;
        return ret;
      };
      CSL2.Util.Ordinalizer = function(state) {
        this.state = state;
        this.suffixes = {};
      };
      CSL2.Util.Ordinalizer.prototype.init = function() {
        if (!this.suffixes[this.state.opt.lang]) {
          this.suffixes[this.state.opt.lang] = {};
          for (var i = 0, ilen = 3; i < ilen; i += 1) {
            var gender = [void 0, "masculine", "feminine"][i];
            this.suffixes[this.state.opt.lang][gender] = [];
            for (var j = 1; j < 5; j += 1) {
              var ordinal = this.state.getTerm("ordinal-0" + j, "long", false, gender);
              if (typeof ordinal === "undefined") {
                delete this.suffixes[this.state.opt.lang][gender];
                break;
              }
              this.suffixes[this.state.opt.lang][gender].push(ordinal);
            }
          }
        }
      };
      CSL2.Util.Ordinalizer.prototype.format = function(num, gender) {
        var str;
        num = parseInt(num, 10);
        str = "" + num;
        var suffix = "";
        var trygenders = [];
        if (gender) {
          trygenders.push(gender);
        }
        trygenders.push("neuter");
        if (this.state.locale[this.state.opt.lang].ord["1.0.1"]) {
          suffix = this.state.getTerm("ordinal", false, 0, gender);
          var trygender;
          for (var i = 0, ilen = trygenders.length; i < ilen; i += 1) {
            trygender = trygenders[i];
            var ordinfo = this.state.locale[this.state.opt.lang].ord["1.0.1"];
            if (ordinfo["whole-number"][str] && ordinfo["whole-number"][str][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["whole-number"][str][trygender], false, 0, gender);
            } else if (ordinfo["last-two-digits"][str.slice(str.length - 2)] && ordinfo["last-two-digits"][str.slice(str.length - 2)][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-two-digits"][str.slice(str.length - 2)][trygender], false, 0, gender);
            } else if (ordinfo["last-digit"][str.slice(str.length - 1)] && ordinfo["last-digit"][str.slice(str.length - 1)][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-digit"][str.slice(str.length - 1)][trygender], false, 0, gender);
            }
            if (suffix) {
              break;
            }
          }
        } else {
          if (!gender) {
            gender = void 0;
          }
          this.state.fun.ordinalizer.init();
          if (num / 10 % 10 === 1 || num > 10 && num < 20) {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
          } else if (num % 10 === 1 && num % 100 !== 11) {
            suffix = this.suffixes[this.state.opt.lang][gender][0];
          } else if (num % 10 === 2 && num % 100 !== 12) {
            suffix = this.suffixes[this.state.opt.lang][gender][1];
          } else if (num % 10 === 3 && num % 100 !== 13) {
            suffix = this.suffixes[this.state.opt.lang][gender][2];
          } else {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
          }
        }
        str = str += suffix;
        return str;
      };
      CSL2.Util.Romanizer = function() {
      };
      CSL2.Util.Romanizer.prototype.format = function(num) {
        var ret, pos, n, numstr, len;
        ret = "";
        if (num < 6e3) {
          numstr = num.toString().split("");
          numstr.reverse();
          pos = 0;
          n = 0;
          len = numstr.length;
          for (pos = 0; pos < len; pos += 1) {
            n = parseInt(numstr[pos], 10);
            ret = CSL2.ROMAN_NUMERALS[pos][n] + ret;
          }
        }
        return ret;
      };
      CSL2.Util.Suffixator = function(slist) {
        if (!slist) {
          slist = CSL2.SUFFIX_CHARS;
        }
        this.slist = slist.split(",");
      };
      CSL2.Util.Suffixator.prototype.format = function(N) {
        var X;
        N += 1;
        var key = "";
        do {
          X = N % 26 === 0 ? 26 : N % 26;
          var key = this.slist[X - 1] + key;
          N = (N - X) / 26;
        } while (N !== 0);
        return key;
      };
      CSL2.Engine.prototype.processNumber = function(node, ItemObject, variable) {
        var val;
        var me = this;
        var realVariable = variable;
        variable = variable === "page-first" ? "page" : variable;
        var fullformAnd = ",\\s+and\\s+|\\s+and\\s+";
        if (this.opt.lang.slice(0, 2) !== "en") {
          fullformAnd += "|,\\s+" + this.getTerm("and") + "\\s+|\\s+" + this.getTerm("and") + "\\s+";
        }
        var symbolAnd = "\\s*&\\s*";
        var andRex = new RegExp("^" + symbolAnd + "$");
        var joinerMatchRex = new RegExp("(" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)", "g");
        var joinerSplitRex = new RegExp("(?:" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)");
        var localeAnd = this.getTerm("and");
        var localeAmpersand = this.getTerm("and", "symbol");
        if (localeAnd === localeAmpersand) {
          localeAmpersand = "&";
        }
        function normalizeFieldValue(str) {
          str = str.trim();
          var m = str.match(/^([^ ]+)/);
          if (m && !CSL2.STATUTE_SUBDIV_STRINGS[m[1]]) {
            var embeddedLabel = null;
            if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
              if (ItemObject.label) {
                embeddedLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[ItemObject.label];
              } else {
                embeddedLabel = "p.";
              }
            } else {
              embeddedLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
            }
            if (embeddedLabel) {
              str = embeddedLabel + " " + str;
            }
          }
          return str;
        }
        function composeNumberInfo(origLabel, label2, val2, joiningSuffix, parsePosition) {
          joiningSuffix = joiningSuffix ? joiningSuffix : "";
          var info2 = {};
          if (!label2 && !CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable]) {
            label2 = "var:" + variable;
          }
          if (label2) {
            var m = label2.match(/(\s*)([^\s]+)(\s*)/);
            if (realVariable === "page" && parsePosition === 0 && ["p.", "pp."].indexOf(m[2]) === -1) {
              info2.gotosleepability = true;
              info2.labelVisibility = true;
            } else {
              info2.labelVisibility = false;
            }
            info2.label = m[2];
            info2.origLabel = origLabel;
            info2.labelSuffix = m[3] ? m[3] : "";
            info2.plural = 0;
          }
          var m = val2.match(/^([0-9]*[a-zA-Z]+0*)?([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
          if (m) {
            info2.particle = m[1] ? m[1] : "";
            info2.value = m[2];
          } else {
            info2.particle = "";
            info2.value = val2;
          }
          info2.joiningSuffix = joiningSuffix.replace(/\s*-\s*/, "-");
          return info2;
        }
        function fixupSubsections(elems) {
          for (var i = elems.length - 2; i > -1; i -= 2) {
            if (elems[i] === "-" && elems[i - 1].match(/^(?:(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])\.  *)*[0-9]+[,a-zA-Z]+$/) && elems[i + 1].match(/^[,a-zA-Z]+$/)) {
              elems[i - 1] = elems.slice(i - 1, i + 2).join("");
              elems = elems.slice(0, i).concat(elems.slice(i + 2));
            }
          }
          return elems;
        }
        function parseString(str, defaultLabel2) {
          defaultLabel2 = defaultLabel2 ? defaultLabel2 : "";
          str = normalizeFieldValue(str, defaultLabel2);
          var jmrex, jsrex, mystr;
          if (variable === "page") {
            if (str.indexOf("\u2013") > -1) {
              str = str.replace(/\u2013/g, "-");
            }
          }
          if (str.indexOf("\\-") > -1) {
            jmrex = new RegExp(joinerMatchRex.source.replace("\\-", ""));
            jsrex = new RegExp(joinerSplitRex.source.replace("\\-", ""));
            var lst = str.split("\\-");
            for (var i = 0, ilen = lst.length; i < ilen; i++) {
              lst[i] = lst[i].replace(/\-/g, "\u2013");
            }
            mystr = lst.join("\\-");
            mystr = mystr.replace(/\\/g, "");
          } else {
            jmrex = joinerMatchRex;
            jsrex = joinerSplitRex;
            mystr = str;
          }
          var elems = [];
          var m = mystr.match(jmrex);
          if (m) {
            var lst = mystr.split(jsrex);
            for (var i = 0, ilen = m.length; i < ilen; i++) {
              if (m[i].match(andRex)) {
                if (lst[i].match(/[a-zA-Z]$/) && lst[i].match(/^[a-zA-Z]/)) {
                  m[i] = localeAmpersand;
                } else {
                  m[i] = " " + localeAmpersand + " ";
                }
              }
            }
            var recombine = false;
            for (var i in lst) {
              if (("" + lst[i]).replace(/^[a-z]\.\s+/, "").match(/[^\s0-9ivxlcmIVXLCM]/)) {
                break;
              }
            }
            if (recombine) {
              elems = [mystr];
            } else {
              for (var i = 0, ilen = lst.length - 1; i < ilen; i++) {
                elems.push(lst[i]);
                elems.push(m[i]);
              }
              elems.push(lst[lst.length - 1]);
              elems = fixupSubsections(elems);
            }
          } else {
            var elems = [mystr];
          }
          var values2 = [];
          var label2 = defaultLabel2;
          var origLabel = "";
          for (var i = 0, ilen = elems.length; i < ilen; i += 2) {
            var m = elems[i].match(/((?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/g);
            if (m) {
              var lst = elems[i].split(/(?:(?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/);
              for (var j = lst.length - 1; j > 0; j--) {
                if (lst[j - 1] && (!lst[j].match(/^[0-9]+([-;,:a-zA-Z]*)$/) || !lst[j - 1].match(/^[0-9]+([-;,:a-zA-Z]*)$/))) {
                  lst[j - 1] = lst[j - 1] + m[j - 1] + lst[j];
                  lst = lst.slice(0, j).concat(lst.slice(j + 1));
                  m = m.slice(0, j - 1).concat(m.slice(j));
                }
              }
              if (m.length > 0) {
                var slug = m[0].trim();
                var notAlabel = !CSL2.STATUTE_SUBDIV_STRINGS[slug] || typeof me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[slug]) === "undefined" || ["locator", "number", "locator-extra", "page"].indexOf(variable) === -1 && CSL2.STATUTE_SUBDIV_STRINGS[slug] !== variable;
                if (notAlabel) {
                  if (i === 0) {
                    m = m.slice(1);
                    lst[0] = lst[0] + " " + slug + " " + lst[1];
                    lst = lst.slice(0, 1).concat(lst.slice(2));
                  }
                } else {
                  origLabel = slug;
                }
              }
              for (var j = 0, jlen = lst.length; j < jlen; j++) {
                if (lst[j] || j === lst.length - 1) {
                  var filteredOrigLabel;
                  label2 = m[j - 1] ? m[j - 1] : label2;
                  if (origLabel === label2.trim()) {
                    filteredOrigLabel = "";
                  } else {
                    filteredOrigLabel = origLabel;
                  }
                  mystr = lst[j] ? lst[j].trim() : "";
                  if (j === lst.length - 1) {
                    values2.push(composeNumberInfo(filteredOrigLabel, label2, mystr, elems[i + 1], i));
                  } else {
                    values2.push(composeNumberInfo(filteredOrigLabel, label2, mystr, null, i));
                  }
                }
              }
            } else {
              var filteredOrigLabel;
              if (origLabel === label2.trim()) {
                filteredOrigLabel = "";
              } else {
                filteredOrigLabel = origLabel;
              }
              values2.push(composeNumberInfo(filteredOrigLabel, label2, elems[i], elems[i + 1]));
            }
          }
          return values2;
        }
        function setSpaces(values2) {
          for (var i = 0, ilen = values2.length - 1; i < ilen; i++) {
            if (!values2[i].joiningSuffix && values2[i + 1].label) {
              values2[i].joiningSuffix = " ";
            }
          }
        }
        function fixNumericAndCount(values2, i, currentLabelInfo) {
          var master = values2[currentLabelInfo.pos];
          var val2 = values2[i].value;
          var isEscapedHyphen = master.joiningSuffix === "\\-";
          if (val2.particle && val2.particle !== master.particle) {
            currentLabelInfo.collapsible = false;
          }
          var mVal = val2.match(/^[0-9]+([-,:a-zA-Z]*)$/);
          var mCurrentLabel = master.value.match(/^(?:[0-9]+|[ixv]+)([-,:a-zA-Z]*|\-[\-0-9]+)$/);
          if (!val2 || !mVal || !mCurrentLabel || isEscapedHyphen) {
            currentLabelInfo.collapsible = false;
            if (!val2 || !mCurrentLabel) {
              currentLabelInfo.numeric = false;
            }
            if (isEscapedHyphen) {
              currentLabelInfo.count--;
            }
          }
          if (mVal && mVal[1] || mCurrentLabel && mCurrentLabel[1]) {
            currentLabelInfo.collapsible = false;
          }
          if (values2[i].collapsible === void 0) {
            for (var j = i, jlen = i + currentLabelInfo.count; j < jlen; j++) {
              if (isNaN(parseInt(values2[j].value)) && !values2[j].value.match(/^[ivxlcmIVXLCM]+$/)) {
                values2[j].collapsible = false;
              } else {
                values2[j].collapsible = true;
              }
            }
            currentLabelInfo.collapsible = values2[i].collapsible;
          }
          var isCollapsible = currentLabelInfo.collapsible;
          for (var j = currentLabelInfo.pos, jlen = currentLabelInfo.pos + currentLabelInfo.count; j < jlen; j++) {
            if (currentLabelInfo.count > 1 && isCollapsible) {
              values2[j].plural = 1;
            }
            values2[j].numeric = currentLabelInfo.numeric;
            values2[j].collapsible = currentLabelInfo.collapsible;
          }
        }
        function fixLabelVisibility(values2, groupStartPos, currentLabelInfo) {
          if (currentLabelInfo.label.slice(0, 4) !== "var:") {
            if (currentLabelInfo.pos === 0) {
              if (["locator", "number", "locator-extra", "page"].indexOf(variable) > -1) {
                if (typeof me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label]) === "undefined") {
                  values2[currentLabelInfo.pos].labelVisibility = true;
                }
              }
              if (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1) {
                if (CSL2.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label] !== variable) {
                  values2[0].labelVisibility = true;
                }
              }
            } else {
              values2[currentLabelInfo.pos].labelVisibility = true;
            }
          }
        }
        function setPluralsAndNumerics(values2) {
          if (values2.length === 0) {
            return;
          }
          var groupStartPos = 0;
          var groupCount = 1;
          for (var i = 1, ilen = values2.length; i < ilen; i++) {
            var lastVal = values2[i - 1];
            var thisVal = values2[i];
            if (lastVal.label === thisVal.label && lastVal.particle === lastVal.particle) {
              groupCount++;
            } else {
              var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
              currentLabelInfo.pos = groupStartPos;
              currentLabelInfo.count = groupCount;
              currentLabelInfo.numeric = true;
              fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
              if (lastVal.label !== thisVal.label) {
                fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
              }
              groupStartPos = i;
              groupCount = 1;
            }
          }
          var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
          currentLabelInfo.pos = groupStartPos;
          currentLabelInfo.count = groupCount;
          currentLabelInfo.numeric = true;
          fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
          fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
          if (values2.length && values2[0].numeric && variable.slice(0, 10) === "number-of-") {
            if (parseInt(ItemObject[realVariable], 10) > 1) {
              values2[0].plural = 1;
            }
          }
        }
        function stripHyphenBackslash(joiningSuffix) {
          return joiningSuffix.replace("\\-", "-");
        }
        function setStyling(values2) {
          var masterNode = CSL2.Util.cloneToken(node);
          var masterStyling = new CSL2.Token();
          if (!me.tmp.just_looking) {
            masterStyling.decorations = masterNode.decorations;
            masterNode.decorations = [];
            masterStyling.strings.prefix = masterNode.strings.prefix;
            masterNode.strings.prefix = "";
            masterStyling.strings.suffix = masterNode.strings.suffix;
            masterNode.strings.suffix = "";
          }
          var masterLabel = values2.length ? values2[0].label : null;
          if (values2.length) {
            for (var i = 0, ilen = values2.length; i < ilen; i++) {
              var val2 = values2[i];
              var newnode = CSL2.Util.cloneToken(masterNode);
              newnode.gender = node.gender;
              if (masterLabel === val2.label) {
                newnode.formatter = node.formatter;
              }
              if (val2.numeric) {
                newnode.successor_prefix = val2.successor_prefix;
              }
              newnode.strings.suffix = newnode.strings.suffix + stripHyphenBackslash(val2.joiningSuffix);
              val2.styling = newnode;
            }
            if (!me.tmp.just_looking) {
              if (values2[0].value.slice(0, 1) === '"' && values2[values2.length - 1].value.slice(-1) === '"') {
                values2[0].value = values2[0].value.slice(1);
                values2[values2.length - 1].value = values2[values2.length - 1].value.slice(0, -1);
                masterStyling.decorations.push(["@quotes", true]);
              }
            }
          }
          return masterStyling;
        }
        function checkTerm(variable2, val2) {
          var ret = true;
          if (["locator", "locator-extra", "page"].indexOf(variable2) > -1) {
            var label2;
            if (val2.origLabel) {
              label2 = val2.origLabel;
            } else {
              label2 = val2.label;
            }
            ret = !!me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[label2]);
          }
          return ret;
        }
        function checkPage(variable2, val2) {
          return variable2 === "page" || ["locator", "locator-extra"].indexOf(variable2) > -1 && (["p."].indexOf(val2.label) > -1 || ["p."].indexOf(val2.origLabel) > -1);
        }
        function fixupRangeDelimiter(variable2, val2, rangeDelimiter, isNumeric) {
          var isPage = checkPage(variable2, val2);
          var hasTerm = checkTerm(variable2, val2);
          if (hasTerm && rangeDelimiter === "-") {
            if (isNumeric) {
              if (isPage || ["locator", "locator-extra", "issue", "volume", "edition", "number"].indexOf(variable2) > -1) {
                rangeDelimiter = me.getTerm("page-range-delimiter");
                if (!rangeDelimiter) {
                  rangeDelimiter = "\u2013";
                }
              }
              if (variable2 === "collection-number") {
                rangeDelimiter = me.getTerm("year-range-delimiter");
                if (!rangeDelimiter) {
                  rangeDelimiter = "\u2013";
                }
              }
            }
          }
          return rangeDelimiter;
        }
        function manglePageNumbers(values2, i, currentInfo) {
          if (i < 1) {
            return;
          }
          if (currentInfo.count !== 2) {
            return;
          }
          if (values2[i - 1].particle !== values2[i].particle) {
            return;
          }
          if (values2[i - 1].joiningSuffix !== "-") {
            currentInfo.count = 1;
            return;
          }
          if (!me.opt["page-range-format"] && parseInt(values2[i - 1].value, 10) > parseInt(values2[i].value, 10)) {
            values2[i - 1].joiningSuffix = fixupRangeDelimiter(variable, values2[i], values2[i - 1].joiningSuffix, true);
            return;
          }
          var val2 = values2[i];
          var isPage = checkPage(variable, val2);
          var str;
          if (isPage && !isNaN(parseInt(values2[i - 1].value)) && !isNaN(parseInt(values2[i].value))) {
            str = values2[i - 1].particle + values2[i - 1].value + " - " + values2[i].particle + values2[i].value;
            str = me.fun.page_mangler(str);
          } else {
            if (("" + values2[i - 1].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/) && ("" + values2[i].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/)) {
              values2[i - 1].joiningSuffix = me.getTerm("page-range-delimiter");
            }
            str = values2[i - 1].value + stripHyphenBackslash(values2[i - 1].joiningSuffix) + values2[i].value;
          }
          var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
          if (m) {
            var rangeDelimiter = m[3];
            rangeDelimiter = fixupRangeDelimiter(variable, val2, rangeDelimiter, values2[i].numeric);
            values2[i - 1].particle = m[1];
            values2[i - 1].value = m[2];
            values2[i - 1].joiningSuffix = rangeDelimiter;
            values2[i].particle = m[4];
            values2[i].value = m[5];
          }
          currentInfo.count = 0;
        }
        function fixRanges(values2) {
          if (!node) {
            return;
          }
          if (["page", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume", "locator", "locator-extra"].indexOf(variable) === -1) {
            return;
          }
          var currentInfo = {
            count: 0,
            label: null,
            lastHadRangeDelimiter: false
          };
          for (var i = 0, ilen = values2.length; i < ilen; i++) {
            var val2 = values2[i];
            if (!val2.collapsible) {
              currentInfo.count = 0;
              currentInfo.label = null;
              var isNumeric = val2.numeric;
              val2.joiningSuffix = fixupRangeDelimiter(variable, val2, val2.joiningSuffix, isNumeric);
            } else if (currentInfo.label === val2.label && val2.joiningSuffix === "-") {
              currentInfo.count = 1;
            } else if (currentInfo.label === val2.label && val2.joiningSuffix !== "-") {
              currentInfo.count++;
              if (currentInfo.count === 2) {
                manglePageNumbers(values2, i, currentInfo);
              }
            } else if (currentInfo.label !== val2.label) {
              currentInfo.label = val2.label;
              currentInfo.count = 1;
            } else {
              currentInfo.count = 1;
              currentInfo.label = val2.label;
            }
          }
          if (currentInfo.count === 2) {
            manglePageNumbers(values2, values2.length - 1, currentInfo);
          }
        }
        function setVariableParams(shadow_numbers, realVariable2, values2) {
          var obj2 = shadow_numbers[realVariable2];
          if (values2.length) {
            obj2.numeric = values2[0].numeric;
            obj2.collapsible = values2[0].collapsible;
            obj2.plural = values2[0].plural;
            obj2.label = CSL2.STATUTE_SUBDIV_STRINGS[values2[0].label];
            if (variable === "number" && obj2.label === "issue" && me.getTerm("number")) {
              obj2.label = "number";
            }
          }
        }
        if (node && this.tmp.shadow_numbers[realVariable] && this.tmp.shadow_numbers[realVariable].values.length) {
          var values = this.tmp.shadow_numbers[realVariable].values;
          fixRanges(values);
          this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
          return;
        }
        if (!this.tmp.shadow_numbers[realVariable]) {
          this.tmp.shadow_numbers[realVariable] = {
            values: []
          };
        }
        if (!ItemObject) {
          return;
        }
        var languageRole = CSL2.LangPrefsMap[variable];
        if (languageRole) {
          var localeType = this.opt["cite-lang-prefs"][languageRole][0];
          val = this.transform.getTextSubField(ItemObject, realVariable, "locale-" + localeType, true);
          val = val.name;
        } else {
          val = ItemObject[realVariable];
        }
        if (val && realVariable === "number" && ItemObject.type === "legal_case") {
          val = val.replace(/[\\]*-/g, "\\-");
        }
        if (val && this.sys.getAbbreviation) {
          if (this.sys.normalizeAbbrevsKey) {
            var normval = this.sys.normalizeAbbrevsKey(realVariable, val);
          } else {
            var normval = val;
          }
          var jurisdiction2 = this.transform.loadAbbreviation(ItemObject.jurisdiction, "number", normval, ItemObject.language);
          if (this.transform.abbrevs[jurisdiction2].number) {
            if (this.transform.abbrevs[jurisdiction2].number[normval]) {
              val = this.transform.abbrevs[jurisdiction2].number[normval];
            } else {
              if (typeof this.transform.abbrevs[jurisdiction2].number[normval] !== "undefined") {
                delete this.transform.abbrevs[jurisdiction2].number[normval];
              }
            }
          }
        }
        if (typeof val !== "undefined" && (typeof val === "string" || typeof val === "number")) {
          if (typeof val === "number") {
            val = "" + val;
          }
          var defaultLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
          if (this.tmp.shadow_numbers[realVariable].values.length === 0) {
            var values = parseString(val, defaultLabel);
            setSpaces(values);
            setPluralsAndNumerics(values);
            for (var obj of values) {
              if (!obj.numeric)
                obj.plural = 0;
            }
            this.tmp.shadow_numbers[realVariable].values = values;
            if (node) {
              fixRanges(values);
              this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
            }
            setVariableParams(this.tmp.shadow_numbers, realVariable, values);
          }
          var info = this.tmp.shadow_numbers[realVariable];
          if (variable === "number") {
            if (info.values.length === 1 && info.values[0].value.indexOf("|") > -1) {
              info.values[0].value = info.values[0].value.replace(/\|/g, ", ");
              info.values[0].numeric = true;
              info.values[0].plural = 1;
              info.values[0].collapsible = false;
              info.numeric = true;
              info.plural = 1;
              info.collapsible = false;
            }
          }
          if (info.values.length === 1) {
            if (info.values[0].value.match(/^[0-9]+(?:\/[0-9]+)+$/)) {
              info.values[0].numeric = true;
              info.values[0].plural = 0;
              info.values[0].collapsible = false;
              info.numeric = true;
              info.plural = 0;
              info.collapsible = false;
            }
          }
          if (variable === "page") {
            if (info.values.length > 0) {
              if (info.values[0].gotosleepability) {
                info.labelForm = "short";
              }
            }
          }
        }
      };
      CSL2.Util.outputNumericField = function(state, varname, itemID) {
        state.output.openLevel(state.tmp.shadow_numbers[varname].masterStyling);
        var masterStyling = state.tmp.shadow_numbers[varname].masterStyling;
        var nums = state.tmp.shadow_numbers[varname].values;
        var masterLabel = nums.length ? nums[0].label : null;
        var labelForm = state.tmp.shadow_numbers[varname].labelForm;
        var tryStatic = state.tmp.group_context.tip.label_static;
        var embeddedLabelForm;
        if (labelForm) {
          embeddedLabelForm = labelForm;
        } else {
          embeddedLabelForm = "short";
        }
        var labelCapitalizeIfFirst = state.tmp.shadow_numbers[varname].labelCapitalizeIfFirst;
        var labelDecorations = state.tmp.shadow_numbers[varname].labelDecorations;
        var lastLabelName = null;
        for (var i = 0, ilen = nums.length; i < ilen; i++) {
          var num = nums[i];
          var label2 = "";
          var labelName;
          if (num.label) {
            if (num.label.slice(0, 4) === "var:") {
              labelName = num.label.slice(4);
            } else {
              labelName = CSL2.STATUTE_SUBDIV_STRINGS[num.label];
            }
            if (labelName) {
              if (num.label === masterLabel) {
                if (tryStatic) {
                  label2 = state.getTerm(labelName, "static", num.plural);
                  if (label2.indexOf("%s") === -1) {
                    label2 = "";
                  }
                }
                if (!label2) {
                  label2 = state.getTerm(labelName, labelForm, num.plural);
                }
              } else {
                if (tryStatic) {
                  label2 = state.getTerm(labelName, "static", num.plural);
                  if (label2.indexOf("%s") === -1) {
                    label2 = "";
                  }
                }
                if (!label2) {
                  label2 = state.getTerm(labelName, embeddedLabelForm, num.plural);
                }
              }
              if (labelCapitalizeIfFirst) {
                label2 = CSL2.Output.Formatters["capitalize-first"](state, label2);
              }
            }
          }
          var labelPlaceholderPos = -1;
          if (label2) {
            labelPlaceholderPos = label2.indexOf("%s");
          }
          var numStyling = CSL2.Util.cloneToken(num.styling);
          numStyling.formatter = num.styling.formatter;
          numStyling.type = num.styling.type;
          numStyling.num = num.styling.num;
          numStyling.gender = num.styling.gender;
          if (labelPlaceholderPos > 0 && labelPlaceholderPos < label2.length - 2) {
            numStyling.strings.prefix += label2.slice(0, labelPlaceholderPos);
            numStyling.strings.suffix = label2.slice(labelPlaceholderPos + 2) + numStyling.strings.suffix;
          } else if (num.labelVisibility) {
            if (!label2) {
              label2 = num.label;
              labelName = num.label;
            }
            if (labelPlaceholderPos > 0) {
              var prefixLabelStyling = new CSL2.Token();
              prefixLabelStyling.decorations = labelDecorations;
              state.output.append(label2.slice(0, labelPlaceholderPos), prefixLabelStyling);
            } else if (labelPlaceholderPos === label2.length - 2 || labelPlaceholderPos === -1) {
              state.output.append(label2 + num.labelSuffix, "empty");
            }
          }
          CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state, masterStyling.strings.prefix, null, masterStyling, `${num.particle}${num.value}`);
          if (num.collapsible) {
            var blob;
            if (num.value.match(/^[1-9][0-9]*$/)) {
              blob = new CSL2.NumericBlob(state, num.particle, parseInt(num.value, 10), numStyling, itemID);
            } else {
              blob = new CSL2.NumericBlob(state, num.particle, num.value, numStyling, itemID);
            }
            if (typeof blob.gender === "undefined") {
              blob.gender = state.locale[state.opt.lang]["noun-genders"][varname];
            }
            state.output.append(blob, "literal");
          } else {
            state.output.append(num.particle + num.value, numStyling);
          }
          if (labelPlaceholderPos === 0 && labelPlaceholderPos < label2.length - 2) {
            if (lastLabelName === null) {
              lastLabelName = labelName;
            }
            if (labelName !== lastLabelName || i === nums.length - 1) {
              var suffixLabelStyling = new CSL2.Token();
              suffixLabelStyling.decorations = labelDecorations;
              state.output.append(label2.slice(labelPlaceholderPos + 2), suffixLabelStyling);
            }
          }
          lastLabelName = labelName;
          state.tmp.term_predecessor = true;
        }
        state.output.closeLevel();
      };
      CSL2.Util.PageRangeMangler = {};
      CSL2.Util.PageRangeMangler.getFunction = function(state, rangeType) {
        var rangerex, pos, len, stringify2, listify, expand, minimize, minimize_internal, chicago, lst, m, b, e, ret, begin, end, ret_func;
        var range_delimiter = state.getTerm(rangeType + "-range-delimiter");
        rangerex = /([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)\s*(?:\u2013|-)\s*([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)/;
        stringify2 = function(lst2) {
          len = lst2.length;
          for (pos = 1; pos < len; pos += 2) {
            if (typeof lst2[pos] === "object") {
              lst2[pos] = lst2[pos].join("");
            }
          }
          var ret2 = lst2.join("");
          ret2 = ret2.replace(/([^\\])\-/g, "$1" + state.getTerm(rangeType + "-range-delimiter"));
          return ret2;
        };
        listify = function(str) {
          var m2, lst2, ret2;
          var hyphens = "\\s+\\-\\s+";
          var this_range_delimiter = range_delimiter === "-" ? "" : range_delimiter;
          var delimRex = new RegExp("([^\\\\])[-" + this_range_delimiter + "\\u2013]", "g");
          str = str.replace(delimRex, "$1 - ").replace(/\s+-\s+/g, " - ");
          var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*)", "g");
          var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*");
          m2 = str.match(rexm);
          lst2 = str.split(rexlst);
          if (lst2.length === 0) {
            ret2 = m2;
          } else {
            ret2 = [lst2[0]];
            for (pos = 1, len = lst2.length; pos < len; pos += 1) {
              ret2.push(m2[pos - 1].replace(/\s*\-\s*/g, "-"));
              ret2.push(lst2[pos]);
            }
          }
          return ret2;
        };
        expand = function(str) {
          str = "" + str;
          lst = listify(str);
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
            m = lst[pos].match(rangerex);
            if (m) {
              if (!m[3] || m[1] === m[3]) {
                if (m[4].length < m[2].length) {
                  m[4] = m[2].slice(0, m[2].length - m[4].length) + m[4];
                }
                if (parseInt(m[2], 10) < parseInt(m[4], 10)) {
                  m[3] = range_delimiter + (m[1] ? m[1] : "");
                  lst[pos] = m.slice(1);
                }
              }
            }
            if (typeof lst[pos] === "string") {
              lst[pos] = lst[pos].replace(/\-/g, range_delimiter);
            }
          }
          return lst;
        };
        minimize = function(lst2, minchars, isyear) {
          len = lst2.length;
          for (var i = 1, ilen = lst2.length; i < ilen; i += 2) {
            if (typeof lst2[i] === "object") {
              lst2[i][3] = minimize_internal(lst2[i][1], lst2[i][3], minchars, isyear);
              if (lst2[i][2].slice(1) === lst2[i][0]) {
                lst2[i][2] = range_delimiter;
              }
            }
          }
          return stringify2(lst2);
        };
        minimize_internal = function(begin2, end2, minchars, isyear) {
          if (!minchars) {
            minchars = 0;
          }
          b = ("" + begin2).split("");
          e = ("" + end2).split("");
          ret = e.slice();
          ret.reverse();
          if (b.length === e.length) {
            for (var i = 0, ilen = b.length; i < ilen; i += 1) {
              if (b[i] === e[i] && ret.length > minchars) {
                ret.pop();
              } else {
                if (minchars && isyear && ret.length === 3) {
                  var front = b.slice(0, i);
                  front.reverse();
                  ret = ret.concat(front);
                }
                break;
              }
            }
          }
          ret.reverse();
          return ret.join("");
        };
        chicago = function(lst2) {
          len = lst2.length;
          for (pos = 1; pos < len; pos += 2) {
            if (typeof lst2[pos] === "object") {
              m = lst2[pos];
              begin = parseInt(m[1], 10);
              end = parseInt(m[3], 10);
              if (begin > 100 && begin % 100 && parseInt(begin / 100, 10) === parseInt(end / 100, 10)) {
                m[3] = "" + end % 100;
              } else if (begin >= 1e4) {
                m[3] = "" + end % 1e3;
              }
            }
            if (m[2].slice(1) === m[0]) {
              m[2] = range_delimiter;
            }
          }
          return stringify2(lst2);
        };
        var sniff = function(str, func, minchars, isyear) {
          var ret2;
          str = "" + str;
          var lst2 = expand(str);
          var ret2 = func(lst2, minchars, isyear);
          return ret2;
        };
        if (!state.opt[rangeType + "-range-format"]) {
          ret_func = function(str) {
            return sniff(str, stringify2);
          };
        } else if (state.opt[rangeType + "-range-format"] === "expanded") {
          ret_func = function(str) {
            return sniff(str, stringify2);
          };
        } else if (state.opt[rangeType + "-range-format"] === "minimal") {
          ret_func = function(str) {
            return sniff(str, minimize);
          };
        } else if (state.opt[rangeType + "-range-format"] === "minimal-two") {
          ret_func = function(str, isyear) {
            return sniff(str, minimize, 2, isyear);
          };
        } else if (state.opt[rangeType + "-range-format"] === "chicago") {
          ret_func = function(str) {
            return sniff(str, chicago);
          };
        }
        return ret_func;
      };
      CSL2.Util.FlipFlopper = function(state) {
        var _nestingState = [];
        var _nestingData = {
          '<span class="nocase">': {
            type: "nocase",
            opener: '<span class="nocase">',
            closer: "</span>",
            attr: null,
            outer: null,
            flipflop: null
          },
          '<span class="nodecor">': {
            type: "nodecor",
            opener: '<span class="nodecor">',
            closer: "</span>",
            attr: "@class",
            outer: "nodecor",
            flipflop: {
              "nodecor": "nodecor"
            }
          },
          '<span style="font-variant:small-caps;">': {
            type: "tag",
            opener: '<span style="font-variant:small-caps;">',
            closer: "</span>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
              "small-caps": "normal",
              "normal": "small-caps"
            }
          },
          "<sc>": {
            type: "tag",
            opener: "<sc>",
            closer: "</sc>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
              "small-caps": "normal",
              "normal": "small-caps"
            }
          },
          "<i>": {
            type: "tag",
            opener: "<i>",
            closer: "</i>",
            attr: "@font-style",
            outer: "italic",
            flipflop: {
              "italic": "normal",
              "normal": "italic"
            }
          },
          "<b>": {
            type: "tag",
            opener: "<b>",
            closer: "</b>",
            attr: "@font-weight",
            outer: "bold",
            flipflop: {
              "bold": "normal",
              "normal": "bold"
            }
          },
          "<sup>": {
            type: "tag",
            opener: "<sup>",
            closer: "</sup>",
            attr: "@vertical-align",
            outer: "sup",
            flipflop: {
              "sub": "sup",
              "sup": "sup"
            }
          },
          "<sub>": {
            type: "tag",
            opener: "<sub>",
            closer: "</sub>",
            attr: "@vertical-align",
            outer: "sub",
            flipflop: {
              "sup": "sub",
              "sub": "sub"
            }
          },
          ' "': {
            type: "quote",
            opener: ' "',
            closer: '"',
            attr: "@quotes",
            outer: "true",
            flipflop: {
              "true": "inner",
              "inner": "true",
              "false": "true"
            }
          },
          " '": {
            type: "quote",
            opener: " '",
            closer: "'",
            attr: "@quotes",
            outer: "inner",
            flipflop: {
              "true": "inner",
              "inner": "true",
              "false": "true"
            }
          }
        };
        _nestingData['("'] = _nestingData[' "'];
        _nestingData["('"] = _nestingData[" '"];
        var localeOpenQuote = state.getTerm("open-quote");
        var localeCloseQuote = state.getTerm("close-quote");
        var localeOpenInnerQuote = state.getTerm("open-inner-quote");
        var localeCloseInnerQuote = state.getTerm("close-inner-quote");
        if (localeOpenQuote && localeCloseQuote && [' "', " '", '"', "'"].indexOf(localeOpenQuote) === -1) {
          _nestingData[localeOpenQuote] = JSON.parse(JSON.stringify(_nestingData[' "']));
          _nestingData[localeOpenQuote].opener = localeOpenQuote;
          _nestingData[localeOpenQuote].closer = localeCloseQuote;
        }
        if (localeOpenInnerQuote && localeCloseInnerQuote && [' "', " '", '"', "'"].indexOf(localeOpenInnerQuote) === -1) {
          _nestingData[localeOpenInnerQuote] = JSON.parse(JSON.stringify(_nestingData[" '"]));
          _nestingData[localeOpenInnerQuote].opener = localeOpenInnerQuote;
          _nestingData[localeOpenInnerQuote].closer = localeCloseInnerQuote;
        }
        function _setOuterQuoteForm(quot) {
          var flip = {
            " '": ' "',
            ' "': " '",
            '("': "('",
            "('": '("'
          };
          _nestingData[quot].outer = "true";
          _nestingData[flip[quot]].outer = "inner";
        }
        function _getNestingOpenerParams(opener) {
          var openers = [];
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            if (_nestingData[opener].type !== "quote" || !_nestingData[opener]) {
              openers.push(key);
            }
          }
          var ret = _nestingData[opener];
          ret.opener = new RegExp("^(?:" + openers.map(function(str) {
            return str.replace("(", "\\(");
          }).join("|") + ")");
          return ret;
        }
        var _nestingParams = function() {
          var ret = {};
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            ret[key] = _getNestingOpenerParams(key);
          }
          return ret;
        }();
        var _tagRex = function() {
          var openers = [];
          var closers = [];
          var vals = {};
          for (var opener in _nestingParams) {
            openers.push(opener);
            vals[_nestingParams[opener].closer] = true;
          }
          var keys = Object.keys(vals);
          for (var i = 0, l = keys.length; i < l; i++) {
            var closer = keys[i];
            closers.push(closer);
          }
          var all = openers.concat(closers).map(function(str) {
            return str.replace("(", "\\(");
          }).join("|");
          return {
            matchAll: new RegExp("((?:" + all + "))", "g"),
            splitAll: new RegExp("(?:" + all + ")", "g"),
            open: new RegExp("(^(?:" + openers.map(function(str) {
              return str.replace("(", "\\(");
            }).join("|") + ")$)"),
            close: new RegExp("(^(?:" + closers.join("|") + ")$)")
          };
        }();
        function _tryOpen(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (!params || tag.match(params.opener)) {
            _nestingState.push({
              type: _nestingParams[tag].type,
              opener: _nestingParams[tag].opener,
              closer: _nestingParams[tag].closer,
              pos
            });
            return false;
          } else {
            _nestingState.pop();
            _nestingState.push({
              type: _nestingParams[tag].type,
              opener: _nestingParams[tag].opener,
              closer: _nestingParams[tag].closer,
              pos
            });
            return {
              fixtag: params.pos
            };
          }
        }
        function _tryClose(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (params && tag === params.closer) {
            _nestingState.pop();
            if (params.type === "nocase") {
              return {
                nocase: {
                  open: params.pos,
                  close: pos
                }
              };
            } else {
              return false;
            }
          } else {
            if (params) {
              return {
                fixtag: params.pos
              };
            } else {
              return {
                fixtag: pos
              };
            }
          }
        }
        function _pushNestingState(tag, pos) {
          if (tag.match(_tagRex.open)) {
            return _tryOpen(tag, pos);
          } else {
            return _tryClose(tag, pos);
          }
        }
        function _doppelString(str) {
          var forcedSpaces = [];
          str = str.replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?\"[^>]*(>)/g, '$1 $2$3;"$4');
          str = str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3");
          var match = str.match(_tagRex.matchAll);
          if (!match) {
            return {
              tags: [],
              strings: [str],
              forcedSpaces: []
            };
          }
          var split = str.split(_tagRex.splitAll);
          for (var i = 0, ilen = match.length - 1; i < ilen; i++) {
            if (_nestingData[match[i]]) {
              if (split[i + 1] === "" && ['"', "'"].indexOf(match[i + 1]) > -1) {
                match[i + 1] = " " + match[i + 1];
                forcedSpaces.push(true);
              } else {
                forcedSpaces.push(false);
              }
            }
          }
          return {
            tags: match,
            strings: split,
            forcedSpaces
          };
        }
        var TagReg = function(blob) {
          var _stack = [];
          this.set = function(tag) {
            var attr = _nestingData[tag].attr;
            var decor = null;
            for (var i = _stack.length - 1; i > -1; i--) {
              var _decor = _stack[i];
              if (_decor[0] === attr) {
                decor = _decor;
                break;
              }
            }
            if (!decor) {
              var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(blob.alldecor);
              outer:
                for (var i = allTheDecor.length - 1; i > -1; i--) {
                  var decorset = allTheDecor[i];
                  if (!decorset) {
                    continue;
                  }
                  for (var j = decorset.length - 1; j > -1; j--) {
                    var _decor = decorset[j];
                    if (_decor[0] === attr) {
                      decor = _decor;
                      break outer;
                    }
                  }
                }
            }
            if (!decor) {
              decor = [attr, _nestingData[tag].outer];
            } else {
              decor = [attr, _nestingData[tag].flipflop[decor[1]]];
            }
            _stack.push(decor);
          };
          this.pair = function() {
            return _stack[_stack.length - 1];
          };
          this.pop = function() {
            _stack.pop();
          };
        };
        function _apostropheForce(tag, str) {
          if (tag === "'") {
            if (str && str.match(/^[^\,\.\?\:\;\ ]/)) {
              return "\u2019";
            }
          } else if (tag === " '" && str && str.match(/^[\ ]/)) {
            return " \u2019";
          }
          return false;
        }
        function _undoppelToQueue(blob, doppel, leadingSpace) {
          var firstString = true;
          var tagReg = new TagReg(blob);
          blob.blobs = [];
          function Stack(blob2) {
            this.stack = [blob2];
            this.latest = blob2;
            this.addStyling = function(str2, decor) {
              if (firstString) {
                if (str2.slice(0, 1) === " ") {
                  str2 = str2.slice(1);
                }
                if (str2.slice(0, 1) === " ") {
                  str2 = str2.slice(1);
                }
                firstString = false;
              }
              this.latest = this.stack[this.stack.length - 1];
              if (decor) {
                if (typeof this.latest.blobs === "string") {
                  var child = new CSL2.Blob();
                  child.blobs = this.latest.blobs;
                  child.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs = [child];
                }
                var tok = new CSL2.Token();
                var newblob = new CSL2.Blob(null, tok);
                newblob.alldecor = this.latest.alldecor.slice();
                if (decor[0] === "@class" && decor[1] === "nodecor") {
                  var newdecorset = [];
                  var seen = {};
                  var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(newblob.alldecor);
                  for (var i2 = allTheDecor.length - 1; i2 > -1; i2--) {
                    var _decorset = allTheDecor[i2];
                    if (!_decorset) {
                      continue;
                    }
                    for (var j = _decorset.length - 1; j > -1; j--) {
                      var _olddecor = _decorset[j];
                      if (["@font-weight", "@font-style", "@font-variant"].indexOf(_olddecor[0]) > -1 && !seen[_olddecor[0]]) {
                        if (decor[1] !== "normal") {
                          newblob.decorations.push([_olddecor[0], "normal"]);
                          newdecorset.push([_olddecor[0], "normal"]);
                        }
                        seen[_olddecor[0]] = true;
                      }
                    }
                  }
                  newblob.alldecor.push(newdecorset);
                } else {
                  newblob.decorations.push(decor);
                  newblob.alldecor.push([decor]);
                }
                this.latest.blobs.push(newblob);
                this.stack.push(newblob);
                this.latest = newblob;
                if (str2) {
                  var tok = new CSL2.Token();
                  var newblob = new CSL2.Blob(null, tok);
                  newblob.blobs = str2;
                  newblob.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs.push(newblob);
                }
              } else {
                if (str2) {
                  var child = new CSL2.Blob();
                  child.blobs = str2;
                  child.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs.push(child);
                }
              }
            };
            this.popStyling = function() {
              this.stack.pop();
            };
          }
          var stack = new Stack(blob);
          if (doppel.strings.length) {
            var str = doppel.strings[0];
            if (leadingSpace) {
              str = " " + str;
            }
            stack.addStyling(str);
          }
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i + 1];
            if (tag.match(_tagRex.open)) {
              tagReg.set(tag);
              stack.addStyling(str, tagReg.pair());
            } else {
              tagReg.pop();
              stack.popStyling();
              stack.addStyling(str);
            }
          }
        }
        this.processTags = function(blob) {
          var str = blob.blobs;
          var leadingSpace = false;
          if (str.slice(0, 1) === " " && !str.match(/^\s+[\'\"]/)) {
            leadingSpace = true;
          }
          var rex = new RegExp("(" + CSL2.ROMANESQUE_REGEXP.source + ")\u2019(" + CSL2.ROMANESQUE_REGEXP.source + ")", "g");
          var str = " " + str.replace(rex, "$1'$2");
          var doppel = _doppelString(str);
          if (doppel.tags.length === 0) {
            return;
          }
          var quoteFormSeen = false;
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i + 1];
            var apostrophe = _apostropheForce(tag, str);
            if (apostrophe) {
              doppel.strings[i + 1] = apostrophe + doppel.strings[i + 1];
              doppel.tags[i] = "";
            } else {
              var tagInfo;
              while (true) {
                tagInfo = _pushNestingState(tag, i);
                if (tagInfo) {
                  if (Object.keys(tagInfo).indexOf("fixtag") > -1) {
                    if (tag.match(_tagRex.close) && tag === "'") {
                      doppel.strings[i + 1] = "\u2019" + doppel.strings[i + 1];
                      doppel.tags[i] = "";
                    } else {
                      var failedTag = doppel.tags[tagInfo.fixtag];
                      if (doppel.forcedSpaces[tagInfo.fixtag - 1]) {
                        failedTag = failedTag.slice(1);
                      }
                      doppel.strings[tagInfo.fixtag + 1] = failedTag + doppel.strings[tagInfo.fixtag + 1];
                      doppel.tags[tagInfo.fixtag] = "";
                    }
                    if (_nestingState.length > 0) {
                      if (tag !== "'") {
                        _nestingState.pop();
                      } else {
                        break;
                      }
                    } else {
                      break;
                    }
                  } else if (tagInfo.nocase) {
                    doppel.tags[tagInfo.nocase.open] = "";
                    doppel.tags[tagInfo.nocase.close] = "";
                    break;
                  } else {
                    break;
                  }
                } else {
                  break;
                }
              }
              if (tagInfo && (tagInfo.fixtag || tagInfo.fixtag === 0)) {
                doppel.strings[i + 1] = doppel.tags[i] + doppel.strings[i + 1];
                doppel.tags[i] = "";
              }
            }
          }
          for (var i = _nestingState.length - 1; i > -1; i--) {
            var tagPos = _nestingState[i].pos;
            var tag = doppel.tags[tagPos];
            if (tag === " '" || tag === "'") {
              doppel.strings[tagPos + 1] = " \u2019" + doppel.strings[tagPos + 1];
            } else {
              doppel.strings[tagPos + 1] = doppel.tags[tagPos] + doppel.strings[tagPos + 1];
            }
            doppel.tags[tagPos] = "";
            _nestingState.pop();
          }
          for (var i = doppel.tags.length - 1; i > -1; i--) {
            if (!doppel.tags[i]) {
              doppel.tags = doppel.tags.slice(0, i).concat(doppel.tags.slice(i + 1));
              doppel.strings[i] = doppel.strings[i] + doppel.strings[i + 1];
              doppel.strings = doppel.strings.slice(0, i + 1).concat(doppel.strings.slice(i + 2));
            }
          }
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var forcedSpace = doppel.forcedSpaces[i - 1];
            if ([' "', " '", '("', "('"].indexOf(tag) > -1) {
              if (!quoteFormSeen) {
                _setOuterQuoteForm(tag);
                quoteFormSeen = true;
              }
              if (!forcedSpace) {
                doppel.strings[i] += tag.slice(0, 1);
              }
            }
          }
          _undoppelToQueue(blob, doppel, leadingSpace);
        };
      };
      CSL2.Output.Formatters = function() {
        var rexStr = `(?:\u2018|\u2019|\u201C|\u201D| "| '|"|'|[-\u2013\u2014/.,;?!:]|\\[|\\]|\\(|\\)|<span style="font-variant: small-caps;">|<span class="no(?:case|decor)">|</span>|</?(?:i|sc|b|sub|sup)>)`;
        var tagDoppel = new CSL2.Doppeler(rexStr, function(str) {
          return str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3").replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?(\")[^>]*(>)/g, "$1 $2 $3;$4$5");
        });
        var rexNameStr = '(?:[-\\s]*<\\/*(?:spans+class="no(?:case|decor)"|i|sc|b|sub|sup)>[-\\s]*|[-\\s]+)';
        var nameDoppel = new CSL2.Doppeler(rexNameStr);
        var wordDoppel = new CSL2.Doppeler("(?:[\xA0 \xA0\u2000-\u200B\u205F\u3000]+)");
        var _tagParams = {
          '<span style="font-variant: small-caps;">': "</span>",
          '<span class="nocase">': "</span>",
          '<span class="nodecor">': "</span>",
          "<sc>": "</sc>",
          "<sub>": "</sub>",
          "<sup>": "</sup>"
        };
        function _capitalise(word) {
          var m = word.match(/(^\s*)((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))(.*)/);
          if (m && !(m[2].match(/^[\u0370-\u03FF]$/) && !m[3])) {
            return m[1] + CSL2.toLocaleUpperCase.call(this, m[2]) + m[3];
          }
          return word;
        }
        function _textcaseEngine(config, string) {
          if (!string) {
            return "";
          }
          config.doppel = tagDoppel.split(string);
          var quoteParams = {
            ' "': {
              opener: " '",
              closer: '"'
            },
            " '": {
              opener: ' "',
              closer: "'"
            },
            "\u2018": {
              opener: "\u2018",
              closer: "\u2019"
            },
            "\u201C": {
              opener: "\u201C",
              closer: "\u201D"
            }
          };
          function tryOpen(tag2, pos) {
            if (config.quoteState.length === 0 || tag2 === config.quoteState[config.quoteState.length - 1].opener) {
              config.quoteState.push({
                opener: quoteParams[tag2].opener,
                closer: quoteParams[tag2].closer,
                pos
              });
              return false;
            } else {
              var prevPos = config.quoteState[config.quoteState.length - 1].pos;
              config.quoteState.pop();
              config.quoteState.push({
                opener: quoteParams[tag2].opener,
                closer: quoteParams[tag2].closer,
                positions: pos
              });
              return prevPos;
            }
          }
          function tryClose(tag2, pos) {
            if (config.quoteState.length > 0 && tag2 === config.quoteState[config.quoteState.length - 1].closer) {
              config.quoteState.pop();
            } else {
              return pos;
            }
          }
          function pushQuoteState(tag2, pos) {
            var isOpener = ["\u201C", "\u2018", ' "', " '"].indexOf(tag2) > -1 ? true : false;
            if (isOpener) {
              return tryOpen(tag2, pos);
            } else {
              return tryClose(tag2, pos);
            }
          }
          function quoteFix(tag2, positions) {
            var m = tag2.match(/(^(?:\u2018|\u2019|\u201C|\u201D|\"|\')|(?: \"| \')$)/);
            if (m) {
              return pushQuoteState(m[1], positions);
            }
          }
          if (config.doppel.strings.length && config.doppel.strings[0].trim()) {
            config.doppel.strings[0] = config.capitaliseWords(config.doppel.strings[0], 0, config.doppel.tags[0]);
          }
          for (var i = 0, ilen = config.doppel.tags.length; i < ilen; i++) {
            var tag = config.doppel.tags[i];
            var str = config.doppel.strings[i + 1];
            if (config.tagState !== null) {
              if (_tagParams[tag]) {
                config.tagState.push(_tagParams[tag]);
              } else if (config.tagState.length && tag === config.tagState[config.tagState.length - 1]) {
                config.tagState.pop();
              }
            }
            if (config.afterPunct !== null) {
              if (tag.match(/[\!\?\:]$/)) {
                config.afterPunct = true;
              }
            }
            if (config.tagState.length === 0) {
              config.doppel.strings[i + 1] = config.capitaliseWords(str, i + 1, config.doppel, config.doppel.tags[i + 1]);
            } else if (config.doppel.strings[i + 1].trim()) {
              config.lastWordPos = null;
            }
            if (config.quoteState !== null) {
              var quotePos = quoteFix(tag, i);
              if (quotePos || quotePos === 0) {
                var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
                config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
                config.lastWordPos = null;
              }
            }
            if (config.isFirst) {
              if (str.trim()) {
                config.isFirst = false;
              }
            }
            if (config.afterPunct) {
              if (str.trim()) {
                config.afterPunct = false;
              }
            }
          }
          if (config.quoteState) {
            for (var i = 0, ilen = config.quoteState.length; i < ilen; i++) {
              var quotePos = config.quoteState[i].pos;
              if (typeof quotePos !== "undefined") {
                var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
                config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
              }
            }
          }
          if (config.lastWordPos) {
            var lastWords = wordDoppel.split(config.doppel.strings[config.lastWordPos.strings]);
            var lastWord = lastWords.strings[config.lastWordPos.words];
            if (lastWord.length > 1 && CSL2.toLocaleLowerCase.call(this, lastWord).match(config.skipWordsRex)) {
              lastWord = _capitalise.call(this, lastWord);
              lastWords.strings[config.lastWordPos.words] = lastWord;
            }
            config.doppel.strings[config.lastWordPos.strings] = wordDoppel.join(lastWords);
          }
          return tagDoppel.join(config.doppel);
        }
        function passthrough(state, str) {
          return str;
        }
        function lowercase(state, string) {
          var config = {
            quoteState: null,
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  words[i] = CSL2.toLocaleLowerCase.call(state, word);
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        function uppercase(state, string) {
          var config = {
            quoteState: null,
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  words[i] = CSL2.toLocaleUpperCase.call(state, word);
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        function sentence(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (config.isFirst) {
                    words[i] = _capitalise.call(state, word);
                    config.isFirst = false;
                  } else {
                    words[i] = CSL2.toLocaleLowerCase.call(state, word);
                  }
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function title2(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str, i, followingTag) {
              if (str.trim()) {
                var wordle = wordDoppel.split(str);
                var words = wordle.strings;
                for (var j = 0, jlen = words.length; j < jlen; j++) {
                  var word = words[j];
                  if (!word) {
                    continue;
                  }
                  let lcase = CSL2.toLocaleLowerCase.call(state, word);
                  let capitalize = false;
                  if (word.length > 1 && !lcase.match(config.skipWordsRex)) {
                    capitalize = true;
                  } else if (j === words.length - 1 && followingTag === "-") {
                    capitalize = true;
                  } else if (config.isFirst) {
                    capitalize = true;
                  } else if (config.afterPunct) {
                    capitalize = true;
                  }
                  if (capitalize && word === lcase) {
                    words[j] = _capitalise.call(state, word);
                  }
                  config.afterPunct = false;
                  config.isFirst = false;
                  config.lastWordPos = {
                    strings: i,
                    words: j
                  };
                }
                str = wordDoppel.join(wordle);
              }
              return str;
            },
            skipWordsRex: state.locale[state.opt.lang].opts["skip-words-regexp"],
            tagState: [],
            afterPunct: false,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function capitalizeFirst(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var wordle = wordDoppel.split(str);
              var words = wordle.strings;
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (config.isFirst) {
                    if (word === CSL2.toLocaleLowerCase.call(state, word)) {
                      words[i] = _capitalise.call(state, word);
                    }
                    config.isFirst = false;
                    break;
                  }
                }
              }
              return wordDoppel.join(wordle);
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function capitalizeAll(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var wordle = wordDoppel.split(str);
              var words = wordle.strings;
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (word === CSL2.toLocaleLowerCase.call(state, word)) {
                    words[i] = _capitalise.call(state, word);
                  }
                }
              }
              return wordDoppel.join(wordle);
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        return {
          nameDoppel,
          passthrough,
          lowercase,
          uppercase,
          sentence,
          title: title2,
          "capitalize-first": capitalizeFirst,
          "capitalize-all": capitalizeAll
        };
      }();
      CSL2.Output.Formats = function() {
      };
      CSL2.Output.Formats.prototype.html = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\s\s/g, "\xA0 ").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "<sup>" + CSL2.SUPERSCRIPTS[aChar] + "</sup>";
          });
        },
        "bibstart": '<div class="csl-bib-body">\n',
        "bibend": "</div>",
        "@font-style/italic": "<i>%%STRING%%</i>",
        "@font-style/oblique": "<em>%%STRING%%</em>",
        "@font-style/normal": '<span style="font-style:normal;">%%STRING%%</span>',
        "@font-variant/small-caps": '<span style="font-variant:small-caps;">%%STRING%%</span>',
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-variant/normal": '<span style="font-variant:normal;">%%STRING%%</span>',
        "@font-weight/bold": "<b>%%STRING%%</b>",
        "@font-weight/normal": '<span style="font-weight:normal;">%%STRING%%</span>',
        "@font-weight/light": false,
        "@text-decoration/none": '<span style="text-decoration:none;">%%STRING%%</span>',
        "@text-decoration/underline": '<span style="text-decoration:underline;">%%STRING%%</span>',
        "@vertical-align/sup": "<sup>%%STRING%%</sup>",
        "@vertical-align/sub": "<sub>%%STRING%%</sub>",
        "@vertical-align/baseline": '<span style="baseline">%%STRING%%</span>',
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return '  <div class="csl-entry">' + str + "</div>\n" + insert;
        },
        "@display/block": function(state, str) {
          return '\n\n    <div class="csl-block">' + str + "</div>\n";
        },
        "@display/left-margin": function(state, str) {
          return '\n    <div class="csl-left-margin">' + str + "</div>";
        },
        "@display/right-inline": function(state, str) {
          return '<div class="csl-right-inline">' + str + "</div>\n  ";
        },
        "@display/indent": function(state, str) {
          return '<div class="csl-indent">' + str + "</div>\n  ";
        },
        "@showid/true": function(state, str, cslid) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
            if (cslid) {
              return '<span class="' + state.opt.nodenames[cslid] + '" cslid="' + cslid + '">' + str + "</span>";
            } else if (this.params && typeof str === "string") {
              var prePunct = "";
              if (str) {
                var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
                prePunct = m[1];
                str = m[2];
              }
              var postPunct = "";
              if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                postPunct = str.slice(-1);
                str = str.slice(0, -1);
              }
              return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
            } else {
              return str;
            }
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return '<a href="' + str + '">' + str + "</a>";
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return '<a href="' + doiurl + '">' + str + "</a>";
        }
      };
      CSL2.Output.Formats.prototype.text = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text;
        },
        "bibstart": "",
        "bibend": "",
        "@font-style/italic": false,
        "@font-style/oblique": false,
        "@font-style/normal": false,
        "@font-variant/small-caps": false,
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-variant/normal": false,
        "@font-weight/bold": false,
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": false,
        "@vertical-align/baseline": false,
        "@vertical-align/sup": false,
        "@vertical-align/sub": false,
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str + "\n";
        },
        "@display/block": function(state, str) {
          return "\n" + str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return str;
        },
        "@display/indent": function(state, str) {
          return "\n    " + str;
        },
        "@showid/true": function(state, str) {
          return str;
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL2.Output.Formats.prototype.rtf = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/([\\{}])/g, "\\$1").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "\\super " + CSL2.SUPERSCRIPTS[aChar] + "\\nosupersub{}";
          }).replace(/[\u007F-\uFFFF]/g, function(aChar) {
            return "\\uc0\\u" + aChar.charCodeAt(0).toString() + "{}";
          }).split("	").join("\\tab{}");
        },
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-style/italic": "{\\i{}%%STRING%%}",
        "@font-style/normal": "{\\i0{}%%STRING%%}",
        "@font-style/oblique": "{\\i{}%%STRING%%}",
        "@font-variant/small-caps": "{\\scaps %%STRING%%}",
        "@font-variant/normal": "{\\scaps0{}%%STRING%%}",
        "@font-weight/bold": "{\\b{}%%STRING%%}",
        "@font-weight/normal": "{\\b0{}%%STRING%%}",
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": "{\\ul{}%%STRING%%}",
        "@vertical-align/baseline": false,
        "@vertical-align/sup": "\\super %%STRING%%\\nosupersub{}",
        "@vertical-align/sub": "\\sub %%STRING%%\\nosupersub{}",
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-quote"));
          }
          return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-quote")) + str + CSL2.Output.Formats.rtf.text_escape(state.getTerm("close-quote"));
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return CSL2.Output.Formats.rtf.text_escape("\u2019");
          }
          return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-inner-quote")) + str + CSL2.Output.Formats.rtf.text_escape(state.getTerm("close-inner-quote"));
        },
        "@quotes/false": false,
        "bibstart": "{\\rtf ",
        "bibend": "}",
        "@display/block": "\\line{}%%STRING%%\\line\r\n",
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str;
        },
        "@display/left-margin": function(state, str) {
          return str + "\\tab ";
        },
        "@display/right-inline": function(state, str) {
          return str + "\r\n";
        },
        "@display/indent": function(state, str) {
          return "\n\\tab " + str + "\\line\r\n";
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL2.Output.Formats.prototype.asciidoc = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace("*", "pass:[*]", "g").replace("_", "pass:[_]", "g").replace("#", "pass:[#]", "g").replace("^", "pass:[^]", "g").replace("~", "pass:[~]", "g").replace("[[", "pass:[[[]", "g").replace("  ", "&#160; ", "g").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "^" + CSL2.SUPERSCRIPTS[aChar] + "^";
          });
        },
        "bibstart": "",
        "bibend": "",
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-style/italic": "__%%STRING%%__",
        "@font-style/oblique": "__%%STRING%%__",
        "@font-style/normal": false,
        "@font-variant/small-caps": "[small-caps]#%%STRING%%#",
        "@font-variant/normal": false,
        "@font-weight/bold": "**%%STRING%%**",
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": "[underline]##%%STRING%%##",
        "@vertical-align/sup": "^^%%STRING%%^^",
        "@vertical-align/sub": "~~%%STRING%%~~",
        "@vertical-align/baseline": false,
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return "``";
          }
          return "``" + str + "''";
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "`";
          }
          return "`" + str + "'";
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str + "\n";
        },
        "@display/block": function(state, str) {
          return str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return " " + str;
        },
        "@display/indent": function(state, str) {
          return " " + str;
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return doiurl + "[" + str + "]";
        }
      };
      CSL2.Output.Formats.prototype.fo = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace("  ", "&#160; ", "g").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return '<fo:inline vertical-align="super">' + CSL2.SUPERSCRIPTS[aChar] + "</fo:inline>";
          });
        },
        "bibstart": "",
        "bibend": "",
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-style/italic": '<fo:inline font-style="italic">%%STRING%%</fo:inline>',
        "@font-style/oblique": '<fo:inline font-style="oblique">%%STRING%%</fo:inline>',
        "@font-style/normal": '<fo:inline font-style="normal">%%STRING%%</fo:inline>',
        "@font-variant/small-caps": '<fo:inline font-variant="small-caps">%%STRING%%</fo:inline>',
        "@font-variant/normal": '<fo:inline font-variant="normal">%%STRING%%</fo:inline>',
        "@font-weight/bold": '<fo:inline font-weight="bold">%%STRING%%</fo:inline>',
        "@font-weight/normal": '<fo:inline font-weight="normal">%%STRING%%</fo:inline>',
        "@font-weight/light": '<fo:inline font-weight="lighter">%%STRING%%</fo:inline>',
        "@text-decoration/none": '<fo:inline text-decoration="none">%%STRING%%</fo:inline>',
        "@text-decoration/underline": '<fo:inline text-decoration="underline">%%STRING%%</fo:inline>',
        "@vertical-align/sup": '<fo:inline vertical-align="super">%%STRING%%</fo:inline>',
        "@vertical-align/sub": '<fo:inline vertical-align="sub">%%STRING%%</fo:inline>',
        "@vertical-align/baseline": '<fo:inline vertical-align="baseline">%%STRING%%</fo:inline>',
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          var indent = "";
          if (state.bibliography && state.bibliography.opt && state.bibliography.opt.hangingindent) {
            var hi = state.bibliography.opt.hangingindent;
            indent = ' start-indent="' + hi + 'em" text-indent="-' + hi + 'em"';
          }
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return '<fo:block id="' + this.system_id + '"' + indent + ">" + str + "</fo:block>\n" + insert;
        },
        "@display/block": function(state, str) {
          return "\n  <fo:block>" + str + "</fo:block>\n";
        },
        "@display/left-margin": function(state, str) {
          return '\n  <fo:table table-layout="fixed" width="100%">\n    <fo:table-column column-number="1" column-width="$$$__COLUMN_WIDTH_1__$$$"/>\n    <fo:table-column column-number="2" column-width="proportional-column-width(1)"/>\n    <fo:table-body>\n      <fo:table-row>\n        <fo:table-cell>\n          <fo:block>' + str + "</fo:block>\n        </fo:table-cell>\n        ";
        },
        "@display/right-inline": function(state, str) {
          return "<fo:table-cell>\n          <fo:block>" + str + "</fo:block>\n        </fo:table-cell>\n      </fo:table-row>\n    </fo:table-body>\n  </fo:table>\n";
        },
        "@display/indent": function(state, str) {
          return '<fo:block margin-left="2em">' + str + "</fo:block>\n";
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return `<fo:basic-link external-destination="url('` + str + `')">` + str + "</fo:basic-link>";
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return `<fo:basic-link external-destination="url('` + doiurl + `')">` + str + "</fo:basic-link>";
        }
      };
      CSL2.Output.Formats.prototype.latex = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text;
        },
        "bibstart": "\\begin{thebibliography}{4}",
        "bibend": "end{thebibliography}",
        "@font-style/italic": "{\\em %%STRING%%}",
        "@font-style/oblique": false,
        "@font-style/normal": false,
        "@font-variant/small-caps": false,
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-variant/normal": false,
        "@font-weight/bold": "{\\bf %%STRING%%}",
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": false,
        "@vertical-align/baseline": false,
        "@vertical-align/sup": false,
        "@vertical-align/sub": false,
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return "\\bibitem{" + state.sys.embedBibliographyEntry(this.item_id) + "}\n";
        },
        "@display/block": function(state, str) {
          return "\n" + str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return str;
        },
        "@display/indent": function(state, str) {
          return "\n    " + str;
        },
        "@showid/true": function(state, str, cslid) {
          return str;
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL2.Output.Formats = new CSL2.Output.Formats();
      CSL2.Registry = function(state) {
        this.debug = false;
        this.state = state;
        this.registry = {};
        this.reflist = [];
        this.refhash = {};
        this.namereg = new CSL2.Registry.NameReg(state);
        this.citationreg = new CSL2.Registry.CitationReg(state);
        this.authorstrings = {};
        this.masterMap = {};
        this.mylist = [];
        this.myhash = {};
        this.deletes = [];
        this.inserts = [];
        this.uncited = {};
        this.refreshes = {};
        this.akeys = {};
        this.oldseq = {};
        this.return_data = {};
        this.ambigcites = {};
        this.ambigresets = {};
        this.sorter = new CSL2.Registry.Comparifier(state, "bibliography_sort");
        this.getSortedIds = function() {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push("" + this.reflist[i].id);
          }
          return ret;
        };
        this.getSortedRegistryItems = function() {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push(this.reflist[i]);
          }
          return ret;
        };
      };
      CSL2.Registry.prototype.init = function(itemIDs, uncited_flag) {
        var i, ilen;
        this.oldseq = {};
        if (uncited_flag) {
          this.uncited = {};
          for (var i = 0, ilen = itemIDs.length; i < ilen; i += 1) {
            if (!this.myhash[itemIDs[i]]) {
              this.mylist.push("" + itemIDs[i]);
            }
            this.uncited[itemIDs[i]] = true;
            this.myhash[itemIDs[i]] = true;
          }
        } else {
          for (var key in this.uncited) {
            itemIDs.push(key);
          }
          var myhash = {};
          for (i = itemIDs.length - 1; i > -1; i += -1) {
            if (myhash[itemIDs[i]]) {
              itemIDs = itemIDs.slice(0, i).concat(itemIDs.slice(i + 1));
            } else {
              myhash[itemIDs[i]] = true;
            }
          }
          this.mylist = itemIDs;
          this.myhash = myhash;
        }
        this.refreshes = {};
        this.touched = {};
        this.ambigsTouched = {};
        this.ambigresets = {};
      };
      CSL2.Registry.prototype.dopurge = function(myhash) {
        for (var i = this.mylist.length - 1; i > -1; i += -1) {
          if (this.citationreg.citationsByItemId) {
            if ((!this.citationreg.citationsByItemId || !this.citationreg.citationsByItemId[this.mylist[i]]) && !myhash[this.mylist[i]]) {
              delete this.myhash[this.mylist[i]];
              delete this.uncited[this.mylist[i]];
              this.mylist = this.mylist.slice(0, i).concat(this.mylist.slice(i + 1));
            }
          }
        }
        this.dodeletes(this.myhash);
      };
      CSL2.Registry.prototype.dodeletes = function(myhash) {
        var otheritems, key, ambig, pos, len, items, kkey, mypos, id;
        if (typeof myhash === "string") {
          var key = myhash;
          myhash = {};
          myhash[key] = true;
        }
        for (var key in this.registry) {
          if (!myhash[key]) {
            if (this.uncited[key]) {
              continue;
            }
            otheritems = this.namereg.delitems(key);
            for (kkey in otheritems) {
              this.refreshes[kkey] = true;
            }
            ambig = this.registry[key].ambig;
            mypos = this.ambigcites[ambig].indexOf(key);
            if (mypos > -1) {
              items = this.ambigcites[ambig].slice();
              this.ambigcites[ambig] = items.slice(0, mypos).concat(items.slice(mypos + 1, items.length));
              this.ambigresets[ambig] = this.ambigcites[ambig].length;
            }
            len = this.ambigcites[ambig].length;
            for (pos = 0; pos < len; pos += 1) {
              id = "" + this.ambigcites[ambig][pos];
              this.refreshes[id] = true;
            }
            if (this.registry[key].siblings) {
              if (this.registry[key].siblings.length == 1) {
                var loneSiblingID = this.registry[key].siblings[0];
                if (this.registry[loneSiblingID].siblings) {
                  this.registry[loneSiblingID].siblings.pop();
                  this.registry[loneSiblingID].master = true;
                }
              } else if (this.registry[key].siblings.length > 1) {
                var removeIDs = [key];
                if (this.registry[key].master) {
                  var newmasterID = this.registry[key].siblings[0];
                  var newmaster = this.registry[newmasterID];
                  newmaster.master = true;
                  removeIDs.push(newmasterID);
                }
                var buffer = [];
                for (var k = this.registry[key].siblings.length - 1; k > -1; k += -1) {
                  var siblingID = this.registry[key].siblings.pop();
                  if (removeIDs.indexOf(siblingID) === -1) {
                    buffer.push(siblingID);
                  }
                }
                for (var k = buffer.length - 1; k > -1; k += -1) {
                  this.registry[key].siblings.push(buffer[k]);
                }
              }
            }
            for (var i = this.reflist.length - 1; i > -1; i--) {
              if (this.reflist[i].id === key) {
                this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
              }
            }
            delete this.registry[key];
            delete this.refhash[key];
            this.return_data.bibchange = true;
          }
        }
      };
      CSL2.Registry.prototype.doinserts = function(mylist) {
        var item, Item, akey, newitem, abase, i, ilen;
        if (typeof mylist === "string") {
          mylist = [mylist];
        }
        for (var i = 0, ilen = mylist.length; i < ilen; i += 1) {
          item = mylist[i];
          if (!this.registry[item]) {
            Item = this.state.retrieveItem(item);
            akey = CSL2.getAmbiguousCite.call(this.state, Item);
            this.ambigsTouched[akey] = true;
            if (!Item.legislation_id) {
              this.akeys[akey] = true;
            }
            newitem = {
              "id": "" + item,
              "seq": 0,
              "offset": 0,
              "sortkeys": false,
              "ambig": false,
              "rendered": false,
              "disambig": false,
              "ref": Item,
              "newItem": true
            };
            this.registry[item] = newitem;
            if (this.citationreg.citationsByItemId && this.citationreg.citationsByItemId[item]) {
              this.registry[item]["first-reference-note-number"] = this.citationreg.citationsByItemId[item][0].properties.noteIndex;
            }
            abase = CSL2.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, item, abase);
            this.touched[item] = true;
            this.return_data.bibchange = true;
          }
        }
      };
      CSL2.Registry.prototype.rebuildlist = function(nosort) {
        var len, pos, item, Item;
        if (!nosort) {
          this.reflist_inserts = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
              this.reflist_inserts.push(Item);
            }
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = pos + 1;
          }
        } else {
          this.reflist = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.reflist.push(Item);
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = pos + 1;
          }
        }
      };
      CSL2.Registry.prototype.dorefreshes = function() {
        var key, regtoken, Item, akey, abase;
        for (var key in this.refreshes) {
          regtoken = this.registry[key];
          if (!regtoken) {
            continue;
          }
          regtoken.sortkeys = void 0;
          Item = this.state.refetchItem(key);
          var akey = regtoken.ambig;
          if (typeof akey === "undefined") {
            this.state.tmp.disambig_settings = false;
            akey = CSL2.getAmbiguousCite.call(this.state, Item);
            abase = CSL2.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, key, abase);
          }
          for (var akkey in this.ambigresets) {
            if (this.ambigresets[akkey] === 1) {
              var loneKey = this.ambigcites[akey][0];
              var Item = this.state.refetchItem(loneKey);
              this.registry[loneKey].disambig = new CSL2.AmbigConfig();
              this.state.tmp.disambig_settings = false;
              var akey = CSL2.getAmbiguousCite.call(this.state, Item);
              var abase = CSL2.getAmbigConfig.call(this.state);
              this.registerAmbigToken(akey, loneKey, abase);
            }
          }
          this.state.tmp.taintedItemIDs[key] = true;
          this.ambigsTouched[akey] = true;
          if (!Item.legislation_id) {
            this.akeys[akey] = true;
          }
          this.touched[key] = true;
        }
      };
      CSL2.Registry.prototype.setdisambigs = function() {
        for (var akey in this.ambigsTouched) {
          this.state.disambiguate.run(akey);
        }
        this.ambigsTouched = {};
        this.akeys = {};
      };
      CSL2.Registry.prototype.renumber = function() {
        var len, pos, item;
        if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
          this.state.bibliography_sort.tmp.citation_number_map = {};
        }
        len = this.reflist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.reflist[pos];
          item.seq = pos + 1;
          if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
            this.state.bibliography_sort.tmp.citation_number_map[item.seq] = this.reflist.length - item.seq + 1;
          }
          if (this.state.opt.update_mode === CSL2.NUMERIC && item.seq != this.oldseq[item.id]) {
            this.state.tmp.taintedItemIDs[item.id] = true;
          }
          if (item.seq != this.oldseq[item.id]) {
            this.return_data.bibchange = true;
          }
        }
      };
      CSL2.Registry.prototype.setsortkeys = function() {
        var key;
        for (var i = 0, ilen = this.mylist.length; i < ilen; i += 1) {
          var key = this.mylist[i];
          if (this.touched[key] || this.state.tmp.taintedItemIDs[key] || !this.registry[key].sortkeys) {
            this.registry[key].sortkeys = CSL2.getSortKeys.call(this.state, this.state.retrieveItem(key), "bibliography_sort");
          }
        }
      };
      CSL2.Registry.prototype._insertItem = function(element, array) {
        array.splice(this._locationOf(element, array) + 1, 0, element);
        return array;
      };
      CSL2.Registry.prototype._locationOf = function(element, array, start, end) {
        if (array.length === 0) {
          return -1;
        }
        start = start || 0;
        end = end || array.length;
        var pivot = start + end >> 1;
        var c = this.sorter.compareKeys(element, array[pivot]);
        if (end - start <= 1) {
          return c == -1 ? pivot - 1 : pivot;
        }
        switch (c) {
          case -1:
            return this._locationOf(element, array, start, pivot);
          case 0:
            return pivot;
          case 1:
            return this._locationOf(element, array, pivot, end);
        }
      };
      CSL2.Registry.prototype.sorttokens = function(nosort) {
        var len, item, Item, pos;
        if (!nosort) {
          this.reflist_inserts = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
              this.reflist_inserts.push(Item);
            }
          }
          for (var key in this.state.tmp.taintedItemIDs) {
            if (this.registry[key] && !this.registry[key].newItem) {
              for (var i = this.reflist.length - 1; i > -1; i--) {
                if (this.reflist[i].id === key) {
                  this.reflist_inserts.push(this.reflist[i]);
                  this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
                }
              }
            }
          }
          for (var i = 0, ilen = this.reflist_inserts.length; i < ilen; i++) {
            var Item = this.reflist_inserts[i];
            delete Item.newItem;
            this.reflist = this._insertItem(Item, this.reflist);
          }
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.registry[item].seq = pos + 1;
          }
        }
      };
      CSL2.Registry.Comparifier = function(state, keyset) {
        var sort_directions, len, pos, compareKeys;
        var sortCompare = CSL2.getSortCompare.call(state, state.opt["default-locale-sort"]);
        sort_directions = state[keyset].opt.sort_directions;
        this.compareKeys = function(a, b) {
          len = a.sortkeys ? a.sortkeys.length : 0;
          for (pos = 0; pos < len; pos += 1) {
            var cmp = 0;
            if (a.sortkeys[pos] === b.sortkeys[pos]) {
              cmp = 0;
            } else if (typeof a.sortkeys[pos] === "undefined") {
              cmp = sort_directions[pos][1];
            } else if (typeof b.sortkeys[pos] === "undefined") {
              cmp = sort_directions[pos][0];
            } else {
              cmp = sortCompare(a.sortkeys[pos], b.sortkeys[pos]);
            }
            if (0 < cmp) {
              return sort_directions[pos][1];
            } else if (0 > cmp) {
              return sort_directions[pos][0];
            }
          }
          if (a.seq > b.seq) {
            return 1;
          } else if (a.seq < b.seq) {
            return -1;
          }
          return 0;
        };
        compareKeys = this.compareKeys;
        this.compareCompositeKeys = function(a, b) {
          return compareKeys(a[1], b[1]);
        };
      };
      CSL2.Registry.prototype.compareRegistryTokens = function(a, b) {
        if (a.seq > b.seq) {
          return 1;
        } else if (a.seq < b.seq) {
          return -1;
        }
        return 0;
      };
      CSL2.Registry.prototype.registerAmbigToken = function(akey, id, ambig_config) {
        if (!this.registry[id]) {
          CSL2.debug("Warning: unregistered item: itemID=(" + id + "), akey=(" + akey + ")");
        }
        if (this.registry[id] && this.registry[id].disambig && this.registry[id].disambig.names) {
          for (var i = 0, ilen = ambig_config.names.length; i < ilen; i += 1) {
            var new_names_params = ambig_config.names[i];
            var old_names_params = this.registry[id].disambig.names[i];
            if (new_names_params !== old_names_params) {
              this.state.tmp.taintedItemIDs[id] = true;
            } else if (ambig_config.givens[i]) {
              for (var j = 0, jlen = ambig_config.givens[i].length; j < jlen; j += 1) {
                var new_gnames_params = ambig_config.givens[i][j];
                var old_gnames_params = this.registry[id].disambig.givens[i][j];
                if (new_gnames_params !== old_gnames_params) {
                  this.state.tmp.taintedItemIDs[id] = true;
                }
              }
            }
          }
        }
        if (!this.ambigcites[akey]) {
          this.ambigcites[akey] = [];
        }
        if (this.ambigcites[akey].indexOf("" + id) === -1) {
          this.ambigcites[akey].push("" + id);
        }
        this.registry[id].ambig = akey;
        this.registry[id].disambig = CSL2.cloneAmbigConfig(ambig_config);
      };
      CSL2.getSortKeys = function(Item, key_type) {
        var area, root, extension, strip_prepositions, len, pos;
        if (false) {
          CSL2.debug("KEY TYPE: " + key_type);
        }
        area = this.tmp.area;
        root = this.tmp.root;
        extension = this.tmp.extension;
        strip_prepositions = CSL2.Util.Sort.strip_prepositions;
        this.tmp.area = key_type;
        this.tmp.root = key_type.indexOf("_") > -1 ? key_type.slice(0, -5) : key_type;
        this.tmp.extension = "_sort";
        this.tmp.disambig_override = true;
        this.tmp.disambig_request = false;
        this.tmp.suppress_decorations = true;
        CSL2.getCite.call(this, Item);
        this.tmp.suppress_decorations = false;
        this.tmp.disambig_override = false;
        len = this[key_type].keys.length;
        for (pos = 0; pos < len; pos += 1) {
          this[key_type].keys[pos] = strip_prepositions(this[key_type].keys[pos]);
        }
        if (false) {
          CSL2.debug("sort keys (" + key_type + "): " + this[key_type].keys);
        }
        this.tmp.area = area;
        this.tmp.root = root;
        this.tmp.extension = extension;
        return this[key_type].keys;
      };
      CSL2.Registry.NameReg = function(state) {
        var pkey, ikey, skey, dagopt, gdropt, items, strip_periods, set_keys, evalname, delitems, addname, myitems;
        this.state = state;
        this.namereg = {};
        this.nameind = {};
        this.nameindpkeys = {};
        this.itemkeyreg = {};
        strip_periods = function(str) {
          if (!str) {
            str = "";
          }
          return str.replace(/\./g, " ").replace(/\s+/g, " ").replace(/\s+$/, "");
        };
        set_keys = function(state2, itemid, nameobj) {
          pkey = strip_periods(nameobj.family);
          skey = strip_periods(nameobj.given);
          var m = skey.match(/[,\!]* ([^,]+)$/);
          if (m && m[1] === m[1].toLowerCase()) {
            skey = skey.replace(/[,\!]* [^,]+$/, "");
          }
          ikey = CSL2.Util.Names.initializeWith(state2, skey, "%s");
          if (state2.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            pkey = "" + itemid + pkey;
          }
        };
        evalname = function(item_id, nameobj, namenum, request_base, form, initials) {
          var param;
          if (state.tmp.area.slice(0, 12) === "bibliography" && !form) {
            if (typeof initials === "string") {
              return 1;
            } else {
              return 2;
            }
          }
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
          set_keys(this.state, "" + item_id, nameobj);
          param = 2;
          dagopt = state.opt["disambiguate-add-givenname"];
          gdropt = state.citation.opt["givenname-disambiguation-rule"];
          var gdropt_orig = gdropt;
          if (gdropt === "by-cite") {
            gdropt = "all-names";
          }
          if (form === "short") {
            param = 0;
          } else if (typeof initials === "string") {
            param = 1;
          }
          if (typeof this.namereg[pkey] === "undefined" || typeof this.namereg[pkey].ikey[ikey] === "undefined") {
            return param;
          }
          if (gdropt_orig === "by-cite" && param <= request_base) {
            return request_base;
          }
          if (!dagopt) {
            return param;
          }
          if (typeof gdropt === "string" && gdropt.slice(0, 12) === "primary-name" && namenum > 0) {
            return param;
          }
          if (!gdropt || gdropt === "all-names" || gdropt === "primary-name") {
            if (this.namereg[pkey].count > 1) {
              param = 1;
            }
            if (this.namereg[pkey].ikey && this.namereg[pkey].ikey[ikey].count > 1 || this.namereg[pkey].count > 1 && typeof initials !== "string") {
              param = 2;
            }
          } else if (gdropt === "all-names-with-initials" || gdropt === "primary-name-with-initials") {
            if (this.namereg[pkey].count > 1) {
              param = 1;
            } else {
              param = 0;
            }
          }
          if (!state.registry.registry[item_id]) {
            if (form == "short") {
              return 0;
            } else if (typeof initials == "string") {
              return 1;
            }
          } else {
            return param;
          }
        };
        delitems = function(ids) {
          var pos, len, posB, id, fullkey;
          if (typeof ids === "string" || typeof ids === "number") {
            ids = ["" + ids];
          }
          var ret = {};
          len = ids.length;
          for (pos = 0; pos < len; pos += 1) {
            id = "" + ids[pos];
            if (!this.nameind[id]) {
              continue;
            }
            for (fullkey in this.nameind[id]) {
              if (this.nameind[id].hasOwnProperty(fullkey)) {
                var key = fullkey.split("::");
                pkey = key[0];
                ikey = key[1];
                skey = key[2];
                if (typeof this.namereg[pkey] === "undefined") {
                  continue;
                }
                items = this.namereg[pkey].items;
                if (skey && this.namereg[pkey].ikey[ikey] && this.namereg[pkey].ikey[ikey].skey[skey]) {
                  myitems = this.namereg[pkey].ikey[ikey].skey[skey].items;
                  posB = myitems.indexOf("" + id);
                  if (posB > -1) {
                    this.namereg[pkey].ikey[ikey].skey[skey].items = myitems.slice(0, posB).concat(myitems.slice([posB + 1]));
                  }
                  if (this.namereg[pkey].ikey[ikey].skey[skey].items.length === 0) {
                    delete this.namereg[pkey].ikey[ikey].skey[skey];
                    this.namereg[pkey].ikey[ikey].count += -1;
                    if (this.namereg[pkey].ikey[ikey].count < 2) {
                      for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                      }
                    }
                  }
                }
                if (ikey && this.namereg[pkey].ikey[ikey]) {
                  posB = this.namereg[pkey].ikey[ikey].items.indexOf("" + id);
                  if (posB > -1) {
                    items = this.namereg[pkey].ikey[ikey].items.slice();
                    this.namereg[pkey].ikey[ikey].items = items.slice(0, posB).concat(items.slice([posB + 1]));
                  }
                  if (this.namereg[pkey].ikey[ikey].items.length === 0) {
                    delete this.namereg[pkey].ikey[ikey];
                    this.namereg[pkey].count += -1;
                    if (this.namereg[pkey].count < 2) {
                      for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                      }
                    }
                  }
                }
                if (pkey) {
                  posB = this.namereg[pkey].items.indexOf("" + id);
                  if (posB > -1) {
                    items = this.namereg[pkey].items.slice();
                    this.namereg[pkey].items = items.slice(0, posB).concat(items.slice([posB + 1], items.length));
                  }
                  if (this.namereg[pkey].items.length < 2) {
                    delete this.namereg[pkey];
                  }
                }
                delete this.nameind[id][fullkey];
              }
            }
            delete this.nameind[id];
            delete this.nameindpkeys[id];
          }
          return ret;
        };
        addname = function(item_id, nameobj, pos) {
          var i, ilen;
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
          if (state.citation.opt["givenname-disambiguation-rule"] && state.citation.opt["givenname-disambiguation-rule"].slice(0, 8) === "primary-" && pos !== 0) {
            return;
          }
          if (state.opt["demote-non-dropping-particle"] === "never" && nameobj["non-dropping-particle"] && nameobj["family"]) {
            nameobj["family"] = nameobj["non-dropping-particle"] + " " + nameobj["family"];
          }
          set_keys(this.state, "" + item_id, nameobj);
          if (pkey) {
            if (typeof this.namereg[pkey] === "undefined") {
              this.namereg[pkey] = {};
              this.namereg[pkey].count = 0;
              this.namereg[pkey].ikey = {};
              this.namereg[pkey].items = [item_id];
            } else if (this.namereg[pkey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].items.push(item_id);
            }
          }
          if (pkey && ikey) {
            if (typeof this.namereg[pkey].ikey[ikey] === "undefined") {
              this.namereg[pkey].ikey[ikey] = {};
              this.namereg[pkey].ikey[ikey].count = 0;
              this.namereg[pkey].ikey[ikey].skey = {};
              this.namereg[pkey].ikey[ikey].items = [item_id];
              this.namereg[pkey].count += 1;
              if (this.namereg[pkey].count === 2) {
                for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                  state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                }
              }
            } else if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].ikey[ikey].items.push(item_id);
            }
          }
          if (pkey && ikey && skey) {
            if (typeof this.namereg[pkey].ikey[ikey].skey[skey] === "undefined") {
              this.namereg[pkey].ikey[ikey].skey[skey] = {};
              this.namereg[pkey].ikey[ikey].skey[skey].items = [item_id];
              this.namereg[pkey].ikey[ikey].count += 1;
              if (this.namereg[pkey].ikey[ikey].count === 2) {
                for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                  state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                }
              }
            } else if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
            }
          }
          if (typeof this.nameind[item_id] === "undefined") {
            this.nameind[item_id] = {};
            this.nameindpkeys[item_id] = {};
          }
          if (pkey) {
            this.nameind[item_id][pkey + "::" + ikey + "::" + skey] = true;
            this.nameindpkeys[item_id][pkey] = this.namereg[pkey];
          }
        };
        this.addname = addname;
        this.delitems = delitems;
        this.evalname = evalname;
      };
      CSL2.Registry.CitationReg = function() {
        this.citationById = {};
        this.citationByIndex = [];
      };
      CSL2.Disambiguation = function(state) {
        this.state = state;
        this.sys = this.state.sys;
        this.registry = state.registry.registry;
        this.ambigcites = state.registry.ambigcites;
        this.configModes();
        this.debug = false;
      };
      CSL2.Disambiguation.prototype.run = function(akey) {
        if (!this.modes.length) {
          return;
        }
        if (this.debug) {
          print("[A] === RUN ===");
        }
        this.akey = akey;
        if (this.initVars(akey)) {
          this.runDisambig();
        }
      };
      CSL2.Disambiguation.prototype.runDisambig = function() {
        var ismax;
        if (this.debug) {
          print("[C] === runDisambig() ===");
        }
        this.initGivens = true;
        while (this.lists.length) {
          this.gnameset = 0;
          this.gname = 0;
          this.clashes = [1, 0];
          while (this.lists[0][1].length) {
            this.listpos = 0;
            if (!this.base) {
              this.base = this.lists[0][0];
            }
            ismax = this.incrementDisambig();
            this.scanItems(this.lists[0]);
            this.evalScan(ismax);
          }
          this.lists = this.lists.slice(1);
        }
      };
      CSL2.Disambiguation.prototype.scanItems = function(list) {
        var pos, len, otherItem;
        if (this.debug) {
          print("[2] === scanItems() ===");
        }
        this.Item = list[1][0];
        this.ItemCite = CSL2.getAmbiguousCite.call(this.state, this.Item, this.base, true);
        this.scanlist = list[1];
        this.partners = [];
        this.partners.push(this.Item);
        this.nonpartners = [];
        var clashes = 0;
        for (var pos = 1, len = list[1].length; pos < len; pos += 1) {
          otherItem = list[1][pos];
          var otherItemCite = CSL2.getAmbiguousCite.call(this.state, otherItem, this.base, true);
          if (this.debug) {
            if (pos > 1) {
              print("  -----------");
            }
          }
          if (this.ItemCite === otherItemCite) {
            if (this.debug) {
              print("  [CLASH]--> " + this.Item.id + ": " + this.ItemCite);
              print("             " + otherItem.id + ": " + otherItemCite);
            }
            clashes += 1;
            this.partners.push(otherItem);
          } else {
            if (this.debug) {
              print("  [clear]--> " + this.Item.id + ": " + this.ItemCite);
              print("             " + otherItem.id + ": " + otherItemCite);
            }
            this.nonpartners.push(otherItem);
          }
        }
        this.clashes[0] = this.clashes[1];
        this.clashes[1] = clashes;
      };
      CSL2.Disambiguation.prototype.evalScan = function(maxed) {
        this[this.modes[this.modeindex]](maxed);
        if (maxed) {
          if (this.modeindex < this.modes.length - 1) {
            this.modeindex += 1;
          } else {
            this.lists[this.listpos + 1] = [this.base, []];
          }
        }
      };
      CSL2.Disambiguation.prototype.disNames = function(ismax) {
        var i, ilen;
        if (this.debug) {
          print("[3] == disNames() ==");
        }
        if (this.clashes[1] === 0 && this.nonpartners.length === 1) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [a]: lone partner, one nonpartner");
            print("  registering " + this.partners[0].id + " and " + this.nonpartners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, []];
        } else if (this.clashes[1] === 0) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [b]: lone partner, unknown number of remaining nonpartners");
            print("  registering " + this.partners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, this.nonpartners];
          if (this.nonpartners.length) {
            this.initGivens = true;
          }
        } else if (this.nonpartners.length === 1) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [c]: lone nonpartner, unknown number of partners remaining");
            print("  registering " + this.nonpartners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, this.partners];
        } else if (this.clashes[1] < this.clashes[0]) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [d]: better result, but no entries safe to register");
          }
          this.lists[this.listpos] = [this.betterbase, this.partners];
          this.lists.push([this.betterbase, this.nonpartners]);
        } else {
          if (this.debug) {
            print("  ** RESOLUTION [e]: no improvement, and clashes remain");
          }
          if (ismax) {
            this.lists[this.listpos] = [this.betterbase, this.nonpartners];
            this.lists.push([this.betterbase, this.partners]);
            if (this.modeindex === this.modes.length - 1) {
              if (this.debug) {
                print("     (registering clashing entries because we've run out of options)");
              }
              for (var i = 0, ilen = this.partners.length; i < ilen; i += 1) {
                this.state.registry.registerAmbigToken(this.akey, "" + this.partners[i].id, this.betterbase);
              }
              this.lists[this.listpos] = [this.betterbase, []];
            }
          }
        }
      };
      CSL2.Disambiguation.prototype.disExtraText = function() {
        if (this.debug) {
          print("[3] === disExtraText ==");
        }
        var done = false;
        if (this.clashes[1] === 0 && this.nonpartners.length < 2) {
          done = true;
        }
        if (!done && (!this.base.disambiguate || this.state.tmp.disambiguate_count !== this.state.tmp.disambiguate_maxMax)) {
          this.modeindex = 0;
          this.base.disambiguate = this.state.tmp.disambiguate_count;
          this.betterbase.disambiguate = this.state.tmp.disambiguate_count;
          if (!this.base.disambiguate) {
            this.initGivens = true;
            this.base.disambiguate = 1;
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
            }
          } else {
            this.disNames();
          }
        } else if (done || this.state.tmp.disambiguate_count === this.state.tmp.disambiguate_maxMax) {
          if (done || this.modeindex === this.modes.length - 1) {
            var base = this.lists[this.listpos][0];
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
              this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
            this.lists[this.listpos] = [this.betterbase, []];
          } else {
            this.modeindex = this.modes.length - 1;
            var base = this.lists[this.listpos][0];
            base.disambiguate = true;
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
              this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
          }
        }
      };
      CSL2.Disambiguation.prototype.disYears = function() {
        var pos, len, tokens, token;
        if (this.debug) {
          print("[3] === disYears ==");
        }
        tokens = [];
        var base = this.lists[this.listpos][0];
        if (this.clashes[1]) {
          for (var i = 0, ilen = this.state.registry.mylist.length; i < ilen; i += 1) {
            var origid = this.state.registry.mylist[i];
            for (var j = 0, jlen = this.lists[this.listpos][1].length; j < jlen; j += 1) {
              var token = this.lists[this.listpos][1][j];
              if (token.id == origid) {
                tokens.push(this.registry[token.id]);
                break;
              }
            }
          }
        }
        tokens.sort(this.state.registry.sorter.compareKeys);
        for (var pos = 0, len = tokens.length; pos < len; pos += 1) {
          base.year_suffix = "" + pos;
          var oldBase = this.state.registry.registry[tokens[pos].id].disambig;
          this.state.registry.registerAmbigToken(this.akey, "" + tokens[pos].id, base);
          if (CSL2.ambigConfigDiff(oldBase, base)) {
            this.state.tmp.taintedItemIDs[tokens[pos].id] = true;
          }
        }
        this.lists[this.listpos] = [this.betterbase, []];
      };
      CSL2.Disambiguation.prototype.incrementDisambig = function() {
        if (this.debug) {
          print("\n[1] === incrementDisambig() ===");
        }
        if (this.initGivens) {
          this.initGivens = false;
          return false;
        }
        var maxed = false;
        var increment_names = true;
        if (this.modes[this.modeindex] === "disNames") {
          increment_names = false;
          if (typeof this.givensMax !== "number") {
            increment_names = true;
          }
          var increment_namesets = false;
          if (typeof this.namesMax !== "number") {
            increment_namesets = true;
          }
          if (typeof this.givensMax === "number") {
            if (this.base.givens.length && this.base.givens[this.gnameset][this.gname] < this.givensMax) {
              this.base.givens[this.gnameset][this.gname] += 1;
            } else {
              increment_names = true;
            }
          }
          if (typeof this.namesMax === "number" && increment_names) {
            if (this.state.opt["disambiguate-add-names"]) {
              increment_namesets = false;
              if (this.gname < this.namesMax) {
                this.base.names[this.gnameset] += 1;
                this.gname += 1;
              } else {
                increment_namesets = true;
              }
            } else {
              increment_namesets = true;
            }
          }
          if (typeof this.namesetsMax === "number" && increment_namesets) {
            if (this.gnameset < this.namesetsMax) {
              this.gnameset += 1;
              this.base.names[this.gnameset] = 1;
              this.gname = 0;
            }
          }
          if (this.debug) {
            print("    ------------------");
            print("    incremented values");
            print("    ------------------");
            print("    | gnameset: " + this.gnameset);
            print("    | gname: " + this.gname);
            print("    | names value: " + this.base.names[this.gnameset]);
            if (this.base.givens.length) {
              print("    | givens value: " + this.base.givens[this.gnameset][this.gname]);
            } else {
              print("    | givens value: nil");
            }
            print("    | namesetsMax: " + this.namesetsMax);
            print("    | namesMax: " + this.namesMax);
            print("    | givensMax: " + this.givensMax);
          }
          if ((typeof this.namesetsMax !== "number" || this.namesetsMax === -1 || this.gnameset === this.namesetsMax) && (!this.state.opt["disambiguate-add-names"] || typeof this.namesMax !== "number" || this.gname === this.namesMax) && (typeof this.givensMax != "number" || typeof this.base.givens[this.gnameset] === "undefined" || typeof this.base.givens[this.gnameset][this.gname] === "undefined" || this.base.givens[this.gnameset][this.gname] === this.givensMax)) {
            maxed = true;
            if (this.debug) {
              print("    MAXED");
            }
          }
        } else if (this.modes[this.modeindex] === "disExtraText") {
          this.base.disambiguate += 1;
          this.betterbase.disambiguate += 1;
        }
        return maxed;
      };
      CSL2.Disambiguation.prototype.initVars = function(akey) {
        var i, ilen, myIds, myItemBundles, myItems;
        if (this.debug) {
          print("[B] === initVars() ===");
        }
        this.lists = [];
        this.base = false;
        this.betterbase = false;
        this.akey = akey;
        this.maxNamesByItemId = {};
        myItemBundles = [];
        myIds = this.ambigcites[akey];
        if (!myIds || !myIds.length) {
          return false;
        }
        var myItem = this.state.refetchItem("" + myIds[0]);
        this.getCiteData(myItem);
        this.base = CSL2.getAmbigConfig.call(this.state);
        if (myIds && myIds.length > 1) {
          myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          for (var i = 1, ilen = myIds.length; i < ilen; i += 1) {
            myItem = this.state.refetchItem("" + myIds[i]);
            this.getCiteData(myItem, this.base);
            myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          }
          myItemBundles.sort(function(a, b) {
            if (a[0] > b[0]) {
              return 1;
            } else if (a[0] < b[0]) {
              return -1;
            } else {
              if (a[1].id > b[1].id) {
                return 1;
              } else if (a[1].id < b[1].id) {
                return -1;
              } else {
                return 0;
              }
            }
          });
          myItems = [];
          for (var i = 0, ilen = myItemBundles.length; i < ilen; i += 1) {
            myItems.push(myItemBundles[i][1]);
          }
          this.lists.push([this.base, myItems]);
          this.Item = this.lists[0][1][0];
        } else {
          this.Item = this.state.refetchItem("" + myIds[0]);
        }
        this.modeindex = 0;
        if (this.state.citation.opt["disambiguate-add-names"] || true) {
          this.namesMax = this.maxNamesByItemId[this.Item.id][0];
        } else {
          var namesMax = this.base.names[0];
          for (var i = 1, ilen = this.base.names.length; i < ilen; i += 1) {
            namesMax = Math.max(namesMax, this.base.names.names[i]);
          }
        }
        this.padBase(this.base);
        this.padBase(this.betterbase);
        this.base.year_suffix = false;
        this.base.disambiguate = false;
        this.betterbase.year_suffix = false;
        this.betterbase.disambiguate = false;
        if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.state.opt["disambiguate-add-givenname"]) {
          this.givensMax = 2;
        }
        return true;
      };
      CSL2.Disambiguation.prototype.padBase = function(base) {
        for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
          if (!base.givens[i]) {
            base.givens[i] = [];
          }
          for (var j = 0, jlen = base.names[i]; j < jlen; j += 1) {
            if (!base.givens[i][j]) {
              base.givens[i][j] = 0;
            }
          }
        }
      };
      CSL2.Disambiguation.prototype.configModes = function() {
        var dagopt, gdropt;
        this.modes = [];
        dagopt = this.state.opt["disambiguate-add-givenname"];
        gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
        if (this.state.opt["disambiguate-add-names"] || dagopt && gdropt === "by-cite") {
          this.modes.push("disNames");
        }
        if (this.state.opt.development_extensions.prioritize_disambiguate_condition) {
          if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
          }
          if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
          }
        } else {
          if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
          }
          if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
          }
        }
      };
      CSL2.Disambiguation.prototype.getCiteData = function(Item, base) {
        if (!this.maxNamesByItemId[Item.id]) {
          CSL2.getAmbiguousCite.call(this.state, Item, base);
          base = CSL2.getAmbigConfig.call(this.state);
          this.maxNamesByItemId[Item.id] = CSL2.getMaxVals.call(this.state);
          this.state.registry.registry[Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
          for (var i = 0, ilen = this.state.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
            this.state.registry.registry[Item.id].disambig.givens[i] = this.state.tmp.disambig_settings.givens[i].slice();
          }
          this.namesetsMax = this.state.registry.registry[Item.id].disambig.names.length - 1;
          if (!this.base) {
            this.base = base;
            this.betterbase = CSL2.cloneAmbigConfig(base);
          }
          if (base.names.length < this.base.names.length) {
            this.base = base;
          }
          for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
            if (base.names[i] > this.base.names[i]) {
              this.base.givens[i] = base.givens[i].slice();
              this.base.names[i] = base.names[i];
              this.betterbase.names = this.base.names.slice();
              this.betterbase.givens = this.base.givens.slice();
              this.padBase(this.base);
              this.padBase(this.betterbase);
            }
          }
          this.betterbase.givens = this.base.givens.slice();
          for (var j = 0, jlen = this.base.givens.length; j < jlen; j += 1) {
            this.betterbase.givens[j] = this.base.givens[j].slice();
          }
        }
      };
      CSL2.Disambiguation.prototype.captureStepToBase = function() {
        if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.base.givens && this.base.givens.length) {
          if (typeof this.base.givens[this.gnameset][this.gname] !== "undefined") {
            if (this.betterbase.givens.length < this.base.givens.length) {
              this.betterbase.givens = JSON.parse(JSON.stringify(this.base.givens));
            }
            this.betterbase.givens[this.gnameset][this.gname] = this.base.givens[this.gnameset][this.gname];
          }
        }
        this.betterbase.names[this.gnameset] = this.base.names[this.gnameset];
      };
      CSL2.Engine.prototype.getJurisdictionList = function(jurisdiction2) {
        var jurisdictionList = [];
        var jurisdictionElems = jurisdiction2.split(":");
        for (var j = jurisdictionElems.length; j > 0; j--) {
          var composedID = jurisdictionElems.slice(0, j).join(":");
          jurisdictionList.push(composedID);
          if (this.opt.jurisdiction_fallbacks[composedID]) {
            var fallback = this.opt.jurisdiction_fallbacks[composedID];
            jurisdictionList.push(fallback);
          }
        }
        if (jurisdictionList.indexOf("us") === -1) {
          jurisdictionList.push("us");
        }
        return jurisdictionList;
      };
      CSL2.Engine.prototype.loadStyleModule = function(jurisdiction2, xmlSource, skipFallback) {
        var myFallback = null;
        var macroCount = 0;
        this.juris[jurisdiction2] = {};
        var myXml = CSL2.setupXml(xmlSource);
        myXml.addMissingNameNodes(myXml.dataObj);
        myXml.addInstitutionNodes(myXml.dataObj);
        myXml.insertPublisherAndPlace(myXml.dataObj);
        myXml.flagDateMacros(myXml.dataObj);
        var myNodes = myXml.getNodesByName(myXml.dataObj, "law-module");
        for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
          var myTypes = myXml.getAttributeValue(myNodes[i], "types");
          if (myTypes) {
            this.juris[jurisdiction2].types = {};
            myTypes = myTypes.split(/\s+/);
            for (var j = 0, jlen = myTypes.length; j < jlen; j++) {
              this.juris[jurisdiction2].types[myTypes[j]] = true;
            }
          }
          if (!skipFallback) {
            myFallback = myXml.getAttributeValue(myNodes[i], "fallback");
            if (myFallback) {
              if (jurisdiction2 !== "us") {
                this.opt.jurisdiction_fallbacks[jurisdiction2] = myFallback;
              }
            }
          }
        }
        var lang = this.opt.lang ? this.opt.lang : this.opt["default-locale"][0];
        CSL2.SET_COURT_CLASSES(this, lang, myXml, myXml.dataObj);
        if (!this.juris[jurisdiction2].types) {
          this.juris[jurisdiction2].types = CSL2.MODULE_TYPES;
        }
        var myNodes = myXml.getNodesByName(myXml.dataObj, "macro");
        for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
          var myName = myXml.getAttributeValue(myNodes[i], "name");
          if (!CSL2.MODULE_MACROS[myName]) {
            CSL2.debug('CSL: skipping non-modular macro name "' + myName + '" in module context');
            continue;
          }
          macroCount++;
          this.juris[jurisdiction2][myName] = [];
          this.buildTokenLists(myNodes[i], this.juris[jurisdiction2][myName]);
          this.configureTokenList(this.juris[jurisdiction2][myName]);
        }
        return myFallback;
      };
      CSL2.Engine.prototype.retrieveAllStyleModules = function(jurisdictionList) {
        var ret = {};
        var preferences = this.locale[this.opt.lang].opts["jurisdiction-preference"];
        preferences = preferences ? preferences : [];
        preferences = [""].concat(preferences);
        for (var i = preferences.length - 1; i > -1; i--) {
          var preference = preferences[i];
          for (var j = 0, jlen = jurisdictionList.length; j < jlen; j++) {
            var jurisdiction2 = jurisdictionList[j];
            if (this.opt.jurisdictions_seen[jurisdiction2]) {
              continue;
            }
            var res = this.sys.retrieveStyleModule(jurisdiction2, preference);
            if (!res && !preference || res) {
              this.opt.jurisdictions_seen[jurisdiction2] = true;
            }
            if (!res) {
              continue;
            }
            ret[jurisdiction2] = res;
          }
        }
        return ret;
      };
      CSL2.ParticleList = function() {
        var always_dropping_1 = [[[0, 1], null]];
        var always_dropping_3 = [[[0, 3], null]];
        var always_non_dropping_1 = [[null, [0, 1]]];
        var always_non_dropping_2 = [[null, [0, 2]]];
        var always_non_dropping_3 = [[null, [0, 3]]];
        var either_1 = [[null, [0, 1]], [[0, 1], null]];
        var either_2 = [[null, [0, 2]], [[0, 2], null]];
        var either_1_dropping_best = [[[0, 1], null], [null, [0, 1]]];
        var either_2_dropping_best = [[[0, 2], null], [null, [0, 2]]];
        var either_3_dropping_best = [[[0, 3], null], [null, [0, 3]]];
        var non_dropping_2_alt_dropping_1_non_dropping_1 = [[null, [0, 2]], [[0, 1], [1, 2]]];
        var PARTICLES = [
          ["'s", always_non_dropping_1],
          ["'s-", always_non_dropping_1],
          ["'t", always_non_dropping_1],
          ["a", always_non_dropping_1],
          ["aan 't", always_non_dropping_2],
          ["aan de", always_non_dropping_2],
          ["aan den", always_non_dropping_2],
          ["aan der", always_non_dropping_2],
          ["aan het", always_non_dropping_2],
          ["aan t", always_non_dropping_2],
          ["aan", always_non_dropping_1],
          ["ad-", either_1],
          ["adh-", either_1],
          ["af", either_1],
          ["al", either_1],
          ["al-", either_1],
          ["am de", always_non_dropping_2],
          ["am", always_non_dropping_1],
          ["an-", either_1],
          ["ar-", either_1],
          ["as-", either_1],
          ["ash-", either_1],
          ["at-", either_1],
          ["ath-", either_1],
          ["auf dem", either_2_dropping_best],
          ["auf den", either_2_dropping_best],
          ["auf der", either_2_dropping_best],
          ["auf ter", always_non_dropping_2],
          ["auf", either_1_dropping_best],
          ["aus 'm", either_2_dropping_best],
          ["aus dem", either_2_dropping_best],
          ["aus den", either_2_dropping_best],
          ["aus der", either_2_dropping_best],
          ["aus m", either_2_dropping_best],
          ["aus", either_1_dropping_best],
          ["aus'm", either_2_dropping_best],
          ["az-", either_1],
          ["a\u0161-", either_1],
          ["a\u1E0D-", either_1],
          ["a\u1E0F-", either_1],
          ["a\u1E63-", either_1],
          ["a\u1E6D-", either_1],
          ["a\u1E6F-", either_1],
          ["a\u1E93-", either_1],
          ["ben", always_non_dropping_1],
          ["bij 't", always_non_dropping_2],
          ["bij de", always_non_dropping_2],
          ["bij den", always_non_dropping_2],
          ["bij het", always_non_dropping_2],
          ["bij t", always_non_dropping_2],
          ["bij", always_non_dropping_1],
          ["bin", always_non_dropping_1],
          ["boven d", always_non_dropping_2],
          ["boven d'", always_non_dropping_2],
          ["d", always_non_dropping_1],
          ["d'", either_1],
          ["da", either_1],
          ["dal", always_non_dropping_1],
          ["dal'", always_non_dropping_1],
          ["dall'", always_non_dropping_1],
          ["dalla", always_non_dropping_1],
          ["das", either_1],
          ["de die le", always_non_dropping_3],
          ["de die", always_non_dropping_2],
          ["de l", always_non_dropping_2],
          ["de l'", always_non_dropping_2],
          ["de la", non_dropping_2_alt_dropping_1_non_dropping_1],
          ["de las", non_dropping_2_alt_dropping_1_non_dropping_1],
          ["de le", always_non_dropping_2],
          ["de li", either_2],
          ["de van der", always_non_dropping_3],
          ["de", either_1],
          ["de'", either_1],
          ["deca", always_non_dropping_1],
          ["degli", either_1],
          ["dei", either_1],
          ["del", either_1],
          ["dela", always_dropping_1],
          ["dell'", either_1],
          ["della", either_1],
          ["delle", either_1],
          ["dello", either_1],
          ["den", either_1],
          ["der", either_1],
          ["des", either_1],
          ["di", either_1],
          ["die le", always_non_dropping_2],
          ["do", always_non_dropping_1],
          ["don", always_non_dropping_1],
          ["dos", either_1],
          ["du", either_1],
          ["ed-", either_1],
          ["edh-", either_1],
          ["el", either_1],
          ["el-", either_1],
          ["en-", either_1],
          ["er-", either_1],
          ["es-", either_1],
          ["esh-", either_1],
          ["et-", either_1],
          ["eth-", either_1],
          ["ez-", either_1],
          ["e\u0161-", either_1],
          ["e\u1E0D-", either_1],
          ["e\u1E0F-", either_1],
          ["e\u1E63-", either_1],
          ["e\u1E6D-", either_1],
          ["e\u1E6F-", either_1],
          ["e\u1E93-", either_1],
          ["het", always_non_dropping_1],
          ["i", always_non_dropping_1],
          ["il", always_dropping_1],
          ["im", always_non_dropping_1],
          ["in 't", always_non_dropping_2],
          ["in de", always_non_dropping_2],
          ["in den", always_non_dropping_2],
          ["in der", either_2],
          ["in het", always_non_dropping_2],
          ["in t", always_non_dropping_2],
          ["in", always_non_dropping_1],
          ["l", always_non_dropping_1],
          ["l'", always_non_dropping_1],
          ["la", always_non_dropping_1],
          ["las", always_non_dropping_1],
          ["le", always_non_dropping_1],
          ["les", either_1],
          ["lo", either_1],
          ["los", always_non_dropping_1],
          ["lou", always_non_dropping_1],
          ["of", always_non_dropping_1],
          ["onder 't", always_non_dropping_2],
          ["onder de", always_non_dropping_2],
          ["onder den", always_non_dropping_2],
          ["onder het", always_non_dropping_2],
          ["onder t", always_non_dropping_2],
          ["onder", always_non_dropping_1],
          ["op 't", always_non_dropping_2],
          ["op de", either_2],
          ["op den", always_non_dropping_2],
          ["op der", always_non_dropping_2],
          ["op gen", always_non_dropping_2],
          ["op het", always_non_dropping_2],
          ["op t", always_non_dropping_2],
          ["op ten", always_non_dropping_2],
          ["op", always_non_dropping_1],
          ["over 't", always_non_dropping_2],
          ["over de", always_non_dropping_2],
          ["over den", always_non_dropping_2],
          ["over het", always_non_dropping_2],
          ["over t", always_non_dropping_2],
          ["over", always_non_dropping_1],
          ["s", always_non_dropping_1],
          ["s'", always_non_dropping_1],
          ["sen", always_dropping_1],
          ["t", always_non_dropping_1],
          ["te", always_non_dropping_1],
          ["ten", always_non_dropping_1],
          ["ter", always_non_dropping_1],
          ["tho", always_non_dropping_1],
          ["thoe", always_non_dropping_1],
          ["thor", always_non_dropping_1],
          ["to", always_non_dropping_1],
          ["toe", always_non_dropping_1],
          ["tot", always_non_dropping_1],
          ["uijt 't", always_non_dropping_2],
          ["uijt de", always_non_dropping_2],
          ["uijt den", always_non_dropping_2],
          ["uijt te de", always_non_dropping_3],
          ["uijt ten", always_non_dropping_2],
          ["uijt", always_non_dropping_1],
          ["uit 't", always_non_dropping_2],
          ["uit de", always_non_dropping_2],
          ["uit den", always_non_dropping_2],
          ["uit het", always_non_dropping_2],
          ["uit t", always_non_dropping_2],
          ["uit te de", always_non_dropping_3],
          ["uit ten", always_non_dropping_2],
          ["uit", always_non_dropping_1],
          ["unter", always_non_dropping_1],
          ["v", always_non_dropping_1],
          ["v.", always_non_dropping_1],
          ["v.d.", always_non_dropping_1],
          ["van 't", always_non_dropping_2],
          ["van de l", always_non_dropping_3],
          ["van de l'", always_non_dropping_3],
          ["van de", always_non_dropping_2],
          ["van de", always_non_dropping_2],
          ["van den", always_non_dropping_2],
          ["van der", always_non_dropping_2],
          ["van gen", always_non_dropping_2],
          ["van het", always_non_dropping_2],
          ["van la", always_non_dropping_2],
          ["van t", always_non_dropping_2],
          ["van ter", always_non_dropping_2],
          ["van van de", always_non_dropping_3],
          ["van", either_1],
          ["vander", always_non_dropping_1],
          ["vd", always_non_dropping_1],
          ["ver", always_non_dropping_1],
          ["vom und zum", always_dropping_3],
          ["vom", either_1],
          ["von 't", always_non_dropping_2],
          ["von dem", either_2_dropping_best],
          ["von den", either_2_dropping_best],
          ["von der", either_2_dropping_best],
          ["von t", always_non_dropping_2],
          ["von und zu", either_3_dropping_best],
          ["von zu", either_2_dropping_best],
          ["von", either_1_dropping_best],
          ["voor 't", always_non_dropping_2],
          ["voor de", always_non_dropping_2],
          ["voor den", always_non_dropping_2],
          ["voor in 't", always_non_dropping_3],
          ["voor in t", always_non_dropping_3],
          ["voor", always_non_dropping_1],
          ["vor der", either_2_dropping_best],
          ["vor", either_1_dropping_best],
          ["z", always_dropping_1],
          ["ze", always_dropping_1],
          ["zu", either_1_dropping_best],
          ["zum", either_1],
          ["zur", either_1]
        ];
        return PARTICLES;
      }();
      CSL2.parseParticles = function() {
        function splitParticles(nameValue, firstNameFlag, caseOverride) {
          var origNameValue = nameValue;
          nameValue = caseOverride ? nameValue.toLowerCase() : nameValue;
          var particleList = [];
          var rex;
          var hasParticle;
          if (firstNameFlag) {
            nameValue = nameValue.split("").reverse().join("");
            rex = CSL2.PARTICLE_GIVEN_REGEXP;
          } else {
            rex = CSL2.PARTICLE_FAMILY_REGEXP;
          }
          var m = nameValue.match(rex);
          while (m) {
            var m1 = firstNameFlag ? m[1].split("").reverse().join("") : m[1];
            var firstChar = m ? m1 : false;
            var firstChar = firstChar ? m1.replace(/^[-\'\u02bb\u2019\s]*(.).*$/, "$1") : false;
            hasParticle = firstChar ? firstChar.toUpperCase() !== firstChar : false;
            if (!hasParticle) {
              break;
            }
            if (firstNameFlag) {
              particleList.push(origNameValue.slice(m1.length * -1));
              origNameValue = origNameValue.slice(0, m1.length * -1);
            } else {
              particleList.push(origNameValue.slice(0, m1.length));
              origNameValue = origNameValue.slice(m1.length);
            }
            nameValue = m[2];
            m = nameValue.match(rex);
          }
          if (firstNameFlag) {
            nameValue = nameValue.split("").reverse().join("");
            particleList.reverse();
            for (var i = 1, ilen = particleList.length; i < ilen; i++) {
              if (particleList[i].slice(0, 1) == " ") {
                particleList[i - 1] += " ";
              }
            }
            for (var i = 0, ilen = particleList.length; i < ilen; i++) {
              if (particleList[i].slice(0, 1) == " ") {
                particleList[i] = particleList[i].slice(1);
              }
            }
            nameValue = origNameValue.slice(0, nameValue.length);
          } else {
            nameValue = origNameValue.slice(nameValue.length * -1);
          }
          return [hasParticle, nameValue, particleList];
        }
        function trimLast(str) {
          var lastChar = str.slice(-1);
          str = str.trim();
          if (lastChar === " " && ["'", "\u2019"].indexOf(str.slice(-1)) > -1) {
            str += " ";
          }
          return str;
        }
        function parseSuffix(nameObj) {
          if (!nameObj.suffix && nameObj.given) {
            var m = nameObj.given.match(/(\s*,!*\s*)/);
            if (m) {
              var idx = nameObj.given.indexOf(m[1]);
              var possible_suffix = nameObj.given.slice(idx + m[1].length);
              var possible_comma = nameObj.given.slice(idx, idx + m[1].length).replace(/\s*/g, "");
              if (possible_suffix.replace(/\./g, "") === "et al" && !nameObj["dropping-particle"]) {
                nameObj["dropping-particle"] = possible_suffix;
                nameObj["comma-dropping-particle"] = ",";
              } else {
                if (possible_comma.length === 2) {
                  nameObj["comma-suffix"] = true;
                }
                nameObj.suffix = possible_suffix;
              }
              nameObj.given = nameObj.given.slice(0, idx);
            }
          }
        }
        return function(nameObj) {
          var res = splitParticles(nameObj.family);
          var lastNameValue = res[1];
          var lastParticleList = res[2];
          nameObj.family = lastNameValue;
          var nonDroppingParticle = trimLast(lastParticleList.join(""));
          if (nonDroppingParticle) {
            nameObj["non-dropping-particle"] = nonDroppingParticle;
          }
          parseSuffix(nameObj);
          var res = splitParticles(nameObj.given, true);
          var firstNameValue = res[1];
          var firstParticleList = res[2];
          nameObj.given = firstNameValue;
          var droppingParticle = firstParticleList.join("").trim();
          if (droppingParticle) {
            nameObj["dropping-particle"] = droppingParticle;
          }
        };
      }();
      module.exports = CSL2;
    }
  });

  // translators/Collected notes.ts
  var Collected_notes_exports = {};
  __export(Collected_notes_exports, {
    Translator: () => Translator,
    doExport: () => doExport
  });
  init_globals();
  var import_html2markdown = __toESM(require_lib5());

  // translators/lib/translator.ts
  init_globals();

  // gen/preferences/meta.ts
  init_globals();
  var names = [
    "ascii",
    "asciiBibLaTeX",
    "asciiBibTeX",
    "autoAbbrev",
    "autoAbbrevStyle",
    "autoExport",
    "autoExportDelay",
    "autoExportIdleWait",
    "autoExportPathReplaceDiacritics",
    "autoExportPathReplaceDirSep",
    "autoExportPathReplaceSpace",
    "automaticTags",
    "autoPinDelay",
    "auxImport",
    "baseAttachmentPath",
    "biblatexExtendedDateFormat",
    "biblatexExtendedNameFormat",
    "biblatexExtractEprint",
    "bibtexParticleNoOp",
    "bibtexURL",
    "cacheFlushInterval",
    "caching",
    "citeCommand",
    "citekeyFold",
    "citekeyFormat",
    "citekeySearch",
    "csquotes",
    "DOIandURL",
    "exportBibTeXStrings",
    "exportBraceProtection",
    "exportTitleCase",
    "extraMergeCitekeys",
    "extraMergeCSL",
    "extraMergeTeX",
    "git",
    "import",
    "importBibTeXStrings",
    "importCaseProtection",
    "importCitationKey",
    "importExtra",
    "importJabRefAbbreviations",
    "importJabRefStrings",
    "importSentenceCase",
    "importUnknownTexCommand",
    "itemObserverDelay",
    "jabrefFormat",
    "jieba",
    "keyConflictPolicy",
    "keyScope",
    "kuroshiro",
    "mapMath",
    "mapText",
    "mapUnicode",
    "parseParticles",
    "patchDates",
    "platform",
    "postscript",
    "postscriptOverride",
    "preferencesOverride",
    "qualityReport",
    "quickCopyEta",
    "quickCopyMode",
    "quickCopyOrgMode",
    "quickCopyPandocBrackets",
    "quickCopySelectLink",
    "rawImports",
    "rawLaTag",
    "relativeFilePaths",
    "retainCache",
    "scrubDatabase",
    "separatorList",
    "separatorNames",
    "skipFields",
    "skipWords",
    "startupProgress",
    "strings",
    "stringsOverride",
    "testing",
    "verbatimFields",
    "warnBulkModify",
    "warnTitleCased",
    "workers"
  ];
  var affects = {
    ascii: ["Better BibLaTeX", "Better BibTeX"],
    asciiBibLaTeX: ["Better BibLaTeX"],
    asciiBibTeX: ["Better BibTeX"],
    autoAbbrev: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    autoAbbrevStyle: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    automaticTags: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    baseAttachmentPath: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    biblatexExtendedDateFormat: ["Better BibLaTeX"],
    biblatexExtendedNameFormat: ["Better BibLaTeX"],
    biblatexExtractEprint: ["Better BibLaTeX", "Better BibTeX"],
    bibtexParticleNoOp: ["Better BibTeX"],
    bibtexURL: ["Better BibTeX"],
    caching: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    csquotes: ["Better BibLaTeX", "Better BibTeX"],
    DOIandURL: ["Better BibLaTeX", "Better BibTeX"],
    exportBibTeXStrings: ["Better BibLaTeX", "Better BibTeX"],
    exportBraceProtection: ["Better BibLaTeX", "Better BibTeX"],
    exportTitleCase: ["Better BibLaTeX", "Better BibTeX"],
    jabrefFormat: ["Better BibLaTeX", "Better BibTeX"],
    mapMath: ["Better BibLaTeX", "Better BibTeX"],
    mapText: ["Better BibLaTeX", "Better BibTeX"],
    mapUnicode: ["Better BibLaTeX", "Better BibTeX"],
    parseParticles: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    postscript: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    qualityReport: ["Better BibLaTeX", "Better BibTeX"],
    rawLaTag: ["Better BibLaTeX", "Better BibTeX"],
    relativeFilePaths: ["Better BibLaTeX", "Better BibTeX"],
    separatorList: ["Better BibLaTeX", "Better BibTeX"],
    separatorNames: ["Better BibLaTeX", "Better BibTeX"],
    skipFields: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    skipWords: ["Better BibLaTeX", "Better BibTeX"],
    strings: ["Better BibLaTeX", "Better BibTeX"]
  };
  var defaults = {
    ascii: "",
    asciiBibLaTeX: false,
    asciiBibTeX: true,
    autoAbbrev: false,
    autoAbbrevStyle: "",
    autoExport: "immediate",
    autoExportDelay: 5,
    autoExportIdleWait: 10,
    autoExportPathReplaceDiacritics: false,
    autoExportPathReplaceDirSep: "-",
    autoExportPathReplaceSpace: " ",
    automaticTags: true,
    autoPinDelay: 0,
    auxImport: false,
    baseAttachmentPath: "",
    biblatexExtendedDateFormat: true,
    biblatexExtendedNameFormat: false,
    biblatexExtractEprint: true,
    bibtexParticleNoOp: false,
    bibtexURL: "off",
    cacheFlushInterval: 5,
    caching: true,
    citeCommand: "cite",
    citekeyFold: true,
    citekeyFormat: "[auth:lower][shorttitle3_3][year]",
    citekeySearch: true,
    csquotes: "",
    DOIandURL: "both",
    exportBibTeXStrings: "off",
    exportBraceProtection: true,
    exportTitleCase: true,
    extraMergeCitekeys: false,
    extraMergeCSL: false,
    extraMergeTeX: false,
    git: "config",
    import: true,
    importBibTeXStrings: true,
    importCaseProtection: "as-needed",
    importCitationKey: true,
    importExtra: true,
    importJabRefAbbreviations: true,
    importJabRefStrings: true,
    importSentenceCase: "on+guess",
    importUnknownTexCommand: "ignore",
    itemObserverDelay: 5,
    jabrefFormat: 0,
    jieba: false,
    keyConflictPolicy: "keep",
    keyScope: "library",
    kuroshiro: false,
    mapMath: "",
    mapText: "",
    mapUnicode: "conservative",
    parseParticles: true,
    patchDates: "",
    platform: "",
    postscript: "",
    postscriptOverride: "",
    preferencesOverride: "",
    qualityReport: false,
    quickCopyEta: "",
    quickCopyMode: "latex",
    quickCopyOrgMode: "zotero",
    quickCopyPandocBrackets: false,
    quickCopySelectLink: "zotero",
    rawImports: false,
    rawLaTag: "#LaTeX",
    relativeFilePaths: false,
    retainCache: false,
    scrubDatabase: false,
    separatorList: "and",
    separatorNames: "and",
    skipFields: "",
    skipWords: "a,ab,aboard,about,above,across,after,against,al,along,amid,among,an,and,anti,around,as,at,before,behind,below,beneath,beside,besides,between,beyond,but,by,d,da,das,de,del,dell,dello,dei,degli,della,dell,delle,dem,den,der,des,despite,die,do,down,du,during,ein,eine,einem,einen,einer,eines,el,en,et,except,for,from,gli,i,il,in,inside,into,is,l,la,las,le,les,like,lo,los,near,nor,of,off,on,onto,or,over,past,per,plus,round,save,since,so,some,sur,than,the,through,to,toward,towards,un,una,unas,under,underneath,une,unlike,uno,unos,until,up,upon,versus,via,von,while,with,within,without,yet,zu,zum",
    startupProgress: "popup",
    strings: "",
    stringsOverride: "",
    testing: false,
    verbatimFields: "url,doi,file,ids,eprint,verba,verbb,verbc,groups",
    warnBulkModify: 10,
    warnTitleCased: false,
    workers: 1
  };
  var schema = {
    autoExport: {
      preferences: ["asciiBibLaTeX", "asciiBibTeX", "biblatexExtendedNameFormat", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
      displayOptions: ["useJournalAbbreviation", "exportNotes"]
    },
    translator: {
      "Better CSL JSON": {
        autoexport: true,
        cached: true,
        preferences: [],
        displayOptions: [],
        types: {}
      },
      "Better BibLaTeX": {
        autoexport: true,
        cached: true,
        preferences: ["asciiBibLaTeX", "biblatexExtendedNameFormat", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"],
        types: {
          asciiBibLaTeX: { type: "boolean" },
          biblatexExtendedNameFormat: { type: "boolean" },
          DOIandURL: { enum: ["both", "doi", "url"] },
          exportNotes: { type: "boolean" },
          useJournalAbbreviation: { type: "boolean" }
        }
      },
      "Better CSL YAML": {
        autoexport: true,
        cached: true,
        preferences: [],
        displayOptions: [],
        types: {}
      },
      "Better BibTeX": {
        autoexport: true,
        cached: true,
        preferences: ["asciiBibTeX", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"],
        types: {
          asciiBibTeX: { type: "boolean" },
          bibtexParticleNoOp: { type: "boolean" },
          bibtexURL: { enum: ["off", "note", "note-url-ish", "url", "url-ish"] },
          DOIandURL: { enum: ["both", "doi", "url"] },
          exportNotes: { type: "boolean" },
          useJournalAbbreviation: { type: "boolean" }
        }
      },
      "BetterBibTeX JSON": {
        autoexport: true,
        cached: false,
        preferences: [],
        displayOptions: ["exportNotes"],
        types: {
          exportNotes: { type: "boolean" }
        }
      }
    }
  };

  // content/client.ts
  init_globals();
  if (typeof Components !== "undefined")
    Components.utils.import("resource://zotero/config.js");
  var client = ZOTERO_CONFIG.GUID.replace(/@.*/, "").replace("-", "");

  // content/logger.ts
  init_globals();

  // content/stringify.ts
  init_globals();
  var import_fast_safe_stringify = __toESM(require_fast_safe_stringify());
  function asciify(str) {
    return str.replace(/[\u007F-\uFFFF]/g, (chr) => `\\u${`0000${chr.charCodeAt(0).toString(16)}`.substr(-4)}`);
  }
  function stringify(obj, replacer, indent, ucode) {
    const stringified = import_fast_safe_stringify.default.stable(obj, replacer, indent);
    return ucode ? asciify(stringified) : stringified;
  }

  // content/environment.ts
  init_globals();
  var environment = {
    node: typeof process === "object" && typeof __require === "function" && typeof importScripts !== "function",
    worker: typeof importScripts === "function",
    zotero: typeof Components !== "undefined",
    name: ""
  };
  environment.name = Object.entries(environment).map(([name, on]) => on ? name : "").filter((name) => name).join("/");

  // content/logger.ts
  var inTranslator = environment.worker || typeof ZOTERO_TRANSLATOR_INFO !== "undefined";
  var Logger = class {
    constructor() {
      this.verbose = false;
    }
    format({ error = false, worker = "", translator: translator2 = "" }, msg) {
      let diff = null;
      const now = Date.now();
      if (this.timestamp)
        diff = now - this.timestamp;
      this.timestamp = now;
      if (typeof msg !== "string") {
        let output = "";
        for (const m of msg) {
          const type2 = typeof m;
          if (type2 === "string" || m instanceof String || type2 === "number" || type2 === "undefined" || type2 === "boolean" || m === null) {
            output += m;
          } else if (m instanceof Error || m instanceof ErrorEvent || m.toString() === "[object ErrorEvent]") {
            output += this.formatError(m);
          } else if (m && type2 === "object" && m.message) {
            output += this.formatError({ message: m.errorCode ? `${m.message} (${m.errorCode})` : m.message, filename: m.fileName, lineno: m.lineNumber, colno: m.column, stack: m.stack });
          } else if (this.verbose) {
            output += stringify(m, null, 2);
          } else {
            output += stringify(m);
          }
          output += " ";
        }
        msg = output;
      }
      if (environment.worker) {
        worker = worker || workerContext.worker;
        translator2 = translator2 || workerContext.translator;
      } else {
        if (worker)
          worker = `${worker} (but environment is ${environment.name})`;
        if (!translator2 && inTranslator)
          translator2 = ZOTERO_TRANSLATOR_INFO.label;
      }
      const prefix = ["better-bibtex", translator2, error && ":error:", worker && `(worker ${worker})`].filter((p) => p).join(" ");
      return `{${prefix}} +${diff} ${asciify(msg)}`;
    }
    formatError(e, indent = "") {
      let msg = [e.name, e.message].filter((s) => s).join(": ");
      if (e.filename || e.fileName)
        msg += ` in ${e.filename || e.fileName}`;
      if (e.lineno || e.lineNumber) {
        msg += ` line ${e.lineno}`;
        if (e.colno)
          msg += `, col ${e.colno}`;
      }
      if (e.stack)
        msg += `
${indent}${e.stack.replace(/\n/g, `${indent}
`)}`;
      if (e.error)
        msg += `
${indent}${this.formatError(e.error, "  ")}
`;
      return `${indent}<Error: ${msg}>`;
    }
    get enabled() {
      if (!inTranslator)
        return Zotero.Debug.enabled;
      if (!environment.worker)
        return true;
      return !workerContext || workerContext.debugEnabled;
    }
    debug(...msg) {
      if (this.enabled)
        Zotero.debug(this.format({}, msg));
    }
    error(...msg) {
      Zotero.debug(this.format({ error: true }, msg));
    }
    status({ error = false, worker = "", translator: translator2 = "" }, ...msg) {
      if (error || this.enabled)
        Zotero.debug(this.format({ error, worker, translator: translator2 }, msg));
    }
  };
  var log = new Logger();

  // content/ping.ts
  init_globals();
  var Pinger = class {
    constructor({ start = 0, total, step = 5, name = "", callback }) {
      this.incr = 100 / total;
      this.name = name;
      this.pct = start * this.incr;
      this.step = step;
      this.callback = callback;
      this.next = Math.floor(this.pct / step) * step;
      if (this.name)
        Zotero.debug(`ping: ${name} start ${JSON.stringify({ ...this, start, total })}`);
      this.emit();
    }
    update() {
      this.pct += this.incr;
      if (this.name)
        Zotero.debug(`ping: ${this.name} update to ${this.pct}`);
      if (Math.round(this.pct) >= this.next)
        this.emit();
    }
    emit() {
      if (this.callback) {
        if (this.name)
          Zotero.debug(`ping: ${this.name} emit ${Math.min(this.next, 100)}`);
        this.callback(Math.min(this.next, 100));
        if (this.next > 100)
          this.callback = null;
        this.next += this.step;
      }
    }
    done() {
      if (this.name)
        Zotero.debug(`ping: ${this.name} done`);
      if (this.callback && this.pct < this.next)
        this.callback(Math.min(this.next, 100));
    }
  };

  // translators/lib/translator.ts
  var cacheDisabler = new class {
    get(target, property) {
      if (property === "collections") {
        target.$cacheable = false;
      }
      return target[property];
    }
  }();
  var Items = class {
    constructor(cacheable) {
      this.list = [];
      this.map = {};
      let item;
      while (item = Zotero.nextItem()) {
        item.$cacheable = cacheable;
        item.journalAbbreviation = item.journalAbbreviation || item.autoJournalAbbreviation;
        this.list.push(this.map[item.itemID] = this.map[item.itemKey] = new Proxy(item, cacheDisabler));
      }
      this.list.sort((a, b) => {
        const ka = [a.citationKey || a.itemType, a.dateModified || a.dateAdded, a.itemID].join("	");
        const kb = [b.citationKey || b.itemType, b.dateModified || b.dateAdded, b.itemID].join("	");
        return ka.localeCompare(kb, void 0, { sensitivity: "base" });
      });
      this.ping = new Pinger({
        total: this.list.length,
        callback: (pct) => environment.worker ? Zotero.BetterBibTeX.setProgress(pct) : null
      });
    }
    *items() {
      for (const item of this.list) {
        yield this.current = item;
        this.ping.update();
      }
      this.ping.done();
    }
    *regularitems() {
      for (const item of this.list) {
        switch (item.itemType) {
          case "annotation":
          case "note":
          case "attachment":
            break;
          default:
            yield this.current = item;
        }
        this.ping.update();
      }
      this.ping.done();
    }
  };
  function escapeRegExp(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  var ITranslator = class {
    constructor() {
      this.export = {
        dir: void 0,
        path: void 0
      };
      this.initialized = false;
      this.header = ZOTERO_TRANSLATOR_INFO;
      this[this.header.label.replace(/[^a-z]/ig, "")] = true;
      this.BetterTeX = this.BetterBibTeX || this.BetterBibLaTeX;
      this.BetterCSL = this.BetterCSLJSON || this.BetterCSLYAML;
      this.options = this.header.displayOptions || {};
      const collator = new Intl.Collator("en");
      this.stringCompare = collator.compare.bind(collator);
    }
    get exportDir() {
      this._items.current.$cacheable = false;
      return this.export.dir;
    }
    get exportPath() {
      this._items.current.$cacheable = false;
      return this.export.path;
    }
    typefield(field) {
      field = field.trim();
      if (field.startsWith("bibtex."))
        return this.BetterBibTeX ? field.replace(/^bibtex\./, "") : "";
      if (field.startsWith("biblatex."))
        return this.BetterBibLaTeX ? field.replace(/^biblatex\./, "") : "";
      return field;
    }
    init(mode) {
      var _a, _b, _c, _d, _e;
      this.platform = Zotero.getHiddenPref("better-bibtex.platform");
      this.isJurisM = client === "jurism";
      this.isZotero = !this.isJurisM;
      this.paths = {
        caseSensitive: this.platform !== "mac" && this.platform !== "win",
        sep: this.platform === "win" ? "\\" : "/"
      };
      for (const key in this.options) {
        if (typeof this.options[key] === "boolean") {
          this.options[key] = !!Zotero.getOption(key);
        } else {
          this.options[key] = Zotero.getOption(key);
        }
      }
      if (mode === "export") {
        this.cache = {
          hits: 0,
          misses: 0
        };
        this.export = {
          dir: Zotero.getOption("exportDir"),
          path: Zotero.getOption("exportPath")
        };
        if ((_a = this.export.dir) == null ? void 0 : _a.endsWith(this.paths.sep))
          this.export.dir = this.export.dir.slice(0, -1);
      }
      this.preferences = Object.entries(defaults).reduce((acc, [pref, dflt]) => {
        var _a2, _b2;
        acc[pref] = (_b2 = (_a2 = this.getPreferenceOverride(pref)) != null ? _a2 : Zotero.getHiddenPref(`better-bibtex.${pref}`)) != null ? _b2 : dflt;
        return acc;
      }, {});
      log.debug("prefs: @load", this.preferences);
      this.skipFields = this.preferences.skipFields.toLowerCase().split(",").map((field) => this.typefield(field)).filter((s) => s);
      this.skipField = this.skipFields.reduce((acc, field) => {
        acc[field] = true;
        return acc;
      }, {});
      this.verbatimFields = this.preferences.verbatimFields.toLowerCase().split(",").map((field) => this.typefield(field)).filter((s) => s);
      if (!this.verbatimFields.length)
        this.verbatimFields = null;
      this.csquotes = this.preferences.csquotes ? { open: this.preferences.csquotes[0], close: this.preferences.csquotes[1] } : null;
      this.preferences.testing = Zotero.getHiddenPref("better-bibtex.testing");
      if (mode === "export") {
        this.unicode = !Translator.preferences[`ascii${this.header.label.replace(/Better /, "")}`];
        if (this.preferences.baseAttachmentPath && (this.export.dir === this.preferences.baseAttachmentPath || ((_b = this.export.dir) == null ? void 0 : _b.startsWith(this.preferences.baseAttachmentPath + this.paths.sep)))) {
          this.preferences.relativeFilePaths = true;
        }
        this.cacheable = Zotero.getOption("caching") && !(this.options.exportFileData || this.preferences.relativeFilePaths || this.preferences.baseAttachmentPath && ((_c = this.export.dir) == null ? void 0 : _c.startsWith(this.preferences.baseAttachmentPath)));
        if (this.BetterTeX) {
          Translator.preferences.separatorList = Translator.preferences.separatorList.trim();
          Translator.preferences.separatorNames = Translator.preferences.separatorNames.trim();
          this.and = {
            list: {
              re: new RegExp(escapeRegExp(Translator.preferences.separatorList), "g"),
              repl: ` {${Translator.preferences.separatorList}} `
            },
            names: {
              re: new RegExp(` ${escapeRegExp(Translator.preferences.separatorNames)} `, "g"),
              repl: ` {${Translator.preferences.separatorNames}} `
            }
          };
          Translator.preferences.separatorList = ` ${Translator.preferences.separatorList} `;
          Translator.preferences.separatorNames = ` ${Translator.preferences.separatorNames} `;
        }
      }
      this.collections = {};
      if (mode === "export" && ((_d = this.header.configOptions) == null ? void 0 : _d.getCollections) && Zotero.nextCollection) {
        let collection;
        while (collection = Zotero.nextCollection()) {
          log.debug("getCollection:", collection);
          this.registerCollection(collection, "");
        }
      }
      if (!this.initialized && mode === "export" && this.preferences.testing && typeof __estrace === "undefined" && ((_e = schema.translator[this.header.label]) == null ? void 0 : _e.cached)) {
        const ignored = ["testing"];
        this.preferences = new Proxy(this.preferences, {
          set: (object, property, _value) => {
            throw new TypeError(`Unexpected set of preference ${String(property)}`);
          },
          get: (object, property) => {
            var _a2;
            if (property === "toJSON")
              return object[property];
            if (!names.includes(property))
              throw new TypeError(`Unsupported preference ${property}`);
            if (!ignored.includes(property) && !((_a2 = affects[property]) == null ? void 0 : _a2.includes(this.header.label)))
              throw new TypeError(`Preference ${property} claims not to affect ${this.header.label}`);
            return object[property];
          }
        });
      }
      this.initialized = true;
    }
    getPreferenceOverride(pref) {
      try {
        return Zotero.getOption(`preference_${pref}`);
      } catch (err) {
        return void 0;
      }
    }
    registerCollection(collection, parent) {
      const key = (collection.primary ? collection.primary : collection).key;
      const children = collection.children || collection.descendents || [];
      const collections = children.filter((coll) => coll.type === "collection");
      this.collections[key] = {
        key,
        parent,
        name: collection.name,
        collections: collections.map((coll) => coll.key),
        items: children.filter((coll) => coll.type === "item").map((item) => item.id)
      };
      for (collection of collections) {
        this.registerCollection(collection, key);
      }
    }
    get collectionTree() {
      return Object.values(this.collections).filter((coll) => !coll.parent).map((coll) => this.nestedCollection(coll));
    }
    nestedCollection(collection) {
      this._items = this._items || new Items(this.cacheable);
      const nested = {
        key: collection.key,
        name: collection.name,
        items: collection.items.map((itemID) => this._items.map[itemID]).filter((item) => item),
        collections: collection.collections.map((key) => this.nestedCollection(this.collections[key])).filter((coll) => coll)
      };
      for (const coll of nested.collections) {
        coll.parent = nested;
      }
      return nested;
    }
    get items() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.items();
    }
    get regularitems() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.regularitems();
    }
  };
  var Translator = new ITranslator();

  // content/object.ts
  init_globals();
  function fromEntries(kv) {
    return kv.reduce((acc, [k, v]) => {
      acc[k] = v;
      return acc;
    }, {});
  }

  // content/escape.ts
  init_globals();
  function html(str) {
    const entity = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    return str.replace(/[<>&"']/g, (c) => entity[c] || `&#${c.charCodeAt(0)};`);
  }

  // content/extra.ts
  init_globals();

  // gen/items/extra-fields.json
  var extra_fields_exports = {};
  __export(extra_fields_exports, {
    DOI: () => DOI,
    ISBN: () => ISBN,
    ISSN: () => ISSN,
    PMCID: () => PMCID,
    PMID: () => PMID,
    URL: () => URL2,
    "access date": () => access_date,
    accessDate: () => accessDate,
    accessed: () => accessed,
    "admin flag": () => admin_flag,
    "admin-flag": () => admin_flag2,
    adminFlag: () => adminFlag,
    "adoption date": () => adoption_date,
    adoptionDate: () => adoptionDate,
    album: () => album,
    "application number": () => application_number,
    applicationNumber: () => applicationNumber,
    archive: () => archive,
    "archive collection": () => archive_collection,
    "archive id": () => archive_id,
    "archive location": () => archive_location,
    "archive place": () => archive_place,
    "archive-place": () => archive_place2,
    archiveCollection: () => archiveCollection,
    archiveID: () => archiveID,
    archiveLocation: () => archiveLocation,
    archive_collection: () => archive_collection2,
    archive_id: () => archive_id2,
    archive_location: () => archive_location2,
    artist: () => artist,
    "artwork medium": () => artwork_medium,
    "artwork size": () => artwork_size,
    artworkMedium: () => artworkMedium,
    artworkSize: () => artworkSize,
    "assembly number": () => assembly_number,
    assemblyNumber: () => assemblyNumber,
    assignee: () => assignee,
    "attorney agent": () => attorney_agent,
    attorneyAgent: () => attorneyAgent,
    "audio file type": () => audio_file_type,
    "audio recording format": () => audio_recording_format,
    audioFileType: () => audioFileType,
    audioRecordingFormat: () => audioRecordingFormat,
    author: () => author,
    authority: () => authority,
    "bill number": () => bill_number,
    billNumber: () => billNumber,
    "blog title": () => blog_title,
    blogTitle: () => blogTitle,
    "book abbreviation": () => book_abbreviation,
    "book author": () => book_author,
    "book title": () => book_title,
    bookAbbreviation: () => bookAbbreviation,
    bookAuthor: () => bookAuthor,
    bookTitle: () => bookTitle,
    "call number": () => call_number,
    "call-number": () => call_number2,
    callNumber: () => callNumber,
    cartographer: () => cartographer,
    "case name": () => case_name,
    caseName: () => caseName,
    "cast member": () => cast_member,
    castMember: () => castMember,
    "chapter number": () => chapter_number,
    "chapter-number": () => chapter_number2,
    "citation key": () => citation_key,
    citationKey: () => citationKey,
    code: () => code,
    "code number": () => code_number,
    "code pages": () => code_pages,
    "code volume": () => code_volume,
    codeNumber: () => codeNumber,
    codePages: () => codePages,
    codeVolume: () => codeVolume,
    "collection editor": () => collection_editor,
    "collection number": () => collection_number,
    "collection title": () => collection_title,
    "collection-editor": () => collection_editor2,
    "collection-number": () => collection_number2,
    "collection-title": () => collection_title2,
    commenter: () => commenter,
    committee: () => committee,
    company: () => company,
    composer: () => composer,
    "conference date": () => conference_date,
    "conference name": () => conference_name,
    conferenceDate: () => conferenceDate,
    conferenceName: () => conferenceName,
    "container author": () => container_author,
    "container title": () => container_title,
    "container title short": () => container_title_short,
    "container-author": () => container_author2,
    "container-title": () => container_title2,
    "container-title-short": () => container_title_short2,
    contributor: () => contributor,
    cosponsor: () => cosponsor,
    counsel: () => counsel,
    country: () => country,
    court: () => court,
    "csl type": () => csl_type,
    "csl-type": () => csl_type2,
    date: () => date,
    "date amended": () => date_amended,
    "date decided": () => date_decided,
    "date enacted": () => date_enacted,
    dateAmended: () => dateAmended,
    dateDecided: () => dateDecided,
    dateEnacted: () => dateEnacted,
    default: () => extra_fields_default,
    "dictionary title": () => dictionary_title,
    dictionaryTitle: () => dictionaryTitle,
    dimensions: () => dimensions,
    director: () => director,
    distributor: () => distributor,
    division: () => division,
    "docket number": () => docket_number,
    docketNumber: () => docketNumber,
    "document name": () => document_name,
    "document number": () => document_number,
    "document-name": () => document_name2,
    "document-number": () => document_number2,
    documentName: () => documentName,
    documentNumber: () => documentNumber,
    doi: () => doi,
    edition: () => edition,
    editor: () => editor,
    "editorial director": () => editorial_director,
    "editorial-director": () => editorial_director2,
    "encyclopedia title": () => encyclopedia_title,
    encyclopediaTitle: () => encyclopediaTitle,
    "episode number": () => episode_number,
    episodeNumber: () => episodeNumber,
    event: () => event,
    "event date": () => event_date,
    "event place": () => event_place,
    "event-date": () => event_date2,
    "event-place": () => event_place2,
    "filing date": () => filing_date,
    filingDate: () => filingDate,
    "first page": () => first_page,
    firstPage: () => firstPage,
    "forum title": () => forum_title,
    forumTitle: () => forumTitle,
    "gazette flag": () => gazette_flag,
    "gazette-flag": () => gazette_flag2,
    gazetteFlag: () => gazetteFlag,
    genre: () => genre,
    guest: () => guest,
    history: () => history,
    illustrator: () => illustrator,
    institution: () => institution,
    "interview medium": () => interview_medium,
    interviewMedium: () => interviewMedium,
    interviewee: () => interviewee,
    interviewer: () => interviewer,
    inventor: () => inventor,
    isbn: () => isbn,
    issn: () => issn,
    issue: () => issue,
    "issue date": () => issue_date,
    issueDate: () => issueDate,
    issued: () => issued,
    "issuing authority": () => issuing_authority,
    issuingAuthority: () => issuingAuthority,
    "journal abbreviation": () => journal_abbreviation,
    journalAbbreviation: () => journalAbbreviation,
    jurisdiction: () => jurisdiction,
    label: () => label,
    language: () => language,
    "legal status": () => legal_status,
    legalStatus: () => legalStatus,
    "legislative body": () => legislative_body,
    legislativeBody: () => legislativeBody,
    "letter type": () => letter_type,
    letterType: () => letterType,
    "library catalog": () => library_catalog,
    libraryCatalog: () => libraryCatalog,
    "manuscript type": () => manuscript_type,
    manuscriptType: () => manuscriptType,
    "map type": () => map_type,
    mapType: () => mapType,
    medium: () => medium,
    "meeting name": () => meeting_name,
    "meeting number": () => meeting_number,
    meetingName: () => meetingName,
    meetingNumber: () => meetingNumber,
    "name of act": () => name_of_act,
    nameOfAct: () => nameOfAct,
    network: () => network,
    "news case date": () => news_case_date,
    newsCaseDate: () => newsCaseDate,
    "num pages": () => num_pages,
    numPages: () => numPages,
    number: () => number,
    "number of pages": () => number_of_pages,
    "number of volumes": () => number_of_volumes,
    "number-of-pages": () => number_of_pages2,
    "number-of-volumes": () => number_of_volumes2,
    numberOfVolumes: () => numberOfVolumes,
    "opening date": () => opening_date,
    "opening-date": () => opening_date2,
    openingDate: () => openingDate,
    opus: () => opus,
    "original author": () => original_author,
    "original date": () => original_date,
    "original publisher": () => original_publisher,
    "original publisher place": () => original_publisher_place,
    "original title": () => original_title,
    "original-author": () => original_author2,
    "original-date": () => original_date2,
    "original-publisher": () => original_publisher2,
    "original-publisher-place": () => original_publisher_place2,
    "original-title": () => original_title2,
    originalDate: () => originalDate,
    page: () => page,
    pages: () => pages,
    "parent treaty": () => parent_treaty,
    parentTreaty: () => parentTreaty,
    "patent number": () => patent_number,
    patentNumber: () => patentNumber,
    performer: () => performer,
    place: () => place,
    pmcid: () => pmcid,
    pmid: () => pmid,
    podcaster: () => podcaster,
    "post type": () => post_type,
    postType: () => postType,
    "presentation type": () => presentation_type,
    presentationType: () => presentationType,
    presenter: () => presenter,
    "priority date": () => priority_date,
    "priority numbers": () => priority_numbers,
    priorityDate: () => priorityDate,
    priorityNumbers: () => priorityNumbers,
    "proceedings title": () => proceedings_title,
    proceedingsTitle: () => proceedingsTitle,
    producer: () => producer,
    "program title": () => program_title,
    programTitle: () => programTitle,
    programmer: () => programmer,
    "programming language": () => programming_language,
    programmingLanguage: () => programmingLanguage,
    "public law number": () => public_law_number,
    publicLawNumber: () => publicLawNumber,
    "publication date": () => publication_date,
    "publication number": () => publication_number,
    "publication title": () => publication_title,
    "publication-date": () => publication_date2,
    "publication-number": () => publication_number2,
    publicationDate: () => publicationDate,
    publicationNumber: () => publicationNumber,
    publicationTitle: () => publicationTitle,
    publisher: () => publisher,
    "publisher place": () => publisher_place,
    "publisher-place": () => publisher_place2,
    recipient: () => recipient,
    references: () => references,
    "regnal year": () => regnal_year,
    regnalYear: () => regnalYear,
    "regulation type": () => regulation_type,
    regulationType: () => regulationType,
    "regulatory body": () => regulatory_body,
    regulatoryBody: () => regulatoryBody,
    reign: () => reign,
    release: () => release,
    "report number": () => report_number,
    "report type": () => report_type,
    reportNumber: () => reportNumber,
    reportType: () => reportType,
    reporter: () => reporter,
    "reporter volume": () => reporter_volume,
    reporterVolume: () => reporterVolume,
    repository: () => repository,
    "resolution label": () => resolution_label,
    resolutionLabel: () => resolutionLabel,
    "reviewed author": () => reviewed_author,
    "reviewed title": () => reviewed_title,
    "reviewed-author": () => reviewed_author2,
    "reviewed-title": () => reviewed_title2,
    reviewedAuthor: () => reviewedAuthor,
    rights: () => rights,
    "running time": () => running_time,
    runningTime: () => runningTime,
    scale: () => scale,
    scriptwriter: () => scriptwriter,
    section: () => section,
    series: () => series,
    "series editor": () => series_editor,
    "series number": () => series_number,
    "series text": () => series_text,
    "series title": () => series_title,
    seriesEditor: () => seriesEditor,
    seriesNumber: () => seriesNumber,
    seriesText: () => seriesText,
    seriesTitle: () => seriesTitle,
    session: () => session,
    "session type": () => session_type,
    sessionType: () => sessionType,
    "short title": () => short_title,
    shortTitle: () => shortTitle,
    "signing date": () => signing_date,
    signingDate: () => signingDate,
    source: () => source,
    sponsor: () => sponsor,
    status: () => status,
    studio: () => studio,
    subject: () => subject,
    submitted: () => submitted,
    supplement: () => supplement,
    "supplement name": () => supplement_name,
    supplementName: () => supplementName,
    system: () => system,
    "testimony by": () => testimony_by,
    testimonyBy: () => testimonyBy,
    "thesis type": () => thesis_type,
    thesisType: () => thesisType,
    title: () => title,
    "title short": () => title_short,
    "title-short": () => title_short2,
    translator: () => translator,
    "treaty number": () => treaty_number,
    treatyNumber: () => treatyNumber,
    type: () => type,
    university: () => university,
    url: () => url,
    version: () => version,
    "version number": () => version_number,
    versionNumber: () => versionNumber,
    "video recording format": () => video_recording_format,
    videoRecordingFormat: () => videoRecordingFormat,
    volume: () => volume,
    "volume title": () => volume_title,
    "volume-title": () => volume_title2,
    volumeTitle: () => volumeTitle,
    "website title": () => website_title,
    "website type": () => website_type,
    websiteTitle: () => websiteTitle,
    websiteType: () => websiteType,
    "words by": () => words_by,
    wordsBy: () => wordsBy,
    "year as volume": () => year_as_volume,
    yearAsVolume: () => yearAsVolume
  });
  var DOI = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var ISBN = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var ISSN = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var PMCID = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var PMID = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var URL2 = {
    csl: [
      "URL"
    ],
    type: "text"
  };
  var access_date = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessDate = {
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessed = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var admin_flag = {
    csl: [
      "admin-flag"
    ],
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var admin_flag2 = {
    csl: [
      "admin-flag"
    ],
    type: "text"
  };
  var adminFlag = {
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var adoption_date = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var adoptionDate = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var album = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var application_number = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var applicationNumber = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var archive = {
    csl: [
      "archive"
    ],
    type: "text",
    zotero: [
      "archive"
    ]
  };
  var archive_collection = {
    csl: [
      "archive_collection"
    ],
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archive_id = {
    type: "text",
    zotero: [
      "archiveID",
      "archive_id"
    ]
  };
  var archive_location = {
    csl: [
      "archive_location"
    ],
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_place = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archive_place2 = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archiveCollection = {
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archiveID = {
    type: "text",
    zotero: [
      "archiveID"
    ]
  };
  var archiveLocation = {
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_collection2 = {
    csl: [
      "archive_collection"
    ],
    type: "text"
  };
  var archive_id2 = {
    type: "text",
    zotero: [
      "archive_id"
    ]
  };
  var archive_location2 = {
    csl: [
      "archive_location"
    ],
    type: "text"
  };
  var artist = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "artist"
    ]
  };
  var artwork_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artwork_size = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var artworkMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artworkSize = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var assembly_number = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assemblyNumber = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assignee = {
    type: "text",
    zotero: [
      "assignee"
    ]
  };
  var attorney_agent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var attorneyAgent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var audio_file_type = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audio_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioFileType = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var author = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "author"
    ]
  };
  var authority = {
    csl: [
      "authority"
    ],
    type: "text",
    zotero: [
      "court",
      "legislativeBody",
      "issuingAuthority",
      "institution",
      "regulatoryBody"
    ]
  };
  var bill_number = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var billNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var blog_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var blogTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var book_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var book_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var book_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var bookAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var bookAuthor = {
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var bookTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var call_number = {
    csl: [
      "call-number"
    ],
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var call_number2 = {
    csl: [
      "call-number"
    ],
    type: "text"
  };
  var callNumber = {
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var cartographer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "cartographer"
    ]
  };
  var case_name = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var caseName = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var cast_member = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var castMember = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var chapter_number = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var chapter_number2 = {
    csl: [
      "chapter-number"
    ],
    type: "text"
  };
  var citation_key = {
    type: "text",
    zotero: [
      "citationKey"
    ]
  };
  var citationKey = {
    type: "text",
    zotero: [
      "citationKey"
    ]
  };
  var code = {
    type: "text",
    zotero: [
      "code"
    ]
  };
  var code_number = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var code_pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var code_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var codeNumber = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var codePages = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var codeVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var collection_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var collection_number = {
    csl: [
      "collection-number"
    ],
    type: "text",
    zotero: [
      "seriesNumber",
      "assemblyNumber",
      "regnalYear",
      "yearAsVolume"
    ]
  };
  var collection_title = {
    csl: [
      "collection-title"
    ],
    type: "text",
    zotero: [
      "seriesTitle",
      "series",
      "parentTreaty"
    ]
  };
  var collection_editor2 = {
    csl: [
      "collection-editor"
    ],
    type: "name"
  };
  var collection_number2 = {
    csl: [
      "collection-number"
    ],
    type: "text"
  };
  var collection_title2 = {
    csl: [
      "collection-title"
    ],
    type: "text"
  };
  var commenter = {
    csl: [
      "commenter"
    ],
    type: "name",
    zotero: [
      "commenter"
    ]
  };
  var committee = {
    csl: [
      "committee"
    ],
    type: "text",
    zotero: [
      "committee"
    ]
  };
  var company = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var composer = {
    csl: [
      "composer"
    ],
    type: "name",
    zotero: [
      "composer"
    ]
  };
  var conference_date = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conference_name = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var conferenceDate = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conferenceName = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var container_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var container_title = {
    csl: [
      "container-title"
    ],
    type: "text",
    zotero: [
      "publicationTitle",
      "reporter",
      "code"
    ]
  };
  var container_title_short = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var container_author2 = {
    csl: [
      "container-author"
    ],
    type: "name"
  };
  var container_title2 = {
    csl: [
      "container-title"
    ],
    type: "text"
  };
  var container_title_short2 = {
    csl: [
      "container-title-short"
    ],
    type: "text"
  };
  var contributor = {
    csl: [
      "contributor"
    ],
    type: "name",
    zotero: [
      "contributor"
    ]
  };
  var cosponsor = {
    csl: [
      "cosponsor"
    ],
    type: "name",
    zotero: [
      "cosponsor"
    ]
  };
  var counsel = {
    csl: [
      "counsel"
    ],
    type: "name",
    zotero: [
      "counsel"
    ]
  };
  var country = {
    type: "text",
    zotero: [
      "country"
    ]
  };
  var court = {
    type: "text",
    zotero: [
      "court"
    ]
  };
  var csl_type = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var csl_type2 = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_amended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var date_decided = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_enacted = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateAmended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var dateDecided = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateEnacted = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dictionary_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dictionaryTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dimensions = {
    csl: [
      "dimensions"
    ],
    type: "text",
    zotero: [
      "artworkSize",
      "runningTime"
    ]
  };
  var director = {
    csl: [
      "director"
    ],
    type: "name",
    zotero: [
      "director"
    ]
  };
  var distributor = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var division = {
    csl: [
      "division"
    ],
    type: "text",
    zotero: [
      "division"
    ]
  };
  var docket_number = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var docketNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var document_name = {
    csl: [
      "document-name"
    ],
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var document_number = {
    csl: [
      "document-number"
    ],
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var document_name2 = {
    csl: [
      "document-name"
    ],
    type: "text"
  };
  var document_number2 = {
    csl: [
      "document-number"
    ],
    type: "text"
  };
  var documentName = {
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var documentNumber = {
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var doi = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var edition = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var editor = {
    csl: [
      "editor"
    ],
    type: "name",
    zotero: [
      "editor"
    ]
  };
  var editorial_director = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var editorial_director2 = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var encyclopedia_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var encyclopediaTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var episode_number = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var episodeNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var event = {
    csl: [
      "event"
    ],
    type: "text",
    zotero: [
      "meetingName",
      "conferenceName",
      "resolutionLabel"
    ]
  };
  var event_date = {
    csl: [
      "event-date"
    ],
    type: "date",
    zotero: [
      "dateAmended",
      "signingDate",
      "conferenceDate"
    ]
  };
  var event_place = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var event_date2 = {
    csl: [
      "event-date"
    ],
    type: "date"
  };
  var event_place2 = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var filing_date = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var filingDate = {
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var first_page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var firstPage = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var forum_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var forumTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var gazette_flag = {
    csl: [
      "gazette-flag"
    ],
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var gazette_flag2 = {
    csl: [
      "gazette-flag"
    ],
    type: "text"
  };
  var gazetteFlag = {
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var genre = {
    csl: [
      "genre"
    ],
    type: "text",
    zotero: [
      "genre",
      "type"
    ]
  };
  var guest = {
    csl: [
      "guest"
    ],
    type: "name",
    zotero: [
      "guest"
    ]
  };
  var history = {
    type: "text",
    zotero: [
      "history"
    ]
  };
  var illustrator = {
    csl: [
      "illustrator"
    ],
    type: "name"
  };
  var institution = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "institution",
      "publisher"
    ]
  };
  var interview_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewee = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "interviewee"
    ]
  };
  var interviewer = {
    csl: [
      "interviewer"
    ],
    type: "name",
    zotero: [
      "interviewer"
    ]
  };
  var inventor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "inventor"
    ]
  };
  var isbn = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var issn = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var issue = {
    csl: [
      "issue"
    ],
    type: "text",
    zotero: [
      "issue"
    ]
  };
  var issue_date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issueDate = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issued = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issuing_authority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var issuingAuthority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var journal_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var journalAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var jurisdiction = {
    csl: [
      "jurisdiction"
    ],
    type: "text",
    zotero: [
      "jurisdiction"
    ]
  };
  var label = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var language = {
    csl: [
      "language"
    ],
    type: "text",
    zotero: [
      "language"
    ]
  };
  var legal_status = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legalStatus = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legislative_body = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var legislativeBody = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var letter_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var letterType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var library_catalog = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var libraryCatalog = {
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var manuscript_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var manuscriptType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var map_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var mapType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var medium = {
    csl: [
      "medium"
    ],
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var meeting_name = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meeting_number = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var meetingName = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meetingNumber = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var name_of_act = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var nameOfAct = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var network = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var news_case_date = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var newsCaseDate = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var num_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var numPages = {
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var number_of_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number_of_volumes = {
    csl: [
      "number-of-volumes"
    ],
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var number_of_pages2 = {
    csl: [
      "number-of-pages"
    ],
    type: "text"
  };
  var number_of_volumes2 = {
    csl: [
      "number-of-volumes"
    ],
    type: "text"
  };
  var numberOfVolumes = {
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var opening_date = {
    csl: [
      "opening-date"
    ],
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opening_date2 = {
    csl: [
      "opening-date"
    ],
    type: "date"
  };
  var openingDate = {
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opus = {
    type: "text",
    zotero: [
      "opus"
    ]
  };
  var original_author = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date = {
    csl: [
      "original-date"
    ],
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var original_publisher = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var original_author2 = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date2 = {
    csl: [
      "original-date"
    ],
    type: "date"
  };
  var original_publisher2 = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place2 = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title2 = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var originalDate = {
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var parent_treaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var parentTreaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var patent_number = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var patentNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var performer = {
    csl: [
      "performer"
    ],
    type: "name",
    zotero: [
      "performer"
    ]
  };
  var place = {
    csl: [
      "event-place",
      "publisher-place"
    ],
    type: "text",
    zotero: [
      "place"
    ]
  };
  var pmcid = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var pmid = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var podcaster = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "podcaster"
    ]
  };
  var post_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var postType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentation_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentationType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presenter = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "presenter"
    ]
  };
  var priority_date = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priority_numbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var priorityDate = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priorityNumbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var proceedings_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var proceedingsTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var producer = {
    csl: [
      "producer"
    ],
    type: "name",
    zotero: [
      "producer"
    ]
  };
  var program_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programmer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "programmer"
    ]
  };
  var programming_language = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var programmingLanguage = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var public_law_number = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publicLawNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publication_date = {
    csl: [
      "publication-date"
    ],
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publication_number = {
    csl: [
      "publication-number"
    ],
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publication_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publication_date2 = {
    csl: [
      "publication-date"
    ],
    type: "date"
  };
  var publication_number2 = {
    csl: [
      "publication-number"
    ],
    type: "text"
  };
  var publicationDate = {
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publicationNumber = {
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publicationTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publisher = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var publisher_place = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var publisher_place2 = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var recipient = {
    csl: [
      "recipient"
    ],
    type: "name",
    zotero: [
      "recipient"
    ]
  };
  var references = {
    csl: [
      "references"
    ],
    type: "text",
    zotero: [
      "references"
    ]
  };
  var regnal_year = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regnalYear = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regulation_type = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulationType = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulatory_body = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var regulatoryBody = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var reign = {
    type: "text",
    zotero: [
      "reign"
    ]
  };
  var release = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var report_number = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var report_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reportNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var reportType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reporter = {
    type: "text",
    zotero: [
      "reporter",
      "publicationTitle"
    ]
  };
  var reporter_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var reporterVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var repository = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var resolution_label = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var resolutionLabel = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var reviewed_author = {
    csl: [
      "reviewed-author"
    ],
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var reviewed_title = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewed_author2 = {
    csl: [
      "reviewed-author"
    ],
    type: "name"
  };
  var reviewed_title2 = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewedAuthor = {
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var rights = {
    csl: [
      "rights"
    ],
    type: "text",
    zotero: [
      "rights"
    ]
  };
  var running_time = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var runningTime = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var scale = {
    csl: [
      "scale"
    ],
    type: "text",
    zotero: [
      "scale"
    ]
  };
  var scriptwriter = {
    csl: [
      "scriptwriter"
    ],
    type: "name",
    zotero: [
      "scriptwriter"
    ]
  };
  var section = {
    csl: [
      "section"
    ],
    type: "text",
    zotero: [
      "section"
    ]
  };
  var series = {
    type: "text",
    zotero: [
      "series"
    ]
  };
  var series_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var series_number = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var series_text = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var series_title = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var seriesEditor = {
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var seriesNumber = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var seriesText = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var seriesTitle = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var session = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var session_type = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var sessionType = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var short_title = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var shortTitle = {
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var signing_date = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var signingDate = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var source = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var sponsor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "sponsor"
    ]
  };
  var status = {
    csl: [
      "status"
    ],
    type: "text",
    zotero: [
      "status"
    ]
  };
  var studio = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var subject = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var submitted = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var supplement = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplement_name = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplementName = {
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var system = {
    type: "text",
    zotero: [
      "system"
    ]
  };
  var testimony_by = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var testimonyBy = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var thesis_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var thesisType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var title = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var title_short = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var title_short2 = {
    csl: [
      "title-short"
    ],
    type: "text"
  };
  var translator = {
    csl: [
      "translator"
    ],
    type: "name",
    zotero: [
      "translator"
    ]
  };
  var treaty_number = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var treatyNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var university = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var url = {
    csl: [
      "URL"
    ],
    type: "text",
    zotero: [
      "url"
    ]
  };
  var version = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var version_number = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var versionNumber = {
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var video_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var videoRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var volume = {
    csl: [
      "volume"
    ],
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var volume_title = {
    csl: [
      "volume-title"
    ],
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var volume_title2 = {
    csl: [
      "volume-title"
    ],
    type: "text"
  };
  var volumeTitle = {
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var website_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var website_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var websiteTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var websiteType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var words_by = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var wordsBy = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var year_as_volume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var yearAsVolume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var extra_fields_default = {
    DOI,
    ISBN,
    ISSN,
    PMCID,
    PMID,
    URL: URL2,
    "access date": access_date,
    accessDate,
    accessed,
    "admin flag": admin_flag,
    "admin-flag": admin_flag2,
    adminFlag,
    "adoption date": adoption_date,
    adoptionDate,
    album,
    "application number": application_number,
    applicationNumber,
    archive,
    "archive collection": archive_collection,
    "archive id": archive_id,
    "archive location": archive_location,
    "archive place": archive_place,
    "archive-place": archive_place2,
    archiveCollection,
    archiveID,
    archiveLocation,
    archive_collection: archive_collection2,
    archive_id: archive_id2,
    archive_location: archive_location2,
    artist,
    "artwork medium": artwork_medium,
    "artwork size": artwork_size,
    artworkMedium,
    artworkSize,
    "assembly number": assembly_number,
    assemblyNumber,
    assignee,
    "attorney agent": attorney_agent,
    attorneyAgent,
    "audio file type": audio_file_type,
    "audio recording format": audio_recording_format,
    audioFileType,
    audioRecordingFormat,
    author,
    authority,
    "bill number": bill_number,
    billNumber,
    "blog title": blog_title,
    blogTitle,
    "book abbreviation": book_abbreviation,
    "book author": book_author,
    "book title": book_title,
    bookAbbreviation,
    bookAuthor,
    bookTitle,
    "call number": call_number,
    "call-number": call_number2,
    callNumber,
    cartographer,
    "case name": case_name,
    caseName,
    "cast member": cast_member,
    castMember,
    "chapter number": chapter_number,
    "chapter-number": chapter_number2,
    "citation key": citation_key,
    citationKey,
    code,
    "code number": code_number,
    "code pages": code_pages,
    "code volume": code_volume,
    codeNumber,
    codePages,
    codeVolume,
    "collection editor": collection_editor,
    "collection number": collection_number,
    "collection title": collection_title,
    "collection-editor": collection_editor2,
    "collection-number": collection_number2,
    "collection-title": collection_title2,
    commenter,
    committee,
    company,
    composer,
    "conference date": conference_date,
    "conference name": conference_name,
    conferenceDate,
    conferenceName,
    "container author": container_author,
    "container title": container_title,
    "container title short": container_title_short,
    "container-author": container_author2,
    "container-title": container_title2,
    "container-title-short": container_title_short2,
    contributor,
    cosponsor,
    counsel,
    country,
    court,
    "csl type": csl_type,
    "csl-type": csl_type2,
    date,
    "date amended": date_amended,
    "date decided": date_decided,
    "date enacted": date_enacted,
    dateAmended,
    dateDecided,
    dateEnacted,
    "dictionary title": dictionary_title,
    dictionaryTitle,
    dimensions,
    director,
    distributor,
    division,
    "docket number": docket_number,
    docketNumber,
    "document name": document_name,
    "document number": document_number,
    "document-name": document_name2,
    "document-number": document_number2,
    documentName,
    documentNumber,
    doi,
    edition,
    editor,
    "editorial director": editorial_director,
    "editorial-director": editorial_director2,
    "encyclopedia title": encyclopedia_title,
    encyclopediaTitle,
    "episode number": episode_number,
    episodeNumber,
    event,
    "event date": event_date,
    "event place": event_place,
    "event-date": event_date2,
    "event-place": event_place2,
    "filing date": filing_date,
    filingDate,
    "first page": first_page,
    firstPage,
    "forum title": forum_title,
    forumTitle,
    "gazette flag": gazette_flag,
    "gazette-flag": gazette_flag2,
    gazetteFlag,
    genre,
    guest,
    history,
    illustrator,
    institution,
    "interview medium": interview_medium,
    interviewMedium,
    interviewee,
    interviewer,
    inventor,
    isbn,
    issn,
    issue,
    "issue date": issue_date,
    issueDate,
    issued,
    "issuing authority": issuing_authority,
    issuingAuthority,
    "journal abbreviation": journal_abbreviation,
    journalAbbreviation,
    jurisdiction,
    label,
    language,
    "legal status": legal_status,
    legalStatus,
    "legislative body": legislative_body,
    legislativeBody,
    "letter type": letter_type,
    letterType,
    "library catalog": library_catalog,
    libraryCatalog,
    "manuscript type": manuscript_type,
    manuscriptType,
    "map type": map_type,
    mapType,
    medium,
    "meeting name": meeting_name,
    "meeting number": meeting_number,
    meetingName,
    meetingNumber,
    "name of act": name_of_act,
    nameOfAct,
    network,
    "news case date": news_case_date,
    newsCaseDate,
    "num pages": num_pages,
    numPages,
    number,
    "number of pages": number_of_pages,
    "number of volumes": number_of_volumes,
    "number-of-pages": number_of_pages2,
    "number-of-volumes": number_of_volumes2,
    numberOfVolumes,
    "opening date": opening_date,
    "opening-date": opening_date2,
    openingDate,
    opus,
    "original author": original_author,
    "original date": original_date,
    "original publisher": original_publisher,
    "original publisher place": original_publisher_place,
    "original title": original_title,
    "original-author": original_author2,
    "original-date": original_date2,
    "original-publisher": original_publisher2,
    "original-publisher-place": original_publisher_place2,
    "original-title": original_title2,
    originalDate,
    page,
    pages,
    "parent treaty": parent_treaty,
    parentTreaty,
    "patent number": patent_number,
    patentNumber,
    performer,
    place,
    pmcid,
    pmid,
    podcaster,
    "post type": post_type,
    postType,
    "presentation type": presentation_type,
    presentationType,
    presenter,
    "priority date": priority_date,
    "priority numbers": priority_numbers,
    priorityDate,
    priorityNumbers,
    "proceedings title": proceedings_title,
    proceedingsTitle,
    producer,
    "program title": program_title,
    programTitle,
    programmer,
    "programming language": programming_language,
    programmingLanguage,
    "public law number": public_law_number,
    publicLawNumber,
    "publication date": publication_date,
    "publication number": publication_number,
    "publication title": publication_title,
    "publication-date": publication_date2,
    "publication-number": publication_number2,
    publicationDate,
    publicationNumber,
    publicationTitle,
    publisher,
    "publisher place": publisher_place,
    "publisher-place": publisher_place2,
    recipient,
    references,
    "regnal year": regnal_year,
    regnalYear,
    "regulation type": regulation_type,
    regulationType,
    "regulatory body": regulatory_body,
    regulatoryBody,
    reign,
    release,
    "report number": report_number,
    "report type": report_type,
    reportNumber,
    reportType,
    reporter,
    "reporter volume": reporter_volume,
    reporterVolume,
    repository,
    "resolution label": resolution_label,
    resolutionLabel,
    "reviewed author": reviewed_author,
    "reviewed title": reviewed_title,
    "reviewed-author": reviewed_author2,
    "reviewed-title": reviewed_title2,
    reviewedAuthor,
    rights,
    "running time": running_time,
    runningTime,
    scale,
    scriptwriter,
    section,
    series,
    "series editor": series_editor,
    "series number": series_number,
    "series text": series_text,
    "series title": series_title,
    seriesEditor,
    seriesNumber,
    seriesText,
    seriesTitle,
    session,
    "session type": session_type,
    sessionType,
    "short title": short_title,
    shortTitle,
    "signing date": signing_date,
    signingDate,
    source,
    sponsor,
    status,
    studio,
    subject,
    submitted,
    supplement,
    "supplement name": supplement_name,
    supplementName,
    system,
    "testimony by": testimony_by,
    testimonyBy,
    "thesis type": thesis_type,
    thesisType,
    title,
    "title short": title_short,
    "title-short": title_short2,
    translator,
    "treaty number": treaty_number,
    treatyNumber,
    type,
    university,
    url,
    version,
    "version number": version_number,
    versionNumber,
    "video recording format": video_recording_format,
    videoRecordingFormat,
    volume,
    "volume title": volume_title,
    "volume-title": volume_title2,
    volumeTitle,
    "website title": website_title,
    "website type": website_type,
    websiteTitle,
    websiteType,
    "words by": words_by,
    wordsBy,
    "year as volume": year_as_volume,
    yearAsVolume
  };

  // content/extra.ts
  var CSL = __toESM(require_citeproc_commonjs());
  var re = {
    old: /^{:((?:bib(?:la)?)?tex\.)?([^:]+)(:)\s*([^}]+)}$/,
    new: /^((?:bib(?:la)?)?tex\.)?([^:=]+)\s*([:=])\s*([\S\s]*)/
  };
  var otherFields = ["lccn", "mr", "zbl", "arxiv", "jstor", "hdl", "googlebooksid"];
  function get(extra, mode, options) {
    if (!options)
      options = { citationKey: true, aliases: true, kv: true, tex: true };
    const other = { zotero: "csl", csl: "zotero" }[mode];
    extra = extra || "";
    const extraFields = {
      kv: {},
      creator: {},
      tex: {},
      citationKey: "",
      aliases: []
    };
    let ef;
    extra = extra.split("\n").filter((line) => {
      const m = line.match(re.old) || line.match(re.new);
      if (!m)
        return true;
      let [, tex, key, assign, value] = m;
      const raw = assign === "=";
      if (!tex && raw)
        return true;
      if (tex) {
        key = key.trim().toLowerCase();
      } else {
        key = key.trim().replace(/[-_]/g, " ").replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase();
      }
      value = value.trim();
      if (options.citationKey && !tex && ["citation key", "bibtex"].includes(key)) {
        extraFields.citationKey = value;
        return false;
      }
      if (options.aliases && !tex && key === "citation key alias") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options.aliases && tex && options.aliases && key === "ids") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options.kv && (ef = extra_fields_exports[key]) && !tex) {
        for (const field of ef[mode] || ef[other]) {
          switch (ef.type) {
            case "name":
              extraFields.creator[field] = extraFields.creator[field] || [];
              extraFields.creator[field].push(value);
              break;
            case "text":
            case "date":
              extraFields.kv[field] = value;
              break;
            default:
              throw new Error(`Unexpected extra field type ${ef.type}`);
          }
        }
        return false;
      }
      if (options.tex && tex && !key.includes(" ")) {
        extraFields.tex[tex + key] = { value, raw };
        return false;
      }
      if (options.tex && !tex && otherFields.includes(key.replace(/[- ]/g, ""))) {
        extraFields.tex[`tex.${key.replace(/[- ]/g, "")}`] = { value };
        return false;
      }
      return true;
    }).join("\n").trim();
    extraFields.aliases = Array.from(new Set(extraFields.aliases)).filter((key) => key !== extraFields.citationKey);
    return { extra, extraFields };
  }

  // translators/Collected notes.ts
  function clean(item) {
    switch (item.itemType) {
      case "note":
      case "annotation":
      case "attachment":
        return item;
    }
    const cleaned = { ...item, extra: get(item.extra, "zotero").extra };
    cleaned.extra = cleaned.extra.split("\n").filter((line) => !line.match(/^OCLC:/i)).join("\n");
    return cleaned;
  }
  function sorted(collections) {
    return collections.sort((a, b) => a.name.localeCompare(b.name, void 0, { sensitivity: "base" }));
  }
  var Exporter = class {
    constructor() {
      this.levels = 0;
      this.body = "";
      this.html = "";
      this.markdown = "";
      const items = {};
      const filed = /* @__PURE__ */ new Set();
      const collections = {};
      for (const item of Translator.items) {
        const cleaned = clean(item);
        if (this.keep(cleaned))
          items[item.itemID] = cleaned;
      }
      log.debug(Object.values(Translator.collections).map((coll) => ({
        ...coll,
        collections: fromEntries((coll.collections || []).map((key) => [key, !!Translator.collections[key]])),
        items: fromEntries((coll.items || []).map((itemID) => [itemID, !!items[itemID]]))
      })));
      for (const [key, collection] of Object.entries(Translator.collections)) {
        for (const itemID of collection.items)
          filed.add(itemID);
        collections[key] = {
          name: collection.name,
          items: (collection.items || []).map((itemID) => items[itemID]).filter((item) => item),
          collections: [],
          root: !Translator.collections[collection.parent]
        };
      }
      for (const [key, collection] of Object.entries(Translator.collections)) {
        collections[key].collections = (collection.collections || []).map((coll) => collections[coll]).filter((coll) => coll);
      }
      const unfiled = { name: "Unfiled", items: Object.values(items).filter((item) => !filed.has(item.itemID)), collections: [], root: true };
      if (!this.prune(unfiled))
        this.write_collection(unfiled);
      for (const collection of sorted(Object.values(collections))) {
        if (collection.root && !this.prune(collection))
          this.write_collection(collection);
      }
      let style = "\n  body {\n    counter-reset: h1;\n  }\n\n";
      for (let level = 1; level <= this.levels; level++) {
        if (level !== this.levels)
          style += `  h${level} {
    counter-reset: h${level + 1};
  }
`;
        style += `  h${level}:before {
`;
        const label2 = Array.from({ length: level }, (_x, i) => `counter(h${i + 1}, decimal)`).join(' "." ');
        style += `    content: ${label2} ".\\0000a0\\0000a0";
`;
        style += `    counter-increment: h${level};
`;
        style += "  }\n\n";
      }
      style += "  blockquote { border-left: 1px solid gray; }\n";
      this.html = `<html><head><style>${style}</style></head><body>${this.body}</body></html>`;
      log.debug("Translator options:", Translator.options);
      if (Translator.options.markdown)
        this.markdown = (0, import_html2markdown.default)(this.html);
    }
    show(context, args) {
      log.debug(`collectednotes.${context}: ${JSON.stringify(Array.from(args))}`);
    }
    write_collection(collection, level = 1) {
      log.debug(`collection ${collection.name} @ ${level} with ${collection.collections.length} subcollections`);
      this.levels = Math.max(this.levels, level);
      this.body += `<h${level}>${html(collection.name)}</h${level}>
`;
      for (const item of collection.items) {
        this.write_item(item);
      }
      for (const coll of sorted(collection.collections)) {
        this.write_collection(coll, level + 1);
      }
    }
    write_item(item) {
      switch (item.itemType) {
        case "note":
          this.note(item.note, "note");
          break;
        case "attachment":
          this.item(item);
          break;
        default:
          this.item(item);
          break;
      }
    }
    prune(collection) {
      if (!collection)
        return true;
      collection.collections = collection.collections.filter((sub) => !this.prune(sub));
      log.debug(`prune: ${collection.name}: ${collection.items.length} items, ${collection.collections.length} collections: ${!collection.items.length && !collection.collections.length}`);
      return !collection.items.length && !collection.collections.length;
    }
    note(note, type2) {
      switch (type2) {
        case "extra":
          if (!note)
            return;
          this.body += `<blockquote><pre>${html(note)}</pre></blockquote>
`;
          break;
        case "attachment":
          if (!note.note)
            return;
          this.body += `<blockquote><div><samp>${note.title}</samp></div>${note.note}</blockquote>
`;
          break;
        default:
          if (!note.note)
            return;
          this.body += `<blockquote>${note.note}</blockquote>
`;
          break;
      }
    }
    creator(cr) {
      return [cr.lastName, cr.name, cr.firstName].find((v) => v) || "";
    }
    creators(cr) {
      switch (cr.length) {
        case 0:
        case 1:
          return cr[0];
        case 2:
          return cr.join(" and ");
        default:
          return `${cr.slice(0, cr.length - 1).join(", ")}, and ${cr[cr.length - 1]}`;
      }
    }
    item(item) {
      let notes = [];
      let title2 = "";
      if (item.itemType === "attachment") {
        if (item.note)
          notes = [{ note: item.note }];
        if (item.title)
          title2 = `<samp>${html(item.title)}</samp>`;
      } else {
        notes = (item.notes || []).filter((note) => note.note);
        const creators = this.creators(item.creators.map((creator) => this.creator(creator)).filter((v) => v));
        let date2 = null;
        if (item.date) {
          date2 = Zotero.BetterBibTeX.parseDate(item.date);
          if (date2.from)
            date2 = date2.from;
          date2 = typeof date2.year === "number" ? date2.year : item.date;
        }
        const author2 = [creators, date2].filter((v) => v).join(", ");
        if (item.title)
          title2 += `<i>${html(item.title)}</i>`;
        if (author2)
          title2 += ` (${html(author2)})`;
        title2 = title2.trim();
      }
      this.body += `<div>${title2}</div>
`;
      this.note(item.extra, "extra");
      for (const note of notes) {
        this.note(note, "note");
      }
      for (const att of item.attachments || []) {
        this.note(att, "attachment");
      }
    }
    keep(item) {
      var _a, _b, _c;
      if (!item)
        return false;
      switch (item.itemType) {
        case "note":
        case "annotation":
          return item.note;
        case "attachment":
          return (_a = item.notes) == null ? void 0 : _a.find((note) => note.note);
        default:
          return item.extra || ((_b = item.notes) == null ? void 0 : _b.find((note) => note.note)) || ((_c = item.attachments) == null ? void 0 : _c.find((att) => att.note));
      }
    }
  };
  function doExport() {
    Translator.init("export");
    if (Translator.options.markdown) {
      Zotero.write(new Exporter().markdown);
    } else {
      Zotero.write(new Exporter().html);
    }
  }
  return __toCommonJS(Collected_notes_exports);
})();
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
var { Translator, doExport } = Collectednotes__Translator__doExport;
